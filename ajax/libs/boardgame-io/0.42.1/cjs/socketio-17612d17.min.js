"use strict";function _interopDefault(t){return t&&"object"==typeof t&&"default"in t?t.default:t}var turnOrder=require("./turn-order-56716693.js"),base=require("./base-4e44970d.js"),master=require("./master-06bcbe8e.js"),ioNamespace=require("socket.io-client"),ioNamespace__default=_interopDefault(ioNamespace);class InMemory extends base.Sync{constructor(){super(),this.state=new Map,this.initial=new Map,this.metadata=new Map,this.log=new Map}createMatch(t,e){this.initial.set(t,e.initialState),this.setState(t,e.initialState),this.setMetadata(t,e.metadata)}setMetadata(t,e){this.metadata.set(t,e)}setState(t,e,s){if(s&&s.length>0){const e=this.log.get(t)||[];this.log.set(t,e.concat(s))}this.state.set(t,e)}fetch(t,e){let s={};return e.state&&(s.state=this.state.get(t)),e.metadata&&(s.metadata=this.metadata.get(t)),e.log&&(s.log=this.log.get(t)||[]),e.initialState&&(s.initialState=this.initial.get(t)),s}wipe(t){this.state.delete(t),this.metadata.delete(t)}listMatches(t){return[...this.metadata.entries()].filter(([e,s])=>{if(!t)return!0;if(void 0!==t.gameName&&s.gameName!==t.gameName)return!1;if(void 0!==t.where){if(void 0!==t.where.isGameover){if(void 0!==s.gameover!==t.where.isGameover)return!1}if(void 0!==t.where.updatedBefore&&s.updatedAt>=t.where.updatedBefore)return!1;if(void 0!==t.where.updatedAfter&&s.updatedAt<=t.where.updatedAfter)return!1}return!0}).map(([t])=>t)}}class WithLocalStorageMap extends Map{constructor(t){super(),this.key=t,(JSON.parse(localStorage.getItem(this.key))||[]).forEach(t=>this.set(...t))}sync(){const t=[...this.entries()];localStorage.setItem(this.key,JSON.stringify(t))}set(t,e){return super.set(t,e),this.sync(),this}delete(t){const e=super.delete(t);return this.sync(),e}}class LocalStorage extends InMemory{constructor(t="bgio"){super();const e=e=>new WithLocalStorageMap(`${t}_${e}`);this.state=e("state"),this.initial=e("initial"),this.metadata=e("metadata"),this.log=e("log")}}class Transport{constructor({store:t,gameName:e,playerID:s,matchID:a,numPlayers:r}){this.store=t,this.gameName=e||"default",this.playerID=s||null,this.matchID=a||"default",this.numPlayers=r||2}}function GetBotPlayer(t,e){if(void 0!==t.ctx.gameover)return null;if(t.ctx.activePlayers){for(const s of Object.keys(e))if(s in t.ctx.activePlayers)return s}else if(t.ctx.currentPlayer in e)return t.ctx.currentPlayer;return null}class LocalMaster extends master.Master{constructor({game:t,bots:e,storageKey:s,persist:a}){const r={},i={};if(t&&t.ai&&e)for(const s in e){const a=e[s];i[s]=new a({game:t,enumerate:t.ai.enumerate,seed:t.seed})}const c=({playerID:t,type:e,args:s})=>{const a=r[t];void 0!==a&&a.apply(null,[e,...s])},o={send:c,sendAll:t=>{for(const e in r){const s=t(e);c({playerID:e,...s})}}};super(t,a?new LocalStorage(s):new InMemory,o,!1),this.connect=((t,e,s)=>{r[e]=s}),this.subscribe(({state:t,matchID:s})=>{if(!e)return;const a=GetBotPlayer(t,i);null!==a&&setTimeout(async()=>{const e=await i[a].play(t,a);await this.onUpdate(e.action,t._stateID,s,e.action.payload.playerID)},100)})}}class LocalTransport extends Transport{constructor({master:t,store:e,matchID:s,playerID:a,gameName:r,numPlayers:i}){super({store:e,gameName:r,playerID:a,matchID:s,numPlayers:i}),this.master=t,this.isConnected=!0}async onUpdate(t,e,s){const a=this.store.getState();if(t==this.matchID&&e._stateID>=a._stateID){const t=turnOrder.update(e,s);this.store.dispatch(t)}}onSync(t,e){if(t==this.matchID){const t=turnOrder.sync(e);this.store.dispatch(t)}}onAction(t,e){this.master.onUpdate(e,t._stateID,this.matchID,this.playerID)}connect(){this.master.connect(this.matchID,this.playerID,(t,...e)=>{"sync"==t&&this.onSync.apply(this,e),"update"==t&&this.onUpdate.apply(this,e)}),this.master.onSync(this.matchID,this.playerID,this.numPlayers)}disconnect(){}subscribe(){}subscribeMatchData(){}updateMatchID(t){this.matchID=t;const e=turnOrder.reset(null);this.store.dispatch(e),this.connect()}updatePlayerID(t){this.playerID=t;const e=turnOrder.reset(null);this.store.dispatch(e),this.connect()}}const localMasters=new Map;function Local({bots:t,persist:e,storageKey:s}={}){return a=>{const{gameKey:r,game:i}=a;let c;const o=localMasters.get(r);return o&&o.bots===t&&o.storageKey===s&&o.persist===e&&(c=o.master),c||(c=new LocalMaster({game:i,bots:t,persist:e,storageKey:s}),localMasters.set(r,{master:c,bots:t,persist:e,storageKey:s})),new LocalTransport({master:c,...a})}}const io=ioNamespace__default;class SocketIOTransport extends Transport{constructor({socket:t,socketOpts:e,store:s,matchID:a,playerID:r,gameName:i,numPlayers:c,server:o}={}){super({store:s,gameName:i,playerID:r,matchID:a,numPlayers:c}),this.server=o,this.socket=t,this.socketOpts=e,this.isConnected=!1,this.callback=(()=>{}),this.matchDataCallback=(()=>{})}onAction(t,e){this.socket.emit("update",e,t._stateID,this.matchID,this.playerID)}connect(){if(!this.socket)if(this.server){let t=this.server;-1==t.search(/^https?:\/\//)&&(t="http://"+this.server),"/"!=t.substr(-1)&&(t+="/"),this.socket=io(t+this.gameName,this.socketOpts)}else this.socket=io("/"+this.gameName,this.socketOpts);this.socket.on("update",(t,e,s)=>{const a=this.store.getState();if(t==this.matchID&&e._stateID>=a._stateID){const t=turnOrder.update(e,s);this.store.dispatch(t)}}),this.socket.on("sync",(t,e)=>{if(t==this.matchID){const t=turnOrder.sync(e);this.matchDataCallback(e.filteredMetadata),this.store.dispatch(t)}}),this.socket.on("matchData",(t,e)=>{t==this.matchID&&this.matchDataCallback(e)}),this.socket.on("connect",()=>{this.socket.emit("sync",this.matchID,this.playerID,this.numPlayers),this.isConnected=!0,this.callback()}),this.socket.on("disconnect",()=>{this.isConnected=!1,this.callback()})}disconnect(){this.socket.close(),this.socket=null,this.isConnected=!1,this.callback()}subscribe(t){this.callback=t}subscribeMatchData(t){this.matchDataCallback=t}updateMatchID(t){this.matchID=t;const e=turnOrder.reset(null);this.store.dispatch(e),this.socket&&this.socket.emit("sync",this.matchID,this.playerID,this.numPlayers)}updatePlayerID(t){this.playerID=t;const e=turnOrder.reset(null);this.store.dispatch(e),this.socket&&this.socket.emit("sync",this.matchID,this.playerID,this.numPlayers)}}function SocketIO({server:t,socketOpts:e}={}){return s=>new SocketIOTransport({server:t,socketOpts:e,...s})}exports.Local=Local,exports.SocketIO=SocketIO;
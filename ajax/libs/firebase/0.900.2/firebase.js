!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(((e="undefined"!=typeof globalThis?globalThis:e||self).firebase=e.firebase||{},e.firebase.app={}))}(this,function(e){"use strict";var n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};var c=function(){return(c=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};function t(e,a,s,l){return new(s=s||Promise)(function(n,t){function r(e){try{o(l.next(e))}catch(e){t(e)}}function i(e){try{o(l.throw(e))}catch(e){t(e)}}function o(e){var t;e.done?n(e.value):((t=e.value)instanceof s?t:new s(function(e){e(t)})).then(r,i)}o((l=l.apply(e,a||[])).next())})}function r(n,r){var i,o,a,s={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]},e={next:t(0),throw:t(1),return:t(2)};return"function"==typeof Symbol&&(e[Symbol.iterator]=function(){return this}),e;function t(t){return function(e){return function(t){if(i)throw new TypeError("Generator is already executing.");for(;s;)try{if(i=1,o&&(a=2&t[0]?o.return:t[0]?o.throw||((a=o.return)&&a.call(o),0):o.next)&&!(a=a.call(o,t[1])).done)return a;switch(o=0,a&&(t=[2&t[0],a.value]),t[0]){case 0:case 1:a=t;break;case 4:return s.label++,{value:t[1],done:!1};case 5:s.label++,o=t[1],t=[0];continue;case 7:t=s.ops.pop(),s.trys.pop();continue;default:if(!(a=0<(a=s.trys).length&&a[a.length-1])&&(6===t[0]||2===t[0])){s=0;continue}if(3===t[0]&&(!a||t[1]>a[0]&&t[1]<a[3])){s.label=t[1];break}if(6===t[0]&&s.label<a[1]){s.label=a[1],a=t;break}if(a&&s.label<a[2]){s.label=a[2],s.ops.push(t);break}a[2]&&s.ops.pop(),s.trys.pop();continue}t=r.call(n,s)}catch(e){t=[6,e],o=0}finally{i=a=0}if(5&t[0])throw t[1];return{value:t[0]?t[1]:void 0,done:!0}}([t,e])}}}function p(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function u(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||0<t--)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}var i=(o.prototype.wrapCallback=function(n){var r=this;return function(e,t){e?r.reject(e):r.resolve(t),"function"==typeof n&&(r.promise.catch(function(){}),1===n.length?n(e):n(e,t))}},o);function o(){var n=this;this.reject=function(){},this.resolve=function(){},this.promise=new Promise(function(e,t){n.resolve=e,n.reject=t})}var a,s,l,f="FirebaseError",h=(a=Error,n(s=v,l=a),s.prototype=null===l?Object.create(l):(d.prototype=l.prototype,new d),v);function d(){this.constructor=s}function v(e,t,n){t=a.call(this,t)||this;return t.code=e,t.customData=n,t.name=f,Object.setPrototypeOf(t,v.prototype),Error.captureStackTrace&&Error.captureStackTrace(t,m.prototype.create),t}var m=(y.prototype.create=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r,i=t[0]||{},o=this.service+"/"+e,e=this.errors[e],e=e?(r=i,e.replace(g,function(e,t){var n=r[t];return null!=n?String(n):"<"+t+"?>"})):"Error",e=this.serviceName+": "+e+" ("+o+").";return new h(o,e,i)},y);function y(e,t,n){this.service=e,this.serviceName=t,this.errors=n}var g=/\{\$([^}]+)}/g,b=(w.prototype.setInstantiationMode=function(e){return this.instantiationMode=e,this},w.prototype.setMultipleInstances=function(e){return this.multipleInstances=e,this},w.prototype.setServiceProps=function(e){return this.serviceProps=e,this},w);function w(e,t,n){this.name=e,this.instanceFactory=t,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY"}var E="[DEFAULT]",_=(O.prototype.get=function(e){void 0===e&&(e=E);var t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){var n=new i;this.instancesDeferred.set(t,n);try{var r=this.getOrInitializeService(t);r&&n.resolve(r)}catch(e){}}return this.instancesDeferred.get(t).promise},O.prototype.getImmediate=function(e){var t=c({identifier:E,optional:!1},e),e=t.identifier,n=t.optional,r=this.normalizeInstanceIdentifier(e);try{var i=this.getOrInitializeService(r);if(i)return i;if(n)return null;throw Error("Service "+this.name+" is not available")}catch(e){if(n)return null;throw e}},O.prototype.getComponent=function(){return this.component},O.prototype.setComponent=function(e){var t,n;if(e.name!==this.name)throw Error("Mismatching Component "+e.name+" for Provider "+this.name+".");if(this.component)throw Error("Component for "+this.name+" has already been provided");if("EAGER"===(this.component=e).instantiationMode)try{this.getOrInitializeService(E)}catch(e){}try{for(var r=p(this.instancesDeferred.entries()),i=r.next();!i.done;i=r.next()){var o=u(i.value,2),a=o[0],s=o[1],l=this.normalizeInstanceIdentifier(a);try{var c=this.getOrInitializeService(l);s.resolve(c)}catch(e){}}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(t)throw t.error}}},O.prototype.clearInstance=function(e){void 0===e&&(e=E),this.instancesDeferred.delete(e),this.instances.delete(e)},O.prototype.delete=function(){return t(this,void 0,void 0,function(){var t;return r(this,function(e){switch(e.label){case 0:return t=Array.from(this.instances.values()),[4,Promise.all(function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(u(arguments[t]));return e}(t.filter(function(e){return"INTERNAL"in e}).map(function(e){return e.INTERNAL.delete()}),t.filter(function(e){return"_delete"in e}).map(function(e){return e._delete()})))];case 1:return e.sent(),[2]}})})},O.prototype.isComponentSet=function(){return null!=this.component},O.prototype.getOrInitializeService=function(e){var t,n=this.instances.get(e);return!n&&this.component&&(n=this.component.instanceFactory(this.container,(t=e)===E?void 0:t),this.instances.set(e,n)),n||null},O.prototype.normalizeInstanceIdentifier=function(e){return!this.component||this.component.multipleInstances?e:E},O);function O(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map}var I=(L.prototype.addComponent=function(e){var t=this.getProvider(e.name);if(t.isComponentSet())throw new Error("Component "+e.name+" has already been registered with "+this.name);t.setComponent(e)},L.prototype.addOrOverwriteComponent=function(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)},L.prototype.getProvider=function(e){if(this.providers.has(e))return this.providers.get(e);var t=new _(e,this);return this.providers.set(e,t),t},L.prototype.getProviders=function(){return Array.from(this.providers.values())},L);function L(e){this.name=e,this.providers=new Map}function S(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;for(var r=Array(e),i=0,t=0;t<n;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r}var N,R=[];(j=N=N||{})[j.DEBUG=0]="DEBUG",j[j.VERBOSE=1]="VERBOSE",j[j.INFO=2]="INFO",j[j.WARN=3]="WARN",j[j.ERROR=4]="ERROR",j[j.SILENT=5]="SILENT";function A(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];if(!(t<e.logLevel)){var i=(new Date).toISOString(),o=P[t];if(!o)throw new Error("Attempted to log a message with an invalid logType (value: "+t+")");console[o].apply(console,S(["["+i+"]  "+e.name+":"],n))}}var D={debug:N.DEBUG,verbose:N.VERBOSE,info:N.INFO,warn:N.WARN,error:N.ERROR,silent:N.SILENT},C=N.INFO,P=((j={})[N.DEBUG]="log",j[N.VERBOSE]="log",j[N.INFO]="info",j[N.WARN]="warn",j[N.ERROR]="error",j),j=(Object.defineProperty(H.prototype,"logLevel",{get:function(){return this._logLevel},set:function(e){if(!(e in N))throw new TypeError('Invalid value "'+e+'" assigned to `logLevel`');this._logLevel=e},enumerable:!1,configurable:!0}),H.prototype.setLogLevel=function(e){this._logLevel="string"==typeof e?D[e]:e},Object.defineProperty(H.prototype,"logHandler",{get:function(){return this._logHandler},set:function(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e},enumerable:!1,configurable:!0}),Object.defineProperty(H.prototype,"userLogHandler",{get:function(){return this._userLogHandler},set:function(e){this._userLogHandler=e},enumerable:!1,configurable:!0}),H.prototype.debug=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._userLogHandler&&this._userLogHandler.apply(this,S([this,N.DEBUG],e)),this._logHandler.apply(this,S([this,N.DEBUG],e))},H.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._userLogHandler&&this._userLogHandler.apply(this,S([this,N.VERBOSE],e)),this._logHandler.apply(this,S([this,N.VERBOSE],e))},H.prototype.info=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._userLogHandler&&this._userLogHandler.apply(this,S([this,N.INFO],e)),this._logHandler.apply(this,S([this,N.INFO],e))},H.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._userLogHandler&&this._userLogHandler.apply(this,S([this,N.WARN],e)),this._logHandler.apply(this,S([this,N.WARN],e))},H.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._userLogHandler&&this._userLogHandler.apply(this,S([this,N.ERROR],e)),this._logHandler.apply(this,S([this,N.ERROR],e))},H);function H(e){this.name=e,this._logLevel=C,this._logHandler=A,this._userLogHandler=null,R.push(this)}var F=(T.prototype.getPlatformInfoString=function(){return this.container.getProviders().map(function(e){if(function(e){e=e.getComponent();return"VERSION"===(null==e?void 0:e.type)}(e)){e=e.getImmediate();return e.library+"/"+e.version}return null}).filter(function(e){return e}).join(" ")},T);function T(e){this.container=e}var x="@firebase/app",k=new j("@firebase/app"),B="[DEFAULT]",M=((j={})[x]="fire-core",j["@firebase/app-compat"]="fire-core-compat",j["@firebase/analytics"]="fire-analytics",j["@firebase/auth"]="fire-auth",j["@firebase/database"]="fire-rtdb",j["@firebase/functions"]="fire-fn",j["@firebase/functions-compat"]="fire-fn-compat",j["@firebase/installations"]="fire-iid",j["@firebase/messaging"]="fire-fcm",j["@firebase/performance"]="fire-perf",j["@firebase/remote-config"]="fire-rc",j["@firebase/storage"]="fire-gcs",j["@firebase/firestore"]="fire-fst",j["fire-js"]="fire-js",j.firebase="fire-js-all",j),V=new Map,z=new Map;function U(t,n){try{t.container.addComponent(n)}catch(e){k.debug("Component "+n.name+" failed to register with FirebaseApp "+t.name,e)}}function G(e){var t,n,r=e.name;if(z.has(r))return k.debug("There were multiple attempts to register component "+r+"."),!1;z.set(r,e);try{for(var i=p(V.values()),o=i.next();!o.done;o=i.next()){U(o.value,e)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}return!0}function W(e,t){return e.container.getProvider(t)}var j=((j={})["no-app"]="No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",j["bad-app-name"]="Illegal App name: '{$appName}",j["duplicate-app"]="Firebase App named '{$appName}' already exists",j["app-deleted"]="Firebase App named '{$appName}' already deleted",j["invalid-app-argument"]="firebase.{$appName}() takes either no argument or a Firebase App instance.",j["invalid-log-argument"]="First argument to `onLog` must be null or a function.",j),$=new m("app","Firebase",j),Y=(Object.defineProperty(J.prototype,"automaticDataCollectionEnabled",{get:function(){return this.checkDestroyed(),this.automaticDataCollectionEnabled_},set:function(e){this.checkDestroyed(),this.automaticDataCollectionEnabled_=e},enumerable:!1,configurable:!0}),Object.defineProperty(J.prototype,"name",{get:function(){return this.checkDestroyed(),this.name_},enumerable:!1,configurable:!0}),Object.defineProperty(J.prototype,"options",{get:function(){return this.checkDestroyed(),this.options_},enumerable:!1,configurable:!0}),J.prototype.checkDestroyed=function(){if(this.isDeleted)throw $.create("app-deleted",{appName:this.name_})},J);function J(e,t,n){var r=this;this.isDeleted=!1,this.options_=c({},e),this.name_=t.name,this.automaticDataCollectionEnabled_=t.automaticDataCollectionEnabled,this.container=n,this.container.addComponent(new b("app-exp",function(){return r},"PUBLIC"))}var K;function Z(e,t,n){var r=null!==(i=M[e])&&void 0!==i?i:e;n&&(r+="-"+n);var i=r.match(/\s|\//),e=t.match(/\s|\//);if(i||e){n=['Unable to register library "'+r+'" with version "'+t+'":'];return i&&n.push('library name "'+r+'" contains illegal characters (whitespace or "/")'),i&&e&&n.push("and"),e&&n.push('version name "'+t+'" contains illegal characters (whitespace or "/")'),void k.warn(n.join(" "))}G(new b(r+"-version",function(){return{library:r,version:t}},"VERSION"))}G(new b("platform-logger",function(e){return new F(e)},"PRIVATE")),Z(x,"0.0.900-exp.3c2788a40",K),Z("fire-js","");Z("firebase","0.900.2","app"),e.SDK_VERSION="0.900.2",e._DEFAULT_ENTRY_NAME=B,e._addComponent=U,e._addOrOverwriteComponent=function(e,t){e.container.addOrOverwriteComponent(t)},e._apps=V,e._clearComponents=function(){z.clear()},e._components=z,e._getProvider=W,e._registerComponent=G,e._removeServiceInstance=function(e,t,n){void 0===n&&(n=B),W(e,t).clearInstance(n)},e.deleteApp=function(n){return t(this,void 0,void 0,function(){var t;return r(this,function(e){switch(e.label){case 0:return(t=n.name,V.has(t))?(V.delete(t),[4,Promise.all(n.container.getProviders().map(function(e){return e.delete()}))]):[3,2];case 1:e.sent(),n.isDeleted=!0,e.label=2;case 2:return[2]}})})},e.getApp=function(e){void 0===e&&(e=B);var t=V.get(e);if(!t)throw $.create("no-app",{appName:e});return t},e.getApps=function(){return Array.from(V.values())},e.initializeApp=function(e,t){var n,r;void 0===t&&(t={}),"object"!=typeof t&&(t={name:t});var i=c({name:B,automaticDataCollectionEnabled:!1},t);if("string"!=typeof(t=i.name)||!t)throw $.create("bad-app-name",{appName:String(t)});if(V.has(t))throw $.create("duplicate-app",{appName:t});var o=new I(t);try{for(var a=p(z.values()),s=a.next();!s.done;s=a.next()){var l=s.value;o.addComponent(l)}}catch(e){n={error:e}}finally{try{s&&!s.done&&(r=a.return)&&r.call(a)}finally{if(n)throw n.error}}return i=new Y(e,i,o),V.set(t,i),i},e.onLog=function(e,t){if(null!==e&&"function"!=typeof e)throw $.create("invalid-log-argument",{appName:name});!function(a,t){for(var e=0,n=R;e<n.length;e++){!function(e){var o=null;t&&t.level&&(o=D[t.level]),e.userLogHandler=null===a?null:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=n.map(function(e){if(null==e)return null;if("string"==typeof e)return e;if("number"==typeof e||"boolean"==typeof e)return e.toString();if(e instanceof Error)return e.message;try{return JSON.stringify(e)}catch(e){return null}}).filter(function(e){return e}).join(" ");t>=(null!=o?o:e.logLevel)&&a({level:N[t].toLowerCase(),message:i,args:n,type:e.name})}}(n[e])}}(e,t)},e.registerVersion=Z,e.setLogLevel=function(e){var t;t=e,R.forEach(function(e){e.setLogLevel(t)})},Object.defineProperty(e,"__esModule",{value:!0})});


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@firebase/app')) :
    typeof define === 'function' && define.amd ? define(['exports', '@firebase/app'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.firebase = global.firebase || {}, global.firebase.auth = global.firebase.auth || {}), global.firebase.app));
}(this, (function (exports, app) { 'use strict';

    try {
                (function() {

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var stringToByteArray = function (str) {
        // TODO(user): Use native implementations if/when available
        var out = [];
        var p = 0;
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            if (c < 128) {
                out[p++] = c;
            }
            else if (c < 2048) {
                out[p++] = (c >> 6) | 192;
                out[p++] = (c & 63) | 128;
            }
            else if ((c & 0xfc00) === 0xd800 &&
                i + 1 < str.length &&
                (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
                // Surrogate Pair
                c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
                out[p++] = (c >> 18) | 240;
                out[p++] = ((c >> 12) & 63) | 128;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
            else {
                out[p++] = (c >> 12) | 224;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
        }
        return out;
    };
    /**
     * Turns an array of numbers into the string given by the concatenation of the
     * characters to which the numbers correspond.
     * @param bytes Array of numbers representing characters.
     * @return Stringification of the array.
     */
    var byteArrayToString = function (bytes) {
        // TODO(user): Use native implementations if/when available
        var out = [];
        var pos = 0, c = 0;
        while (pos < bytes.length) {
            var c1 = bytes[pos++];
            if (c1 < 128) {
                out[c++] = String.fromCharCode(c1);
            }
            else if (c1 > 191 && c1 < 224) {
                var c2 = bytes[pos++];
                out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
            }
            else if (c1 > 239 && c1 < 365) {
                // Surrogate Pair
                var c2 = bytes[pos++];
                var c3 = bytes[pos++];
                var c4 = bytes[pos++];
                var u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -
                    0x10000;
                out[c++] = String.fromCharCode(0xd800 + (u >> 10));
                out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
            }
            else {
                var c2 = bytes[pos++];
                var c3 = bytes[pos++];
                out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
            }
        }
        return out.join('');
    };
    // We define it as an object literal instead of a class because a class compiled down to es5 can't
    // be treeshaked. https://github.com/rollup/rollup/issues/1691
    // Static lookup maps, lazily populated by init_()
    var base64 = {
        /**
         * Maps bytes to characters.
         */
        byteToCharMap_: null,
        /**
         * Maps characters to bytes.
         */
        charToByteMap_: null,
        /**
         * Maps bytes to websafe characters.
         * @private
         */
        byteToCharMapWebSafe_: null,
        /**
         * Maps websafe characters to bytes.
         * @private
         */
        charToByteMapWebSafe_: null,
        /**
         * Our default alphabet, shared between
         * ENCODED_VALS and ENCODED_VALS_WEBSAFE
         */
        ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',
        /**
         * Our default alphabet. Value 64 (=) is special; it means "nothing."
         */
        get ENCODED_VALS() {
            return this.ENCODED_VALS_BASE + '+/=';
        },
        /**
         * Our websafe alphabet.
         */
        get ENCODED_VALS_WEBSAFE() {
            return this.ENCODED_VALS_BASE + '-_.';
        },
        /**
         * Whether this browser supports the atob and btoa functions. This extension
         * started at Mozilla but is now implemented by many browsers. We use the
         * ASSUME_* variables to avoid pulling in the full useragent detection library
         * but still allowing the standard per-browser compilations.
         *
         */
        HAS_NATIVE_SUPPORT: typeof atob === 'function',
        /**
         * Base64-encode an array of bytes.
         *
         * @param input An array of bytes (numbers with
         *     value in [0, 255]) to encode.
         * @param webSafe Boolean indicating we should use the
         *     alternative alphabet.
         * @return The base64 encoded string.
         */
        encodeByteArray: function (input, webSafe) {
            if (!Array.isArray(input)) {
                throw Error('encodeByteArray takes an array as a parameter');
            }
            this.init_();
            var byteToCharMap = webSafe
                ? this.byteToCharMapWebSafe_
                : this.byteToCharMap_;
            var output = [];
            for (var i = 0; i < input.length; i += 3) {
                var byte1 = input[i];
                var haveByte2 = i + 1 < input.length;
                var byte2 = haveByte2 ? input[i + 1] : 0;
                var haveByte3 = i + 2 < input.length;
                var byte3 = haveByte3 ? input[i + 2] : 0;
                var outByte1 = byte1 >> 2;
                var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
                var outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);
                var outByte4 = byte3 & 0x3f;
                if (!haveByte3) {
                    outByte4 = 64;
                    if (!haveByte2) {
                        outByte3 = 64;
                    }
                }
                output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
            }
            return output.join('');
        },
        /**
         * Base64-encode a string.
         *
         * @param input A string to encode.
         * @param webSafe If true, we should use the
         *     alternative alphabet.
         * @return The base64 encoded string.
         */
        encodeString: function (input, webSafe) {
            // Shortcut for Mozilla browsers that implement
            // a native base64 encoder in the form of "btoa/atob"
            if (this.HAS_NATIVE_SUPPORT && !webSafe) {
                return btoa(input);
            }
            return this.encodeByteArray(stringToByteArray(input), webSafe);
        },
        /**
         * Base64-decode a string.
         *
         * @param input to decode.
         * @param webSafe True if we should use the
         *     alternative alphabet.
         * @return string representing the decoded value.
         */
        decodeString: function (input, webSafe) {
            // Shortcut for Mozilla browsers that implement
            // a native base64 encoder in the form of "btoa/atob"
            if (this.HAS_NATIVE_SUPPORT && !webSafe) {
                return atob(input);
            }
            return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
        },
        /**
         * Base64-decode a string.
         *
         * In base-64 decoding, groups of four characters are converted into three
         * bytes.  If the encoder did not apply padding, the input length may not
         * be a multiple of 4.
         *
         * In this case, the last group will have fewer than 4 characters, and
         * padding will be inferred.  If the group has one or two characters, it decodes
         * to one byte.  If the group has three characters, it decodes to two bytes.
         *
         * @param input Input to decode.
         * @param webSafe True if we should use the web-safe alphabet.
         * @return bytes representing the decoded value.
         */
        decodeStringToByteArray: function (input, webSafe) {
            this.init_();
            var charToByteMap = webSafe
                ? this.charToByteMapWebSafe_
                : this.charToByteMap_;
            var output = [];
            for (var i = 0; i < input.length;) {
                var byte1 = charToByteMap[input.charAt(i++)];
                var haveByte2 = i < input.length;
                var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
                ++i;
                var haveByte3 = i < input.length;
                var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
                ++i;
                var haveByte4 = i < input.length;
                var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
                ++i;
                if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
                    throw Error();
                }
                var outByte1 = (byte1 << 2) | (byte2 >> 4);
                output.push(outByte1);
                if (byte3 !== 64) {
                    var outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);
                    output.push(outByte2);
                    if (byte4 !== 64) {
                        var outByte3 = ((byte3 << 6) & 0xc0) | byte4;
                        output.push(outByte3);
                    }
                }
            }
            return output;
        },
        /**
         * Lazy static initialization function. Called before
         * accessing any of the static map variables.
         * @private
         */
        init_: function () {
            if (!this.byteToCharMap_) {
                this.byteToCharMap_ = {};
                this.charToByteMap_ = {};
                this.byteToCharMapWebSafe_ = {};
                this.charToByteMapWebSafe_ = {};
                // We want quick mappings back and forth, so we precompute two maps.
                for (var i = 0; i < this.ENCODED_VALS.length; i++) {
                    this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                    this.charToByteMap_[this.byteToCharMap_[i]] = i;
                    this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                    this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                    // Be forgiving when decoding and correctly decode both encodings.
                    if (i >= this.ENCODED_VALS_BASE.length) {
                        this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                        this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                    }
                }
            }
        }
    };
    /**
     * URL-safe base64 decoding
     *
     * NOTE: DO NOT use the global atob() function - it does NOT support the
     * base64Url variant encoding.
     *
     * @param str To be decoded
     * @return Decoded result, if possible
     */
    var base64Decode = function (str) {
        try {
            return base64.decodeString(str, true);
        }
        catch (e) {
            console.error('base64Decode failed: ', e);
        }
        return null;
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns navigator.userAgent string or '' if it's not defined.
     * @return user agent string
     */
    function getUA() {
        if (typeof navigator !== 'undefined' &&
            typeof navigator['userAgent'] === 'string') {
            return navigator['userAgent'];
        }
        else {
            return '';
        }
    }
    /**
     * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
     *
     * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
     * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
     * wait for a callback.
     */
    function isMobileCordova() {
        return (typeof window !== 'undefined' &&
            // @ts-ignore Setting up an broadly applicable index signature for Window
            // just to deal with this case would probably be a bad idea.
            !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
            /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));
    }
    function isBrowserExtension() {
        var runtime = typeof chrome === 'object'
            ? chrome.runtime
            : typeof browser === 'object'
                ? browser.runtime
                : undefined;
        return typeof runtime === 'object' && runtime.id !== undefined;
    }
    /**
     * Detect React Native.
     *
     * @return true if ReactNative environment is detected.
     */
    function isReactNative() {
        return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
    }
    /** Detects Internet Explorer. */
    function isIE() {
        var ua = getUA();
        return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ERROR_NAME = 'FirebaseError';
    // Based on code from:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
    var FirebaseError = /** @class */ (function (_super) {
        __extends(FirebaseError, _super);
        function FirebaseError(code, message, customData) {
            var _this = _super.call(this, message) || this;
            _this.code = code;
            _this.customData = customData;
            _this.name = ERROR_NAME;
            // Fix For ES5
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(_this, FirebaseError.prototype);
            // Maintains proper stack trace for where our error was thrown.
            // Only available on V8.
            if (Error.captureStackTrace) {
                Error.captureStackTrace(_this, ErrorFactory.prototype.create);
            }
            return _this;
        }
        return FirebaseError;
    }(Error));
    var ErrorFactory = /** @class */ (function () {
        function ErrorFactory(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
        }
        ErrorFactory.prototype.create = function (code) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            var customData = data[0] || {};
            var fullCode = this.service + "/" + code;
            var template = this.errors[code];
            var message = template ? replaceTemplate(template, customData) : 'Error';
            // Service Name: Error message (service/code).
            var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
            var error = new FirebaseError(fullCode, fullMessage, customData);
            return error;
        };
        return ErrorFactory;
    }());
    function replaceTemplate(template, data) {
        return template.replace(PATTERN, function (_, key) {
            var value = data[key];
            return value != null ? String(value) : "<" + key + "?>";
        });
    }
    var PATTERN = /\{\$([^}]+)}/g;
    function isEmpty(obj) {
        for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
                return false;
            }
        }
        return true;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
     * params object (e.g. {arg: 'val', arg2: 'val2'})
     * Note: You must prepend it with ? when adding it to a URL.
     */
    function querystring(querystringParams) {
        var params = [];
        var _loop_1 = function (key, value) {
            if (Array.isArray(value)) {
                value.forEach(function (arrayVal) {
                    params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
                });
            }
            else {
                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
            }
        };
        for (var _i = 0, _a = Object.entries(querystringParams); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            _loop_1(key, value);
        }
        return params.length ? '&' + params.join('&') : '';
    }

    /**
     * Helper to make a Subscribe function (just like Promise helps make a
     * Thenable).
     *
     * @param executor Function which can make calls to a single Observer
     *     as a proxy.
     * @param onNoObservers Callback when count of Observers goes to zero.
     */
    function createSubscribe(executor, onNoObservers) {
        var proxy = new ObserverProxy(executor, onNoObservers);
        return proxy.subscribe.bind(proxy);
    }
    /**
     * Implement fan-out for any number of Observers attached via a subscribe
     * function.
     */
    var ObserverProxy = /** @class */ (function () {
        /**
         * @param executor Function which can make calls to a single Observer
         *     as a proxy.
         * @param onNoObservers Callback when count of Observers goes to zero.
         */
        function ObserverProxy(executor, onNoObservers) {
            var _this = this;
            this.observers = [];
            this.unsubscribes = [];
            this.observerCount = 0;
            // Micro-task scheduling by calling task.then().
            this.task = Promise.resolve();
            this.finalized = false;
            this.onNoObservers = onNoObservers;
            // Call the executor asynchronously so subscribers that are called
            // synchronously after the creation of the subscribe function
            // can still receive the very first value generated in the executor.
            this.task
                .then(function () {
                executor(_this);
            })
                .catch(function (e) {
                _this.error(e);
            });
        }
        ObserverProxy.prototype.next = function (value) {
            this.forEachObserver(function (observer) {
                observer.next(value);
            });
        };
        ObserverProxy.prototype.error = function (error) {
            this.forEachObserver(function (observer) {
                observer.error(error);
            });
            this.close(error);
        };
        ObserverProxy.prototype.complete = function () {
            this.forEachObserver(function (observer) {
                observer.complete();
            });
            this.close();
        };
        /**
         * Subscribe function that can be used to add an Observer to the fan-out list.
         *
         * - We require that no event is sent to a subscriber sychronously to their
         *   call to subscribe().
         */
        ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {
            var _this = this;
            var observer;
            if (nextOrObserver === undefined &&
                error === undefined &&
                complete === undefined) {
                throw new Error('Missing Observer.');
            }
            // Assemble an Observer object when passed as callback functions.
            if (implementsAnyMethods(nextOrObserver, [
                'next',
                'error',
                'complete'
            ])) {
                observer = nextOrObserver;
            }
            else {
                observer = {
                    next: nextOrObserver,
                    error: error,
                    complete: complete
                };
            }
            if (observer.next === undefined) {
                observer.next = noop;
            }
            if (observer.error === undefined) {
                observer.error = noop;
            }
            if (observer.complete === undefined) {
                observer.complete = noop;
            }
            var unsub = this.unsubscribeOne.bind(this, this.observers.length);
            // Attempt to subscribe to a terminated Observable - we
            // just respond to the Observer with the final error or complete
            // event.
            if (this.finalized) {
                // eslint-disable-next-line @typescript-eslint/no-floating-promises
                this.task.then(function () {
                    try {
                        if (_this.finalError) {
                            observer.error(_this.finalError);
                        }
                        else {
                            observer.complete();
                        }
                    }
                    catch (e) {
                        // nothing
                    }
                    return;
                });
            }
            this.observers.push(observer);
            return unsub;
        };
        // Unsubscribe is synchronous - we guarantee that no events are sent to
        // any unsubscribed Observer.
        ObserverProxy.prototype.unsubscribeOne = function (i) {
            if (this.observers === undefined || this.observers[i] === undefined) {
                return;
            }
            delete this.observers[i];
            this.observerCount -= 1;
            if (this.observerCount === 0 && this.onNoObservers !== undefined) {
                this.onNoObservers(this);
            }
        };
        ObserverProxy.prototype.forEachObserver = function (fn) {
            if (this.finalized) {
                // Already closed by previous event....just eat the additional values.
                return;
            }
            // Since sendOne calls asynchronously - there is no chance that
            // this.observers will become undefined.
            for (var i = 0; i < this.observers.length; i++) {
                this.sendOne(i, fn);
            }
        };
        // Call the Observer via one of it's callback function. We are careful to
        // confirm that the observe has not been unsubscribed since this asynchronous
        // function had been queued.
        ObserverProxy.prototype.sendOne = function (i, fn) {
            var _this = this;
            // Execute the callback asynchronously
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.task.then(function () {
                if (_this.observers !== undefined && _this.observers[i] !== undefined) {
                    try {
                        fn(_this.observers[i]);
                    }
                    catch (e) {
                        // Ignore exceptions raised in Observers or missing methods of an
                        // Observer.
                        // Log error to console. b/31404806
                        if (typeof console !== 'undefined' && console.error) {
                            console.error(e);
                        }
                    }
                }
            });
        };
        ObserverProxy.prototype.close = function (err) {
            var _this = this;
            if (this.finalized) {
                return;
            }
            this.finalized = true;
            if (err !== undefined) {
                this.finalError = err;
            }
            // Proxy is no longer needed - garbage collect references
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.task.then(function () {
                _this.observers = undefined;
                _this.onNoObservers = undefined;
            });
        };
        return ObserverProxy;
    }());
    /**
     * Return true if the object passed in implements any of the named methods.
     */
    function implementsAnyMethods(obj, methods) {
        if (typeof obj !== 'object' || obj === null) {
            return false;
        }
        for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
            var method = methods_1[_i];
            if (method in obj && typeof obj[method] === 'function') {
                return true;
            }
        }
        return false;
    }
    function noop() {
        // do nothing
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __spreadArrays$1() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a;
    /**
     * The JS SDK supports 5 log levels and also allows a user the ability to
     * silence the logs altogether.
     *
     * The order is a follows:
     * DEBUG < VERBOSE < INFO < WARN < ERROR
     *
     * All of the log types above the current log level will be captured (i.e. if
     * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
     * `VERBOSE` logs will not)
     */
    var LogLevel;
    (function (LogLevel) {
        LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
        LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
        LogLevel[LogLevel["INFO"] = 2] = "INFO";
        LogLevel[LogLevel["WARN"] = 3] = "WARN";
        LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
        LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(LogLevel || (LogLevel = {}));
    var levelStringToEnum = {
        'debug': LogLevel.DEBUG,
        'verbose': LogLevel.VERBOSE,
        'info': LogLevel.INFO,
        'warn': LogLevel.WARN,
        'error': LogLevel.ERROR,
        'silent': LogLevel.SILENT
    };
    /**
     * The default log level
     */
    var defaultLogLevel = LogLevel.INFO;
    /**
     * By default, `console.debug` is not displayed in the developer console (in
     * chrome). To avoid forcing users to have to opt-in to these logs twice
     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
     * logs to the `console.log` function.
     */
    var ConsoleMethod = (_a = {},
        _a[LogLevel.DEBUG] = 'log',
        _a[LogLevel.VERBOSE] = 'log',
        _a[LogLevel.INFO] = 'info',
        _a[LogLevel.WARN] = 'warn',
        _a[LogLevel.ERROR] = 'error',
        _a);
    /**
     * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
     * messages on to their corresponding console counterparts (if the log method
     * is supported by the current log level)
     */
    var defaultLogHandler = function (instance, logType) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (logType < instance.logLevel) {
            return;
        }
        var now = new Date().toISOString();
        var method = ConsoleMethod[logType];
        if (method) {
            console[method].apply(console, __spreadArrays$1(["[" + now + "]  " + instance.name + ":"], args));
        }
        else {
            throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
        }
    };
    var Logger = /** @class */ (function () {
        /**
         * Gives you an instance of a Logger to capture messages according to
         * Firebase's logging scheme.
         *
         * @param name The name that the logs will be associated with
         */
        function Logger(name) {
            this.name = name;
            /**
             * The log level of the given Logger instance.
             */
            this._logLevel = defaultLogLevel;
            /**
             * The main (internal) log handler for the Logger instance.
             * Can be set to a new function in internal package code but not by user.
             */
            this._logHandler = defaultLogHandler;
            /**
             * The optional, additional, user-defined log handler for the Logger instance.
             */
            this._userLogHandler = null;
        }
        Object.defineProperty(Logger.prototype, "logLevel", {
            get: function () {
                return this._logLevel;
            },
            set: function (val) {
                if (!(val in LogLevel)) {
                    throw new TypeError("Invalid value \"" + val + "\" assigned to `logLevel`");
                }
                this._logLevel = val;
            },
            enumerable: false,
            configurable: true
        });
        // Workaround for setter/getter having to be the same type.
        Logger.prototype.setLogLevel = function (val) {
            this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
        };
        Object.defineProperty(Logger.prototype, "logHandler", {
            get: function () {
                return this._logHandler;
            },
            set: function (val) {
                if (typeof val !== 'function') {
                    throw new TypeError('Value assigned to `logHandler` must be a function');
                }
                this._logHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Logger.prototype, "userLogHandler", {
            get: function () {
                return this._userLogHandler;
            },
            set: function (val) {
                this._userLogHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * The functions below are all based on the `console` interface
         */
        Logger.prototype.debug = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.DEBUG], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.DEBUG], args));
        };
        Logger.prototype.log = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.VERBOSE], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.VERBOSE], args));
        };
        Logger.prototype.info = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.INFO], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.INFO], args));
        };
        Logger.prototype.warn = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.WARN], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.WARN], args));
        };
        Logger.prototype.error = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.ERROR], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.ERROR], args));
        };
        return Logger;
    }());

    /**
     * Component for service name T, e.g. `auth`, `auth-internal`
     */
    var Component = /** @class */ (function () {
        /**
         *
         * @param name The public service name, e.g. app, auth, firestore, database
         * @param instanceFactory Service factory responsible for creating the public interface
         * @param type whether the service provided by the component is public or private
         */
        function Component(name, instanceFactory, type) {
            this.name = name;
            this.instanceFactory = instanceFactory;
            this.type = type;
            this.multipleInstances = false;
            /**
             * Properties to be added to the service namespace
             */
            this.serviceProps = {};
            this.instantiationMode = "LAZY" /* LAZY */;
        }
        Component.prototype.setInstantiationMode = function (mode) {
            this.instantiationMode = mode;
            return this;
        };
        Component.prototype.setMultipleInstances = function (multipleInstances) {
            this.multipleInstances = multipleInstances;
            return this;
        };
        Component.prototype.setServiceProps = function (props) {
            this.serviceProps = props;
            return this;
        };
        return Component;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _debugErrorMap() {
        var _a;
        return _a = {},
            _a["admin-restricted-operation" /* ADMIN_ONLY_OPERATION */] = 'This operation is restricted to administrators only.',
            _a["argument-error" /* ARGUMENT_ERROR */] = '',
            _a["app-not-authorized" /* APP_NOT_AUTHORIZED */] = "This app, identified by the domain where it's hosted, is not " +
                'authorized to use Firebase Authentication with the provided API key. ' +
                'Review your key configuration in the Google API console.',
            _a["app-not-installed" /* APP_NOT_INSTALLED */] = 'The requested mobile application corresponding to the identifier (' +
                'Android package name or iOS bundle ID) provided is not installed on ' +
                'this device.',
            _a["captcha-check-failed" /* CAPTCHA_CHECK_FAILED */] = 'The reCAPTCHA response token provided is either invalid, expired, ' +
                'already used or the domain associated with it does not match the list ' +
                'of whitelisted domains.',
            _a["code-expired" /* CODE_EXPIRED */] = 'The SMS code has expired. Please re-send the verification code to try ' +
                'again.',
            _a["cordova-not-ready" /* CORDOVA_NOT_READY */] = 'Cordova framework is not ready.',
            _a["cors-unsupported" /* CORS_UNSUPPORTED */] = 'This browser is not supported.',
            _a["credential-already-in-use" /* CREDENTIAL_ALREADY_IN_USE */] = 'This credential is already associated with a different user account.',
            _a["custom-token-mismatch" /* CREDENTIAL_MISMATCH */] = 'The custom token corresponds to a different audience.',
            _a["requires-recent-login" /* CREDENTIAL_TOO_OLD_LOGIN_AGAIN */] = 'This operation is sensitive and requires recent authentication. Log in ' +
                'again before retrying this request.',
            _a["dynamic-link-not-activated" /* DYNAMIC_LINK_NOT_ACTIVATED */] = 'Please activate Dynamic Links in the Firebase Console and agree to the terms and ' +
                'conditions.',
            _a["email-change-needs-verification" /* EMAIL_CHANGE_NEEDS_VERIFICATION */] = 'Multi-factor users must always have a verified email.',
            _a["email-already-in-use" /* EMAIL_EXISTS */] = 'The email address is already in use by another account.',
            _a["emulator-config-failed" /* EMULATOR_CONFIG_FAILED */] = 'Auth instance has already been used to make a network call. Auth can ' +
                'no longer be configured to use the emulator. Try calling ' +
                '"useEmulator()" sooner.',
            _a["expired-action-code" /* EXPIRED_OOB_CODE */] = 'The action code has expired.',
            _a["cancelled-popup-request" /* EXPIRED_POPUP_REQUEST */] = 'This operation has been cancelled due to another conflicting popup being opened.',
            _a["internal-error" /* INTERNAL_ERROR */] = 'An internal AuthError has occurred.',
            _a["invalid-app-credential" /* INVALID_APP_CREDENTIAL */] = 'The phone verification request contains an invalid application verifier.' +
                ' The reCAPTCHA token response is either invalid or expired.',
            _a["invalid-app-id" /* INVALID_APP_ID */] = 'The mobile app identifier is not registed for the current project.',
            _a["invalid-user-token" /* INVALID_AUTH */] = "This user's credential isn't valid for this project. This can happen " +
                "if the user's token has been tampered with, or if the user isn't for " +
                'the project associated with this API key.',
            _a["invalid-auth-event" /* INVALID_AUTH_EVENT */] = 'An internal AuthError has occurred.',
            _a["invalid-verification-code" /* INVALID_CODE */] = 'The SMS verification code used to create the phone auth credential is ' +
                'invalid. Please resend the verification code sms and be sure use the ' +
                'verification code provided by the user.',
            _a["invalid-continue-uri" /* INVALID_CONTINUE_URI */] = 'The continue URL provided in the request is invalid.',
            _a["invalid-cordova-configuration" /* INVALID_CORDOVA_CONFIGURATION */] = 'The following Cordova plugins must be installed to enable OAuth sign-in: ' +
                'cordova-plugin-buildinfo, cordova-universal-links-plugin, ' +
                'cordova-plugin-browsertab, cordova-plugin-inappbrowser and ' +
                'cordova-plugin-customurlscheme.',
            _a["invalid-custom-token" /* INVALID_CUSTOM_TOKEN */] = 'The custom token format is incorrect. Please check the documentation.',
            _a["invalid-dynamic-link-domain" /* INVALID_DYNAMIC_LINK_DOMAIN */] = 'The provided dynamic link domain is not configured or authorized for the current project.',
            _a["invalid-email" /* INVALID_EMAIL */] = 'The email address is badly formatted.',
            _a["invalid-emulator-scheme" /* INVALID_EMULATOR_SCHEME */] = 'Emulator URL must start with a valid scheme (http:// or https://).',
            _a["invalid-api-key" /* INVALID_API_KEY */] = 'Your API key is invalid, please check you have copied it correctly.',
            _a["invalid-cert-hash" /* INVALID_CERT_HASH */] = 'The SHA-1 certificate hash provided is invalid.',
            _a["invalid-credential" /* INVALID_IDP_RESPONSE */] = 'The supplied auth credential is malformed or has expired.',
            _a["invalid-message-payload" /* INVALID_MESSAGE_PAYLOAD */] = 'The email template corresponding to this action contains invalid characters in its message. ' +
                'Please fix by going to the Auth email templates section in the Firebase Console.',
            _a["invalid-multi-factor-session" /* INVALID_MFA_SESSION */] = 'The request does not contain a valid proof of first factor successful sign-in.',
            _a["invalid-oauth-provider" /* INVALID_OAUTH_PROVIDER */] = 'EmailAuthProvider is not supported for this operation. This operation ' +
                'only supports OAuth providers.',
            _a["invalid-oauth-client-id" /* INVALID_OAUTH_CLIENT_ID */] = 'The OAuth client ID provided is either invalid or does not match the ' +
                'specified API key.',
            _a["unauthorized-domain" /* INVALID_ORIGIN */] = 'This domain is not authorized for OAuth operations for your Firebase ' +
                'project. Edit the list of authorized domains from the Firebase console.',
            _a["invalid-action-code" /* INVALID_OOB_CODE */] = 'The action code is invalid. This can happen if the code is malformed, ' +
                'expired, or has already been used.',
            _a["wrong-password" /* INVALID_PASSWORD */] = 'The password is invalid or the user does not have a password.',
            _a["invalid-persistence-type" /* INVALID_PERSISTENCE */] = 'The specified persistence type is invalid. It can only be local, session or none.',
            _a["invalid-phone-number" /* INVALID_PHONE_NUMBER */] = 'The format of the phone number provided is incorrect. Please enter the ' +
                'phone number in a format that can be parsed into E.164 format. E.164 ' +
                'phone numbers are written in the format [+][country code][subscriber ' +
                'number including area code].',
            _a["invalid-provider-id" /* INVALID_PROVIDER_ID */] = 'The specified provider ID is invalid.',
            _a["invalid-recipient-email" /* INVALID_RECIPIENT_EMAIL */] = 'The email corresponding to this action failed to send as the provided ' +
                'recipient email address is invalid.',
            _a["invalid-sender" /* INVALID_SENDER */] = 'The email template corresponding to this action contains an invalid sender email or name. ' +
                'Please fix by going to the Auth email templates section in the Firebase Console.',
            _a["invalid-verification-id" /* INVALID_SESSION_INFO */] = 'The verification ID used to create the phone auth credential is invalid.',
            _a["invalid-tenant-id" /* INVALID_TENANT_ID */] = "The Auth instance's tenant ID is invalid.",
            _a["missing-android-pkg-name" /* MISSING_ANDROID_PACKAGE_NAME */] = 'An Android Package Name must be provided if the Android App is required to be installed.',
            _a["auth-domain-config-required" /* MISSING_AUTH_DOMAIN */] = 'Be sure to include authDomain when calling firebase.initializeApp(), ' +
                'by following the instructions in the Firebase console.',
            _a["missing-app-credential" /* MISSING_APP_CREDENTIAL */] = 'The phone verification request is missing an application verifier ' +
                'assertion. A reCAPTCHA response token needs to be provided.',
            _a["missing-verification-code" /* MISSING_CODE */] = 'The phone auth credential was created with an empty SMS verification code.',
            _a["missing-continue-uri" /* MISSING_CONTINUE_URI */] = 'A continue URL must be provided in the request.',
            _a["missing-iframe-start" /* MISSING_IFRAME_START */] = 'An internal AuthError has occurred.',
            _a["missing-ios-bundle-id" /* MISSING_IOS_BUNDLE_ID */] = 'An iOS Bundle ID must be provided if an App Store ID is provided.',
            _a["missing-or-invalid-nonce" /* MISSING_OR_INVALID_NONCE */] = 'The request does not contain a valid nonce. This can occur if the ' +
                'SHA-256 hash of the provided raw nonce does not match the hashed nonce ' +
                'in the ID token payload.',
            _a["missing-multi-factor-info" /* MISSING_MFA_INFO */] = 'No second factor identifier is provided.',
            _a["missing-multi-factor-session" /* MISSING_MFA_SESSION */] = 'The request is missing proof of first factor successful sign-in.',
            _a["missing-phone-number" /* MISSING_PHONE_NUMBER */] = 'To send verification codes, provide a phone number for the recipient.',
            _a["missing-verification-id" /* MISSING_SESSION_INFO */] = 'The phone auth credential was created with an empty verification ID.',
            _a["app-deleted" /* MODULE_DESTROYED */] = 'This instance of FirebaseApp has been deleted.',
            _a["multi-factor-info-not-found" /* MFA_INFO_NOT_FOUND */] = 'The user does not have a second factor matching the identifier provided.',
            _a["multi-factor-auth-required" /* MFA_REQUIRED */] = 'Proof of ownership of a second factor is required to complete sign-in.',
            _a["account-exists-with-different-credential" /* NEED_CONFIRMATION */] = 'An account already exists with the same email address but different ' +
                'sign-in credentials. Sign in using a provider associated with this ' +
                'email address.',
            _a["network-request-failed" /* NETWORK_REQUEST_FAILED */] = 'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.',
            _a["no-auth-event" /* NO_AUTH_EVENT */] = 'An internal AuthError has occurred.',
            _a["no-such-provider" /* NO_SUCH_PROVIDER */] = 'User was not linked to an account with the given provider.',
            _a["null-user" /* NULL_USER */] = 'A null user object was provided as the argument for an operation which ' +
                'requires a non-null user object.',
            _a["operation-not-allowed" /* OPERATION_NOT_ALLOWED */] = 'The given sign-in provider is disabled for this Firebase project. ' +
                'Enable it in the Firebase console, under the sign-in method tab of the ' +
                'Auth section.',
            _a["operation-not-supported-in-this-environment" /* OPERATION_NOT_SUPPORTED */] = 'This operation is not supported in the environment this application is ' +
                'running on. "location.protocol" must be http, https or chrome-extension' +
                ' and web storage must be enabled.',
            _a["popup-blocked" /* POPUP_BLOCKED */] = 'Unable to establish a connection with the popup. It may have been blocked by the browser.',
            _a["popup-closed-by-user" /* POPUP_CLOSED_BY_USER */] = 'The popup has been closed by the user before finalizing the operation.',
            _a["provider-already-linked" /* PROVIDER_ALREADY_LINKED */] = 'User can only be linked to one identity for the given provider.',
            _a["quota-exceeded" /* QUOTA_EXCEEDED */] = "The project's quota for this operation has been exceeded.",
            _a["redirect-cancelled-by-user" /* REDIRECT_CANCELLED_BY_USER */] = 'The redirect operation has been cancelled by the user before finalizing.',
            _a["redirect-operation-pending" /* REDIRECT_OPERATION_PENDING */] = 'A redirect sign-in operation is already pending.',
            _a["rejected-credential" /* REJECTED_CREDENTIAL */] = 'The request contains malformed or mismatching credentials.',
            _a["second-factor-already-in-use" /* SECOND_FACTOR_ALREADY_ENROLLED */] = 'The second factor is already enrolled on this account.',
            _a["maximum-second-factor-count-exceeded" /* SECOND_FACTOR_LIMIT_EXCEEDED */] = 'The maximum allowed number of second factors on a user has been exceeded.',
            _a["tenant-id-mismatch" /* TENANT_ID_MISMATCH */] = "The provided tenant ID does not match the Auth instance's tenant ID",
            _a["timeout" /* TIMEOUT */] = 'The operation has timed out.',
            _a["user-token-expired" /* TOKEN_EXPIRED */] = "The user's credential is no longer valid. The user must sign in again.",
            _a["too-many-requests" /* TOO_MANY_ATTEMPTS_TRY_LATER */] = 'We have blocked all requests from this device due to unusual activity. ' +
                'Try again later.',
            _a["unauthorized-continue-uri" /* UNAUTHORIZED_DOMAIN */] = 'The domain of the continue URL is not whitelisted.  Please whitelist ' +
                'the domain in the Firebase console.',
            _a["unsupported-first-factor" /* UNSUPPORTED_FIRST_FACTOR */] = 'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.',
            _a["unsupported-persistence-type" /* UNSUPPORTED_PERSISTENCE */] = 'The current environment does not support the specified persistence type.',
            _a["unsupported-tenant-operation" /* UNSUPPORTED_TENANT_OPERATION */] = 'This operation is not supported in a multi-tenant context.',
            _a["unverified-email" /* UNVERIFIED_EMAIL */] = 'The operation requires a verified email.',
            _a["user-cancelled" /* USER_CANCELLED */] = 'The user did not grant your application the permissions it requested.',
            _a["user-not-found" /* USER_DELETED */] = 'There is no user record corresponding to this identifier. The user may ' +
                'have been deleted.',
            _a["user-disabled" /* USER_DISABLED */] = 'The user account has been disabled by an administrator.',
            _a["user-mismatch" /* USER_MISMATCH */] = 'The supplied credentials do not correspond to the previously signed in user.',
            _a["user-signed-out" /* USER_SIGNED_OUT */] = '',
            _a["weak-password" /* WEAK_PASSWORD */] = 'The password must be 6 characters long or more.',
            _a["web-storage-unsupported" /* WEB_STORAGE_UNSUPPORTED */] = 'This browser is not supported or 3rd party cookies and data may be disabled.',
            _a;
    }
    function _prodErrorMap() {
        return {};
    }
    /**
     * A verbose error map with detailed descriptions for most error codes.
     *
     * See discussion at {@link @firebase/auth-types#AuthErrorMap}
     *
     * @public
     */
    var debugErrorMap = _debugErrorMap;
    /**
     * A minimal error map with all verbose error messages stripped.
     *
     * See discussion at {@link @firebase/auth-types#AuthErrorMap}
     *
     * @public
     */
    var prodErrorMap = _prodErrorMap;
    var _DEFAULT_AUTH_ERROR_FACTORY = new ErrorFactory('auth', 'Firebase', _prodErrorMap());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var logClient = new Logger('@firebase/auth-exp');
    function _logError(msg) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (logClient.logLevel <= LogLevel.ERROR) {
            logClient.error.apply(logClient, __spreadArrays(["Auth (" + app.SDK_VERSION + "): " + msg], args));
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _fail(authOrCode) {
        var rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            rest[_i - 1] = arguments[_i];
        }
        throw createErrorInternal.apply(void 0, __spreadArrays([authOrCode], rest));
    }
    function _createError(authOrCode) {
        var rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            rest[_i - 1] = arguments[_i];
        }
        return createErrorInternal.apply(void 0, __spreadArrays([authOrCode], rest));
    }
    function createErrorInternal(authOrCode) {
        var _a;
        var rest = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            rest[_i - 1] = arguments[_i];
        }
        if (typeof authOrCode !== 'string') {
            var code = rest[0];
            var fullParams = __spreadArrays(rest.slice(1));
            if (fullParams[0]) {
                fullParams[0].appName = authOrCode.name;
            }
            return (_a = authOrCode._errorFactory).create.apply(_a, __spreadArrays([code], fullParams));
        }
        return _DEFAULT_AUTH_ERROR_FACTORY.create.apply(_DEFAULT_AUTH_ERROR_FACTORY, __spreadArrays([authOrCode], rest));
    }
    function _assert(assertion, authOrCode) {
        var rest = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            rest[_i - 2] = arguments[_i];
        }
        if (!assertion) {
            throw createErrorInternal.apply(void 0, __spreadArrays([authOrCode], rest));
        }
    }
    /**
     * Unconditionally fails, throwing an internal error with the given message.
     *
     * @param failure type of failure encountered
     * @throws Error
     */
    function debugFail(failure) {
        // Log the failure in addition to throw an exception, just in case the
        // exception is swallowed.
        var message = "INTERNAL ASSERTION FAILED: " + failure;
        _logError(message);
        // NOTE: We don't use FirebaseError here because these are internal failures
        // that cannot be handled by the user. (Also it would create a circular
        // dependency between the error and assert modules which doesn't work.)
        throw new Error(message);
    }
    /**
     * Fails if the given assertion condition is false, throwing an Error with the
     * given message if it did.
     *
     * @param assertion
     * @param message
     */
    function debugAssert(assertion, message) {
        if (!assertion) {
            debugFail(message);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var instanceCache = new Map();
    function _getInstance(cls) {
        debugAssert(cls instanceof Function, 'Expected a class definition');
        var instance = instanceCache.get(cls);
        if (instance) {
            debugAssert(instance instanceof cls, 'Instance stored in cache mismatched with class');
            return instance;
        }
        instance = new cls();
        instanceCache.set(cls, instance);
        return instance;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** @public */
    function initializeAuth(app$1, deps) {
        if (app$1 === void 0) { app$1 = app.getApp(); }
        var auth = app._getProvider(app$1, 'auth-exp').getImmediate();
        _initializeAuthInstance(auth, deps);
        return auth;
    }
    function _initializeAuthInstance(auth, deps) {
        var persistence = (deps === null || deps === void 0 ? void 0 : deps.persistence) || [];
        var hierarchy = (Array.isArray(persistence)
            ? persistence
            : [persistence]).map(_getInstance);
        if (deps === null || deps === void 0 ? void 0 : deps.errorMap) {
            auth._updateErrorMap(deps.errorMap);
        }
        // This promise is intended to float; auth initialization happens in the
        // background, meanwhile the auth object may be used by the app.
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        auth._initializeWithPersistence(hierarchy, deps === null || deps === void 0 ? void 0 : deps.popupRedirectResolver);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * {@inheritdoc @firebase/auth-types#AuthCredential}
     *
     * @public
     */
    var AuthCredential = /** @class */ (function () {
        /** @internal */
        function AuthCredential(providerId, signInMethod) {
            this.providerId = providerId;
            this.signInMethod = signInMethod;
        }
        /** {@inheritdoc @firebase/auth-types#AuthCredential.toJSON} */
        AuthCredential.prototype.toJSON = function () {
            return debugFail('not implemented');
        };
        /** @internal */
        AuthCredential.prototype._getIdTokenResponse = function (_auth) {
            return debugFail('not implemented');
        };
        /** @internal */
        AuthCredential.prototype._linkToIdToken = function (_auth, _idToken) {
            return debugFail('not implemented');
        };
        /** @internal */
        AuthCredential.prototype._getReauthenticationResolver = function (_auth) {
            return debugFail('not implemented');
        };
        return AuthCredential;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _getCurrentUrl() {
        var _a;
        return (typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.href)) || '';
    }
    function _isHttpOrHttps() {
        return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';
    }
    function _getCurrentScheme() {
        var _a;
        return (typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.protocol)) || null;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Determine whether the browser is working online
     */
    function _isOnline() {
        if (typeof navigator !== 'undefined' &&
            navigator &&
            'onLine' in navigator &&
            typeof navigator.onLine === 'boolean' &&
            // Apply only for traditional web apps and Chrome extensions.
            // This is especially true for Cordova apps which have unreliable
            // navigator.onLine behavior unless cordova-plugin-network-information is
            // installed which overwrites the native navigator.onLine value and
            // defines navigator.connection.
            (_isHttpOrHttps() || isBrowserExtension() || 'connection' in navigator)) {
            return navigator.onLine;
        }
        // If we can't determine the state, assume it is online.
        return true;
    }
    function _getUserLanguage() {
        if (typeof navigator === 'undefined') {
            return null;
        }
        var navigatorLanguage = navigator;
        return (
        // Most reliable, but only supported in Chrome/Firefox.
        (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||
            // Supported in most browsers, but returns the language of the browser
            // UI, not the language set in browser settings.
            navigatorLanguage.language ||
            // Couldn't determine language.
            null);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A structure to help pick between a range of long and short delay durations
     * depending on the current environment. In general, the long delay is used for
     * mobile environments whereas short delays are used for desktop environments.
     */
    var Delay = /** @class */ (function () {
        function Delay(shortDelay, longDelay) {
            this.shortDelay = shortDelay;
            this.longDelay = longDelay;
            // Internal error when improperly initialized.
            debugAssert(longDelay > shortDelay, 'Short delay should be less than long delay!');
            this.isMobile = isMobileCordova() || isReactNative();
        }
        Delay.prototype.get = function () {
            if (!_isOnline()) {
                // Pick the shorter timeout.
                return Math.min(5000 /* OFFLINE */, this.shortDelay);
            }
            // If running in a mobile environment, return the long delay, otherwise
            // return the short delay.
            // This could be improved in the future to dynamically change based on other
            // variables instead of just reading the current environment.
            return this.isMobile ? this.longDelay : this.shortDelay;
        };
        return Delay;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _emulatorUrl(config, path) {
        debugAssert(config.emulator, 'Emulator should always be set here');
        var url = config.emulator.url;
        var emulatorHost = new URL(url).toString();
        if (!path) {
            return emulatorHost;
        }
        return "" + emulatorHost + (path.startsWith('/') ? path.slice(1) : path);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var FetchProvider = /** @class */ (function () {
        function FetchProvider() {
        }
        FetchProvider.initialize = function (fetchImpl, headersImpl, responseImpl) {
            this.fetchImpl = fetchImpl;
            if (headersImpl) {
                this.headersImpl = headersImpl;
            }
            if (responseImpl) {
                this.responseImpl = responseImpl;
            }
        };
        FetchProvider.fetch = function () {
            if (this.fetchImpl) {
                return this.fetchImpl;
            }
            if (typeof self !== 'undefined' && 'fetch' in self) {
                return self.fetch;
            }
            debugFail('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
        };
        FetchProvider.headers = function () {
            if (this.headersImpl) {
                return this.headersImpl;
            }
            if (typeof self !== 'undefined' && 'Headers' in self) {
                return self.Headers;
            }
            debugFail('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
        };
        FetchProvider.response = function () {
            if (this.responseImpl) {
                return this.responseImpl;
            }
            if (typeof self !== 'undefined' && 'Response' in self) {
                return self.Response;
            }
            debugFail('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');
        };
        return FetchProvider;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$1;
    /**
     * Map from errors returned by the server to errors to developer visible errors
     */
    var SERVER_ERROR_MAP = (_a$1 = {},
        // Custom token errors.
        _a$1["CREDENTIAL_MISMATCH" /* CREDENTIAL_MISMATCH */] = "custom-token-mismatch" /* CREDENTIAL_MISMATCH */,
        // This can only happen if the SDK sends a bad request.
        _a$1["MISSING_CUSTOM_TOKEN" /* MISSING_CUSTOM_TOKEN */] = "internal-error" /* INTERNAL_ERROR */,
        // Create Auth URI errors.
        _a$1["INVALID_IDENTIFIER" /* INVALID_IDENTIFIER */] = "invalid-email" /* INVALID_EMAIL */,
        // This can only happen if the SDK sends a bad request.
        _a$1["MISSING_CONTINUE_URI" /* MISSING_CONTINUE_URI */] = "internal-error" /* INTERNAL_ERROR */,
        // Sign in with email and password errors (some apply to sign up too).
        _a$1["INVALID_PASSWORD" /* INVALID_PASSWORD */] = "wrong-password" /* INVALID_PASSWORD */,
        // This can only happen if the SDK sends a bad request.
        _a$1["MISSING_PASSWORD" /* MISSING_PASSWORD */] = "internal-error" /* INTERNAL_ERROR */,
        // Sign up with email and password errors.
        _a$1["EMAIL_EXISTS" /* EMAIL_EXISTS */] = "email-already-in-use" /* EMAIL_EXISTS */,
        _a$1["PASSWORD_LOGIN_DISABLED" /* PASSWORD_LOGIN_DISABLED */] = "operation-not-allowed" /* OPERATION_NOT_ALLOWED */,
        // Verify assertion for sign in with credential errors:
        _a$1["INVALID_IDP_RESPONSE" /* INVALID_IDP_RESPONSE */] = "invalid-credential" /* INVALID_IDP_RESPONSE */,
        _a$1["INVALID_PENDING_TOKEN" /* INVALID_PENDING_TOKEN */] = "invalid-credential" /* INVALID_IDP_RESPONSE */,
        _a$1["FEDERATED_USER_ID_ALREADY_LINKED" /* FEDERATED_USER_ID_ALREADY_LINKED */] = "credential-already-in-use" /* CREDENTIAL_ALREADY_IN_USE */,
        // This can only happen if the SDK sends a bad request.
        _a$1["MISSING_REQ_TYPE" /* MISSING_REQ_TYPE */] = "internal-error" /* INTERNAL_ERROR */,
        // Send Password reset email errors:
        _a$1["EMAIL_NOT_FOUND" /* EMAIL_NOT_FOUND */] = "user-not-found" /* USER_DELETED */,
        _a$1["RESET_PASSWORD_EXCEED_LIMIT" /* RESET_PASSWORD_EXCEED_LIMIT */] = "too-many-requests" /* TOO_MANY_ATTEMPTS_TRY_LATER */,
        _a$1["EXPIRED_OOB_CODE" /* EXPIRED_OOB_CODE */] = "expired-action-code" /* EXPIRED_OOB_CODE */,
        _a$1["INVALID_OOB_CODE" /* INVALID_OOB_CODE */] = "invalid-action-code" /* INVALID_OOB_CODE */,
        // This can only happen if the SDK sends a bad request.
        _a$1["MISSING_OOB_CODE" /* MISSING_OOB_CODE */] = "internal-error" /* INTERNAL_ERROR */,
        // Operations that require ID token in request:
        _a$1["CREDENTIAL_TOO_OLD_LOGIN_AGAIN" /* CREDENTIAL_TOO_OLD_LOGIN_AGAIN */] = "requires-recent-login" /* CREDENTIAL_TOO_OLD_LOGIN_AGAIN */,
        _a$1["INVALID_ID_TOKEN" /* INVALID_ID_TOKEN */] = "invalid-user-token" /* INVALID_AUTH */,
        _a$1["TOKEN_EXPIRED" /* TOKEN_EXPIRED */] = "user-token-expired" /* TOKEN_EXPIRED */,
        _a$1["USER_NOT_FOUND" /* USER_NOT_FOUND */] = "user-token-expired" /* TOKEN_EXPIRED */,
        // Other errors.
        _a$1["TOO_MANY_ATTEMPTS_TRY_LATER" /* TOO_MANY_ATTEMPTS_TRY_LATER */] = "too-many-requests" /* TOO_MANY_ATTEMPTS_TRY_LATER */,
        // Phone Auth related errors.
        _a$1["INVALID_CODE" /* INVALID_CODE */] = "invalid-verification-code" /* INVALID_CODE */,
        _a$1["INVALID_SESSION_INFO" /* INVALID_SESSION_INFO */] = "invalid-verification-id" /* INVALID_SESSION_INFO */,
        _a$1["INVALID_TEMPORARY_PROOF" /* INVALID_TEMPORARY_PROOF */] = "invalid-credential" /* INVALID_IDP_RESPONSE */,
        _a$1["MISSING_SESSION_INFO" /* MISSING_SESSION_INFO */] = "missing-verification-id" /* MISSING_SESSION_INFO */,
        _a$1["SESSION_EXPIRED" /* SESSION_EXPIRED */] = "code-expired" /* CODE_EXPIRED */,
        // Other action code errors when additional settings passed.
        // MISSING_CONTINUE_URI is getting mapped to INTERNAL_ERROR above.
        // This is OK as this error will be caught by client side validation.
        _a$1["MISSING_ANDROID_PACKAGE_NAME" /* MISSING_ANDROID_PACKAGE_NAME */] = "missing-android-pkg-name" /* MISSING_ANDROID_PACKAGE_NAME */,
        _a$1["UNAUTHORIZED_DOMAIN" /* UNAUTHORIZED_DOMAIN */] = "unauthorized-continue-uri" /* UNAUTHORIZED_DOMAIN */,
        // getProjectConfig errors when clientId is passed.
        _a$1["INVALID_OAUTH_CLIENT_ID" /* INVALID_OAUTH_CLIENT_ID */] = "invalid-oauth-client-id" /* INVALID_OAUTH_CLIENT_ID */,
        // User actions (sign-up or deletion) disabled errors.
        _a$1["ADMIN_ONLY_OPERATION" /* ADMIN_ONLY_OPERATION */] = "admin-restricted-operation" /* ADMIN_ONLY_OPERATION */,
        // Multi factor related errors.
        _a$1["INVALID_MFA_PENDING_CREDENTIAL" /* INVALID_MFA_PENDING_CREDENTIAL */] = "invalid-multi-factor-session" /* INVALID_MFA_SESSION */,
        _a$1["MFA_ENROLLMENT_NOT_FOUND" /* MFA_ENROLLMENT_NOT_FOUND */] = "multi-factor-info-not-found" /* MFA_INFO_NOT_FOUND */,
        _a$1["MISSING_MFA_ENROLLMENT_ID" /* MISSING_MFA_ENROLLMENT_ID */] = "missing-multi-factor-info" /* MISSING_MFA_INFO */,
        _a$1["MISSING_MFA_PENDING_CREDENTIAL" /* MISSING_MFA_PENDING_CREDENTIAL */] = "missing-multi-factor-session" /* MISSING_MFA_SESSION */,
        _a$1["SECOND_FACTOR_EXISTS" /* SECOND_FACTOR_EXISTS */] = "second-factor-already-in-use" /* SECOND_FACTOR_ALREADY_ENROLLED */,
        _a$1["SECOND_FACTOR_LIMIT_EXCEEDED" /* SECOND_FACTOR_LIMIT_EXCEEDED */] = "maximum-second-factor-count-exceeded" /* SECOND_FACTOR_LIMIT_EXCEEDED */,
        _a$1);

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);
    function _performApiRequest(auth, method, path, request, customErrorMap) {
        if (customErrorMap === void 0) { customErrorMap = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performFetchWithErrorHandling(auth, customErrorMap, function () {
                        var body = {};
                        var params = {};
                        if (request) {
                            if (method === "GET" /* GET */) {
                                params = request;
                            }
                            else {
                                body = {
                                    body: JSON.stringify(request)
                                };
                            }
                        }
                        var query = querystring(__assign({ key: auth.config.apiKey }, params)).slice(1);
                        var headers = new (FetchProvider.headers())();
                        headers.set("Content-Type" /* CONTENT_TYPE */, 'application/json');
                        headers.set("X-Client-Version" /* X_CLIENT_VERSION */, auth.config.sdkClientVersion);
                        if (auth.languageCode) {
                            headers.set("X-Firebase-Locale" /* X_FIREBASE_LOCALE */, auth.languageCode);
                        }
                        return FetchProvider.fetch()(_getFinalTarget(auth, auth.config.apiHost, path, query), __assign({ method: method,
                            headers: headers, referrerPolicy: 'no-referrer' }, body));
                    })];
            });
        });
    }
    function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {
        return __awaiter(this, void 0, void 0, function () {
            var errorMap, networkTimeout, response, json, serverErrorCode, authError, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        auth._canInitEmulator = false;
                        errorMap = __assign(__assign({}, SERVER_ERROR_MAP), customErrorMap);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        networkTimeout = new NetworkTimeout(auth);
                        return [4 /*yield*/, Promise.race([
                                fetchFn(),
                                networkTimeout.promise
                            ])];
                    case 2:
                        response = _a.sent();
                        // If we've reached this point, the fetch succeeded and the networkTimeout
                        // didn't throw; clear the network timeout delay so that Node won't hang
                        networkTimeout.clearNetworkTimeout();
                        return [4 /*yield*/, response.json()];
                    case 3:
                        json = _a.sent();
                        if ('needConfirmation' in json) {
                            throw makeTaggedError(auth, "account-exists-with-different-credential" /* NEED_CONFIRMATION */, json);
                        }
                        if (response.ok) {
                            return [2 /*return*/, json];
                        }
                        else {
                            serverErrorCode = json.error.message.split(' : ')[0];
                            if (serverErrorCode === "FEDERATED_USER_ID_ALREADY_LINKED" /* FEDERATED_USER_ID_ALREADY_LINKED */) {
                                throw makeTaggedError(auth, "credential-already-in-use" /* CREDENTIAL_ALREADY_IN_USE */, json);
                            }
                            else if (serverErrorCode === "EMAIL_EXISTS" /* EMAIL_EXISTS */) {
                                throw makeTaggedError(auth, "email-already-in-use" /* EMAIL_EXISTS */, json);
                            }
                            authError = errorMap[serverErrorCode] ||
                                serverErrorCode
                                    .toLowerCase()
                                    .replace(/[_\s]+/g, '-');
                            _fail(auth, authError);
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        if (e_1 instanceof FirebaseError) {
                            throw e_1;
                        }
                        _fail(auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    }
    function _performSignInRequest(auth, method, path, request, customErrorMap) {
        if (customErrorMap === void 0) { customErrorMap = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var serverResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _performApiRequest(auth, method, path, request, customErrorMap)];
                    case 1:
                        serverResponse = (_a.sent());
                        if ('mfaPendingCredential' in serverResponse) {
                            _fail(auth, "multi-factor-auth-required" /* MFA_REQUIRED */, {
                                serverResponse: serverResponse
                            });
                        }
                        return [2 /*return*/, serverResponse];
                }
            });
        });
    }
    function _getFinalTarget(auth, host, path, query) {
        var base = "" + host + path + "?" + query;
        if (!auth.config.emulator) {
            return auth.config.apiScheme + "://" + base;
        }
        return _emulatorUrl(auth.config, base);
    }
    var NetworkTimeout = /** @class */ (function () {
        function NetworkTimeout(auth) {
            var _this = this;
            this.auth = auth;
            // Node timers and browser timers are fundamentally incompatible, but we
            // don't care about the value here
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.timer = null;
            this.promise = new Promise(function (_, reject) {
                _this.timer = setTimeout(function () {
                    return reject(_createError(_this.auth, "timeout" /* TIMEOUT */));
                }, DEFAULT_API_TIMEOUT_MS.get());
            });
        }
        NetworkTimeout.prototype.clearNetworkTimeout = function () {
            clearTimeout(this.timer);
        };
        return NetworkTimeout;
    }());
    function makeTaggedError(auth, code, response) {
        var errorParams = {
            appName: auth.name
        };
        if (response.email) {
            errorParams.email = response.email;
        }
        if (response.phoneNumber) {
            errorParams.phoneNumber = response.phoneNumber;
        }
        var error = _createError(auth, code, errorParams);
        // We know customData is defined on error because errorParams is defined
        error.customData._tokenResponse = response;
        return error;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function resetPassword(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:resetPassword" /* RESET_PASSWORD */, request)];
            });
        });
    }
    function updateEmailPassword(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:update" /* SET_ACCOUNT_INFO */, request)];
            });
        });
    }
    function applyActionCode(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:update" /* SET_ACCOUNT_INFO */, request)];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function signInWithPassword(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signInWithPassword" /* SIGN_IN_WITH_PASSWORD */, request)];
            });
        });
    }
    function sendOobCode(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:sendOobCode" /* SEND_OOB_CODE */, request)];
            });
        });
    }
    function sendEmailVerification(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, sendOobCode(auth, request)];
            });
        });
    }
    function sendPasswordResetEmail(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, sendOobCode(auth, request)];
            });
        });
    }
    function sendSignInLinkToEmail(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, sendOobCode(auth, request)];
            });
        });
    }
    function verifyAndChangeEmail(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, sendOobCode(auth, request)];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function signInWithEmailLink(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signInWithEmailLink" /* SIGN_IN_WITH_EMAIL_LINK */, request)];
            });
        });
    }
    function signInWithEmailLinkForLinking(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signInWithEmailLink" /* SIGN_IN_WITH_EMAIL_LINK */, request)];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Interface that represents the credentials returned by {@link EmailAuthProvider} for
     * {@link @firebase/auth-types#ProviderId.PASSWORD}
     *
     * @remarks
     * Covers both {@link @firebase/auth-types#SignInMethod.EMAIL_PASSWORD} and
     * {@link @firebase/auth-types#SignInMethod.EMAIL_LINK}.
     *
     * @public
     */
    var EmailAuthCredential = /** @class */ (function (_super) {
        __extends(EmailAuthCredential, _super);
        /** @internal */
        function EmailAuthCredential(email, password, signInMethod, tenantId) {
            if (tenantId === void 0) { tenantId = null; }
            var _this = _super.call(this, "password" /* PASSWORD */, signInMethod) || this;
            _this.email = email;
            _this.password = password;
            _this.tenantId = tenantId;
            return _this;
        }
        /** @internal */
        EmailAuthCredential._fromEmailAndPassword = function (email, password) {
            return new EmailAuthCredential(email, password, "password" /* EMAIL_PASSWORD */);
        };
        /** @internal */
        EmailAuthCredential._fromEmailAndCode = function (email, oobCode, tenantId) {
            if (tenantId === void 0) { tenantId = null; }
            return new EmailAuthCredential(email, oobCode, "emailLink" /* EMAIL_LINK */, tenantId);
        };
        /** {@inheritdoc @firebase/auth-types#AuthCredential.toJSON} */
        EmailAuthCredential.prototype.toJSON = function () {
            return {
                email: this.email,
                password: this.password,
                signInMethod: this.signInMethod,
                tenantId: this.tenantId
            };
        };
        /** {@inheritdoc @firebase/auth-types#AuthCredential.fromJSON} */
        EmailAuthCredential.fromJSON = function (json) {
            var obj = typeof json === 'string' ? JSON.parse(json) : json;
            if ((obj === null || obj === void 0 ? void 0 : obj.email) && (obj === null || obj === void 0 ? void 0 : obj.password)) {
                if (obj.signInMethod === "password" /* EMAIL_PASSWORD */) {
                    return this._fromEmailAndPassword(obj.email, obj.password);
                }
                else if (obj.signInMethod === "emailLink" /* EMAIL_LINK */) {
                    return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);
                }
            }
            return null;
        };
        /** @internal */
        EmailAuthCredential.prototype._getIdTokenResponse = function (auth) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (this.signInMethod) {
                        case "password" /* EMAIL_PASSWORD */:
                            return [2 /*return*/, signInWithPassword(auth, {
                                    returnSecureToken: true,
                                    email: this.email,
                                    password: this.password
                                })];
                        case "emailLink" /* EMAIL_LINK */:
                            return [2 /*return*/, signInWithEmailLink(auth, {
                                    email: this.email,
                                    oobCode: this.password
                                })];
                        default:
                            _fail(auth, "internal-error" /* INTERNAL_ERROR */);
                    }
                    return [2 /*return*/];
                });
            });
        };
        /** @internal */
        EmailAuthCredential.prototype._linkToIdToken = function (auth, idToken) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (this.signInMethod) {
                        case "password" /* EMAIL_PASSWORD */:
                            return [2 /*return*/, updateEmailPassword(auth, {
                                    idToken: idToken,
                                    returnSecureToken: true,
                                    email: this.email,
                                    password: this.password
                                })];
                        case "emailLink" /* EMAIL_LINK */:
                            return [2 /*return*/, signInWithEmailLinkForLinking(auth, {
                                    idToken: idToken,
                                    email: this.email,
                                    oobCode: this.password
                                })];
                        default:
                            _fail(auth, "internal-error" /* INTERNAL_ERROR */);
                    }
                    return [2 /*return*/];
                });
            });
        };
        /** @internal */
        EmailAuthCredential.prototype._getReauthenticationResolver = function (auth) {
            return this._getIdTokenResponse(auth);
        };
        return EmailAuthCredential;
    }(AuthCredential));

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function signInWithIdp(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signInWithIdp" /* SIGN_IN_WITH_IDP */, request)];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var IDP_REQUEST_URI = 'http://localhost';
    /**
     * {@inheritdoc @firebase/auth-types#OAuthCredential}
     *
     * @public
     */
    var OAuthCredential = /** @class */ (function (_super) {
        __extends(OAuthCredential, _super);
        function OAuthCredential() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.pendingToken = null;
            return _this;
        }
        /** @internal */
        OAuthCredential._fromParams = function (params) {
            var cred = new OAuthCredential(params.providerId, params.signInMethod);
            if (params.idToken || params.accessToken) {
                // OAuth 2 and either ID token or access token.
                if (params.idToken) {
                    cred.idToken = params.idToken;
                }
                if (params.accessToken) {
                    cred.accessToken = params.accessToken;
                }
                // Add nonce if available and no pendingToken is present.
                if (params.nonce && !params.pendingToken) {
                    cred.nonce = params.nonce;
                }
                if (params.pendingToken) {
                    cred.pendingToken = params.pendingToken;
                }
            }
            else if (params.oauthToken && params.oauthTokenSecret) {
                // OAuth 1 and OAuth token with token secret
                cred.accessToken = params.oauthToken;
                cred.secret = params.oauthTokenSecret;
            }
            else {
                _fail("argument-error" /* ARGUMENT_ERROR */);
            }
            return cred;
        };
        /** {@inheritdoc @firebase/auth-types#OAuthCredential.toJSON}  */
        OAuthCredential.prototype.toJSON = function () {
            return {
                idToken: this.idToken,
                accessToken: this.accessToken,
                secret: this.secret,
                nonce: this.nonce,
                pendingToken: this.pendingToken,
                providerId: this.providerId,
                signInMethod: this.signInMethod
            };
        };
        /** {@inheritdoc @firebase/auth-types#OAuthCredential.fromJSON} */
        OAuthCredential.fromJSON = function (json) {
            var obj = typeof json === 'string' ? JSON.parse(json) : json;
            var providerId = obj.providerId, signInMethod = obj.signInMethod, rest = __rest(obj, ["providerId", "signInMethod"]);
            if (!providerId || !signInMethod) {
                return null;
            }
            var cred = new OAuthCredential(providerId, signInMethod);
            Object.assign(cred, rest);
            return cred;
        };
        /** @internal */
        OAuthCredential.prototype._getIdTokenResponse = function (auth) {
            var request = this.buildRequest();
            return signInWithIdp(auth, request);
        };
        /** @internal */
        OAuthCredential.prototype._linkToIdToken = function (auth, idToken) {
            var request = this.buildRequest();
            request.idToken = idToken;
            return signInWithIdp(auth, request);
        };
        /** @internal */
        OAuthCredential.prototype._getReauthenticationResolver = function (auth) {
            var request = this.buildRequest();
            request.autoCreate = false;
            return signInWithIdp(auth, request);
        };
        OAuthCredential.prototype.buildRequest = function () {
            var request = {
                requestUri: IDP_REQUEST_URI,
                returnSecureToken: true,
                postBody: null
            };
            if (this.pendingToken) {
                request.pendingToken = this.pendingToken;
            }
            else {
                var postBody = {};
                if (this.idToken) {
                    postBody['id_token'] = this.idToken;
                }
                if (this.accessToken) {
                    postBody['access_token'] = this.accessToken;
                }
                if (this.secret) {
                    postBody['oauth_token_secret'] = this.secret;
                }
                postBody['providerId'] = this.providerId;
                if (this.nonce && !this.pendingToken) {
                    postBody['nonce'] = this.nonce;
                }
                request.postBody = querystring(postBody);
            }
            return request;
        };
        return OAuthCredential;
    }(AuthCredential));

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$1$1;
    function sendPhoneVerificationCode(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:sendVerificationCode" /* SEND_VERIFICATION_CODE */, request)];
            });
        });
    }
    function signInWithPhoneNumber(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signInWithPhoneNumber" /* SIGN_IN_WITH_PHONE_NUMBER */, request)];
            });
        });
    }
    function linkWithPhoneNumber(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signInWithPhoneNumber" /* SIGN_IN_WITH_PHONE_NUMBER */, request)];
            });
        });
    }
    var VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = (_a$1$1 = {},
        _a$1$1["USER_NOT_FOUND" /* USER_NOT_FOUND */] = "user-not-found" /* USER_DELETED */,
        _a$1$1);
    function verifyPhoneNumberForExisting(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            var apiRequest;
            return __generator(this, function (_a) {
                apiRequest = __assign(__assign({}, request), { operation: 'REAUTH' });
                return [2 /*return*/, _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signInWithPhoneNumber" /* SIGN_IN_WITH_PHONE_NUMBER */, apiRequest, VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_)];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * {@inheritdoc @firebase/auth-types#PhoneAuthCredential}
     *
     * @public
     */
    var PhoneAuthCredential = /** @class */ (function (_super) {
        __extends(PhoneAuthCredential, _super);
        function PhoneAuthCredential(params) {
            var _this = _super.call(this, "phone" /* PHONE */, "phone" /* PHONE */) || this;
            _this.params = params;
            return _this;
        }
        /** @internal */
        PhoneAuthCredential._fromVerification = function (verificationId, verificationCode) {
            return new PhoneAuthCredential({ verificationId: verificationId, verificationCode: verificationCode });
        };
        /** @internal */
        PhoneAuthCredential._fromTokenResponse = function (phoneNumber, temporaryProof) {
            return new PhoneAuthCredential({ phoneNumber: phoneNumber, temporaryProof: temporaryProof });
        };
        /** @internal */
        PhoneAuthCredential.prototype._getIdTokenResponse = function (auth) {
            return signInWithPhoneNumber(auth, this._makeVerificationRequest());
        };
        /** @internal */
        PhoneAuthCredential.prototype._linkToIdToken = function (auth, idToken) {
            return linkWithPhoneNumber(auth, __assign({ idToken: idToken }, this._makeVerificationRequest()));
        };
        /** @internal */
        PhoneAuthCredential.prototype._getReauthenticationResolver = function (auth) {
            return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());
        };
        /** @internal */
        PhoneAuthCredential.prototype._makeVerificationRequest = function () {
            var _a = this.params, temporaryProof = _a.temporaryProof, phoneNumber = _a.phoneNumber, verificationId = _a.verificationId, verificationCode = _a.verificationCode;
            if (temporaryProof && phoneNumber) {
                return { temporaryProof: temporaryProof, phoneNumber: phoneNumber };
            }
            return {
                sessionInfo: verificationId,
                code: verificationCode
            };
        };
        /** {@inheritdoc @firebase/auth-types#toJSON} */
        PhoneAuthCredential.prototype.toJSON = function () {
            var obj = {
                providerId: this.providerId
            };
            if (this.params.phoneNumber) {
                obj.phoneNumber = this.params.phoneNumber;
            }
            if (this.params.temporaryProof) {
                obj.temporaryProof = this.params.temporaryProof;
            }
            if (this.params.verificationCode) {
                obj.verificationCode = this.params.verificationCode;
            }
            if (this.params.verificationId) {
                obj.verificationId = this.params.verificationId;
            }
            return obj;
        };
        /** {@inheritdoc @firebase/auth-types#fromJSON} */
        PhoneAuthCredential.fromJSON = function (json) {
            if (typeof json === 'string') {
                json = JSON.parse(json);
            }
            var _a = json, verificationId = _a.verificationId, verificationCode = _a.verificationCode, phoneNumber = _a.phoneNumber, temporaryProof = _a.temporaryProof;
            if (!verificationCode &&
                !verificationId &&
                !phoneNumber &&
                !temporaryProof) {
                return null;
            }
            return new PhoneAuthCredential({
                verificationId: verificationId,
                verificationCode: verificationCode,
                phoneNumber: phoneNumber,
                temporaryProof: temporaryProof
            });
        };
        return PhoneAuthCredential;
    }(AuthCredential));

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var InMemoryPersistence = /** @class */ (function () {
        function InMemoryPersistence() {
            this.type = "NONE" /* NONE */;
            this.storage = {};
        }
        InMemoryPersistence.prototype._isAvailable = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, true];
                });
            });
        };
        InMemoryPersistence.prototype._set = function (key, value) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.storage[key] = value;
                    return [2 /*return*/];
                });
            });
        };
        InMemoryPersistence.prototype._get = function (key) {
            return __awaiter(this, void 0, void 0, function () {
                var value;
                return __generator(this, function (_a) {
                    value = this.storage[key];
                    return [2 /*return*/, value === undefined ? null : value];
                });
            });
        };
        InMemoryPersistence.prototype._remove = function (key) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    delete this.storage[key];
                    return [2 /*return*/];
                });
            });
        };
        InMemoryPersistence.prototype._addListener = function (_key, _listener) {
            // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers
            return;
        };
        InMemoryPersistence.prototype._removeListener = function (_key, _listener) {
            // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers
            return;
        };
        InMemoryPersistence.type = 'NONE';
        return InMemoryPersistence;
    }());
    /**
     * An implementation of {@link @firebase/auth-types#Persistence} of type 'NONE'.
     *
     * @public
     */
    var inMemoryPersistence = InMemoryPersistence;

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Maps the mode string in action code URL to Action Code Info operation.
     *
     * @param mode
     * @internal
     */
    function parseMode(mode) {
        switch (mode) {
            case 'recoverEmail':
                return "RECOVER_EMAIL" /* RECOVER_EMAIL */;
            case 'resetPassword':
                return "PASSWORD_RESET" /* PASSWORD_RESET */;
            case 'signIn':
                return "EMAIL_SIGNIN" /* EMAIL_SIGNIN */;
            case 'verifyEmail':
                return "VERIFY_EMAIL" /* VERIFY_EMAIL */;
            case 'verifyAndChangeEmail':
                return "VERIFY_AND_CHANGE_EMAIL" /* VERIFY_AND_CHANGE_EMAIL */;
            case 'revertSecondFactorAddition':
                return "REVERT_SECOND_FACTOR_ADDITION" /* REVERT_SECOND_FACTOR_ADDITION */;
            default:
                return null;
        }
    }
    /**
     * Helper to parse FDL links
     *
     * @param url
     * @internal
     */
    function parseDeepLink(url) {
        var uri = new URL(url);
        var link = uri.searchParams.get('link');
        // Double link case (automatic redirect).
        var doubleDeepLink = link ? new URL(link).searchParams.get('link') : null;
        // iOS custom scheme links.
        var iOSDeepLink = uri.searchParams.get('deep_link_id');
        var iOSDoubleDeepLink = iOSDeepLink
            ? new URL(iOSDeepLink).searchParams.get('link')
            : null;
        return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;
    }
    /**
     * {@inheritDoc @firebase/auth-types#ActionCodeURL}
     *
     * @public
     */
    var ActionCodeURL = /** @class */ (function () {
        /**
         * @param actionLink - The link from which to extract the URL.
         * @returns The ActionCodeURL object, or null if the link is invalid.
         *
         * @internal
         */
        function ActionCodeURL(actionLink) {
            var uri = new URL(actionLink);
            var apiKey = uri.searchParams.get("apiKey" /* API_KEY */);
            var code = uri.searchParams.get("oobCode" /* CODE */);
            var operation = parseMode(uri.searchParams.get("mode" /* MODE */));
            // Validate API key, code and mode.
            _assert(apiKey && code && operation, "argument-error" /* ARGUMENT_ERROR */);
            this.apiKey = apiKey;
            this.operation = operation;
            this.code = code;
            this.continueUrl = uri.searchParams.get("continueUrl" /* CONTINUE_URL */);
            this.languageCode = uri.searchParams.get("languageCode" /* LANGUAGE_CODE */);
            this.tenantId = uri.searchParams.get("tenantId" /* TENANT_ID */);
        }
        /** {@inheritDoc @firebase/auth-types#ActionCodeURL.parseLink} */
        ActionCodeURL.parseLink = function (link) {
            var actionLink = parseDeepLink(link);
            try {
                return new ActionCodeURL(actionLink);
            }
            catch (_a) {
                return null;
            }
        };
        return ActionCodeURL;
    }());
    /**
     * {@inheritDoc @firebase/auth-types#ActionCodeURL.parseLink}
     *
     * @public
     */
    function parseActionCodeURL(link) {
        return ActionCodeURL.parseLink(link);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * {@inheritdoc @firebase/auth-types#EmailAuthProvider}
     *
     * @public
     */
    var EmailAuthProvider = /** @class */ (function () {
        function EmailAuthProvider() {
            /** {@inheritdoc @firebase/auth-types#EmailAuthProvider.providerId} */
            this.providerId = EmailAuthProvider.PROVIDER_ID;
        }
        /** {@inheritdoc @firebase/auth-types#EmailAuthProvider.credential} */
        EmailAuthProvider.credential = function (email, password) {
            return EmailAuthCredential._fromEmailAndPassword(email, password);
        };
        /** {@inheritdoc @firebase/auth-types#EmailAuthProvider.credentialWithLink} */
        EmailAuthProvider.credentialWithLink = function (email, emailLink) {
            var actionCodeUrl = ActionCodeURL.parseLink(emailLink);
            _assert(actionCodeUrl, "argument-error" /* ARGUMENT_ERROR */);
            return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);
        };
        /** {@inheritdoc @firebase/auth-types#EmailAuthProvider.PROVIDER_ID} */
        EmailAuthProvider.PROVIDER_ID = "password" /* PASSWORD */;
        /** {@inheritdoc @firebase/auth-types#EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD} */
        EmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = "password" /* EMAIL_PASSWORD */;
        /** {@inheritdoc @firebase/auth-types#EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD} */
        EmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = "emailLink" /* EMAIL_LINK */;
        return EmailAuthProvider;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for generating generic {@link OAuthCredential}.
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new OAuthProvider('google.com');
     * // Start a sign in process for an unauthenticated user.
     * provider.addScope('profile');
     * provider.addScope('email');
     * await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * if (result) {
     *   // This is the signed-in user
     *   const user = result.user;
     *   // This gives you a OAuth Access Token for the provider.
     *   const credential = provider.credentialFromResult(auth, result);
     *   const token = credential.accessToken;
     * }
     * ```
     *
     * @example
     * ```javascript
     * // Sign in using a popup.
     * const provider = new OAuthProvider('google.com');
     * provider.addScope('profile');
     * provider.addScope('email');
     * const result = await signInWithPopup(auth, provider);
     *
     * // The signed-in user info.
     * const user = result.user;
     * // This gives you a OAuth Access Token for the provider.
     * const credential = provider.credentialFromResult(auth, result);
     * const token = credential.accessToken;
     * ```
     * @public
     */
    var OAuthProvider = /** @class */ (function () {
        /**
         * Constructor for generic OAuth providers.
         *
         * @param providerId - Provider for which credentials should be generated.
         */
        function OAuthProvider(providerId) {
            this.providerId = providerId;
            /** @internal */
            this.defaultLanguageCode = null;
            /** @internal */
            this.scopes = [];
            /** @internal */
            this.customParameters = {};
        }
        OAuthProvider.credentialFromJSON = function (json) {
            var obj = typeof json === 'string' ? JSON.parse(json) : json;
            _assert('providerId' in obj && 'signInMethod' in obj, "argument-error" /* ARGUMENT_ERROR */);
            return OAuthCredential._fromParams(obj);
        };
        /**
         * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.
         *
         * @remarks
         * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of
         * the raw nonce must match the nonce field in the ID token.
         *
         * @example
         * ```javascript
         * // `googleUser` from the onsuccess Google Sign In callback.
         * // Initialize a generate OAuth provider with a `google.com` providerId.
         * const provider = new OAuthProvider('google.com');
         * const credential = provider.credential({
         *   idToken: googleUser.getAuthResponse().id_token,
         * });
         * const result = await signInWithCredential(credential);
         * ```
         *
         * @param params - Either the options object containing the ID token, access token and raw nonce
         * or the ID token string.
         */
        OAuthProvider.prototype.credential = function (params) {
            _assert(params.idToken && params.accessToken, "argument-error" /* ARGUMENT_ERROR */);
            // For OAuthCredential, sign in method is same as providerId.
            return OAuthCredential._fromParams(__assign({ providerId: this.providerId, signInMethod: this.providerId }, params));
        };
        /**
         * Set the language gode.
         *
         * @param languageCode - language code
         */
        OAuthProvider.prototype.setDefaultLanguage = function (languageCode) {
            this.defaultLanguageCode = languageCode;
        };
        /**
         * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in
         * operations.
         *
         * @remarks
         * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,
         * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.
         *
         * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.
         */
        OAuthProvider.prototype.setCustomParameters = function (customOAuthParameters) {
            this.customParameters = customOAuthParameters;
            return this;
        };
        /**
         * Retrieve the current list of {@link CustomParameters}.
         */
        OAuthProvider.prototype.getCustomParameters = function () {
            return this.customParameters;
        };
        /**
         * Add an OAuth scope to the credential.
         *
         * @param scope - Provider OAuth scope to add.
         */
        OAuthProvider.prototype.addScope = function (scope) {
            // If not already added, add scope to list.
            if (!this.scopes.includes(scope)) {
                this.scopes.push(scope);
            }
            return this;
        };
        /**
         * Retrieve the current list of OAuth scopes.
         */
        OAuthProvider.prototype.getScopes = function () {
            return __spreadArrays(this.scopes);
        };
        return OAuthProvider;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for generating an {@link OAuthCredential} for {@link @firebase/auth-types#ProviderId.FACEBOOK}.
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new FacebookAuthProvider();
     * // Start a sign in process for an unauthenticated user.
     * provider.addScope('user_birthday');
     * await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * if (result) {
     *   // This is the signed-in user
     *   const user = result.user;
     *   // This gives you a Facebook Access Token.
     *   const credential = provider.credentialFromResult(auth, result);
     *   const token = credential.accessToken;
     * }
     * ```
     *
     * @example
     * ```javascript
     * // Sign in using a popup.
     * const provider = new FacebookAuthProvider();
     * provider.addScope('user_birthday');
     * const result = await signInWithPopup(auth, provider);
     *
     * // The signed-in user info.
     * const user = result.user;
     * // This gives you a Facebook Access Token.
     * const credential = provider.credentialFromResult(auth, result);
     * const token = credential.accessToken;
     * ```
     *
     * @public
     */
    var FacebookAuthProvider = /** @class */ (function (_super) {
        __extends(FacebookAuthProvider, _super);
        function FacebookAuthProvider() {
            return _super.call(this, "facebook.com" /* FACEBOOK */) || this;
        }
        /**
         * Creates a credential for Facebook.
         *
         * @example
         * ```javascript
         * // `event` from the Facebook auth.authResponseChange callback.
         * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);
         * const result = await signInWithCredential(credential);
         * ```
         *
         * @param accessToken - Facebook access token.
         */
        FacebookAuthProvider.credential = function (accessToken) {
            return OAuthCredential._fromParams({
                providerId: FacebookAuthProvider.PROVIDER_ID,
                signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,
                accessToken: accessToken
            });
        };
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link @firebase/auth-types#UserCredential}.
         *
         * @param userCredential - The user credential.
         */
        FacebookAuthProvider.credentialFromResult = function (userCredential) {
            return FacebookAuthProvider.credentialFromTaggedObject(userCredential);
        };
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link @firebase/auth-types#AuthError} which was
         * thrown during a sign-in, link, or reauthenticate operation.
         *
         * @param userCredential - The user credential.
         */
        FacebookAuthProvider.credentialFromError = function (error) {
            return FacebookAuthProvider.credentialFromTaggedObject((error.customData || {}));
        };
        FacebookAuthProvider.credentialFromTaggedObject = function (_a) {
            var tokenResponse = _a._tokenResponse;
            if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {
                return null;
            }
            if (!tokenResponse.oauthAccessToken) {
                return null;
            }
            try {
                return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);
            }
            catch (_b) {
                return null;
            }
        };
        /** Always set to {@link @firebase/auth-types#SignInMethod.FACEBOOK}. */
        FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = "facebook.com" /* FACEBOOK */;
        /** Always set to {@link @firebase/auth-types#ProviderId.FACEBOOK}. */
        FacebookAuthProvider.PROVIDER_ID = "facebook.com" /* FACEBOOK */;
        return FacebookAuthProvider;
    }(OAuthProvider));

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for generating an an {@link OAuthCredential} for {@link @firebase/auth-types#ProviderId.GOOGLE}.
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new GoogleAuthProvider();
     * // Start a sign in process for an unauthenticated user.
     * provider.addScope('profile');
     * provider.addScope('email');
     * await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * if (result) {
     *   // This is the signed-in user
     *   const user = result.user;
     *   // This gives you a Google Access Token.
     *   const credential = provider.credentialFromResult(auth, result);
     *   const token = credential.accessToken;
     * }
     * ```
     *
     * @example
     * ```javascript
     * // Sign in using a popup.
     * const provider = new GoogleAuthProvider();
     * provider.addScope('profile');
     * provider.addScope('email');
     * const result = await signInWithPopup(auth, provider);
     *
     * // The signed-in user info.
     * const user = result.user;
     * // This gives you a Google Access Token.
     * const credential = provider.credentialFromResult(auth, result);
     * const token = credential.accessToken;
     * ```
     *
     * @public
     */
    var GoogleAuthProvider = /** @class */ (function (_super) {
        __extends(GoogleAuthProvider, _super);
        function GoogleAuthProvider() {
            var _this = _super.call(this, "google.com" /* GOOGLE */) || this;
            _this.addScope('profile');
            return _this;
        }
        /**
         * Creates a credential for Google. At least one of ID token and access token is required.
         *
         * @example
         * ```javascript
         * // \`googleUser\` from the onsuccess Google Sign In callback.
         * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);
         * const result = await signInWithCredential(credential);
         * ```
         *
         * @param idToken - Google ID token.
         * @param accessToken - Google access token.
         */
        GoogleAuthProvider.credential = function (idToken, accessToken) {
            return OAuthCredential._fromParams({
                providerId: GoogleAuthProvider.PROVIDER_ID,
                signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,
                idToken: idToken,
                accessToken: accessToken
            });
        };
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link @firebase/auth-types#UserCredential}.
         *
         * @param userCredential - The user credential.
         */
        GoogleAuthProvider.credentialFromResult = function (userCredential) {
            return GoogleAuthProvider.credentialFromTaggedObject(userCredential);
        };
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link @firebase/auth-types#AuthError} which was
         * thrown during a sign-in, link, or reauthenticate operation.
         *
         * @param userCredential - The user credential.
         */
        GoogleAuthProvider.credentialFromError = function (error) {
            return GoogleAuthProvider.credentialFromTaggedObject((error.customData || {}));
        };
        GoogleAuthProvider.credentialFromTaggedObject = function (_a) {
            var tokenResponse = _a._tokenResponse;
            if (!tokenResponse) {
                return null;
            }
            var _b = tokenResponse, oauthIdToken = _b.oauthIdToken, oauthAccessToken = _b.oauthAccessToken;
            if (!oauthIdToken && !oauthAccessToken) {
                // This could be an oauth 1 credential or a phone credential
                return null;
            }
            try {
                return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);
            }
            catch (_c) {
                return null;
            }
        };
        /** Always set to {@link @firebase/auth-types#SignInMethod.GOOGLE}. */
        GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = "google.com" /* GOOGLE */;
        /** Always set to {@link @firebase/auth-types#ProviderId.GOOGLE}. */
        GoogleAuthProvider.PROVIDER_ID = "google.com" /* GOOGLE */;
        return GoogleAuthProvider;
    }(OAuthProvider));

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for generating an {@link OAuthCredential} for {@link @firebase/auth-types#ProviderId.GITHUB}.
     *
     * @remarks
     * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use
     * the {@link signInWithPopup} handler:
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new GithubAuthProvider();
     * // Start a sign in process for an unauthenticated user.
     * provider.addScope('repo');
     * await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * if (result) {
     *   // This is the signed-in user
     *   const user = result.user;
     *   // This gives you a Github Access Token.
     *   const credential = provider.credentialFromResult(auth, result);
     *   const token = credential.accessToken;
     * }
     * ```
     *
     * @example
     * ```javascript
     * // Sign in using a popup.
     * const provider = new GithubAuthProvider();
     * provider.addScope('repo');
     * const result = await signInWithPopup(auth, provider);
     *
     * // The signed-in user info.
     * const user = result.user;
     * // This gives you a Github Access Token.
     * const credential = provider.credentialFromResult(auth, result);
     * const token = credential.accessToken;
     * ```
     * @public
     */
    var GithubAuthProvider = /** @class */ (function (_super) {
        __extends(GithubAuthProvider, _super);
        function GithubAuthProvider() {
            return _super.call(this, "github.com" /* GITHUB */) || this;
        }
        /**
         * Creates a credential for Github.
         *
         * @param accessToken - Github access token.
         */
        GithubAuthProvider.credential = function (accessToken) {
            return OAuthCredential._fromParams({
                providerId: GithubAuthProvider.PROVIDER_ID,
                signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,
                accessToken: accessToken
            });
        };
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link @firebase/auth-types#UserCredential}.
         *
         * @param userCredential - The user credential.
         */
        GithubAuthProvider.credentialFromResult = function (userCredential) {
            return GithubAuthProvider.credentialFromTaggedObject(userCredential);
        };
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link @firebase/auth-types#AuthError} which was
         * thrown during a sign-in, link, or reauthenticate operation.
         *
         * @param userCredential - The user credential.
         */
        GithubAuthProvider.credentialFromError = function (error) {
            return GithubAuthProvider.credentialFromTaggedObject((error.customData || {}));
        };
        GithubAuthProvider.credentialFromTaggedObject = function (_a) {
            var tokenResponse = _a._tokenResponse;
            if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {
                return null;
            }
            if (!tokenResponse.oauthAccessToken) {
                return null;
            }
            try {
                return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);
            }
            catch (_b) {
                return null;
            }
        };
        /** Always set to {@link @firebase/auth-types#SignInMethod.GITHUB}. */
        GithubAuthProvider.GITHUB_SIGN_IN_METHOD = "github.com" /* GITHUB */;
        /** Always set to {@link @firebase/auth-types#ProviderId.GITHUB}. */
        GithubAuthProvider.PROVIDER_ID = "github.com" /* GITHUB */;
        return GithubAuthProvider;
    }(OAuthProvider));

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provider for generating an {@link OAuthCredential} for {@link @firebase/auth-types#ProviderId.TWITTER}.
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new TwitterAuthProvider();
     * // Start a sign in process for an unauthenticated user.
     * await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * if (result) {
     *   // This is the signed-in user
     *   const user = result.user;
     *   // This gives you a Twitter Access Token and Secret.
     *   const credential = provider.credentialFromResult(auth, result);
     *   const token = credential.accessToken;
     *   const secret = credential.secret;
     * }
     * ```
     *
     * @example
     * ```javascript
     * // Sign in using a popup.
     * const provider = new TwitterAuthProvider();
     * const result = await signInWithPopup(auth, provider);
     *
     * // The signed-in user info.
     * const user = result.user;
     * // This gives you a Twitter Access Token and Secret.
     * const credential = provider.credentialFromResult(auth, result);
     * const token = credential.accessToken;
     * const secret = credential.secret;
     * ```
     *
     * @public
     */
    var TwitterAuthProvider = /** @class */ (function (_super) {
        __extends(TwitterAuthProvider, _super);
        function TwitterAuthProvider() {
            return _super.call(this, "twitter.com" /* TWITTER */) || this;
        }
        /**
         * Creates a credential for Twitter.
         *
         * @param token - Twitter access token.
         * @param secret - Twitter secret.
         */
        TwitterAuthProvider.credential = function (token, secret) {
            return OAuthCredential._fromParams({
                providerId: TwitterAuthProvider.PROVIDER_ID,
                signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,
                oauthToken: token,
                oauthTokenSecret: secret
            });
        };
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link @firebase/auth-types#UserCredential}.
         *
         * @param userCredential - The user credential.
         */
        TwitterAuthProvider.credentialFromResult = function (userCredential) {
            return TwitterAuthProvider.credentialFromTaggedObject(userCredential);
        };
        /**
         * Used to extract the underlying {@link OAuthCredential} from a {@link @firebase/auth-types#AuthError} which was
         * thrown during a sign-in, link, or reauthenticate operation.
         *
         * @param userCredential - The user credential.
         */
        TwitterAuthProvider.credentialFromError = function (error) {
            return TwitterAuthProvider.credentialFromTaggedObject((error.customData || {}));
        };
        TwitterAuthProvider.credentialFromTaggedObject = function (_a) {
            var tokenResponse = _a._tokenResponse;
            if (!tokenResponse) {
                return null;
            }
            var _b = tokenResponse, oauthAccessToken = _b.oauthAccessToken, oauthTokenSecret = _b.oauthTokenSecret;
            if (!oauthAccessToken || !oauthTokenSecret) {
                return null;
            }
            try {
                return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);
            }
            catch (_c) {
                return null;
            }
        };
        TwitterAuthProvider.TWITTER_SIGN_IN_METHOD = "twitter.com" /* TWITTER */;
        TwitterAuthProvider.PROVIDER_ID = "twitter.com" /* TWITTER */;
        return TwitterAuthProvider;
    }(OAuthProvider));

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function signUp(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signUp" /* SIGN_UP */, request)];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function deleteAccount(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:delete" /* DELETE_ACCOUNT */, request)];
            });
        });
    }
    function deleteLinkedAccounts(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:update" /* SET_ACCOUNT_INFO */, request)];
            });
        });
    }
    function getAccountInfo(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:lookup" /* GET_ACCOUNT_INFO */, request)];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function utcTimestampToDateString(utcTimestamp) {
        if (!utcTimestamp) {
            return undefined;
        }
        try {
            // Convert to date object.
            var date = new Date(Number(utcTimestamp));
            // Test date is valid.
            if (!isNaN(date.getTime())) {
                // Convert to UTC date string.
                return date.toUTCString();
            }
        }
        catch (e) {
            // Do nothing. undefined will be returned.
        }
        return undefined;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.
     *
     * @remarks
     * Returns the current token if it has not expired or if it will not expire in the next five
     * minutes. Otherwise, this will refresh the token and return a new one.
     *
     * @param user - The user.
     * @param forceRefresh - Force refresh regardless of token expiration.
     *
     * @public
     */
    function getIdToken(user, forceRefresh) {
        if (forceRefresh === void 0) { forceRefresh = false; }
        return user.getIdToken(forceRefresh);
    }
    /**
     * Returns a deserialized JSON Web Token (JWT) used to identitfy the user to a Firebase service.
     *
     * @remarks
     * Returns the current token if it has not expired or if it will not expire in the next five
     * minutes. Otherwise, this will refresh the token and return a new one.
     *
     * @param user - The user.
     * @param forceRefresh - Force refresh regardless of token expiration.
     *
     * @public
     */
    function getIdTokenResult(user, forceRefresh) {
        if (forceRefresh === void 0) { forceRefresh = false; }
        return __awaiter(this, void 0, void 0, function () {
            var userInternal, token, claims, firebase, signInProvider;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userInternal = user;
                        return [4 /*yield*/, user.getIdToken(forceRefresh)];
                    case 1:
                        token = _a.sent();
                        claims = _parseToken(token);
                        _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, "internal-error" /* INTERNAL_ERROR */);
                        firebase = typeof claims.firebase === 'object' ? claims.firebase : undefined;
                        signInProvider = firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_provider'];
                        return [2 /*return*/, {
                                claims: claims,
                                token: token,
                                authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),
                                issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),
                                expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),
                                signInProvider: signInProvider || null,
                                signInSecondFactor: (firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_second_factor']) || null
                            }];
                }
            });
        });
    }
    function secondsStringToMilliseconds(seconds) {
        return Number(seconds) * 1000;
    }
    /** @internal */
    function _parseToken(token) {
        var _a = token.split('.'), algorithm = _a[0], payload = _a[1], signature = _a[2];
        if (algorithm === undefined ||
            payload === undefined ||
            signature === undefined) {
            _logError('JWT malformed, contained fewer than 3 sections');
            return null;
        }
        try {
            var decoded = base64Decode(payload);
            if (!decoded) {
                _logError('Failed to decode base64 JWT payload');
                return null;
            }
            return JSON.parse(decoded);
        }
        catch (e) {
            _logError('Caught error parsing JWT payload as JSON', e);
            return null;
        }
    }
    /**
     * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.
     *
     * @internal
     */
    function _tokenExpiresIn(token) {
        var parsedToken = _parseToken(token);
        _assert(parsedToken, "internal-error" /* INTERNAL_ERROR */);
        _assert(typeof parsedToken.exp !== 'undefined', "internal-error" /* INTERNAL_ERROR */);
        _assert(typeof parsedToken.iat !== 'undefined', "internal-error" /* INTERNAL_ERROR */);
        return Number(parsedToken.exp) - Number(parsedToken.iat);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _logoutIfInvalidated(user, promise, bypassAuthState) {
        if (bypassAuthState === void 0) { bypassAuthState = false; }
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (bypassAuthState) {
                            return [2 /*return*/, promise];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 6]);
                        return [4 /*yield*/, promise];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_1 = _a.sent();
                        if (!(e_1 instanceof FirebaseError && isUserInvalidated(e_1))) return [3 /*break*/, 5];
                        if (!(user.auth.currentUser === user)) return [3 /*break*/, 5];
                        return [4 /*yield*/, user.auth.signOut()];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: throw e_1;
                    case 6: return [2 /*return*/];
                }
            });
        });
    }
    function isUserInvalidated(_a) {
        var code = _a.code;
        return (code === "auth/" + "user-disabled" /* USER_DISABLED */ ||
            code === "auth/" + "user-token-expired" /* TOKEN_EXPIRED */);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ProactiveRefresh = /** @class */ (function () {
        function ProactiveRefresh(user) {
            this.user = user;
            this.isRunning = false;
            // Node timers and browser timers return fundamentally different types.
            // We don't actually care what the value is but TS won't accept unknown and
            // we can't cast properly in both environments.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.timerId = null;
            this.errorBackoff = 30000 /* RETRY_BACKOFF_MIN */;
        }
        ProactiveRefresh.prototype._start = function () {
            if (this.isRunning) {
                return;
            }
            this.isRunning = true;
            this.schedule();
        };
        ProactiveRefresh.prototype._stop = function () {
            if (!this.isRunning) {
                return;
            }
            this.isRunning = false;
            if (this.timerId !== null) {
                clearTimeout(this.timerId);
            }
        };
        ProactiveRefresh.prototype.getInterval = function (wasError) {
            var _a;
            if (wasError) {
                var interval = this.errorBackoff;
                this.errorBackoff = Math.min(this.errorBackoff * 2, 960000 /* RETRY_BACKOFF_MAX */);
                return interval;
            }
            else {
                // Reset the error backoff
                this.errorBackoff = 30000 /* RETRY_BACKOFF_MIN */;
                var expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== void 0 ? _a : 0;
                var interval = expTime - Date.now() - 300000 /* OFFSET */;
                return Math.max(0, interval);
            }
        };
        ProactiveRefresh.prototype.schedule = function (wasError) {
            var _this = this;
            if (wasError === void 0) { wasError = false; }
            if (!this.isRunning) {
                // Just in case...
                return;
            }
            var interval = this.getInterval(wasError);
            this.timerId = setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.iteration()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); }, interval);
        };
        ProactiveRefresh.prototype.iteration = function () {
            return __awaiter(this, void 0, void 0, function () {
                var e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, this.user.getIdToken(true)];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            e_1 = _a.sent();
                            // Only retry on network errors
                            if (e_1.code === "auth/" + "network-request-failed" /* NETWORK_REQUEST_FAILED */) {
                                this.schedule(/* wasError */ true);
                            }
                            return [2 /*return*/];
                        case 3:
                            this.schedule();
                            return [2 /*return*/];
                    }
                });
            });
        };
        return ProactiveRefresh;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var UserMetadata = /** @class */ (function () {
        function UserMetadata(createdAt, lastLoginAt) {
            this.createdAt = createdAt;
            this.lastLoginAt = lastLoginAt;
            this._initializeTime();
        }
        UserMetadata.prototype._initializeTime = function () {
            this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);
            this.creationTime = utcTimestampToDateString(this.createdAt);
        };
        UserMetadata.prototype._copy = function (metadata) {
            this.createdAt = metadata.createdAt;
            this.lastLoginAt = metadata.lastLoginAt;
            this._initializeTime();
        };
        UserMetadata.prototype.toJSON = function () {
            return {
                createdAt: this.createdAt,
                lastLoginAt: this.lastLoginAt
            };
        };
        return UserMetadata;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _reloadWithoutSaving(user) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var auth, idToken, response, coreAccount, newProviderData, providerData, oldIsAnonymous, newIsAnonymous, isAnonymous, updates;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        auth = user.auth;
                        return [4 /*yield*/, user.getIdToken()];
                    case 1:
                        idToken = _b.sent();
                        return [4 /*yield*/, _logoutIfInvalidated(user, getAccountInfo(auth, { idToken: idToken }))];
                    case 2:
                        response = _b.sent();
                        _assert(response === null || response === void 0 ? void 0 : response.users.length, auth, "internal-error" /* INTERNAL_ERROR */);
                        coreAccount = response.users[0];
                        user._notifyReloadListener(coreAccount);
                        newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === void 0 ? void 0 : _a.length) ? extractProviderData(coreAccount.providerUserInfo)
                            : [];
                        providerData = mergeProviderData(user.providerData, newProviderData);
                        oldIsAnonymous = user.isAnonymous;
                        newIsAnonymous = !(user.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);
                        isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;
                        updates = {
                            uid: coreAccount.localId,
                            displayName: coreAccount.displayName || null,
                            photoURL: coreAccount.photoUrl || null,
                            email: coreAccount.email || null,
                            emailVerified: coreAccount.emailVerified || false,
                            phoneNumber: coreAccount.phoneNumber || null,
                            tenantId: coreAccount.tenantId || null,
                            providerData: providerData,
                            metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),
                            isAnonymous: isAnonymous
                        };
                        Object.assign(user, updates);
                        return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Reloads user account data, if signed in.
     *
     * @param user - The user.
     *
     * @public
     */
    function reload(user) {
        return __awaiter(this, void 0, void 0, function () {
            var userInternal;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userInternal = user;
                        return [4 /*yield*/, _reloadWithoutSaving(userInternal)];
                    case 1:
                        _a.sent();
                        // Even though the current user hasn't changed, update
                        // current user will trigger a persistence update w/ the
                        // new info.
                        return [4 /*yield*/, userInternal.auth._persistUserIfCurrent(userInternal)];
                    case 2:
                        // Even though the current user hasn't changed, update
                        // current user will trigger a persistence update w/ the
                        // new info.
                        _a.sent();
                        userInternal.auth._notifyListenersIfCurrent(userInternal);
                        return [2 /*return*/];
                }
            });
        });
    }
    function mergeProviderData(original, newData) {
        var deduped = original.filter(function (o) { return !newData.some(function (n) { return n.providerId === o.providerId; }); });
        return __spreadArrays(deduped, newData);
    }
    function extractProviderData(providers) {
        return providers.map(function (_a) {
            var providerId = _a.providerId, provider = __rest(_a, ["providerId"]);
            return {
                providerId: providerId,
                uid: provider.rawId || '',
                displayName: provider.displayName || null,
                email: provider.email || null,
                phoneNumber: provider.phoneNumber || null,
                photoURL: provider.photoUrl || null
            };
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function requestStsToken(auth, refreshToken) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _performFetchWithErrorHandling(auth, {}, function () {
                            var body = querystring({
                                'grant_type': 'refresh_token',
                                'refresh_token': refreshToken
                            }).slice(1);
                            var _a = auth.config, tokenApiHost = _a.tokenApiHost, apiKey = _a.apiKey, sdkClientVersion = _a.sdkClientVersion;
                            var url = _getFinalTarget(auth, tokenApiHost, "/v1/token" /* TOKEN */, "key=" + apiKey);
                            return FetchProvider.fetch()(url, {
                                method: "POST" /* POST */,
                                headers: {
                                    'X-Client-Version': sdkClientVersion,
                                    'Content-Type': 'application/x-www-form-urlencoded'
                                },
                                body: body
                            });
                        })];
                    case 1:
                        response = _a.sent();
                        // The response comes back in snake_case. Convert to camel:
                        return [2 /*return*/, {
                                accessToken: response.access_token,
                                expiresIn: response.expires_in,
                                refreshToken: response.refresh_token
                            }];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var StsTokenManager = /** @class */ (function () {
        function StsTokenManager() {
            this.refreshToken = null;
            this.accessToken = null;
            this.expirationTime = null;
        }
        Object.defineProperty(StsTokenManager.prototype, "isExpired", {
            get: function () {
                return (!this.expirationTime ||
                    Date.now() > this.expirationTime - 30000 /* TOKEN_REFRESH */);
            },
            enumerable: false,
            configurable: true
        });
        StsTokenManager.prototype.updateFromServerResponse = function (response) {
            _assert(response.idToken, "internal-error" /* INTERNAL_ERROR */);
            _assert(typeof response.idToken !== 'undefined', "internal-error" /* INTERNAL_ERROR */);
            _assert(typeof response.refreshToken !== 'undefined', "internal-error" /* INTERNAL_ERROR */);
            var expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined'
                ? Number(response.expiresIn)
                : _tokenExpiresIn(response.idToken);
            this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);
        };
        StsTokenManager.prototype.getToken = function (auth, forceRefresh) {
            if (forceRefresh === void 0) { forceRefresh = false; }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _assert(!this.accessToken || this.refreshToken, auth, "user-token-expired" /* TOKEN_EXPIRED */);
                            if (!forceRefresh && this.accessToken && !this.isExpired) {
                                return [2 /*return*/, this.accessToken];
                            }
                            if (!this.refreshToken) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.refresh(auth, this.refreshToken)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, this.accessToken];
                        case 2: return [2 /*return*/, null];
                    }
                });
            });
        };
        StsTokenManager.prototype.clearRefreshToken = function () {
            this.refreshToken = null;
        };
        StsTokenManager.prototype.refresh = function (auth, oldToken) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, accessToken, refreshToken, expiresIn;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, requestStsToken(auth, oldToken)];
                        case 1:
                            _a = _b.sent(), accessToken = _a.accessToken, refreshToken = _a.refreshToken, expiresIn = _a.expiresIn;
                            this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));
                            return [2 /*return*/];
                    }
                });
            });
        };
        StsTokenManager.prototype.updateTokensAndExpiration = function (accessToken, refreshToken, expiresInSec) {
            this.refreshToken = refreshToken || null;
            this.accessToken = accessToken || null;
            this.expirationTime = Date.now() + expiresInSec * 1000;
        };
        StsTokenManager.fromJSON = function (appName, object) {
            var refreshToken = object.refreshToken, accessToken = object.accessToken, expirationTime = object.expirationTime;
            var manager = new StsTokenManager();
            if (refreshToken) {
                _assert(typeof refreshToken === 'string', "internal-error" /* INTERNAL_ERROR */, {
                    appName: appName
                });
                manager.refreshToken = refreshToken;
            }
            if (accessToken) {
                _assert(typeof accessToken === 'string', "internal-error" /* INTERNAL_ERROR */, {
                    appName: appName
                });
                manager.accessToken = accessToken;
            }
            if (expirationTime) {
                _assert(typeof expirationTime === 'number', "internal-error" /* INTERNAL_ERROR */, {
                    appName: appName
                });
                manager.expirationTime = expirationTime;
            }
            return manager;
        };
        StsTokenManager.prototype.toJSON = function () {
            return {
                refreshToken: this.refreshToken,
                accessToken: this.accessToken,
                expirationTime: this.expirationTime
            };
        };
        StsTokenManager.prototype._assign = function (stsTokenManager) {
            this.accessToken = stsTokenManager.accessToken;
            this.refreshToken = stsTokenManager.refreshToken;
            this.expirationTime = stsTokenManager.expirationTime;
        };
        StsTokenManager.prototype._clone = function () {
            return Object.assign(new StsTokenManager(), this.toJSON());
        };
        StsTokenManager.prototype._performRefresh = function () {
            return debugFail('not implemented');
        };
        return StsTokenManager;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function assertStringOrUndefined(assertion, appName) {
        _assert(typeof assertion === 'string' || typeof assertion === 'undefined', "internal-error" /* INTERNAL_ERROR */, { appName: appName });
    }
    var UserImpl = /** @class */ (function () {
        function UserImpl(_a) {
            var uid = _a.uid, auth = _a.auth, stsTokenManager = _a.stsTokenManager, opt = __rest(_a, ["uid", "auth", "stsTokenManager"]);
            // For the user object, provider is always Firebase.
            this.providerId = "firebase" /* FIREBASE */;
            this.emailVerified = false;
            this.isAnonymous = false;
            this.tenantId = null;
            this.providerData = [];
            this.proactiveRefresh = new ProactiveRefresh(this);
            this.reloadUserInfo = null;
            this.reloadListener = null;
            this.uid = uid;
            this.auth = auth;
            this.stsTokenManager = stsTokenManager;
            this.accessToken = stsTokenManager.accessToken;
            this.displayName = opt.displayName || null;
            this.email = opt.email || null;
            this.phoneNumber = opt.phoneNumber || null;
            this.photoURL = opt.photoURL || null;
            this.isAnonymous = opt.isAnonymous || false;
            this.metadata = new UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);
        }
        UserImpl.prototype.getIdToken = function (forceRefresh) {
            return __awaiter(this, void 0, void 0, function () {
                var accessToken;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh))];
                        case 1:
                            accessToken = _a.sent();
                            _assert(accessToken, this.auth, "internal-error" /* INTERNAL_ERROR */);
                            if (!(this.accessToken !== accessToken)) return [3 /*break*/, 3];
                            this.accessToken = accessToken;
                            return [4 /*yield*/, this.auth._persistUserIfCurrent(this)];
                        case 2:
                            _a.sent();
                            this.auth._notifyListenersIfCurrent(this);
                            _a.label = 3;
                        case 3: return [2 /*return*/, accessToken];
                    }
                });
            });
        };
        UserImpl.prototype.getIdTokenResult = function (forceRefresh) {
            return getIdTokenResult(this, forceRefresh);
        };
        UserImpl.prototype.reload = function () {
            return reload(this);
        };
        UserImpl.prototype._assign = function (user) {
            if (this === user) {
                return;
            }
            _assert(this.uid === user.uid, this.auth, "internal-error" /* INTERNAL_ERROR */);
            this.displayName = user.displayName;
            this.photoURL = user.photoURL;
            this.email = user.email;
            this.emailVerified = user.emailVerified;
            this.phoneNumber = user.phoneNumber;
            this.isAnonymous = user.isAnonymous;
            this.tenantId = user.tenantId;
            this.providerData = user.providerData.map(function (userInfo) { return (__assign({}, userInfo)); });
            this.metadata._copy(user.metadata);
            this.stsTokenManager._assign(user.stsTokenManager);
        };
        UserImpl.prototype._clone = function () {
            return new UserImpl(__assign(__assign({}, this), { stsTokenManager: this.stsTokenManager._clone() }));
        };
        UserImpl.prototype._onReload = function (callback) {
            // There should only ever be one listener, and that is a single instance of MultiFactorUser
            _assert(!this.reloadListener, this.auth, "internal-error" /* INTERNAL_ERROR */);
            this.reloadListener = callback;
            if (this.reloadUserInfo) {
                this._notifyReloadListener(this.reloadUserInfo);
                this.reloadUserInfo = null;
            }
        };
        UserImpl.prototype._notifyReloadListener = function (userInfo) {
            if (this.reloadListener) {
                this.reloadListener(userInfo);
            }
            else {
                // If no listener is subscribed yet, save the result so it's available when they do subscribe
                this.reloadUserInfo = userInfo;
            }
        };
        UserImpl.prototype._startProactiveRefresh = function () {
            this.proactiveRefresh._start();
        };
        UserImpl.prototype._stopProactiveRefresh = function () {
            this.proactiveRefresh._stop();
        };
        UserImpl.prototype._updateTokensIfNecessary = function (response, reload) {
            if (reload === void 0) { reload = false; }
            return __awaiter(this, void 0, void 0, function () {
                var tokensRefreshed;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            tokensRefreshed = false;
                            if (response.idToken &&
                                response.idToken !== this.stsTokenManager.accessToken) {
                                this.stsTokenManager.updateFromServerResponse(response);
                                tokensRefreshed = true;
                            }
                            if (!reload) return [3 /*break*/, 2];
                            return [4 /*yield*/, _reloadWithoutSaving(this)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [4 /*yield*/, this.auth._persistUserIfCurrent(this)];
                        case 3:
                            _a.sent();
                            if (tokensRefreshed) {
                                this.auth._notifyListenersIfCurrent(this);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        UserImpl.prototype.delete = function () {
            return __awaiter(this, void 0, void 0, function () {
                var idToken;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getIdToken()];
                        case 1:
                            idToken = _a.sent();
                            return [4 /*yield*/, _logoutIfInvalidated(this, deleteAccount(this.auth, { idToken: idToken }))];
                        case 2:
                            _a.sent();
                            this.stsTokenManager.clearRefreshToken();
                            // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()
                            //       cancels pending actions...
                            return [2 /*return*/, this.auth.signOut()];
                    }
                });
            });
        };
        UserImpl.prototype.toJSON = function () {
            return __assign({ uid: this.uid, email: this.email || undefined, emailVerified: this.emailVerified, displayName: this.displayName || undefined, isAnonymous: this.isAnonymous, photoURL: this.photoURL || undefined, phoneNumber: this.phoneNumber || undefined, tenantId: this.tenantId || undefined, providerData: this.providerData.map(function (userInfo) { return (__assign({}, userInfo)); }), stsTokenManager: this.stsTokenManager.toJSON(), 
                // Redirect event ID must be maintained in case there is a pending
                // redirect event.
                _redirectEventId: this._redirectEventId }, this.metadata.toJSON());
        };
        Object.defineProperty(UserImpl.prototype, "refreshToken", {
            get: function () {
                return this.stsTokenManager.refreshToken || '';
            },
            enumerable: false,
            configurable: true
        });
        UserImpl._fromJSON = function (auth, object) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            var displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : undefined;
            var email = (_b = object.email) !== null && _b !== void 0 ? _b : undefined;
            var phoneNumber = (_c = object.phoneNumber) !== null && _c !== void 0 ? _c : undefined;
            var photoURL = (_d = object.photoURL) !== null && _d !== void 0 ? _d : undefined;
            var tenantId = (_e = object.tenantId) !== null && _e !== void 0 ? _e : undefined;
            var _redirectEventId = (_f = object._redirectEventId) !== null && _f !== void 0 ? _f : undefined;
            var createdAt = (_g = object.createdAt) !== null && _g !== void 0 ? _g : undefined;
            var lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== void 0 ? _h : undefined;
            var uid = object.uid, emailVerified = object.emailVerified, isAnonymous = object.isAnonymous, providerData = object.providerData, plainObjectTokenManager = object.stsTokenManager;
            _assert(uid && plainObjectTokenManager, auth, "internal-error" /* INTERNAL_ERROR */);
            var stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);
            _assert(typeof uid === 'string', auth, "internal-error" /* INTERNAL_ERROR */);
            assertStringOrUndefined(displayName, auth.name);
            assertStringOrUndefined(email, auth.name);
            _assert(typeof emailVerified === 'boolean', auth, "internal-error" /* INTERNAL_ERROR */);
            _assert(typeof isAnonymous === 'boolean', auth, "internal-error" /* INTERNAL_ERROR */);
            assertStringOrUndefined(phoneNumber, auth.name);
            assertStringOrUndefined(photoURL, auth.name);
            assertStringOrUndefined(tenantId, auth.name);
            assertStringOrUndefined(_redirectEventId, auth.name);
            assertStringOrUndefined(createdAt, auth.name);
            assertStringOrUndefined(lastLoginAt, auth.name);
            var user = new UserImpl({
                uid: uid,
                auth: auth,
                email: email,
                emailVerified: emailVerified,
                displayName: displayName,
                isAnonymous: isAnonymous,
                photoURL: photoURL,
                phoneNumber: phoneNumber,
                tenantId: tenantId,
                stsTokenManager: stsTokenManager,
                createdAt: createdAt,
                lastLoginAt: lastLoginAt
            });
            if (providerData && Array.isArray(providerData)) {
                user.providerData = providerData.map(function (userInfo) { return (__assign({}, userInfo)); });
            }
            if (_redirectEventId) {
                user._redirectEventId = _redirectEventId;
            }
            return user;
        };
        /**
         * Initialize a User from an idToken server response
         * @param auth
         * @param idTokenResponse
         */
        UserImpl._fromIdTokenResponse = function (auth, idTokenResponse, isAnonymous) {
            if (isAnonymous === void 0) { isAnonymous = false; }
            return __awaiter(this, void 0, void 0, function () {
                var stsTokenManager, user;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            stsTokenManager = new StsTokenManager();
                            stsTokenManager.updateFromServerResponse(idTokenResponse);
                            user = new UserImpl({
                                uid: idTokenResponse.localId,
                                auth: auth,
                                stsTokenManager: stsTokenManager,
                                isAnonymous: isAnonymous
                            });
                            // Updates the user info and data and resolves with a user instance.
                            return [4 /*yield*/, _reloadWithoutSaving(user)];
                        case 1:
                            // Updates the user info and data and resolves with a user instance.
                            _a.sent();
                            return [2 /*return*/, user];
                    }
                });
            });
        };
        return UserImpl;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var UserCredentialImpl = /** @class */ (function () {
        function UserCredentialImpl(params) {
            this.user = params.user;
            this.providerId = params.providerId;
            this._tokenResponse = params._tokenResponse;
            this.operationType = params.operationType;
        }
        UserCredentialImpl._fromIdTokenResponse = function (auth, operationType, idTokenResponse, isAnonymous) {
            if (isAnonymous === void 0) { isAnonymous = false; }
            return __awaiter(this, void 0, void 0, function () {
                var user, providerId, userCred;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous)];
                        case 1:
                            user = _a.sent();
                            providerId = providerIdForResponse(idTokenResponse);
                            userCred = new UserCredentialImpl({
                                user: user,
                                providerId: providerId,
                                _tokenResponse: idTokenResponse,
                                operationType: operationType
                            });
                            return [2 /*return*/, userCred];
                    }
                });
            });
        };
        UserCredentialImpl._forOperation = function (user, operationType, response) {
            return __awaiter(this, void 0, void 0, function () {
                var providerId;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, user._updateTokensIfNecessary(response, /* reload */ true)];
                        case 1:
                            _a.sent();
                            providerId = providerIdForResponse(response);
                            return [2 /*return*/, new UserCredentialImpl({
                                    user: user,
                                    providerId: providerId,
                                    _tokenResponse: response,
                                    operationType: operationType
                                })];
                    }
                });
            });
        };
        return UserCredentialImpl;
    }());
    function providerIdForResponse(response) {
        if (response.providerId) {
            return response.providerId;
        }
        if ('phoneNumber' in response) {
            return "phone" /* PHONE */;
        }
        return null;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _persistenceKeyName(key, apiKey, appName) {
        return "firebase" /* PERSISTENCE */ + ":" + key + ":" + apiKey + ":" + appName;
    }
    var PersistenceUserManager = /** @class */ (function () {
        function PersistenceUserManager(persistence, auth, userKey) {
            this.persistence = persistence;
            this.auth = auth;
            this.userKey = userKey;
            var _a = this.auth, config = _a.config, name = _a.name;
            this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);
            this.fullPersistenceKey = _persistenceKeyName("persistence" /* PERSISTENCE_USER */, config.apiKey, name);
            this.boundEventHandler = auth._onStorageEvent.bind(auth);
            this.persistence._addListener(this.fullUserKey, this.boundEventHandler);
        }
        PersistenceUserManager.prototype.setCurrentUser = function (user) {
            return this.persistence._set(this.fullUserKey, user.toJSON());
        };
        PersistenceUserManager.prototype.getCurrentUser = function () {
            return __awaiter(this, void 0, void 0, function () {
                var blob;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.persistence._get(this.fullUserKey)];
                        case 1:
                            blob = _a.sent();
                            return [2 /*return*/, blob ? UserImpl._fromJSON(this.auth, blob) : null];
                    }
                });
            });
        };
        PersistenceUserManager.prototype.removeCurrentUser = function () {
            return this.persistence._remove(this.fullUserKey);
        };
        PersistenceUserManager.prototype.savePersistenceForRedirect = function () {
            return this.persistence._set(this.fullPersistenceKey, this.persistence.type);
        };
        PersistenceUserManager.prototype.setPersistence = function (newPersistence) {
            return __awaiter(this, void 0, void 0, function () {
                var currentUser;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.persistence.type === newPersistence.type) {
                                return [2 /*return*/];
                            }
                            return [4 /*yield*/, this.getCurrentUser()];
                        case 1:
                            currentUser = _a.sent();
                            return [4 /*yield*/, this.removeCurrentUser()];
                        case 2:
                            _a.sent();
                            this.persistence = newPersistence;
                            if (currentUser) {
                                return [2 /*return*/, this.setCurrentUser(currentUser)];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        PersistenceUserManager.prototype.delete = function () {
            this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);
        };
        PersistenceUserManager.create = function (auth, persistenceHierarchy, userKey) {
            if (userKey === void 0) { userKey = "authUser" /* AUTH_USER */; }
            return __awaiter(this, void 0, void 0, function () {
                var key, _i, persistenceHierarchy_1, persistence;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!persistenceHierarchy.length) {
                                return [2 /*return*/, new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey)];
                            }
                            key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);
                            _i = 0, persistenceHierarchy_1 = persistenceHierarchy;
                            _a.label = 1;
                        case 1:
                            if (!(_i < persistenceHierarchy_1.length)) return [3 /*break*/, 4];
                            persistence = persistenceHierarchy_1[_i];
                            return [4 /*yield*/, persistence._get(key)];
                        case 2:
                            if (_a.sent()) {
                                return [2 /*return*/, new PersistenceUserManager(persistence, auth, userKey)];
                            }
                            _a.label = 3;
                        case 3:
                            _i++;
                            return [3 /*break*/, 1];
                        case 4: 
                        // Check all the available storage options.
                        // TODO: Migrate from local storage to indexedDB
                        // TODO: Clear other forms once one is found
                        // All else failed, fall back to zeroth persistence
                        // TODO: Modify this to support non-browser devices
                        return [2 /*return*/, new PersistenceUserManager(persistenceHierarchy[0], auth, userKey)];
                    }
                });
            });
        };
        return PersistenceUserManager;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var AuthImpl = /** @class */ (function () {
        function AuthImpl(app, config) {
            this.app = app;
            this.config = config;
            this.currentUser = null;
            this.operations = Promise.resolve();
            this.authStateSubscription = new Subscription(this);
            this.idTokenSubscription = new Subscription(this);
            this.redirectUser = null;
            this.isProactiveRefreshEnabled = false;
            this.redirectInitializerError = null;
            // Any network calls will set this to true and prevent subsequent emulator
            // initialization
            this._canInitEmulator = true;
            this._isInitialized = false;
            this._deleted = false;
            this._initializationPromise = null;
            this._popupRedirectResolver = null;
            this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;
            // Tracks the last notified UID for state change listeners to prevent
            // repeated calls to the callbacks
            this.lastNotifiedUid = undefined;
            this.languageCode = null;
            this.tenantId = null;
            this.settings = { appVerificationDisabledForTesting: false };
            this.name = app.name;
        }
        AuthImpl.prototype._initializeWithPersistence = function (persistenceHierarchy, popupRedirectResolver) {
            var _this = this;
            // Have to check for app deletion throughout initialization (after each
            // promise resolution)
            this._initializationPromise = this.queue(function () { return __awaiter(_this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (this._deleted) {
                                return [2 /*return*/];
                            }
                            if (popupRedirectResolver) {
                                this._popupRedirectResolver = _getInstance(popupRedirectResolver);
                            }
                            _a = this;
                            return [4 /*yield*/, PersistenceUserManager.create(this, persistenceHierarchy)];
                        case 1:
                            _a.persistenceManager = _b.sent();
                            if (this._deleted) {
                                return [2 /*return*/];
                            }
                            return [4 /*yield*/, this.initializeCurrentUser(popupRedirectResolver)];
                        case 2:
                            _b.sent();
                            if (this._deleted) {
                                return [2 /*return*/];
                            }
                            this._isInitialized = true;
                            return [2 /*return*/];
                    }
                });
            }); });
            // After initialization completes, throw any error caused by redirect flow
            return this._initializationPromise.then(function () {
                if (_this.redirectInitializerError) {
                    throw _this.redirectInitializerError;
                }
            });
        };
        /**
         * If the persistence is changed in another window, the user manager will let us know
         */
        AuthImpl.prototype._onStorageEvent = function () {
            return __awaiter(this, void 0, void 0, function () {
                var user;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this._deleted) {
                                return [2 /*return*/];
                            }
                            return [4 /*yield*/, this.assertedPersistence.getCurrentUser()];
                        case 1:
                            user = _a.sent();
                            if (!this.currentUser && !user) {
                                // No change, do nothing (was signed out and remained signed out).
                                return [2 /*return*/];
                            }
                            if (!(this.currentUser && user && this.currentUser.uid === user.uid)) return [3 /*break*/, 3];
                            // Data update, simply copy data changes.
                            this._currentUser._assign(user);
                            // If tokens changed from previous user tokens, this will trigger
                            // notifyAuthListeners_.
                            return [4 /*yield*/, this.currentUser.getIdToken()];
                        case 2:
                            // If tokens changed from previous user tokens, this will trigger
                            // notifyAuthListeners_.
                            _a.sent();
                            return [2 /*return*/];
                        case 3: 
                        // Update current Auth state. Either a new login or logout.
                        return [4 /*yield*/, this._updateCurrentUser(user)];
                        case 4:
                            // Update current Auth state. Either a new login or logout.
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        AuthImpl.prototype.initializeCurrentUser = function (popupRedirectResolver) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var storedUser, redirectUserEventId, storedUserEventId, result;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.assertedPersistence.getCurrentUser()];
                        case 1:
                            storedUser = (_b.sent());
                            if (!(popupRedirectResolver && this.config.authDomain)) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.getOrInitRedirectPersistenceManager()];
                        case 2:
                            _b.sent();
                            redirectUserEventId = (_a = this.redirectUser) === null || _a === void 0 ? void 0 : _a._redirectEventId;
                            storedUserEventId = storedUser === null || storedUser === void 0 ? void 0 : storedUser._redirectEventId;
                            return [4 /*yield*/, this.tryRedirectSignIn(popupRedirectResolver)];
                        case 3:
                            result = _b.sent();
                            // If the stored user (i.e. the old "currentUser") has a redirectId that
                            // matches the redirect user, then we want to initially sign in with the
                            // new user object from result.
                            // TODO(samgho): More thoroughly test all of this
                            if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && (result === null || result === void 0 ? void 0 : result.user)) {
                                storedUser = result.user;
                            }
                            _b.label = 4;
                        case 4:
                            // If no user in persistence, there is no current user. Set to null.
                            if (!storedUser) {
                                return [2 /*return*/, this.directlySetCurrentUser(null)];
                            }
                            if (!storedUser._redirectEventId) {
                                // This isn't a redirect user, we can reload and bail
                                // This will also catch the redirected user, if available, as that method
                                // strips the _redirectEventId
                                return [2 /*return*/, this.reloadAndSetCurrentUserOrClear(storedUser)];
                            }
                            _assert(this._popupRedirectResolver, this, "argument-error" /* ARGUMENT_ERROR */);
                            return [4 /*yield*/, this.getOrInitRedirectPersistenceManager()];
                        case 5:
                            _b.sent();
                            // If the redirect user's event ID matches the current user's event ID,
                            // DO NOT reload the current user, otherwise they'll be cleared from storage.
                            // This is important for the reauthenticateWithRedirect() flow.
                            if (this.redirectUser &&
                                this.redirectUser._redirectEventId === storedUser._redirectEventId) {
                                return [2 /*return*/, this.directlySetCurrentUser(storedUser)];
                            }
                            return [2 /*return*/, this.reloadAndSetCurrentUserOrClear(storedUser)];
                    }
                });
            });
        };
        AuthImpl.prototype.tryRedirectSignIn = function (redirectResolver) {
            return __awaiter(this, void 0, void 0, function () {
                var result, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            result = null;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 5]);
                            return [4 /*yield*/, this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true)];
                        case 2:
                            // We know this._popupRedirectResolver is set since redirectResolver
                            // is passed in. The _completeRedirectFn expects the unwrapped extern.
                            result = _a.sent();
                            return [3 /*break*/, 5];
                        case 3:
                            e_1 = _a.sent();
                            this.redirectInitializerError = e_1;
                            return [4 /*yield*/, this._setRedirectUser(null)];
                        case 4:
                            _a.sent();
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/, result];
                    }
                });
            });
        };
        AuthImpl.prototype.reloadAndSetCurrentUserOrClear = function (user) {
            return __awaiter(this, void 0, void 0, function () {
                var e_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, _reloadWithoutSaving(user)];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 3];
                        case 2:
                            e_2 = _a.sent();
                            if (e_2.code !== "auth/" + "network-request-failed" /* NETWORK_REQUEST_FAILED */) {
                                // Something's wrong with the user's token. Log them out and remove
                                // them from storage
                                return [2 /*return*/, this.directlySetCurrentUser(null)];
                            }
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/, this.directlySetCurrentUser(user)];
                    }
                });
            });
        };
        AuthImpl.prototype.useDeviceLanguage = function () {
            this.languageCode = _getUserLanguage();
        };
        AuthImpl.prototype.useEmulator = function (url, options) {
            _assert(this._canInitEmulator, this, "emulator-config-failed" /* EMULATOR_CONFIG_FAILED */);
            _assert(/^https?:\/\//.test(url), this, "invalid-emulator-scheme" /* INVALID_EMULATOR_SCHEME */);
            this.config.emulator = { url: url };
            this.settings.appVerificationDisabledForTesting = true;
            emitEmulatorWarning(!!(options === null || options === void 0 ? void 0 : options.disableWarnings));
        };
        AuthImpl.prototype._delete = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this._deleted = true;
                    return [2 /*return*/];
                });
            });
        };
        AuthImpl.prototype.updateCurrentUser = function (userExtern) {
            return __awaiter(this, void 0, void 0, function () {
                var user;
                return __generator(this, function (_a) {
                    user = userExtern;
                    _assert(!user || user.auth.name === this.name, this, "argument-error" /* ARGUMENT_ERROR */);
                    return [2 /*return*/, this._updateCurrentUser(user && user._clone())];
                });
            });
        };
        AuthImpl.prototype._updateCurrentUser = function (user) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    if (this._deleted) {
                        return [2 /*return*/];
                    }
                    if (user) {
                        _assert(this.tenantId === user.tenantId, this, "tenant-id-mismatch" /* TENANT_ID_MISMATCH */);
                    }
                    return [2 /*return*/, this.queue(function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this.directlySetCurrentUser(user)];
                                    case 1:
                                        _a.sent();
                                        this.notifyAuthListeners();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                });
            });
        };
        AuthImpl.prototype.signOut = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(this.redirectPersistenceManager || this._popupRedirectResolver)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this._setRedirectUser(null)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [2 /*return*/, this._updateCurrentUser(null)];
                    }
                });
            });
        };
        AuthImpl.prototype.setPersistence = function (persistence) {
            var _this = this;
            return this.queue(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.assertedPersistence.setPersistence(_getInstance(persistence))];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); });
        };
        AuthImpl.prototype._getPersistence = function () {
            return this.assertedPersistence.persistence.type;
        };
        AuthImpl.prototype._updateErrorMap = function (errorMap) {
            this._errorFactory = new ErrorFactory('auth', 'Firebase', errorMap());
        };
        AuthImpl.prototype.onAuthStateChanged = function (nextOrObserver, error, completed) {
            return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);
        };
        AuthImpl.prototype.onIdTokenChanged = function (nextOrObserver, error, completed) {
            return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);
        };
        AuthImpl.prototype.toJSON = function () {
            var _a;
            return {
                apiKey: this.config.apiKey,
                authDomain: this.config.authDomain,
                appName: this.name,
                currentUser: (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.toJSON()
            };
        };
        AuthImpl.prototype._setRedirectUser = function (user, popupRedirectResolver) {
            return __awaiter(this, void 0, void 0, function () {
                var redirectManager;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getOrInitRedirectPersistenceManager(popupRedirectResolver)];
                        case 1:
                            redirectManager = _a.sent();
                            return [2 /*return*/, user === null
                                    ? redirectManager.removeCurrentUser()
                                    : redirectManager.setCurrentUser(user)];
                    }
                });
            });
        };
        AuthImpl.prototype.getOrInitRedirectPersistenceManager = function (popupRedirectResolver) {
            return __awaiter(this, void 0, void 0, function () {
                var resolver, _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!!this.redirectPersistenceManager) return [3 /*break*/, 3];
                            resolver = (popupRedirectResolver && _getInstance(popupRedirectResolver)) ||
                                this._popupRedirectResolver;
                            _assert(resolver, this, "argument-error" /* ARGUMENT_ERROR */);
                            _a = this;
                            return [4 /*yield*/, PersistenceUserManager.create(this, [_getInstance(resolver._redirectPersistence)], "redirectUser" /* REDIRECT_USER */)];
                        case 1:
                            _a.redirectPersistenceManager = _c.sent();
                            _b = this;
                            return [4 /*yield*/, this.redirectPersistenceManager.getCurrentUser()];
                        case 2:
                            _b.redirectUser = _c.sent();
                            _c.label = 3;
                        case 3: return [2 /*return*/, this.redirectPersistenceManager];
                    }
                });
            });
        };
        AuthImpl.prototype._redirectUserForId = function (id) {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            if (!this._isInitialized) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.queue(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                    return [2 /*return*/];
                                }); }); })];
                        case 1:
                            _c.sent();
                            _c.label = 2;
                        case 2:
                            if (((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a._redirectEventId) === id) {
                                return [2 /*return*/, this._currentUser];
                            }
                            if (((_b = this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id) {
                                return [2 /*return*/, this.redirectUser];
                            }
                            return [2 /*return*/, null];
                    }
                });
            });
        };
        AuthImpl.prototype._persistUserIfCurrent = function (user) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    if (user === this.currentUser) {
                        return [2 /*return*/, this.queue(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                return [2 /*return*/, this.directlySetCurrentUser(user)];
                            }); }); })];
                    }
                    return [2 /*return*/];
                });
            });
        };
        /** Notifies listeners only if the user is current */
        AuthImpl.prototype._notifyListenersIfCurrent = function (user) {
            if (user === this.currentUser) {
                this.notifyAuthListeners();
            }
        };
        AuthImpl.prototype._key = function () {
            return this.config.authDomain + ":" + this.config.apiKey + ":" + this.name;
        };
        AuthImpl.prototype._startProactiveRefresh = function () {
            this.isProactiveRefreshEnabled = true;
            if (this.currentUser) {
                this._currentUser._startProactiveRefresh();
            }
        };
        AuthImpl.prototype._stopProactiveRefresh = function () {
            this.isProactiveRefreshEnabled = false;
            if (this.currentUser) {
                this._currentUser._stopProactiveRefresh();
            }
        };
        Object.defineProperty(AuthImpl.prototype, "_currentUser", {
            /** Returns the current user cast as the internal type */
            get: function () {
                return this.currentUser;
            },
            enumerable: false,
            configurable: true
        });
        AuthImpl.prototype.notifyAuthListeners = function () {
            var _a, _b;
            if (!this._isInitialized) {
                return;
            }
            this.idTokenSubscription.next(this.currentUser);
            if (this.lastNotifiedUid !== ((_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.uid)) {
                this.lastNotifiedUid = (_b = this.currentUser) === null || _b === void 0 ? void 0 : _b.uid;
                this.authStateSubscription.next(this.currentUser);
            }
        };
        AuthImpl.prototype.registerStateListener = function (subscription, nextOrObserver, error, completed) {
            var _this = this;
            if (this._deleted) {
                return function () { };
            }
            var cb = typeof nextOrObserver === 'function'
                ? nextOrObserver
                : nextOrObserver.next;
            var promise = this._isInitialized
                ? Promise.resolve()
                : this._initializationPromise;
            _assert(promise, this, "internal-error" /* INTERNAL_ERROR */);
            // The callback needs to be called asynchronously per the spec.
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            promise.then(function () { return cb(_this.currentUser); });
            if (typeof nextOrObserver === 'function') {
                return subscription.addObserver(nextOrObserver, error, completed);
            }
            else {
                return subscription.addObserver(nextOrObserver);
            }
        };
        /**
         * Unprotected (from race conditions) method to set the current user. This
         * should only be called from within a queued callback. This is necessary
         * because the queue shouldn't rely on another queued callback.
         */
        AuthImpl.prototype.directlySetCurrentUser = function (user) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.currentUser && this.currentUser !== user) {
                                this._currentUser._stopProactiveRefresh();
                                if (user && this.isProactiveRefreshEnabled) {
                                    user._startProactiveRefresh();
                                }
                            }
                            this.currentUser = user;
                            if (!user) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.assertedPersistence.setCurrentUser(user)];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 2: return [4 /*yield*/, this.assertedPersistence.removeCurrentUser()];
                        case 3:
                            _a.sent();
                            _a.label = 4;
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        AuthImpl.prototype.queue = function (action) {
            // In case something errors, the callback still should be called in order
            // to keep the promise chain alive
            this.operations = this.operations.then(action, action);
            return this.operations;
        };
        Object.defineProperty(AuthImpl.prototype, "assertedPersistence", {
            get: function () {
                _assert(this.persistenceManager, this, "internal-error" /* INTERNAL_ERROR */);
                return this.persistenceManager;
            },
            enumerable: false,
            configurable: true
        });
        return AuthImpl;
    }());
    /**
     * Method to be used to cast down to our private implmentation of Auth
     *
     * @param auth Auth object passed in from developer
     */
    function _castAuth(auth) {
        return auth;
    }
    /** Helper class to wrap subscriber logic */
    var Subscription = /** @class */ (function () {
        function Subscription(auth) {
            var _this = this;
            this.auth = auth;
            this.observer = null;
            this.addObserver = createSubscribe(function (observer) { return (_this.observer = observer); });
        }
        Object.defineProperty(Subscription.prototype, "next", {
            get: function () {
                _assert(this.observer, this.auth, "internal-error" /* INTERNAL_ERROR */);
                return this.observer.next.bind(this.observer);
            },
            enumerable: false,
            configurable: true
        });
        return Subscription;
    }());
    function emitEmulatorWarning(disableBanner) {
        function attachBanner() {
            var el = document.createElement('p');
            var sty = el.style;
            el.innerText =
                'Running in emulator mode. Do not use with production credentials.';
            sty.position = 'fixed';
            sty.width = '100%';
            sty.backgroundColor = '#ffffff';
            sty.border = '.1em solid #000000';
            sty.color = '#ff0000';
            sty.bottom = '0px';
            sty.left = '0px';
            sty.margin = '0px';
            sty.zIndex = '10000';
            sty.textAlign = 'center';
            el.classList.add('firebase-emulator-warning');
            document.body.appendChild(el);
        }
        if (typeof console !== 'undefined' && typeof console.info === 'function') {
            console.info('WARNING: You are using the Auth Emulator,' +
                ' which is intended for local testing only.  Do not use with' +
                ' production credentials.');
        }
        if (typeof window !== 'undefined' &&
            typeof document !== 'undefined' &&
            !disableBanner) {
            if (document.readyState === 'loading') {
                window.addEventListener('DOMContentLoaded', attachBanner);
            }
            else {
                attachBanner();
            }
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Asynchronously signs in as an anonymous user.
     *
     * @remarks
     * If there is already an anonymous user signed in, that user will be returned; otherwise, a
     * new anonymous user identity will be created and returned.
     *
     * @param auth - The Auth instance.
     *
     * @public
     */
    function signInAnonymously(auth) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var authInternal, response, userCredential;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        authInternal = _castAuth(auth);
                        if ((_a = authInternal.currentUser) === null || _a === void 0 ? void 0 : _a.isAnonymous) {
                            // If an anonymous user is already signed in, no need to sign them in again.
                            return [2 /*return*/, new UserCredentialImpl({
                                    user: authInternal.currentUser,
                                    providerId: null,
                                    operationType: "signIn" /* SIGN_IN */
                                })];
                        }
                        return [4 /*yield*/, signUp(authInternal, {
                                returnSecureToken: true
                            })];
                    case 1:
                        response = _b.sent();
                        return [4 /*yield*/, UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn" /* SIGN_IN */, response, true)];
                    case 2:
                        userCredential = _b.sent();
                        return [4 /*yield*/, authInternal._updateCurrentUser(userCredential.user)];
                    case 3:
                        _b.sent();
                        return [2 /*return*/, userCredential];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MultiFactorError = /** @class */ (function (_super) {
        __extends(MultiFactorError, _super);
        function MultiFactorError(auth, error, operationType, user) {
            var _a;
            var _this = _super.call(this, error.code, error.message) || this;
            _this.operationType = operationType;
            _this.user = user;
            _this.name = 'FirebaseError';
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(_this, MultiFactorError.prototype);
            _this.appName = auth.name;
            _this.code = error.code;
            _this.tenantId = (_a = auth.tenantId) !== null && _a !== void 0 ? _a : undefined;
            _this.serverResponse = error.customData
                .serverResponse;
            return _this;
        }
        MultiFactorError._fromErrorAndOperation = function (auth, error, operationType, user) {
            return new MultiFactorError(auth, error, operationType, user);
        };
        return MultiFactorError;
    }(FirebaseError));
    function _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {
        var idTokenProvider = operationType === "reauthenticate" /* REAUTHENTICATE */
            ? credential._getReauthenticationResolver(auth)
            : credential._getIdTokenResponse(auth);
        return idTokenProvider.catch(function (error) {
            if (error.code === "auth/" + "multi-factor-auth-required" /* MFA_REQUIRED */) {
                throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);
            }
            throw error;
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Takes a set of UserInfo provider data and converts it to a set of names
     */
    function providerDataAsNames(providerData) {
        return new Set(providerData
            .map(function (_a) {
            var providerId = _a.providerId;
            return providerId;
        })
            .filter(function (pid) { return !!pid; }));
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Unlinks a provider from a user account.
     *
     * @param user - The user.
     * @param providerId - The provider to unlink.
     *
     * @public
     */
    function unlink(user, providerId) {
        return __awaiter(this, void 0, void 0, function () {
            var userInternal, providerUserInfo, _a, _b, providersLeft;
            var _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        userInternal = user;
                        return [4 /*yield*/, _assertLinkedStatus(true, userInternal, providerId)];
                    case 1:
                        _d.sent();
                        _a = deleteLinkedAccounts;
                        _b = [userInternal.auth];
                        _c = {};
                        return [4 /*yield*/, user.getIdToken()];
                    case 2: return [4 /*yield*/, _a.apply(void 0, _b.concat([(_c.idToken = _d.sent(),
                                _c.deleteProvider = [providerId],
                                _c)]))];
                    case 3:
                        providerUserInfo = (_d.sent()).providerUserInfo;
                        providersLeft = providerDataAsNames(providerUserInfo || []);
                        userInternal.providerData = user.providerData.filter(function (pd) {
                            return providersLeft.has(pd.providerId);
                        });
                        if (!providersLeft.has("phone" /* PHONE */)) {
                            userInternal.phoneNumber = null;
                        }
                        return [4 /*yield*/, userInternal.auth._persistUserIfCurrent(userInternal)];
                    case 4:
                        _d.sent();
                        return [2 /*return*/, user];
                }
            });
        });
    }
    /** @internal */
    function _link(user, credential, bypassAuthState) {
        if (bypassAuthState === void 0) { bypassAuthState = false; }
        return __awaiter(this, void 0, void 0, function () {
            var response, _a, _b, _c, _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _a = _logoutIfInvalidated;
                        _b = [user];
                        _d = (_c = credential)._linkToIdToken;
                        _e = [user.auth];
                        return [4 /*yield*/, user.getIdToken()];
                    case 1: return [4 /*yield*/, _a.apply(void 0, _b.concat([_d.apply(_c, _e.concat([_f.sent()])), bypassAuthState]))];
                    case 2:
                        response = _f.sent();
                        return [2 /*return*/, UserCredentialImpl._forOperation(user, "link" /* LINK */, response)];
                }
            });
        });
    }
    /** @internal */
    function _assertLinkedStatus(expected, user, provider) {
        return __awaiter(this, void 0, void 0, function () {
            var providerIds, code;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _reloadWithoutSaving(user)];
                    case 1:
                        _a.sent();
                        providerIds = providerDataAsNames(user.providerData);
                        code = expected === false
                            ? "provider-already-linked" /* PROVIDER_ALREADY_LINKED */
                            : "no-such-provider" /* NO_SUCH_PROVIDER */;
                        _assert(providerIds.has(provider) === expected, user.auth, code);
                        return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _reauthenticate(user, credential, bypassAuthState) {
        if (bypassAuthState === void 0) { bypassAuthState = false; }
        return __awaiter(this, void 0, void 0, function () {
            var auth, operationType, response, parsed, localId, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        auth = user.auth;
                        operationType = "reauthenticate" /* REAUTHENTICATE */;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState)];
                    case 2:
                        response = _a.sent();
                        _assert(response.idToken, auth, "internal-error" /* INTERNAL_ERROR */);
                        parsed = _parseToken(response.idToken);
                        _assert(parsed, auth, "internal-error" /* INTERNAL_ERROR */);
                        localId = parsed.sub;
                        _assert(user.uid === localId, auth, "user-mismatch" /* USER_MISMATCH */);
                        return [2 /*return*/, UserCredentialImpl._forOperation(user, operationType, response)];
                    case 3:
                        e_1 = _a.sent();
                        // Convert user deleted error into user mismatch
                        if ((e_1 === null || e_1 === void 0 ? void 0 : e_1.code) === "auth/" + "user-not-found" /* USER_DELETED */) {
                            _fail(auth, "user-mismatch" /* USER_MISMATCH */);
                        }
                        throw e_1;
                    case 4: return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** @internal */
    function _signInWithCredential(auth, credential, bypassAuthState) {
        if (bypassAuthState === void 0) { bypassAuthState = false; }
        return __awaiter(this, void 0, void 0, function () {
            var operationType, response, userCredential;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        operationType = "signIn" /* SIGN_IN */;
                        return [4 /*yield*/, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, UserCredentialImpl._fromIdTokenResponse(auth, operationType, response)];
                    case 2:
                        userCredential = _a.sent();
                        if (!!bypassAuthState) return [3 /*break*/, 4];
                        return [4 /*yield*/, auth._updateCurrentUser(userCredential.user)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/, userCredential];
                }
            });
        });
    }
    /**
     * Asynchronously signs in with the given credentials.
     *
     * @remarks
     * An {@link @firebase/auth-types#AuthProvider} can be used to generate the credential.
     *
     * @param auth - The Auth instance.
     * @param credential - The auth credential.
     *
     * @public
     */
    function signInWithCredential(auth, credential) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _signInWithCredential(_castAuth(auth), credential)];
            });
        });
    }
    /**
     * Links the user account with the given credentials.
     *
     * @remarks
     * An {@link @firebase/auth-types#AuthProvider} can be used to generate the credential.
     *
     * @param user - The user.
     * @param credential - The auth credential.
     *
     * @public
     */
    function linkWithCredential(user, credential) {
        return __awaiter(this, void 0, void 0, function () {
            var userInternal;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userInternal = user;
                        return [4 /*yield*/, _assertLinkedStatus(false, userInternal, credential.providerId)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, _link(userInternal, credential)];
                }
            });
        });
    }
    /**
     * Re-authenticates a user using a fresh credential.
     *
     * @remarks
     * Use before operations such as {@link updatePassword} that require tokens from recent sign-in
     * attempts. This method can be used to recover from a
     * {@link AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN} error.
     *
     * @param user - The user.
     * @param credential - The auth credential.
     *
     * @public
     */
    function reauthenticateWithCredential(user, credential) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _reauthenticate(user, credential)];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function signInWithCustomToken(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performSignInRequest(auth, "POST" /* POST */, "/v1/accounts:signInWithCustomToken" /* SIGN_IN_WITH_CUSTOM_TOKEN */, request)];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Asynchronously signs in using a custom token.
     *
     * @remarks
     * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must
     * be generated by an auth backend using the
     * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}
     * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .
     *
     * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.
     *
     * @param auth - The Auth instance.
     * @param customToken - The custom token to sign in with.
     *
     * @public
     */
    function signInWithCustomToken$1(auth, customToken) {
        return __awaiter(this, void 0, void 0, function () {
            var response, authInternal, cred;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, signInWithCustomToken(auth, {
                            token: customToken,
                            returnSecureToken: true
                        })];
                    case 1:
                        response = _a.sent();
                        authInternal = _castAuth(auth);
                        return [4 /*yield*/, UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn" /* SIGN_IN */, response)];
                    case 2:
                        cred = _a.sent();
                        return [4 /*yield*/, authInternal._updateCurrentUser(cred.user)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, cred];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MultiFactorInfo = /** @class */ (function () {
        function MultiFactorInfo(factorId, response) {
            this.factorId = factorId;
            this.uid = response.mfaEnrollmentId;
            this.enrollmentTime = new Date(response.enrolledAt).toUTCString();
            this.displayName = response.displayName;
        }
        MultiFactorInfo._fromServerResponse = function (auth, enrollment) {
            if ('phoneInfo' in enrollment) {
                return PhoneMultiFactorInfo._fromServerResponse(auth, enrollment);
            }
            return _fail(auth, "internal-error" /* INTERNAL_ERROR */);
        };
        return MultiFactorInfo;
    }());
    var PhoneMultiFactorInfo = /** @class */ (function (_super) {
        __extends(PhoneMultiFactorInfo, _super);
        function PhoneMultiFactorInfo(response) {
            var _this = _super.call(this, "phone" /* PHONE */, response) || this;
            _this.phoneNumber = response.phoneInfo;
            return _this;
        }
        PhoneMultiFactorInfo._fromServerResponse = function (_auth, enrollment) {
            return new PhoneMultiFactorInfo(enrollment);
        };
        return PhoneMultiFactorInfo;
    }(MultiFactorInfo));

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {
        var _a;
        _assert(((_a = actionCodeSettings.url) === null || _a === void 0 ? void 0 : _a.length) > 0, auth, "invalid-continue-uri" /* INVALID_CONTINUE_URI */);
        _assert(typeof actionCodeSettings.dynamicLinkDomain === 'undefined' ||
            actionCodeSettings.dynamicLinkDomain.length > 0, auth, "invalid-dynamic-link-domain" /* INVALID_DYNAMIC_LINK_DOMAIN */);
        request.continueUrl = actionCodeSettings.url;
        request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;
        request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;
        if (actionCodeSettings.iOS) {
            _assert(actionCodeSettings.iOS.bundleId.length > 0, auth, "missing-ios-bundle-id" /* MISSING_IOS_BUNDLE_ID */);
            request.iosBundleId = actionCodeSettings.iOS.bundleId;
        }
        if (actionCodeSettings.android) {
            _assert(actionCodeSettings.android.packageName.length > 0, auth, "missing-android-pkg-name" /* MISSING_ANDROID_PACKAGE_NAME */);
            request.androidInstallApp = actionCodeSettings.android.installApp;
            request.androidMinimumVersionCode =
                actionCodeSettings.android.minimumVersion;
            request.androidPackageName = actionCodeSettings.android.packageName;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Sends a password reset email to the given email address.
     *
     * @remarks
     * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in
     * the email sent to the user, along with the new password specified by the user.
     *
     * @example
     * ```javascript
     * const actionCodeSettings = {
     *   url: 'https://www.example.com/?email=user@example.com',
     *   iOS: {
     *      bundleId: 'com.example.ios'
     *   },
     *   android: {
     *     packageName: 'com.example.android',
     *     installApp: true,
     *     minimumVersion: '12'
     *   },
     *   handleCodeInApp: true
     * };
     * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);
     * // Obtain code from user.
     * await confirmPasswordReset('user@example.com', code);
     * ```
     *
     * @param auth - The Auth instance.
     * @param email - The user's email address.
     * @param actionCodeSettings - The {@link @firebase/auth-types#ActionCodeSettings}.
     *
     * @public
     */
    function sendPasswordResetEmail$1(auth, email, actionCodeSettings) {
        return __awaiter(this, void 0, void 0, function () {
            var request;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        request = {
                            requestType: "PASSWORD_RESET" /* PASSWORD_RESET */,
                            email: email
                        };
                        if (actionCodeSettings) {
                            _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings);
                        }
                        return [4 /*yield*/, sendPasswordResetEmail(auth, request)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Completes the password reset process, given a confirmation code and new password.
     *
     * @param auth - The Auth instance.
     * @param oobCode - A confirmation code sent to the user.
     * @param newPassword - The new password.
     *
     * @public
     */
    function confirmPasswordReset(auth, oobCode, newPassword) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, resetPassword(auth, {
                            oobCode: oobCode,
                            newPassword: newPassword
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Applies a verification code sent to the user by email or other out-of-band mechanism.
     *
     * @param auth - The Auth instance.
     * @param oobCode - A verification code sent to the user.
     *
     * @public
     */
    function applyActionCode$1(auth, oobCode) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, applyActionCode(auth, { oobCode: oobCode })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Checks a verification code sent to the user by email or other out-of-band mechanism.
     *
     * @returns metadata about the code.
     *
     * @param auth - The Auth instance.
     * @param oobCode - A verification code sent to the user.
     *
     * @public
     */
    function checkActionCode(auth, oobCode) {
        return __awaiter(this, void 0, void 0, function () {
            var response, operation, multiFactorInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, resetPassword(auth, { oobCode: oobCode })];
                    case 1:
                        response = _a.sent();
                        operation = response.requestType;
                        _assert(operation, auth, "internal-error" /* INTERNAL_ERROR */);
                        switch (operation) {
                            case "EMAIL_SIGNIN" /* EMAIL_SIGNIN */:
                                break;
                            case "VERIFY_AND_CHANGE_EMAIL" /* VERIFY_AND_CHANGE_EMAIL */:
                                _assert(response.newEmail, auth, "internal-error" /* INTERNAL_ERROR */);
                                break;
                            case "REVERT_SECOND_FACTOR_ADDITION" /* REVERT_SECOND_FACTOR_ADDITION */:
                                _assert(response.mfaInfo, auth, "internal-error" /* INTERNAL_ERROR */);
                            // fall through
                            default:
                                _assert(response.email, auth, "internal-error" /* INTERNAL_ERROR */);
                        }
                        multiFactorInfo = null;
                        if (response.mfaInfo) {
                            multiFactorInfo = MultiFactorInfo._fromServerResponse(_castAuth(auth), response.mfaInfo);
                        }
                        return [2 /*return*/, {
                                data: {
                                    email: (response.requestType ===
                                        "VERIFY_AND_CHANGE_EMAIL" /* VERIFY_AND_CHANGE_EMAIL */
                                        ? response.newEmail
                                        : response.email) || null,
                                    previousEmail: (response.requestType ===
                                        "VERIFY_AND_CHANGE_EMAIL" /* VERIFY_AND_CHANGE_EMAIL */
                                        ? response.email
                                        : response.newEmail) || null,
                                    multiFactorInfo: multiFactorInfo
                                },
                                operation: operation
                            }];
                }
            });
        });
    }
    /**
     * Checks a password reset code sent to the user by email or other out-of-band mechanism.
     *
     * @returns the user's email address if valid.
     *
     * @param auth - The Auth instance.
     * @param code - A verification code sent to the user.
     *
     * @public
     */
    function verifyPasswordResetCode(auth, code) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, checkActionCode(auth, code)];
                    case 1:
                        data = (_a.sent()).data;
                        // Email should always be present since a code was sent to it
                        return [2 /*return*/, data.email];
                }
            });
        });
    }
    /**
     * Creates a new user account associated with the specified email address and password.
     *
     * @remarks
     * On successful creation of the user account, this user will also be signed in to your application.
     *
     * User account creation can fail if the account already exists or the password is invalid.
     *
     * Note: The email address acts as a unique identifier for the user and enables an email-based
     * password reset. This function will create a new user account and set the initial user password.
     *
     * @param auth - The Auth instance.
     * @param email - The user's email address.
     * @param password - The user's chosen password.
     *
     * @public
     */
    function createUserWithEmailAndPassword(auth, email, password) {
        return __awaiter(this, void 0, void 0, function () {
            var authInternal, response, userCredential;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        authInternal = _castAuth(auth);
                        return [4 /*yield*/, signUp(auth, {
                                returnSecureToken: true,
                                email: email,
                                password: password
                            })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, UserCredentialImpl._fromIdTokenResponse(authInternal, "signIn" /* SIGN_IN */, response)];
                    case 2:
                        userCredential = _a.sent();
                        return [4 /*yield*/, authInternal._updateCurrentUser(userCredential.user)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, userCredential];
                }
            });
        });
    }
    /**
     * Asynchronously signs in using an email and password.
     *
     * @remarks
     * Fails with an error if the email address and password do not match.
     *
     * Note: The user's password is NOT the password used to access the user's email account. The
     * email address serves as a unique identifier for the user, and the password is used to access
     * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.
     *
     * @param auth - The Auth instance.
     * @param email - The users email address.
     * @param password - The users password.
     *
     * @public
     */
    function signInWithEmailAndPassword(auth, email, password) {
        return signInWithCredential(auth, EmailAuthProvider.credential(email, password));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Sends a sign-in email link to the user with the specified email.
     *
     * @remarks
     * The sign-in operation has to always be completed in the app unlike other out of band email
     * actions (password reset and email verifications). This is because, at the end of the flow,
     * the user is expected to be signed in and their Auth state persisted within the app.
     *
     * To complete sign in with the email link, call {@link signInWithEmailLink} with the email
     * address and the email link supplied in the email sent to the user.
     *
     * @example
     * ```javascript
     * const actionCodeSettings = {
     *   url: 'https://www.example.com/?email=user@example.com',
     *   iOS: {
     *      bundleId: 'com.example.ios'
     *   },
     *   android: {
     *     packageName: 'com.example.android',
     *     installApp: true,
     *     minimumVersion: '12'
     *   },
     *   handleCodeInApp: true
     * };
     * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);
     * // Obtain emailLink from the user.
     * if(isSignInWithEmailLink(auth, emailLink)) {
     *   await signInWithEmailLink('user@example.com', 'user@example.com', emailLink);
     * }
     * ```
     *
     * @param auth - The Auth instance.
     * @param email - The user's email address.
     * @param actionCodeSettings - The {@link @firebase/auth-types#ActionCodeSettings}.
     *
     * @public
     */
    function sendSignInLinkToEmail$1(auth, email, actionCodeSettings) {
        return __awaiter(this, void 0, void 0, function () {
            var request;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        request = {
                            requestType: "EMAIL_SIGNIN" /* EMAIL_SIGNIN */,
                            email: email
                        };
                        _assert(actionCodeSettings === null || actionCodeSettings === void 0 ? void 0 : actionCodeSettings.handleCodeInApp, auth, "argument-error" /* ARGUMENT_ERROR */);
                        if (actionCodeSettings) {
                            _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings);
                        }
                        return [4 /*yield*/, sendSignInLinkToEmail(auth, request)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.
     *
     * @param auth - The Auth instance.
     * @param emailLink - The link sent to the user's email address.
     *
     * @public
     */
    function isSignInWithEmailLink(auth, emailLink) {
        var actionCodeUrl = ActionCodeURL.parseLink(emailLink);
        return (actionCodeUrl === null || actionCodeUrl === void 0 ? void 0 : actionCodeUrl.operation) === "EMAIL_SIGNIN" /* EMAIL_SIGNIN */;
    }
    /**
     * Asynchronously signs in using an email and sign-in email link.
     *
     * @remarks
     * If no link is passed, the link is inferred from the current URL.
     *
     * Fails with an error if the email address is invalid or OTP in email link expires.
     *
     * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.
     *
     * @example
     * ```javascript
     * const actionCodeSettings = {
     *   url: 'https://www.example.com/?email=user@example.com',
     *   iOS: {
     *      bundleId: 'com.example.ios'
     *   },
     *   android: {
     *     packageName: 'com.example.android',
     *     installApp: true,
     *     minimumVersion: '12'
     *   },
     *   handleCodeInApp: true
     * };
     * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);
     * // Obtain emailLink from the user.
     * if(isSignInWithEmailLink(auth, emailLink)) {
     *   await signInWithEmailLink('user@example.com', 'user@example.com', emailLink);
     * }
     * ```
     *
     * @param auth - The Auth instance.
     * @param email - The user's email address.
     * @param emailLink - The link sent to the user's email address.
     *
     * @public
     */
    function signInWithEmailLink$1(auth, email, emailLink) {
        return __awaiter(this, void 0, void 0, function () {
            var credential;
            return __generator(this, function (_a) {
                credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl());
                // Check if the tenant ID in the email link matches the tenant ID on Auth
                // instance.
                _assert(credential.tenantId === (auth.tenantId || null), auth, "tenant-id-mismatch" /* TENANT_ID_MISMATCH */);
                return [2 /*return*/, signInWithCredential(auth, credential)];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function createAuthUri(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:createAuthUri" /* CREATE_AUTH_URI */, request)];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Gets the list of possible sign in methods for the given email address.
     *
     * @remarks
     * This is useful to differentiate methods of sign-in for the same provider, eg.
     * {@link EmailAuthProvider} which has 2 methods of sign-in,
     * {@link @firebase/auth-types#SignInMethod.EMAIL_PASSWORD} and
     * {@link @firebase/auth-types#SignInMethod.EMAIL_LINK} .
     *
     * @param auth - The Auth instance.
     * @param email - The user's email address.
     *
     * @public
     */
    function fetchSignInMethodsForEmail(auth, email) {
        return __awaiter(this, void 0, void 0, function () {
            var continueUri, request, signinMethods;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        continueUri = _isHttpOrHttps() ? _getCurrentUrl() : 'http://localhost';
                        request = {
                            identifier: email,
                            continueUri: continueUri
                        };
                        return [4 /*yield*/, createAuthUri(auth, request)];
                    case 1:
                        signinMethods = (_a.sent()).signinMethods;
                        return [2 /*return*/, signinMethods || []];
                }
            });
        });
    }
    /**
     * Sends a verification email to a user.
     *
     * @remarks
     * The verification process is completed by calling {@link applyActionCode}.
     *
     * @example
     * ```javascript
     * const actionCodeSettings = {
     *   url: 'https://www.example.com/?email=user@example.com',
     *   iOS: {
     *      bundleId: 'com.example.ios'
     *   },
     *   android: {
     *     packageName: 'com.example.android',
     *     installApp: true,
     *     minimumVersion: '12'
     *   },
     *   handleCodeInApp: true
     * };
     * await sendEmailVerification(user, actionCodeSettings);
     * // Obtain code from the user.
     * await applyActionCode(auth, code);
     * ```
     *
     * @param user - The user.
     * @param actionCodeSettings - The {@link @firebase/auth-types#ActionCodeSettings}.
     *
     * @public
     */
    function sendEmailVerification$1(user, actionCodeSettings) {
        return __awaiter(this, void 0, void 0, function () {
            var userInternal, idToken, request, email;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userInternal = user;
                        return [4 /*yield*/, user.getIdToken()];
                    case 1:
                        idToken = _a.sent();
                        request = {
                            requestType: "VERIFY_EMAIL" /* VERIFY_EMAIL */,
                            idToken: idToken
                        };
                        if (actionCodeSettings) {
                            _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);
                        }
                        return [4 /*yield*/, sendEmailVerification(userInternal.auth, request)];
                    case 2:
                        email = (_a.sent()).email;
                        if (!(email !== user.email)) return [3 /*break*/, 4];
                        return [4 /*yield*/, user.reload()];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Sends a verification email to a new email address.
     *
     * @remarks
     * The user's email will be updated to the new one after being verified.
     *
     * If you have a custom email action handler, you can complete the verification process by calling
     * {@link applyActionCode}.
     *
     * @example
     * ```javascript
     * const actionCodeSettings = {
     *   url: 'https://www.example.com/?email=user@example.com',
     *   iOS: {
     *      bundleId: 'com.example.ios'
     *   },
     *   android: {
     *     packageName: 'com.example.android',
     *     installApp: true,
     *     minimumVersion: '12'
     *   },
     *   handleCodeInApp: true
     * };
     * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);
     * // Obtain code from the user.
     * await applyActionCode(auth, code);
     * ```
     *
     * @param user - The user.
     * @param newEmail - The new email address to be verified before update.
     * @param actionCodeSettings - The {@link @firebase/auth-types#ActionCodeSettings}.
     *
     * @public
     */
    function verifyBeforeUpdateEmail(user, newEmail, actionCodeSettings) {
        return __awaiter(this, void 0, void 0, function () {
            var userInternal, idToken, request, email;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userInternal = user;
                        return [4 /*yield*/, user.getIdToken()];
                    case 1:
                        idToken = _a.sent();
                        request = {
                            requestType: "VERIFY_AND_CHANGE_EMAIL" /* VERIFY_AND_CHANGE_EMAIL */,
                            idToken: idToken,
                            newEmail: newEmail
                        };
                        if (actionCodeSettings) {
                            _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);
                        }
                        return [4 /*yield*/, verifyAndChangeEmail(userInternal.auth, request)];
                    case 2:
                        email = (_a.sent()).email;
                        if (!(email !== user.email)) return [3 /*break*/, 4];
                        // If the local copy of the email on user is outdated, reload the
                        // user.
                        return [4 /*yield*/, user.reload()];
                    case 3:
                        // If the local copy of the email on user is outdated, reload the
                        // user.
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function updateProfile(auth, request) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performApiRequest(auth, "POST" /* POST */, "/v1/accounts:update" /* SET_ACCOUNT_INFO */, request)];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Updates a user's profile data.
     *
     * @param user - The user.
     * @param profile - The profile's `displayName` and `photoURL` to update.
     *
     * @public
     */
    function updateProfile$1(user, _a) {
        var displayName = _a.displayName, photoUrl = _a.photoURL;
        return __awaiter(this, void 0, void 0, function () {
            var userInternal, idToken, profileRequest, response, passwordProvider;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (displayName === undefined && photoUrl === undefined) {
                            return [2 /*return*/];
                        }
                        userInternal = user;
                        return [4 /*yield*/, user.getIdToken()];
                    case 1:
                        idToken = _b.sent();
                        profileRequest = {
                            idToken: idToken,
                            displayName: displayName,
                            photoUrl: photoUrl,
                            returnSecureToken: true
                        };
                        return [4 /*yield*/, _logoutIfInvalidated(userInternal, updateProfile(userInternal.auth, profileRequest))];
                    case 2:
                        response = _b.sent();
                        userInternal.displayName = response.displayName || null;
                        userInternal.photoURL = response.photoUrl || null;
                        passwordProvider = userInternal.providerData.find(function (_a) {
                            var providerId = _a.providerId;
                            return providerId === "password" /* PASSWORD */;
                        });
                        if (passwordProvider) {
                            passwordProvider.displayName = user.displayName;
                            passwordProvider.photoURL = user.photoURL;
                        }
                        return [4 /*yield*/, userInternal._updateTokensIfNecessary(response)];
                    case 3:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Updates the user's email address.
     *
     * @remarks
     * An email will be sent to the original email address (if it was set) that allows to revoke the
     * email address change, in order to protect them from account hijacking.
     *
     * Important: this is a security sensitive operation that requires the user to have recently signed
     * in. If this requirement isn't met, ask the user to authenticate again and then call
     * {@link reauthenticateWithCredential}.
     *
     * @param user - The user.
     * @param newEmail - The new email address.
     *
     * @public
     */
    function updateEmail(user, newEmail) {
        return updateEmailOrPassword(user, newEmail, null);
    }
    /**
     * Updates the user's password.
     *
     * @remarks
     * Important: this is a security sensitive operation that requires the user to have recently signed
     * in. If this requirement isn't met, ask the user to authenticate again and then call
     * {@link reauthenticateWithCredential}.
     *
     * @param user - The user.
     * @param newPassword - The new password.
     *
     * @public
     */
    function updatePassword(user, newPassword) {
        return updateEmailOrPassword(user, null, newPassword);
    }
    /** @internal */
    function updateEmailOrPassword(user, email, password) {
        return __awaiter(this, void 0, void 0, function () {
            var auth, idToken, request, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        auth = user.auth;
                        return [4 /*yield*/, user.getIdToken()];
                    case 1:
                        idToken = _a.sent();
                        request = {
                            idToken: idToken,
                            returnSecureToken: true
                        };
                        if (email) {
                            request.email = email;
                        }
                        if (password) {
                            request.password = password;
                        }
                        return [4 /*yield*/, _logoutIfInvalidated(user, updateEmailPassword(auth, request))];
                    case 2:
                        response = _a.sent();
                        return [4 /*yield*/, user._updateTokensIfNecessary(response, /* reload */ true)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Parse the `AdditionalUserInfo` from the ID token response.
     *
     * @internal
     */
    function _fromIdTokenResponse(idTokenResponse) {
        var _a, _b;
        if (!idTokenResponse) {
            return null;
        }
        var providerId = idTokenResponse.providerId;
        var profile = idTokenResponse.rawUserInfo
            ? JSON.parse(idTokenResponse.rawUserInfo)
            : {};
        var isNewUser = idTokenResponse.isNewUser ||
            idTokenResponse.kind === "identitytoolkit#SignupNewUserResponse" /* SignupNewUser */;
        if (!providerId && (idTokenResponse === null || idTokenResponse === void 0 ? void 0 : idTokenResponse.idToken)) {
            var signInProvider = (_b = (_a = _parseToken(idTokenResponse.idToken)) === null || _a === void 0 ? void 0 : _a.firebase) === null || _b === void 0 ? void 0 : _b['sign_in_provider'];
            if (signInProvider) {
                var filteredProviderId = signInProvider !== "anonymous" /* ANONYMOUS */ &&
                    signInProvider !== "custom" /* CUSTOM */
                    ? signInProvider
                    : null;
                // Uses generic class in accordance with the legacy SDK.
                return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);
            }
        }
        if (!providerId) {
            return null;
        }
        switch (providerId) {
            case "facebook.com" /* FACEBOOK */:
                return new FacebookAdditionalUserInfo(isNewUser, profile);
            case "github.com" /* GITHUB */:
                return new GithubAdditionalUserInfo(isNewUser, profile);
            case "google.com" /* GOOGLE */:
                return new GoogleAdditionalUserInfo(isNewUser, profile);
            case "twitter.com" /* TWITTER */:
                return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);
            case "custom" /* CUSTOM */:
            case "anonymous" /* ANONYMOUS */:
                return new GenericAdditionalUserInfo(isNewUser, null);
            default:
                return new GenericAdditionalUserInfo(isNewUser, providerId, profile);
        }
    }
    var GenericAdditionalUserInfo = /** @class */ (function () {
        function GenericAdditionalUserInfo(isNewUser, providerId, profile) {
            if (profile === void 0) { profile = {}; }
            this.isNewUser = isNewUser;
            this.providerId = providerId;
            this.profile = profile;
        }
        return GenericAdditionalUserInfo;
    }());
    var FederatedAdditionalUserInfoWithUsername = /** @class */ (function (_super) {
        __extends(FederatedAdditionalUserInfoWithUsername, _super);
        function FederatedAdditionalUserInfoWithUsername(isNewUser, providerId, profile, username) {
            var _this = _super.call(this, isNewUser, providerId, profile) || this;
            _this.username = username;
            return _this;
        }
        return FederatedAdditionalUserInfoWithUsername;
    }(GenericAdditionalUserInfo));
    var FacebookAdditionalUserInfo = /** @class */ (function (_super) {
        __extends(FacebookAdditionalUserInfo, _super);
        function FacebookAdditionalUserInfo(isNewUser, profile) {
            return _super.call(this, isNewUser, "facebook.com" /* FACEBOOK */, profile) || this;
        }
        return FacebookAdditionalUserInfo;
    }(GenericAdditionalUserInfo));
    var GithubAdditionalUserInfo = /** @class */ (function (_super) {
        __extends(GithubAdditionalUserInfo, _super);
        function GithubAdditionalUserInfo(isNewUser, profile) {
            return _super.call(this, isNewUser, "github.com" /* GITHUB */, profile, typeof (profile === null || profile === void 0 ? void 0 : profile.login) === 'string' ? profile === null || profile === void 0 ? void 0 : profile.login : null) || this;
        }
        return GithubAdditionalUserInfo;
    }(FederatedAdditionalUserInfoWithUsername));
    var GoogleAdditionalUserInfo = /** @class */ (function (_super) {
        __extends(GoogleAdditionalUserInfo, _super);
        function GoogleAdditionalUserInfo(isNewUser, profile) {
            return _super.call(this, isNewUser, "google.com" /* GOOGLE */, profile) || this;
        }
        return GoogleAdditionalUserInfo;
    }(GenericAdditionalUserInfo));
    var TwitterAdditionalUserInfo = /** @class */ (function (_super) {
        __extends(TwitterAdditionalUserInfo, _super);
        function TwitterAdditionalUserInfo(isNewUser, profile, screenName) {
            return _super.call(this, isNewUser, "twitter.com" /* TWITTER */, profile, screenName) || this;
        }
        return TwitterAdditionalUserInfo;
    }(FederatedAdditionalUserInfoWithUsername));
    /**
     * Extracts provider specific {@link @firebase/auth-types#AdditionalUserInfo} for the given credential.
     *
     * @param userCredential - The user credential.
     *
     * @public
     */
    function getAdditionalUserInfo(userCredential) {
        var _a = userCredential, user = _a.user, _tokenResponse = _a._tokenResponse;
        if (user.isAnonymous && !_tokenResponse) {
            // Handle the special case where signInAnonymously() gets called twice.
            // No network call is made so there's nothing to actually fill this in
            return {
                providerId: null,
                isNewUser: false,
                profile: null
            };
        }
        return _fromIdTokenResponse(_tokenResponse);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Non-optional auth methods.
    /**
     * Changes the type of persistence on the Auth instance for the currently saved
     * Auth session and applies this type of persistence for future sign-in requests, including
     * sign-in with redirect requests.
     *
     * @remarks
     * This makes it easy for a user signing in to specify whether their session should be
     * remembered or not. It also makes it easier to never persist the Auth state for applications
     * that are shared by other users or have sensitive data.
     *
     * @example
     * ```javascript
     * setPersistence(auth, browserSessionPersistence);
     * ```
     *
     * @param auth - The Auth instance.
     * @param persistence - The {@link @firebase/auth-types#Persistence} to use.
     *
     * @public
     */
    function setPersistence(auth, persistence) {
        auth.setPersistence(persistence);
    }
    /**
     * Adds an observer for changes to the signed-in user's ID token, which includes sign-in,
     * sign-out, and token refresh events.
     *
     * @param auth - The Auth instance.
     * @param nextOrObserver - callback triggered on change.
     * @param error - callback triggered on error.
     * @param completed - callback triggered when observer is removed.
     *
     * @public
     */
    function onIdTokenChanged(auth, nextOrObserver, error, completed) {
        return auth.onIdTokenChanged(nextOrObserver, error, completed);
    }
    /**
     * Adds an observer for changes to the user's sign-in state.
     *
     * @remarks
     * To keep the old behavior, see {@link onIdTokenChanged}.
     *
     * @param auth - The Auth instance.
     * @param nextOrObserver - callback triggered on change.
     * @param error - callback triggered on error.
     * @param completed - callback triggered when observer is removed.
     *
     * @public
     */
    function onAuthStateChanged(auth, nextOrObserver, error, completed) {
        return auth.onAuthStateChanged(nextOrObserver, error, completed);
    }
    /**
     * Sets the current language to the default device/browser preference.
     *
     * @param auth - The Auth instanec.
     *
     * @public
     */
    function useDeviceLanguage(auth) {
        auth.useDeviceLanguage();
    }
    /**
     * Asynchronously sets the provided user as {@link @firebase/auth-types#Auth.currentUser} on the
     * {@link @firebase/auth-types#Auth} instance.
     *
     * @remarks
     * A new instance copy of the user provided will be made and set as currentUser.
     *
     * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners
     * like other sign in methods.
     *
     * The operation fails with an error if the user to be updated belongs to a different Firebase
     * project.
     *
     * @param auth - The Auth instance.
     * @param user - The new {@link @firebase/auth-types#User}.
     *
     * @public
     */
    function updateCurrentUser(auth, user) {
        return auth.updateCurrentUser(user);
    }
    /**
     * Signs out the current user.
     *
     * @param auth - The Auth instance.
     *
     * @public
     */
    function signOut(auth) {
        return auth.signOut();
    }
    /**
     * Deletes and signs out the user.
     *
     * @remarks
     * Important: this is a security-sensitive operation that requires the user to have recently
     * signed in. If this requirement isn't met, ask the user to authenticate again and then call
     * {@link reauthenticateWithCredential}.
     *
     * @param user - The user.
     *
     * @public
     */
    function deleteUser(user) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, user.delete()];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MultiFactorSession = /** @class */ (function () {
        function MultiFactorSession(type, credential) {
            this.type = type;
            this.credential = credential;
        }
        MultiFactorSession._fromIdtoken = function (idToken) {
            return new MultiFactorSession("enroll" /* ENROLL */, idToken);
        };
        MultiFactorSession._fromMfaPendingCredential = function (mfaPendingCredential) {
            return new MultiFactorSession("signin" /* SIGN_IN */, mfaPendingCredential);
        };
        MultiFactorSession.prototype.toJSON = function () {
            var _a;
            var key = this.type === "enroll" /* ENROLL */
                ? 'idToken'
                : 'pendingCredential';
            return {
                multiFactorSession: (_a = {},
                    _a[key] = this.credential,
                    _a)
            };
        };
        MultiFactorSession.fromJSON = function (obj) {
            var _a, _b;
            if (obj === null || obj === void 0 ? void 0 : obj.multiFactorSession) {
                if ((_a = obj.multiFactorSession) === null || _a === void 0 ? void 0 : _a.pendingCredential) {
                    return MultiFactorSession._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);
                }
                else if ((_b = obj.multiFactorSession) === null || _b === void 0 ? void 0 : _b.idToken) {
                    return MultiFactorSession._fromIdtoken(obj.multiFactorSession.idToken);
                }
            }
            return null;
        };
        return MultiFactorSession;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MultiFactorResolver = /** @class */ (function () {
        function MultiFactorResolver(session, hints, signInResolver) {
            this.session = session;
            this.hints = hints;
            this.signInResolver = signInResolver;
        }
        /** @internal */
        MultiFactorResolver._fromError = function (authExtern, error) {
            var _this = this;
            var auth = _castAuth(authExtern);
            var hints = (error.serverResponse.mfaInfo || []).map(function (enrollment) {
                return MultiFactorInfo._fromServerResponse(auth, enrollment);
            });
            _assert(error.serverResponse.mfaPendingCredential, auth, "internal-error" /* INTERNAL_ERROR */);
            var session = MultiFactorSession._fromMfaPendingCredential(error.serverResponse.mfaPendingCredential);
            return new MultiFactorResolver(session, hints, function (assertion) { return __awaiter(_this, void 0, void 0, function () {
                var mfaResponse, idTokenResponse, _a, userCredential;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, assertion._process(auth, session)];
                        case 1:
                            mfaResponse = _b.sent();
                            // Clear out the unneeded fields from the old login response
                            delete error.serverResponse.mfaInfo;
                            delete error.serverResponse.mfaPendingCredential;
                            idTokenResponse = __assign(__assign({}, error.serverResponse), { idToken: mfaResponse.idToken, refreshToken: mfaResponse.refreshToken });
                            _a = error.operationType;
                            switch (_a) {
                                case "signIn" /* SIGN_IN */: return [3 /*break*/, 2];
                                case "reauthenticate" /* REAUTHENTICATE */: return [3 /*break*/, 5];
                            }
                            return [3 /*break*/, 6];
                        case 2: return [4 /*yield*/, UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse)];
                        case 3:
                            userCredential = _b.sent();
                            return [4 /*yield*/, auth._updateCurrentUser(userCredential.user)];
                        case 4:
                            _b.sent();
                            return [2 /*return*/, userCredential];
                        case 5:
                            _assert(error.user, auth, "internal-error" /* INTERNAL_ERROR */);
                            return [2 /*return*/, UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse)];
                        case 6:
                            _fail(auth, "internal-error" /* INTERNAL_ERROR */);
                            _b.label = 7;
                        case 7: return [2 /*return*/];
                    }
                });
            }); });
        };
        MultiFactorResolver.prototype.resolveSignIn = function (assertionExtern) {
            return __awaiter(this, void 0, void 0, function () {
                var assertion;
                return __generator(this, function (_a) {
                    assertion = assertionExtern;
                    return [2 /*return*/, this.signInResolver(assertion)];
                });
            });
        };
        return MultiFactorResolver;
    }());
    /**
     * Provides a {@link @firebase/auth-types#MultiFactorResolver} suitable for completion of a
     * multi-factor flow.
     *
     * @param auth - The auth instance.
     * @param error - The {@link @firebase/auth-types#MultiFactorError} raised during a sign-in, or
     * reauthentication operation.
     *
     * @public
     */
    function getMultiFactorResolver(auth, error) {
        var _a;
        var errorInternal = error;
        _assert(error.operationType, auth, "argument-error" /* ARGUMENT_ERROR */);
        _assert((_a = errorInternal.serverResponse) === null || _a === void 0 ? void 0 : _a.mfaPendingCredential, auth, "argument-error" /* ARGUMENT_ERROR */);
        return MultiFactorResolver._fromError(auth, errorInternal);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function startEnrollPhoneMfa(auth, request) {
        return _performApiRequest(auth, "POST" /* POST */, "/v2/accounts/mfaEnrollment:start" /* START_PHONE_MFA_ENROLLMENT */, __assign({ tenantId: auth.tenantId }, request));
    }
    function finalizeEnrollPhoneMfa(auth, request) {
        return _performApiRequest(auth, "POST" /* POST */, "/v2/accounts/mfaEnrollment:finalize" /* FINALIZE_PHONE_MFA_ENROLLMENT */, __assign({ tenantId: auth.tenantId }, request));
    }
    function withdrawMfa(auth, request) {
        return _performApiRequest(auth, "POST" /* POST */, "/v2/accounts/mfaEnrollment:withdraw" /* WITHDRAW_MFA */, __assign({ tenantId: auth.tenantId }, request));
    }

    var MultiFactorUser = /** @class */ (function () {
        function MultiFactorUser(user) {
            var _this = this;
            this.user = user;
            this.enrolledFactors = [];
            user._onReload(function (userInfo) {
                if (userInfo.mfaInfo) {
                    _this.enrolledFactors = userInfo.mfaInfo.map(function (enrollment) {
                        return MultiFactorInfo._fromServerResponse(user.auth, enrollment);
                    });
                }
            });
        }
        MultiFactorUser._fromUser = function (user) {
            return new MultiFactorUser(user);
        };
        MultiFactorUser.prototype.getSession = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _b = (_a = MultiFactorSession)._fromIdtoken;
                            return [4 /*yield*/, this.user.getIdToken()];
                        case 1: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                    }
                });
            });
        };
        MultiFactorUser.prototype.enroll = function (assertionExtern, displayName) {
            return __awaiter(this, void 0, void 0, function () {
                var assertion, session, finalizeMfaResponse;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            assertion = assertionExtern;
                            return [4 /*yield*/, this.getSession()];
                        case 1:
                            session = (_a.sent());
                            return [4 /*yield*/, _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName))];
                        case 2:
                            finalizeMfaResponse = _a.sent();
                            // New tokens will be issued after enrollment of the new second factors.
                            // They need to be updated on the user.
                            return [4 /*yield*/, this.user._updateTokensIfNecessary(finalizeMfaResponse)];
                        case 3:
                            // New tokens will be issued after enrollment of the new second factors.
                            // They need to be updated on the user.
                            _a.sent();
                            // The user needs to be reloaded to get the new multi-factor information
                            // from server. USER_RELOADED event will be triggered and `enrolledFactors`
                            // will be updated.
                            return [2 /*return*/, this.user.reload()];
                    }
                });
            });
        };
        MultiFactorUser.prototype.unenroll = function (infoOrUid) {
            return __awaiter(this, void 0, void 0, function () {
                var mfaEnrollmentId, idToken, idTokenResponse, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            mfaEnrollmentId = typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;
                            return [4 /*yield*/, this.user.getIdToken()];
                        case 1:
                            idToken = _a.sent();
                            return [4 /*yield*/, _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {
                                    idToken: idToken,
                                    mfaEnrollmentId: mfaEnrollmentId
                                }))];
                        case 2:
                            idTokenResponse = _a.sent();
                            // Remove the second factor from the user's list.
                            this.enrolledFactors = this.enrolledFactors.filter(function (_a) {
                                var uid = _a.uid;
                                return uid !== mfaEnrollmentId;
                            });
                            // Depending on whether the backend decided to revoke the user's session,
                            // the tokenResponse may be empty. If the tokens were not updated (and they
                            // are now invalid), reloading the user will discover this and invalidate
                            // the user's state accordingly.
                            return [4 /*yield*/, this.user._updateTokensIfNecessary(idTokenResponse)];
                        case 3:
                            // Depending on whether the backend decided to revoke the user's session,
                            // the tokenResponse may be empty. If the tokens were not updated (and they
                            // are now invalid), reloading the user will discover this and invalidate
                            // the user's state accordingly.
                            _a.sent();
                            _a.label = 4;
                        case 4:
                            _a.trys.push([4, 6, , 7]);
                            return [4 /*yield*/, this.user.reload()];
                        case 5:
                            _a.sent();
                            return [3 /*break*/, 7];
                        case 6:
                            e_1 = _a.sent();
                            if (e_1.code !== "auth/" + "user-token-expired" /* TOKEN_EXPIRED */) {
                                throw e_1;
                            }
                            return [3 /*break*/, 7];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        return MultiFactorUser;
    }());
    var multiFactorUserCache = new WeakMap();
    /**
     * The {@link @firebase/auth-types#MultiFactorUser} corresponding to the user.
     *
     * @remarks
     * This is used to access all multi-factor properties and operations related to the user.
     *
     * @param user - The user.
     *
     * @public
     */
    function multiFactor(user) {
        if (!multiFactorUserCache.has(user)) {
            multiFactorUserCache.set(user, MultiFactorUser._fromUser(user));
        }
        return multiFactorUserCache.get(user);
    }

    var version = "0.0.900-exp.3c2788a40";

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Determine the browser for the purposes of reporting usage to the API
     */
    function _getBrowserName(userAgent) {
        var ua = userAgent.toLowerCase();
        if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {
            return "Opera" /* OPERA */;
        }
        else if (_isIEMobile(ua)) {
            // Windows phone IEMobile browser.
            return "IEMobile" /* IEMOBILE */;
        }
        else if (ua.includes('msie') || ua.includes('trident/')) {
            return "IE" /* IE */;
        }
        else if (ua.includes('edge/')) {
            return "Edge" /* EDGE */;
        }
        else if (_isFirefox(ua)) {
            return "Firefox" /* FIREFOX */;
        }
        else if (ua.includes('silk/')) {
            return "Silk" /* SILK */;
        }
        else if (_isBlackBerry(ua)) {
            // Blackberry browser.
            return "Blackberry" /* BLACKBERRY */;
        }
        else if (_isWebOS(ua)) {
            // WebOS default browser.
            return "Webos" /* WEBOS */;
        }
        else if (_isSafari(ua)) {
            return "Safari" /* SAFARI */;
        }
        else if ((ua.includes('chrome/') || _isChromeIOS(ua)) &&
            !ua.includes('edge/')) {
            return "Chrome" /* CHROME */;
        }
        else if (_isAndroid(ua)) {
            // Android stock browser.
            return "Android" /* ANDROID */;
        }
        else {
            // Most modern browsers have name/version at end of user agent string.
            var re = /([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/;
            var matches = userAgent.match(re);
            if ((matches === null || matches === void 0 ? void 0 : matches.length) === 2) {
                return matches[1];
            }
        }
        return "Other" /* OTHER */;
    }
    function _isFirefox(ua) {
        return /firefox\//i.test(ua);
    }
    function _isSafari(userAgent) {
        var ua = userAgent.toLowerCase();
        return (ua.includes('safari/') &&
            !ua.includes('chrome/') &&
            !ua.includes('crios/') &&
            !ua.includes('android'));
    }
    function _isChromeIOS(ua) {
        return /crios\//i.test(ua);
    }
    function _isIEMobile(ua) {
        return /iemobile/i.test(ua);
    }
    function _isAndroid(ua) {
        return /android/i.test(ua);
    }
    function _isBlackBerry(ua) {
        return /blackberry/i.test(ua);
    }
    function _isWebOS(ua) {
        return /webos/i.test(ua);
    }
    function _isIOS(ua) {
        return /iphone|ipad|ipod/i.test(ua);
    }
    function _isIOSStandalone(ua) {
        var _a;
        return _isIOS(ua) && !!((_a = window.navigator) === null || _a === void 0 ? void 0 : _a.standalone);
    }
    function _isIE10() {
        return isIE() && document.documentMode === 10;
    }
    function _isMobileBrowser(ua) {
        if (ua === void 0) { ua = getUA(); }
        // TODO: implement getBrowserName equivalent for OS.
        return (_isIOS(ua) ||
            _isAndroid(ua) ||
            _isWebOS(ua) ||
            _isBlackBerry(ua) ||
            /windows phone/i.test(ua) ||
            _isIEMobile(ua));
    }
    function _isIframe() {
        try {
            // Check that the current window is not the top window.
            // If so, return true.
            return !!(window && window !== window.top);
        }
        catch (e) {
            return false;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /*
     * Determine the SDK version string
     *
     * TODO: This should be set on the Auth object during initialization
     */
    function _getClientVersion(clientPlatform) {
        var reportedPlatform;
        switch (clientPlatform) {
            case "Browser" /* BROWSER */:
                // In a browser environment, report the browser name.
                reportedPlatform = _getBrowserName(getUA());
                break;
            case "Worker" /* WORKER */:
                // Technically a worker runs from a browser but we need to differentiate a
                // worker from a browser.
                // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.
                reportedPlatform = _getBrowserName(getUA()) + "-" + clientPlatform;
                break;
            default:
                reportedPlatform = clientPlatform;
        }
        return reportedPlatform + "/" + "JsCore" /* CORE */ + "/" + app.SDK_VERSION + "/" + "FirebaseCore-web" /* DEFAULT */;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var AuthInternal = /** @class */ (function () {
        function AuthInternal(auth) {
            this.auth = auth;
            this.internalListeners = new Map();
        }
        AuthInternal.prototype.getUid = function () {
            var _a;
            return ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid) || null;
        };
        AuthInternal.prototype.getToken = function (forceRefresh) {
            return __awaiter(this, void 0, void 0, function () {
                var accessToken;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.auth._initializationPromise];
                        case 1:
                            _a.sent();
                            if (!this.auth.currentUser) {
                                return [2 /*return*/, null];
                            }
                            return [4 /*yield*/, this.auth.currentUser.getIdToken(forceRefresh)];
                        case 2:
                            accessToken = _a.sent();
                            return [2 /*return*/, { accessToken: accessToken }];
                    }
                });
            });
        };
        AuthInternal.prototype.addAuthTokenListener = function (listener) {
            if (this.internalListeners.has(listener)) {
                return;
            }
            var unsubscribe = this.auth.onIdTokenChanged(function (user) {
                var _a;
                listener(((_a = user) === null || _a === void 0 ? void 0 : _a.stsTokenManager.accessToken) || null);
            });
            this.internalListeners.set(listener, unsubscribe);
            this.updateProactiveRefresh();
        };
        AuthInternal.prototype.removeAuthTokenListener = function (listener) {
            var unsubscribe = this.internalListeners.get(listener);
            if (!unsubscribe) {
                return;
            }
            this.internalListeners.delete(listener);
            unsubscribe();
            this.updateProactiveRefresh();
        };
        AuthInternal.prototype.updateProactiveRefresh = function () {
            if (this.internalListeners.size > 0) {
                this.auth._startProactiveRefresh();
            }
            else {
                this.auth._stopProactiveRefresh();
            }
        };
        return AuthInternal;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getVersionForPlatform(clientPlatform) {
        switch (clientPlatform) {
            case "Node" /* NODE */:
                return 'node';
            case "ReactNative" /* REACT_NATIVE */:
                return 'rn';
            case "Worker" /* WORKER */:
                return 'webworker';
            default:
                return undefined;
        }
    }
    /** @internal */
    function registerAuth(clientPlatform) {
        app._registerComponent(new Component("auth-exp" /* AUTH */, function (container) {
            var app = container.getProvider('app-exp').getImmediate();
            var _a = app.options, apiKey = _a.apiKey, authDomain = _a.authDomain;
            return (function (app) {
                _assert(apiKey, "invalid-api-key" /* INVALID_API_KEY */, { appName: app.name });
                var config = {
                    apiKey: apiKey,
                    authDomain: authDomain,
                    apiHost: "identitytoolkit.googleapis.com" /* API_HOST */,
                    tokenApiHost: "securetoken.googleapis.com" /* TOKEN_API_HOST */,
                    apiScheme: "https" /* API_SCHEME */,
                    sdkClientVersion: _getClientVersion(clientPlatform)
                };
                return new AuthImpl(app, config);
            })(app);
        }, "PUBLIC" /* PUBLIC */));
        app._registerComponent(new Component("auth-internal" /* AUTH_INTERNAL */, function (container) {
            var auth = _castAuth(container.getProvider("auth-exp" /* AUTH */).getImmediate());
            return (function (auth) { return new AuthInternal(auth); })(auth);
        }, "PRIVATE" /* PRIVATE */));
        app.registerVersion("auth-exp" /* AUTH */, version, getVersionForPlatform(clientPlatform));
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var STORAGE_AVAILABLE_KEY = '__sak';

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // There are two different browser persistence types: local and session.
    // Both have the same implementation but use a different underlying storage
    // object.
    var BrowserPersistenceClass = /** @class */ (function () {
        function BrowserPersistenceClass(storage, type) {
            this.storage = storage;
            this.type = type;
        }
        BrowserPersistenceClass.prototype._isAvailable = function () {
            try {
                if (!this.storage) {
                    return Promise.resolve(false);
                }
                this.storage.setItem(STORAGE_AVAILABLE_KEY, '1');
                this.storage.removeItem(STORAGE_AVAILABLE_KEY);
                return Promise.resolve(true);
            }
            catch (_a) {
                return Promise.resolve(false);
            }
        };
        BrowserPersistenceClass.prototype._set = function (key, value) {
            this.storage.setItem(key, JSON.stringify(value));
            return Promise.resolve();
        };
        BrowserPersistenceClass.prototype._get = function (key) {
            var json = this.storage.getItem(key);
            return Promise.resolve(json ? JSON.parse(json) : null);
        };
        BrowserPersistenceClass.prototype._remove = function (key) {
            this.storage.removeItem(key);
            return Promise.resolve();
        };
        return BrowserPersistenceClass;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _iframeCannotSyncWebStorage() {
        var ua = getUA();
        return _isSafari(ua) || _isIOS(ua);
    }
    // The polling period in case events are not supported
    var _POLLING_INTERVAL_MS = 1000;
    // The IE 10 localStorage cross tab synchronization delay in milliseconds
    var IE10_LOCAL_STORAGE_SYNC_DELAY = 10;
    var BrowserLocalPersistence = /** @class */ (function (_super) {
        __extends(BrowserLocalPersistence, _super);
        function BrowserLocalPersistence() {
            var _this = _super.call(this, localStorage, "LOCAL" /* LOCAL */) || this;
            _this.listeners = {};
            _this.localCache = {};
            // setTimeout return value is platform specific
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            _this.pollTimer = null;
            // Safari or iOS browser and embedded in an iframe.
            _this.safariLocalStorageNotSynced = _iframeCannotSyncWebStorage() && _isIframe();
            // Whether to use polling instead of depending on window events
            _this.fallbackToPolling = _isMobileBrowser();
            _this.boundEventHandler = _this.onStorageEvent.bind(_this);
            return _this;
        }
        BrowserLocalPersistence.prototype.forAllChangedKeys = function (cb) {
            // Check all keys with listeners on them.
            for (var _i = 0, _a = Object.keys(this.listeners); _i < _a.length; _i++) {
                var key = _a[_i];
                // Get value from localStorage.
                var newValue = this.storage.getItem(key);
                var oldValue = this.localCache[key];
                // If local map value does not match, trigger listener with storage event.
                // Differentiate this simulated event from the real storage event.
                if (newValue !== oldValue) {
                    cb(key, oldValue, newValue);
                }
            }
        };
        BrowserLocalPersistence.prototype.onStorageEvent = function (event, poll) {
            var _this = this;
            if (poll === void 0) { poll = false; }
            // Key would be null in some situations, like when localStorage is cleared
            if (!event.key) {
                this.forAllChangedKeys(function (key, _oldValue, newValue) {
                    _this.notifyListeners(key, newValue);
                });
                return;
            }
            var key = event.key;
            // Ignore keys that have no listeners.
            if (!this.listeners[key]) {
                return;
            }
            // Check the mechanism how this event was detected.
            // The first event will dictate the mechanism to be used.
            if (poll) {
                // Environment detects storage changes via polling.
                // Remove storage event listener to prevent possible event duplication.
                this.detachListener();
            }
            else {
                // Environment detects storage changes via storage event listener.
                // Remove polling listener to prevent possible event duplication.
                this.stopPolling();
            }
            // Safari embedded iframe. Storage event will trigger with the delta
            // changes but no changes will be applied to the iframe localStorage.
            if (this.safariLocalStorageNotSynced) {
                // Get current iframe page value.
                var storedValue_1 = this.storage.getItem(key);
                // Value not synchronized, synchronize manually.
                if (event.newValue !== storedValue_1) {
                    if (event.newValue !== null) {
                        // Value changed from current value.
                        this.storage.setItem(key, event.newValue);
                    }
                    else {
                        // Current value deleted.
                        this.storage.removeItem(key);
                    }
                }
                else if (this.localCache[key] === event.newValue && !poll) {
                    // Already detected and processed, do not trigger listeners again.
                    return;
                }
            }
            var triggerListeners = function () {
                // Keep local map up to date in case storage event is triggered before
                // poll.
                var storedValue = _this.storage.getItem(key);
                if (!poll && _this.localCache[key] === storedValue) {
                    // Real storage event which has already been detected, do nothing.
                    // This seems to trigger in some IE browsers for some reason.
                    return;
                }
                _this.notifyListeners(key, storedValue);
            };
            var storedValue = this.storage.getItem(key);
            if (_isIE10() &&
                storedValue !== event.newValue &&
                event.newValue !== event.oldValue) {
                // IE 10 has this weird bug where a storage event would trigger with the
                // correct key, oldValue and newValue but localStorage.getItem(key) does
                // not yield the updated value until a few milliseconds. This ensures
                // this recovers from that situation.
                setTimeout(triggerListeners, IE10_LOCAL_STORAGE_SYNC_DELAY);
            }
            else {
                triggerListeners();
            }
        };
        BrowserLocalPersistence.prototype.notifyListeners = function (key, value) {
            if (!this.listeners[key]) {
                return;
            }
            this.localCache[key] = value;
            for (var _i = 0, _a = Array.from(this.listeners[key]); _i < _a.length; _i++) {
                var listener = _a[_i];
                listener(value ? JSON.parse(value) : value);
            }
        };
        BrowserLocalPersistence.prototype.startPolling = function () {
            var _this = this;
            this.stopPolling();
            this.pollTimer = setInterval(function () {
                _this.forAllChangedKeys(function (key, oldValue, newValue) {
                    _this.onStorageEvent(new StorageEvent('storage', {
                        key: key,
                        oldValue: oldValue,
                        newValue: newValue
                    }), 
                    /* poll */ true);
                });
            }, _POLLING_INTERVAL_MS);
        };
        BrowserLocalPersistence.prototype.stopPolling = function () {
            if (this.pollTimer) {
                clearInterval(this.pollTimer);
                this.pollTimer = null;
            }
        };
        BrowserLocalPersistence.prototype.attachListener = function () {
            window.addEventListener('storage', this.boundEventHandler);
        };
        BrowserLocalPersistence.prototype.detachListener = function () {
            window.removeEventListener('storage', this.boundEventHandler);
        };
        BrowserLocalPersistence.prototype._addListener = function (key, listener) {
            this.localCache[key] = this.storage.getItem(key);
            if (Object.keys(this.listeners).length === 0) {
                // Whether browser can detect storage event when it had already been pushed to the background.
                // This may happen in some mobile browsers. A localStorage change in the foreground window
                // will not be detected in the background window via the storage event.
                // This was detected in iOS 7.x mobile browsers
                if (this.fallbackToPolling) {
                    this.startPolling();
                }
                else {
                    this.attachListener();
                }
            }
            this.listeners[key] = this.listeners[key] || new Set();
            this.listeners[key].add(listener);
        };
        BrowserLocalPersistence.prototype._removeListener = function (key, listener) {
            if (this.listeners[key]) {
                this.listeners[key].delete(listener);
                if (this.listeners[key].size === 0) {
                    delete this.listeners[key];
                    delete this.localCache[key];
                }
            }
            if (Object.keys(this.listeners).length === 0) {
                this.detachListener();
                this.stopPolling();
            }
        };
        BrowserLocalPersistence.type = 'LOCAL';
        return BrowserLocalPersistence;
    }(BrowserPersistenceClass));
    /**
     * An implementation of {@link @firebase/auth-types#Persistence} of type 'LOCAL' using `localStorage`
     * for the underlying storage.
     *
     * @public
     */
    var browserLocalPersistence = BrowserLocalPersistence;

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Shim for Promise.allSettled, note the slightly different format of `fulfilled` vs `status`.
     *
     * @param promises - Array of promises to wait on.
     */
    function _allSettled(promises) {
        var _this = this;
        return Promise.all(promises.map(function (promise) { return __awaiter(_this, void 0, void 0, function () {
            var value, reason_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, promise];
                    case 1:
                        value = _a.sent();
                        return [2 /*return*/, {
                                fulfilled: true,
                                value: value
                            }];
                    case 2:
                        reason_1 = _a.sent();
                        return [2 /*return*/, {
                                fulfilled: false,
                                reason: reason_1
                            }];
                    case 3: return [2 /*return*/];
                }
            });
        }); }));
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Interface class for receiving messages.
     *
     * @internal
     */
    var Receiver = /** @class */ (function () {
        function Receiver(eventTarget) {
            this.eventTarget = eventTarget;
            this.handlersMap = {};
            this.boundEventHandler = this.handleEvent.bind(this);
        }
        /**
         * Obtain an instance of a Receiver for a given event target, if none exists it will be created.
         *
         * @param eventTarget - An event target (such as window or self) through which the underlying
         * messages will be received.
         */
        Receiver._getInstance = function (eventTarget) {
            // The results are stored in an array since objects can't be keys for other
            // objects. In addition, setting a unique property on an event target as a
            // hash map key may not be allowed due to CORS restrictions.
            var existingInstance = this.receivers.find(function (receiver) {
                return receiver.isListeningto(eventTarget);
            });
            if (existingInstance) {
                return existingInstance;
            }
            var newInstance = new Receiver(eventTarget);
            this.receivers.push(newInstance);
            return newInstance;
        };
        Receiver.prototype.isListeningto = function (eventTarget) {
            return this.eventTarget === eventTarget;
        };
        /**
         * Fans out a MessageEvent to the appropriate listeners.
         *
         * @remarks
         * Sends an {@link Status.ACK} upon receipt and a {@link Status.DONE} once all handlers have
         * finished processing.
         *
         * @param event - The MessageEvent.
         *
         * @internal
         */
        Receiver.prototype.handleEvent = function (event) {
            return __awaiter(this, void 0, void 0, function () {
                var messageEvent, _a, eventId, eventType, data, handlers, promises, response;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            messageEvent = event;
                            _a = messageEvent.data, eventId = _a.eventId, eventType = _a.eventType, data = _a.data;
                            handlers = this.handlersMap[eventType];
                            if (!(handlers === null || handlers === void 0 ? void 0 : handlers.size)) {
                                return [2 /*return*/];
                            }
                            messageEvent.ports[0].postMessage({
                                status: "ack" /* ACK */,
                                eventId: eventId,
                                eventType: eventType
                            });
                            promises = Array.from(handlers).map(function (handler) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                return [2 /*return*/, handler(messageEvent.origin, data)];
                            }); }); });
                            return [4 /*yield*/, _allSettled(promises)];
                        case 1:
                            response = _b.sent();
                            messageEvent.ports[0].postMessage({
                                status: "done" /* DONE */,
                                eventId: eventId,
                                eventType: eventType,
                                response: response
                            });
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Subscribe an event handler for a particular event.
         *
         * @param eventType - Event name to subscribe to.
         * @param eventHandler - The event handler which should receive the events.
         *
         * @internal
         */
        Receiver.prototype._subscribe = function (eventType, eventHandler) {
            if (Object.keys(this.handlersMap).length === 0) {
                this.eventTarget.addEventListener('message', this.boundEventHandler);
            }
            if (!this.handlersMap[eventType]) {
                this.handlersMap[eventType] = new Set();
            }
            this.handlersMap[eventType].add(eventHandler);
        };
        /**
         * Unsubscribe an event handler from a particular event.
         *
         * @param eventType - Event name to unsubscribe from.
         * @param eventHandler - Optinoal event handler, if none provided, unsubscribe all handlers on this event.
         *
         * @internal
         */
        Receiver.prototype._unsubscribe = function (eventType, eventHandler) {
            if (this.handlersMap[eventType] && eventHandler) {
                this.handlersMap[eventType].delete(eventHandler);
            }
            if (!eventHandler || this.handlersMap[eventType].size === 0) {
                delete this.handlersMap[eventType];
            }
            if (Object.keys(this.handlersMap).length === 0) {
                this.eventTarget.removeEventListener('message', this.boundEventHandler);
            }
        };
        Receiver.receivers = [];
        return Receiver;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function generateEventId(prefix, digits) {
        if (prefix === void 0) { prefix = ''; }
        if (digits === void 0) { digits = 20; }
        return "" + prefix + Math.floor(Math.random() * Math.pow(10, digits));
    }
    /**
     * Interface for sending messages and waiting for a completion response.
     *
     * @internal
     */
    var Sender = /** @class */ (function () {
        function Sender(target) {
            this.target = target;
            this.handlers = new Set();
        }
        /**
         * Unsubscribe the handler and remove it from our tracking Set.
         *
         * @param handler - The handler to unsubscribe.
         */
        Sender.prototype.removeMessageHandler = function (handler) {
            if (handler.messageChannel) {
                handler.messageChannel.port1.removeEventListener('message', handler.onMessage);
                handler.messageChannel.port1.close();
            }
            this.handlers.delete(handler);
        };
        /**
         * Send a message to the Receiver located at {@link target}.
         *
         * @remarks
         * We'll first wait a bit for an ACK , if we get one we will wait significantly longer until the
         * receiver has had a chance to fully process the event.
         *
         * @param eventType - Type of event to send.
         * @param data - The payload of the event.
         * @param timeout - Timeout for waiting on an ACK from the receiver.
         *
         * @returns An array of settled promises from all the handlers that were listening on the receiver.
         */
        Sender.prototype._send = function (eventType, data, timeout) {
            if (timeout === void 0) { timeout = 50 /* ACK */; }
            return __awaiter(this, void 0, void 0, function () {
                var messageChannel, completionTimer, handler;
                var _this = this;
                return __generator(this, function (_a) {
                    messageChannel = typeof MessageChannel !== 'undefined' ? new MessageChannel() : null;
                    if (!messageChannel) {
                        throw new Error("connection_unavailable" /* CONNECTION_UNAVAILABLE */);
                    }
                    return [2 /*return*/, new Promise(function (resolve, reject) {
                            var eventId = generateEventId();
                            messageChannel.port1.start();
                            var ackTimer = setTimeout(function () {
                                reject(new Error("unsupported_event" /* UNSUPPORTED_EVENT */));
                            }, timeout);
                            handler = {
                                messageChannel: messageChannel,
                                onMessage: function (event) {
                                    var messageEvent = event;
                                    if (messageEvent.data.eventId !== eventId) {
                                        return;
                                    }
                                    switch (messageEvent.data.status) {
                                        case "ack" /* ACK */:
                                            // The receiver should ACK first.
                                            clearTimeout(ackTimer);
                                            completionTimer = setTimeout(function () {
                                                reject(new Error("timeout" /* TIMEOUT */));
                                            }, 3000 /* COMPLETION */);
                                            break;
                                        case "done" /* DONE */:
                                            // Once the receiver's handlers are finished we will get the results.
                                            clearTimeout(completionTimer);
                                            resolve(messageEvent.data.response);
                                            break;
                                        default:
                                            clearTimeout(ackTimer);
                                            clearTimeout(completionTimer);
                                            reject(new Error("invalid_response" /* INVALID_RESPONSE */));
                                            break;
                                    }
                                }
                            };
                            _this.handlers.add(handler);
                            messageChannel.port1.addEventListener('message', handler.onMessage);
                            _this.target.postMessage({
                                eventType: eventType,
                                eventId: eventId,
                                data: data
                            }, [messageChannel.port2]);
                        }).finally(function () {
                            if (handler) {
                                _this.removeMessageHandler(handler);
                            }
                        })];
                });
            });
        };
        return Sender;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Lazy accessor for window, since the compat layer won't tree shake this out,
     * we need to make sure not to mess with window unless we have to
     */
    function _window() {
        return window;
    }
    function _setWindowLocation(url) {
        _window().location.href = url;
    }

    /**
     * @license
     * Copyright 2020 Google LLC.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _isWorker() {
        return (typeof _window()['WorkerGlobalScope'] !== 'undefined' &&
            typeof _window()['importScripts'] === 'function');
    }
    function _getActiveServiceWorker() {
        return __awaiter(this, void 0, void 0, function () {
            var registration, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker)) {
                            return [2 /*return*/, null];
                        }
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, navigator.serviceWorker.ready];
                    case 2:
                        registration = _b.sent();
                        return [2 /*return*/, registration.active];
                    case 3:
                        _a = _b.sent();
                        return [2 /*return*/, null];
                    case 4: return [2 /*return*/];
                }
            });
        });
    }
    function _getServiceWorkerController() {
        var _a;
        return ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker) === null || _a === void 0 ? void 0 : _a.controller) || null;
    }
    function _getWorkerGlobalScope() {
        return _isWorker() ? self : null;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DB_NAME = 'firebaseLocalStorageDb';
    var DB_VERSION = 1;
    var DB_OBJECTSTORE_NAME = 'firebaseLocalStorage';
    var DB_DATA_KEYPATH = 'fbase_key';
    /**
     * Promise wrapper for IDBRequest
     *
     * Unfortunately we can't cleanly extend Promise<T> since promises are not callable in ES6
     *
     * @internal
     */
    var DBPromise = /** @class */ (function () {
        function DBPromise(request) {
            this.request = request;
        }
        DBPromise.prototype.toPromise = function () {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.request.addEventListener('success', function () {
                    resolve(_this.request.result);
                });
                _this.request.addEventListener('error', function () {
                    reject(_this.request.error);
                });
            });
        };
        return DBPromise;
    }());
    function getObjectStore(db, isReadWrite) {
        return db
            .transaction([DB_OBJECTSTORE_NAME], isReadWrite ? 'readwrite' : 'readonly')
            .objectStore(DB_OBJECTSTORE_NAME);
    }
    /** @internal */
    function _deleteDatabase() {
        var request = indexedDB.deleteDatabase(DB_NAME);
        return new DBPromise(request).toPromise();
    }
    /** @internal */
    function _openDatabase() {
        var _this = this;
        var request = indexedDB.open(DB_NAME, DB_VERSION);
        return new Promise(function (resolve, reject) {
            request.addEventListener('error', function () {
                reject(request.error);
            });
            request.addEventListener('upgradeneeded', function () {
                var db = request.result;
                try {
                    db.createObjectStore(DB_OBJECTSTORE_NAME, { keyPath: DB_DATA_KEYPATH });
                }
                catch (e) {
                    reject(e);
                }
            });
            request.addEventListener('success', function () { return __awaiter(_this, void 0, void 0, function () {
                var db;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            db = request.result;
                            if (!!db.objectStoreNames.contains(DB_OBJECTSTORE_NAME)) return [3 /*break*/, 2];
                            return [4 /*yield*/, _deleteDatabase()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, _openDatabase()];
                        case 2:
                            resolve(db);
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            }); });
        });
    }
    /** @internal */
    function _putObject(db, key, value) {
        return __awaiter(this, void 0, void 0, function () {
            var getRequest, data, request, request;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        getRequest = getObjectStore(db, false).get(key);
                        return [4 /*yield*/, new DBPromise(getRequest).toPromise()];
                    case 1:
                        data = _b.sent();
                        if (data) {
                            // Force an index signature on the user object
                            data.value = value;
                            request = getObjectStore(db, true).put(data);
                            return [2 /*return*/, new DBPromise(request).toPromise()];
                        }
                        else {
                            request = getObjectStore(db, true).add((_a = {},
                                _a[DB_DATA_KEYPATH] = key,
                                _a.value = value,
                                _a));
                            return [2 /*return*/, new DBPromise(request).toPromise()];
                        }
                }
            });
        });
    }
    function getObject(db, key) {
        return __awaiter(this, void 0, void 0, function () {
            var request, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        request = getObjectStore(db, false).get(key);
                        return [4 /*yield*/, new DBPromise(request).toPromise()];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data === undefined ? null : data.value];
                }
            });
        });
    }
    function deleteObject(db, key) {
        var request = getObjectStore(db, true).delete(key);
        return new DBPromise(request).toPromise();
    }
    /** @internal */
    var _POLLING_INTERVAL_MS$1 = 800;
    /** @internal */
    var _TRANSACTION_RETRY_COUNT = 3;
    var IndexedDBLocalPersistence = /** @class */ (function () {
        function IndexedDBLocalPersistence() {
            this.type = "LOCAL" /* LOCAL */;
            this.listeners = {};
            this.localCache = {};
            // setTimeout return value is platform specific
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.pollTimer = null;
            this.pendingWrites = 0;
            this.receiver = null;
            this.sender = null;
            this.serviceWorkerReceiverAvailable = false;
            this.activeServiceWorker = null;
            // Fire & forget the service worker registration as it may never resolve
            this._workerInitializationPromise = this.initializeServiceWorkerMessaging().then(function () { }, function () { });
        }
        IndexedDBLocalPersistence.prototype._openDb = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (this.db) {
                                return [2 /*return*/, this.db];
                            }
                            _a = this;
                            return [4 /*yield*/, _openDatabase()];
                        case 1:
                            _a.db = _b.sent();
                            return [2 /*return*/, this.db];
                    }
                });
            });
        };
        IndexedDBLocalPersistence.prototype._withRetries = function (op) {
            return __awaiter(this, void 0, void 0, function () {
                var numAttempts, db, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            numAttempts = 0;
                            _a.label = 1;
                        case 1:
                            _a.label = 2;
                        case 2:
                            _a.trys.push([2, 5, , 6]);
                            return [4 /*yield*/, this._openDb()];
                        case 3:
                            db = _a.sent();
                            return [4 /*yield*/, op(db)];
                        case 4: return [2 /*return*/, _a.sent()];
                        case 5:
                            e_1 = _a.sent();
                            if (numAttempts++ > _TRANSACTION_RETRY_COUNT) {
                                throw e_1;
                            }
                            if (this.db) {
                                this.db.close();
                                this.db = undefined;
                            }
                            return [3 /*break*/, 6];
                        case 6: return [3 /*break*/, 1];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * IndexedDB events do not propagate from the main window to the worker context.  We rely on a
         * postMessage interface to send these events to the worker ourselves.
         */
        IndexedDBLocalPersistence.prototype.initializeServiceWorkerMessaging = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, _isWorker() ? this.initializeReceiver() : this.initializeSender()];
                });
            });
        };
        /**
         * As the worker we should listen to events from the main window.
         */
        IndexedDBLocalPersistence.prototype.initializeReceiver = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    this.receiver = Receiver._getInstance(_getWorkerGlobalScope());
                    // Refresh from persistence if we receive a KeyChanged message.
                    this.receiver._subscribe("keyChanged" /* KEY_CHANGED */, function (_origin, data) { return __awaiter(_this, void 0, void 0, function () {
                        var keys;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this._poll()];
                                case 1:
                                    keys = _a.sent();
                                    return [2 /*return*/, {
                                            keyProcessed: keys.includes(data.key)
                                        }];
                            }
                        });
                    }); });
                    // Let the sender know that we are listening so they give us more timeout.
                    this.receiver._subscribe("ping" /* PING */, function (_origin, _data) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            return [2 /*return*/, ["keyChanged" /* KEY_CHANGED */]];
                        });
                    }); });
                    return [2 /*return*/];
                });
            });
        };
        /**
         * As the main window, we should let the worker know when keys change (set and remove).
         *
         * @remarks
         * {@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready | ServiceWorkerContainer.ready}
         * may not resolve.
         */
        IndexedDBLocalPersistence.prototype.initializeSender = function () {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function () {
                var _c, results;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            // Check to see if there's an active service worker.
                            _c = this;
                            return [4 /*yield*/, _getActiveServiceWorker()];
                        case 1:
                            // Check to see if there's an active service worker.
                            _c.activeServiceWorker = _d.sent();
                            if (!this.activeServiceWorker) {
                                return [2 /*return*/];
                            }
                            this.sender = new Sender(this.activeServiceWorker);
                            return [4 /*yield*/, this.sender._send("ping" /* PING */, {}, 800 /* LONG_ACK */)];
                        case 2:
                            results = _d.sent();
                            if (!results) {
                                return [2 /*return*/];
                            }
                            if (((_a = results[0]) === null || _a === void 0 ? void 0 : _a.fulfilled) && ((_b = results[0]) === null || _b === void 0 ? void 0 : _b.value.includes("keyChanged" /* KEY_CHANGED */))) {
                                this.serviceWorkerReceiverAvailable = true;
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Let the worker know about a changed key, the exact key doesn't technically matter since the
         * worker will just trigger a full sync anyway.
         *
         * @remarks
         * For now, we only support one service worker per page.
         *
         * @param key - Storage key which changed.
         */
        IndexedDBLocalPersistence.prototype.notifyServiceWorker = function (key) {
            return __awaiter(this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!this.sender ||
                                !this.activeServiceWorker ||
                                _getServiceWorkerController() !== this.activeServiceWorker) {
                                return [2 /*return*/];
                            }
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.sender._send("keyChanged" /* KEY_CHANGED */, { key: key }, 
                                // Use long timeout if receiver has previously responded to a ping from us.
                                this.serviceWorkerReceiverAvailable
                                    ? 800 /* LONG_ACK */
                                    : 50 /* ACK */)];
                        case 2:
                            _b.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            _a = _b.sent();
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        IndexedDBLocalPersistence.prototype._isAvailable = function () {
            return __awaiter(this, void 0, void 0, function () {
                var db, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 4, , 5]);
                            if (!indexedDB) {
                                return [2 /*return*/, false];
                            }
                            return [4 /*yield*/, _openDatabase()];
                        case 1:
                            db = _b.sent();
                            return [4 /*yield*/, _putObject(db, STORAGE_AVAILABLE_KEY, '1')];
                        case 2:
                            _b.sent();
                            return [4 /*yield*/, deleteObject(db, STORAGE_AVAILABLE_KEY)];
                        case 3:
                            _b.sent();
                            return [2 /*return*/, true];
                        case 4:
                            _a = _b.sent();
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/, false];
                    }
                });
            });
        };
        IndexedDBLocalPersistence.prototype._withPendingWrite = function (write) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.pendingWrites++;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, , 3, 4]);
                            return [4 /*yield*/, write()];
                        case 2:
                            _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            this.pendingWrites--;
                            return [7 /*endfinally*/];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        IndexedDBLocalPersistence.prototype._set = function (key, value) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2 /*return*/, this._withPendingWrite(function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this._withRetries(function (db) { return _putObject(db, key, value); })];
                                    case 1:
                                        _a.sent();
                                        this.localCache[key] = value;
                                        return [2 /*return*/, this.notifyServiceWorker(key)];
                                }
                            });
                        }); })];
                });
            });
        };
        IndexedDBLocalPersistence.prototype._get = function (key) {
            return __awaiter(this, void 0, void 0, function () {
                var obj;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this._withRetries(function (db) {
                                return getObject(db, key);
                            })];
                        case 1:
                            obj = (_a.sent());
                            this.localCache[key] = obj;
                            return [2 /*return*/, obj];
                    }
                });
            });
        };
        IndexedDBLocalPersistence.prototype._remove = function (key) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2 /*return*/, this._withPendingWrite(function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this._withRetries(function (db) { return deleteObject(db, key); })];
                                    case 1:
                                        _a.sent();
                                        delete this.localCache[key];
                                        return [2 /*return*/, this.notifyServiceWorker(key)];
                                }
                            });
                        }); })];
                });
            });
        };
        IndexedDBLocalPersistence.prototype._poll = function () {
            return __awaiter(this, void 0, void 0, function () {
                var result, keys, _i, result_1, _a, key, value;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this._withRetries(function (db) {
                                var getAllRequest = getObjectStore(db, false).getAll();
                                return new DBPromise(getAllRequest).toPromise();
                            })];
                        case 1:
                            result = _b.sent();
                            if (!result) {
                                return [2 /*return*/, []];
                            }
                            // If we have pending writes in progress abort, we'll get picked up on the next poll
                            if (this.pendingWrites !== 0) {
                                return [2 /*return*/, []];
                            }
                            keys = [];
                            for (_i = 0, result_1 = result; _i < result_1.length; _i++) {
                                _a = result_1[_i], key = _a.fbase_key, value = _a.value;
                                if (JSON.stringify(this.localCache[key]) !== JSON.stringify(value)) {
                                    this.notifyListeners(key, value);
                                    keys.push(key);
                                }
                            }
                            return [2 /*return*/, keys];
                    }
                });
            });
        };
        IndexedDBLocalPersistence.prototype.notifyListeners = function (key, newValue) {
            if (!this.listeners[key]) {
                return;
            }
            this.localCache[key] = newValue;
            for (var _i = 0, _a = Array.from(this.listeners[key]); _i < _a.length; _i++) {
                var listener = _a[_i];
                listener(newValue);
            }
        };
        IndexedDBLocalPersistence.prototype.startPolling = function () {
            var _this = this;
            this.stopPolling();
            this.pollTimer = setInterval(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                return [2 /*return*/, this._poll()];
            }); }); }, _POLLING_INTERVAL_MS$1);
        };
        IndexedDBLocalPersistence.prototype.stopPolling = function () {
            if (this.pollTimer) {
                clearInterval(this.pollTimer);
                this.pollTimer = null;
            }
        };
        IndexedDBLocalPersistence.prototype._addListener = function (key, listener) {
            if (Object.keys(this.listeners).length === 0) {
                this.startPolling();
            }
            this.listeners[key] = this.listeners[key] || new Set();
            this.listeners[key].add(listener);
        };
        IndexedDBLocalPersistence.prototype._removeListener = function (key, listener) {
            if (this.listeners[key]) {
                this.listeners[key].delete(listener);
                if (this.listeners[key].size === 0) {
                    delete this.listeners[key];
                    delete this.localCache[key];
                }
            }
            if (Object.keys(this.listeners).length === 0) {
                this.stopPolling();
            }
        };
        IndexedDBLocalPersistence.type = 'LOCAL';
        return IndexedDBLocalPersistence;
    }());
    /**
     * An implementation of {@link @firebase/auth-types#Persistence} of type 'LOCAL' using `indexedDB`
     * for the underlying storage.
     *
     * @public
     */
    var indexedDBLocalPersistence = IndexedDBLocalPersistence;

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // The amount of time to store the UIDs of seen events; this is
    // set to 10 min by default
    var EVENT_DUPLICATION_CACHE_DURATION_MS = 10 * 60 * 1000;
    var AuthEventManager = /** @class */ (function () {
        function AuthEventManager(auth) {
            this.auth = auth;
            this.cachedEventUids = new Set();
            this.consumers = new Set();
            this.queuedRedirectEvent = null;
            this.hasHandledPotentialRedirect = false;
            this.lastProcessedEventTime = Date.now();
        }
        AuthEventManager.prototype.registerConsumer = function (authEventConsumer) {
            this.consumers.add(authEventConsumer);
            if (this.queuedRedirectEvent &&
                this.isEventForConsumer(this.queuedRedirectEvent, authEventConsumer)) {
                this.sendToConsumer(this.queuedRedirectEvent, authEventConsumer);
                this.saveEventToCache(this.queuedRedirectEvent);
                this.queuedRedirectEvent = null;
            }
        };
        AuthEventManager.prototype.unregisterConsumer = function (authEventConsumer) {
            this.consumers.delete(authEventConsumer);
        };
        AuthEventManager.prototype.onEvent = function (event) {
            var _this = this;
            // Check if the event has already been handled
            if (this.hasEventBeenHandled(event)) {
                return false;
            }
            var handled = false;
            this.consumers.forEach(function (consumer) {
                if (_this.isEventForConsumer(event, consumer)) {
                    handled = true;
                    _this.sendToConsumer(event, consumer);
                    _this.saveEventToCache(event);
                }
            });
            if (this.hasHandledPotentialRedirect || !isRedirectEvent(event)) {
                // If we've already seen a redirect before, or this is a popup event,
                // bail now
                return handled;
            }
            this.hasHandledPotentialRedirect = true;
            // If the redirect wasn't handled, hang on to it
            if (!handled) {
                this.queuedRedirectEvent = event;
                handled = true;
            }
            return handled;
        };
        AuthEventManager.prototype.sendToConsumer = function (event, consumer) {
            var _a;
            if (event.error && !isNullRedirectEvent(event)) {
                var code = ((_a = event.error.code) === null || _a === void 0 ? void 0 : _a.split('auth/')[1]) ||
                    "internal-error" /* INTERNAL_ERROR */;
                consumer.onError(_createError(this.auth, code));
            }
            else {
                consumer.onAuthEvent(event);
            }
        };
        AuthEventManager.prototype.isEventForConsumer = function (event, consumer) {
            var eventIdMatches = consumer.eventId === null ||
                (!!event.eventId && event.eventId === consumer.eventId);
            return consumer.filter.includes(event.type) && eventIdMatches;
        };
        AuthEventManager.prototype.hasEventBeenHandled = function (event) {
            if (Date.now() - this.lastProcessedEventTime >=
                EVENT_DUPLICATION_CACHE_DURATION_MS) {
                this.cachedEventUids.clear();
            }
            return this.cachedEventUids.has(eventUid(event));
        };
        AuthEventManager.prototype.saveEventToCache = function (event) {
            this.cachedEventUids.add(eventUid(event));
            this.lastProcessedEventTime = Date.now();
        };
        return AuthEventManager;
    }());
    function eventUid(e) {
        return [e.type, e.eventId, e.sessionId, e.tenantId].filter(function (v) { return v; }).join('-');
    }
    function isNullRedirectEvent(_a) {
        var type = _a.type, error = _a.error;
        return (type === "unknown" /* UNKNOWN */ &&
            (error === null || error === void 0 ? void 0 : error.code) === "auth/" + "no-auth-event" /* NO_AUTH_EVENT */);
    }
    function isRedirectEvent(event) {
        switch (event.type) {
            case "signInViaRedirect" /* SIGN_IN_VIA_REDIRECT */:
            case "linkViaRedirect" /* LINK_VIA_REDIRECT */:
            case "reauthViaRedirect" /* REAUTH_VIA_REDIRECT */:
                return true;
            case "unknown" /* UNKNOWN */:
                return isNullRedirectEvent(event);
            default:
                return false;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _generateEventId(prefix) {
        return "" + (prefix ? prefix : '') + Math.floor(Math.random() * 1000000000);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function _getProjectConfig(auth) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _performApiRequest(auth, "GET" /* GET */, "/v1/projects" /* GET_PROJECT_CONFIG */, {})];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var IP_ADDRESS_REGEX = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
    var HTTP_REGEX = /^https?/;
    function _validateOrigin(auth) {
        return __awaiter(this, void 0, void 0, function () {
            var authorizedDomains, _i, authorizedDomains_1, domain;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Skip origin validation if we are in an emulated environment
                        if (auth.config.emulator) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, _getProjectConfig(auth)];
                    case 1:
                        authorizedDomains = (_a.sent()).authorizedDomains;
                        for (_i = 0, authorizedDomains_1 = authorizedDomains; _i < authorizedDomains_1.length; _i++) {
                            domain = authorizedDomains_1[_i];
                            try {
                                if (matchDomain(domain)) {
                                    return [2 /*return*/];
                                }
                            }
                            catch (_b) {
                                // Do nothing if there's a URL error; just continue searching
                            }
                        }
                        // In the old SDK, this error also provides helpful messages.
                        _fail(auth, "unauthorized-domain" /* INVALID_ORIGIN */);
                        return [2 /*return*/];
                }
            });
        });
    }
    function matchDomain(expected) {
        var currentUrl = _getCurrentUrl();
        var _a = new URL(currentUrl), protocol = _a.protocol, hostname = _a.hostname;
        if (expected.startsWith('chrome-extension://')) {
            var ceUrl = new URL(expected);
            if (ceUrl.hostname === '' && hostname === '') {
                // For some reason we're not parsing chrome URLs properly
                return (protocol === 'chrome-extension:' &&
                    expected.replace('chrome-extension://', '') ===
                        currentUrl.replace('chrome-extension://', ''));
            }
            return protocol === 'chrome-extension:' && ceUrl.hostname === hostname;
        }
        if (!HTTP_REGEX.test(protocol)) {
            return false;
        }
        if (IP_ADDRESS_REGEX.test(expected)) {
            // The domain has to be exactly equal to the pattern, as an IP domain will
            // only contain the IP, no extra character.
            return hostname === expected;
        }
        // Dots in pattern should be escaped.
        var escapedDomainPattern = expected.replace(/\./g, '\\.');
        // Non ip address domains.
        // domain.com = *.domain.com OR domain.com
        var re = new RegExp('^(.+\\.' + escapedDomainPattern + '|' + escapedDomainPattern + ')$', 'i');
        return re.test(hostname);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getScriptParentElement() {
        var _a, _b;
        return (_b = (_a = document.getElementsByTagName('head')) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : document;
    }
    function _loadJS(url) {
        // TODO: consider adding timeout support & cancellation
        return new Promise(function (resolve, reject) {
            var el = document.createElement('script');
            el.setAttribute('src', url);
            el.onload = resolve;
            el.onerror = reject;
            el.type = 'text/javascript';
            el.charset = 'UTF-8';
            getScriptParentElement().appendChild(el);
        });
    }
    function _generateCallbackName(prefix) {
        return "__" + prefix + Math.floor(Math.random() * 1000000);
    }

    /**
     * @license
     * Copyright 2020 Google LLC.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var NETWORK_TIMEOUT = new Delay(30000, 60000);
    /**
     * Reset unlaoded GApi modules. If gapi.load fails due to a network error,
     * it will stop working after a retrial. This is a hack to fix this issue.
     */
    function resetUnloadedGapiModules() {
        // Clear last failed gapi.load state to force next gapi.load to first
        // load the failed gapi.iframes module.
        // Get gapix.beacon context.
        var beacon = _window().___jsl;
        // Get current hint.
        if (beacon === null || beacon === void 0 ? void 0 : beacon.H) {
            // Get gapi hint.
            for (var _i = 0, _a = Object.keys(beacon.H); _i < _a.length; _i++) {
                var hint = _a[_i];
                // Requested modules.
                beacon.H[hint].r = beacon.H[hint].r || [];
                // Loaded modules.
                beacon.H[hint].L = beacon.H[hint].L || [];
                // Set requested modules to a copy of the loaded modules.
                beacon.H[hint].r = __spreadArrays(beacon.H[hint].L);
                // Clear pending callbacks.
                if (beacon.CP) {
                    for (var i = 0; i < beacon.CP.length; i++) {
                        // Remove all failed pending callbacks.
                        beacon.CP[i] = null;
                    }
                }
            }
        }
    }
    function loadGapi(auth) {
        return new Promise(function (resolve, reject) {
            var _a, _b, _c;
            // Function to run when gapi.load is ready.
            function loadGapiIframe() {
                // The developer may have tried to previously run gapi.load and failed.
                // Run this to fix that.
                resetUnloadedGapiModules();
                gapi.load('gapi.iframes', {
                    callback: function () {
                        resolve(gapi.iframes.getContext());
                    },
                    ontimeout: function () {
                        // The above reset may be sufficient, but having this reset after
                        // failure ensures that if the developer calls gapi.load after the
                        // connection is re-established and before another attempt to embed
                        // the iframe, it would work and would not be broken because of our
                        // failed attempt.
                        // Timeout when gapi.iframes.Iframe not loaded.
                        resetUnloadedGapiModules();
                        reject(_createError(auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */));
                    },
                    timeout: NETWORK_TIMEOUT.get()
                });
            }
            if ((_b = (_a = _window().gapi) === null || _a === void 0 ? void 0 : _a.iframes) === null || _b === void 0 ? void 0 : _b.Iframe) {
                // If gapi.iframes.Iframe available, resolve.
                resolve(gapi.iframes.getContext());
            }
            else if (!!((_c = _window().gapi) === null || _c === void 0 ? void 0 : _c.load)) {
                // Gapi loader ready, load gapi.iframes.
                loadGapiIframe();
            }
            else {
                // Create a new iframe callback when this is called so as not to overwrite
                // any previous defined callback. This happens if this method is called
                // multiple times in parallel and could result in the later callback
                // overwriting the previous one. This would end up with a iframe
                // timeout.
                var cbName = _generateCallbackName('iframefcb');
                // GApi loader not available, dynamically load platform.js.
                _window()[cbName] = function () {
                    // GApi loader should be ready.
                    if (!!gapi.load) {
                        loadGapiIframe();
                    }
                    else {
                        // Gapi loader failed, throw error.
                        reject(_createError(auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */));
                    }
                };
                // Load GApi loader.
                return _loadJS("https://apis.google.com/js/api.js?onload=" + cbName);
            }
        }).catch(function (error) {
            // Reset cached promise to allow for retrial.
            cachedGApiLoader = null;
            throw error;
        });
    }
    var cachedGApiLoader = null;
    function _loadGapi(auth) {
        cachedGApiLoader = cachedGApiLoader || loadGapi(auth);
        return cachedGApiLoader;
    }

    /**
     * @license
     * Copyright 2020 Google LLC.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PING_TIMEOUT = new Delay(5000, 15000);
    var IFRAME_PATH = '__/auth/iframe';
    var EMULATED_IFRAME_PATH = 'emulator/auth/iframe';
    var IFRAME_ATTRIBUTES = {
        style: {
            position: 'absolute',
            top: '-100px',
            width: '1px',
            height: '1px'
        }
    };
    function getIframeUrl(auth) {
        var config = auth.config;
        _assert(config.authDomain, auth, "auth-domain-config-required" /* MISSING_AUTH_DOMAIN */);
        var url = config.emulator
            ? _emulatorUrl(config, EMULATED_IFRAME_PATH)
            : "https://" + auth.config.authDomain + "/" + IFRAME_PATH;
        var params = {
            apiKey: config.apiKey,
            appName: auth.name,
            v: app.SDK_VERSION
        };
        // Can pass 'eid' as one of 'p' (production), 's' (staging), or 't' (test)
        // TODO: do we care about frameworks? pass them as fw=
        return url + "?" + querystring(params).slice(1);
    }
    function _openIframe(auth) {
        return __awaiter(this, void 0, void 0, function () {
            var context, gapi;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _loadGapi(auth)];
                    case 1:
                        context = _a.sent();
                        gapi = _window().gapi;
                        _assert(gapi, auth, "internal-error" /* INTERNAL_ERROR */);
                        return [2 /*return*/, context.open({
                                where: document.body,
                                url: getIframeUrl(auth),
                                messageHandlersFilter: gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER,
                                attributes: IFRAME_ATTRIBUTES,
                                dontclear: true
                            }, function (iframe) {
                                return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                                    // Clear timer and resolve pending iframe ready promise.
                                    function clearTimerAndResolve() {
                                        _window().clearTimeout(networkErrorTimer);
                                        resolve(iframe);
                                    }
                                    var networkError, networkErrorTimer;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, iframe.restyle({
                                                    // Prevent iframe from closing on mouse out.
                                                    setHideOnLeave: false
                                                })];
                                            case 1:
                                                _a.sent();
                                                networkError = _createError(auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */);
                                                networkErrorTimer = _window().setTimeout(function () {
                                                    reject(networkError);
                                                }, PING_TIMEOUT.get());
                                                // This returns an IThenable. However the reject part does not call
                                                // when the iframe is not loaded.
                                                iframe.ping(clearTimerAndResolve).then(clearTimerAndResolve, function () {
                                                    reject(networkError);
                                                });
                                                return [2 /*return*/];
                                        }
                                    });
                                }); });
                            })];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var BrowserSessionPersistence = /** @class */ (function (_super) {
        __extends(BrowserSessionPersistence, _super);
        function BrowserSessionPersistence() {
            return _super.call(this, sessionStorage, "SESSION" /* SESSION */) || this;
        }
        BrowserSessionPersistence.prototype._addListener = function (_key, _listener) {
            // Listeners are not supported for session storage since it cannot be shared across windows
            return;
        };
        BrowserSessionPersistence.prototype._removeListener = function (_key, _listener) {
            // Listeners are not supported for session storage since it cannot be shared across windows
            return;
        };
        BrowserSessionPersistence.type = 'SESSION';
        return BrowserSessionPersistence;
    }(BrowserPersistenceClass));
    /**
     * An implementation of {@link @firebase/auth-types#Persistence} of 'SESSION' using `sessionStorage`
     * for the underlying storage.
     *
     * @public
     */
    var browserSessionPersistence = BrowserSessionPersistence;

    /**
     * @license
     * Copyright 2020 Google LLC.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var BASE_POPUP_OPTIONS = {
        location: 'yes',
        resizable: 'yes',
        statusbar: 'yes',
        toolbar: 'no'
    };
    var DEFAULT_WIDTH = 500;
    var DEFAULT_HEIGHT = 600;
    var TARGET_BLANK = '_blank';
    var FIREFOX_EMPTY_URL = 'http://localhost';
    var AuthPopup = /** @class */ (function () {
        function AuthPopup(window) {
            this.window = window;
            this.associatedEvent = null;
        }
        AuthPopup.prototype.close = function () {
            if (this.window) {
                try {
                    this.window.close();
                }
                catch (e) { }
            }
        };
        return AuthPopup;
    }());
    function _open(auth, url, name, width, height) {
        if (width === void 0) { width = DEFAULT_WIDTH; }
        if (height === void 0) { height = DEFAULT_HEIGHT; }
        var top = Math.min((window.screen.availHeight - height) / 2, 0).toString();
        var left = Math.min((window.screen.availWidth - width) / 2, 0).toString();
        var target = '';
        var options = __assign(__assign({}, BASE_POPUP_OPTIONS), { width: width.toString(), height: height.toString(), top: top,
            left: left });
        // Chrome iOS 7 and 8 is returning an undefined popup win when target is
        // specified, even though the popup is not necessarily blocked.
        var ua = getUA().toLowerCase();
        if (name) {
            target = _isChromeIOS(ua) ? TARGET_BLANK : name;
        }
        if (_isFirefox(ua)) {
            // Firefox complains when invalid URLs are popped out. Hacky way to bypass.
            url = url || FIREFOX_EMPTY_URL;
            // Firefox disables by default scrolling on popup windows, which can create
            // issues when the user has many Google accounts, for instance.
            options.scrollbars = 'yes';
        }
        var optionsString = Object.entries(options).reduce(function (accum, _a) {
            var key = _a[0], value = _a[1];
            return "" + accum + key + "=" + value + ",";
        }, '');
        if (_isIOSStandalone(ua) && target !== '_self') {
            openAsNewWindowIOS(url || '', target);
            return new AuthPopup(null);
        }
        // about:blank getting sanitized causing browsers like IE/Edge to display
        // brief error message before redirecting to handler.
        var newWin = window.open(url || '', target, optionsString);
        _assert(newWin, auth, "popup-blocked" /* POPUP_BLOCKED */);
        // Flaky on IE edge, encapsulate with a try and catch.
        try {
            newWin.focus();
        }
        catch (e) { }
        return new AuthPopup(newWin);
    }
    function openAsNewWindowIOS(url, target) {
        var el = document.createElement('a');
        el.href = url;
        el.target = target;
        var click = document.createEvent('MouseEvent');
        click.initMouseEvent('click', true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 1, null);
        el.dispatchEvent(click);
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** @internal */
    var IdpCredential = /** @class */ (function (_super) {
        __extends(IdpCredential, _super);
        function IdpCredential(params) {
            var _this = _super.call(this, "custom" /* CUSTOM */, "custom" /* CUSTOM */) || this;
            _this.params = params;
            return _this;
        }
        IdpCredential.prototype._getIdTokenResponse = function (auth) {
            return signInWithIdp(auth, this._buildIdpRequest());
        };
        IdpCredential.prototype._linkToIdToken = function (auth, idToken) {
            return signInWithIdp(auth, this._buildIdpRequest(idToken));
        };
        IdpCredential.prototype._getReauthenticationResolver = function (auth) {
            return signInWithIdp(auth, this._buildIdpRequest());
        };
        IdpCredential.prototype._buildIdpRequest = function (idToken) {
            var request = {
                requestUri: this.params.requestUri,
                sessionId: this.params.sessionId,
                postBody: this.params.postBody || null,
                tenantId: this.params.tenantId,
                pendingToken: this.params.pendingToken,
                returnSecureToken: true
            };
            if (idToken) {
                request.idToken = idToken;
            }
            return request;
        };
        return IdpCredential;
    }(AuthCredential));
    /** @internal */
    function _signIn(params) {
        return _signInWithCredential(params.auth, new IdpCredential(params), params.bypassAuthState);
    }
    /** @internal */
    function _reauth(params) {
        var auth = params.auth, user = params.user;
        _assert(user, auth, "internal-error" /* INTERNAL_ERROR */);
        return _reauthenticate(user, new IdpCredential(params), params.bypassAuthState);
    }
    /** @internal */
    function _link$1(params) {
        return __awaiter(this, void 0, void 0, function () {
            var auth, user;
            return __generator(this, function (_a) {
                auth = params.auth, user = params.user;
                _assert(user, auth, "internal-error" /* INTERNAL_ERROR */);
                return [2 /*return*/, _link(user, new IdpCredential(params), params.bypassAuthState)];
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Popup event manager. Handles the popup's entire lifecycle; listens to auth
     * events
     */
    var AbstractPopupRedirectOperation = /** @class */ (function () {
        function AbstractPopupRedirectOperation(auth, filter, resolver, user, bypassAuthState) {
            if (bypassAuthState === void 0) { bypassAuthState = false; }
            this.auth = auth;
            this.resolver = resolver;
            this.user = user;
            this.bypassAuthState = bypassAuthState;
            this.pendingPromise = null;
            this.eventManager = null;
            this.filter = Array.isArray(filter) ? filter : [filter];
        }
        AbstractPopupRedirectOperation.prototype.execute = function () {
            var _this = this;
            return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                var _a, e_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.pendingPromise = { resolve: resolve, reject: reject };
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 4, , 5]);
                            _a = this;
                            return [4 /*yield*/, this.resolver._initialize(this.auth)];
                        case 2:
                            _a.eventManager = _b.sent();
                            return [4 /*yield*/, this.onExecution()];
                        case 3:
                            _b.sent();
                            this.eventManager.registerConsumer(this);
                            return [3 /*break*/, 5];
                        case 4:
                            e_1 = _b.sent();
                            this.reject(e_1);
                            return [3 /*break*/, 5];
                        case 5: return [2 /*return*/];
                    }
                });
            }); });
        };
        AbstractPopupRedirectOperation.prototype.onAuthEvent = function (event) {
            return __awaiter(this, void 0, void 0, function () {
                var urlResponse, sessionId, postBody, tenantId, error, type, params, _a, e_2;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            urlResponse = event.urlResponse, sessionId = event.sessionId, postBody = event.postBody, tenantId = event.tenantId, error = event.error, type = event.type;
                            if (error) {
                                this.reject(error);
                                return [2 /*return*/];
                            }
                            params = {
                                auth: this.auth,
                                requestUri: urlResponse,
                                sessionId: sessionId,
                                tenantId: tenantId || undefined,
                                postBody: postBody || undefined,
                                user: this.user,
                                bypassAuthState: this.bypassAuthState
                            };
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            _a = this.resolve;
                            return [4 /*yield*/, this.getIdpTask(type)(params)];
                        case 2:
                            _a.apply(this, [_b.sent()]);
                            return [3 /*break*/, 4];
                        case 3:
                            e_2 = _b.sent();
                            this.reject(e_2);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        AbstractPopupRedirectOperation.prototype.onError = function (error) {
            this.reject(error);
        };
        AbstractPopupRedirectOperation.prototype.getIdpTask = function (type) {
            switch (type) {
                case "signInViaPopup" /* SIGN_IN_VIA_POPUP */:
                case "signInViaRedirect" /* SIGN_IN_VIA_REDIRECT */:
                    return _signIn;
                case "linkViaPopup" /* LINK_VIA_POPUP */:
                case "linkViaRedirect" /* LINK_VIA_REDIRECT */:
                    return _link$1;
                case "reauthViaPopup" /* REAUTH_VIA_POPUP */:
                case "reauthViaRedirect" /* REAUTH_VIA_REDIRECT */:
                    return _reauth;
                default:
                    _fail(this.auth, "internal-error" /* INTERNAL_ERROR */);
            }
        };
        AbstractPopupRedirectOperation.prototype.resolve = function (cred) {
            debugAssert(this.pendingPromise, 'Pending promise was never set');
            this.pendingPromise.resolve(cred);
            this.unregisterAndCleanUp();
        };
        AbstractPopupRedirectOperation.prototype.reject = function (error) {
            debugAssert(this.pendingPromise, 'Pending promise was never set');
            this.pendingPromise.reject(error);
            this.unregisterAndCleanUp();
        };
        AbstractPopupRedirectOperation.prototype.unregisterAndCleanUp = function () {
            if (this.eventManager) {
                this.eventManager.unregisterConsumer(this);
            }
            this.pendingPromise = null;
            this.cleanUp();
        };
        return AbstractPopupRedirectOperation;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Authenticates a Firebase client using a full-page redirect flow.
     *
     * @remarks
     * To handle the results and errors for this operation, refer to {@link getRedirectResult}.
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new FacebookAuthProvider();
     * // You can add additional scopes to the provider:
     * provider.addScope('user_birthday');
     * // Start a sign in process for an unauthenticated user.
     * await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * if (result) {
     *   // This is the signed-in user
     *   const user = result.user;
     *   // This gives you a Facebook Access Token.
     *   const credential = provider.credentialFromResult(auth, result);
     *   const token = credential.accessToken;
     * }
     * // As this API can be used for sign-in, linking and reauthentication,
     * // check the operationType to determine what triggered this redirect
     * // operation.
     * const operationType = result.operationType;
     * ```
     *
     * @param auth - The Auth instance.
     * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
     * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
     * @param resolver - An instance of {@link @firebase/auth-types#PopupRedirectResolver}, optional
     * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
     *
     * @public
     */
    function signInWithRedirect(auth, provider, resolver) {
        return __awaiter(this, void 0, void 0, function () {
            var authInternal;
            return __generator(this, function (_a) {
                authInternal = _castAuth(auth);
                _assert(provider instanceof OAuthProvider, auth, "argument-error" /* ARGUMENT_ERROR */);
                return [2 /*return*/, _withDefaultResolver(authInternal, resolver)._openRedirect(authInternal, provider, "signInViaRedirect" /* SIGN_IN_VIA_REDIRECT */)];
            });
        });
    }
    /**
     * Reauthenticates the current user with the specified {@link OAuthProvider} using a full-page redirect flow.
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new FacebookAuthProvider();
     * const result = await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * // Link using a redirect.
     * await linkWithRedirect(result.user, provider);
     * // This will again trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * ```
     *
     * @param user - The user.
     * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
     * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
     * @param resolver - An instance of {@link @firebase/auth-types#PopupRedirectResolver}, optional
     * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
     *
     * @public
     */
    function reauthenticateWithRedirect(user, provider, resolver) {
        return __awaiter(this, void 0, void 0, function () {
            var userInternal, resolverInternal, eventId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userInternal = user;
                        _assert(provider instanceof OAuthProvider, userInternal.auth, "argument-error" /* ARGUMENT_ERROR */);
                        resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
                        return [4 /*yield*/, prepareUserForRedirect(userInternal)];
                    case 1:
                        eventId = _a.sent();
                        return [2 /*return*/, resolverInternal._openRedirect(userInternal.auth, provider, "reauthViaRedirect" /* REAUTH_VIA_REDIRECT */, eventId)];
                }
            });
        });
    }
    /**
     * Links the {@link OAuthProvider} to the user account using a full-page redirect flow.
     *
     * @example
     * ```javascript
     * // Sign in using some other provider.
     * const result = await signInWithEmailAndPassword(auth, email, password);
     * // Link using a redirect.
     * const provider = new FacebookAuthProvider();
     * await linkWithRedirect(result.user, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * ```
     *
     * @param user - The user.
     * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
     * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
     * @param resolver - An instance of {@link @firebase/auth-types#PopupRedirectResolver}, optional
     * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
     *
     *
     * @public
     */
    function linkWithRedirect(user, provider, resolver) {
        return __awaiter(this, void 0, void 0, function () {
            var userInternal, resolverInternal, eventId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userInternal = user;
                        _assert(provider instanceof OAuthProvider, userInternal.auth, "argument-error" /* ARGUMENT_ERROR */);
                        resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
                        return [4 /*yield*/, _assertLinkedStatus(false, userInternal, provider.providerId)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, prepareUserForRedirect(userInternal)];
                    case 2:
                        eventId = _a.sent();
                        return [2 /*return*/, resolverInternal._openRedirect(userInternal.auth, provider, "linkViaRedirect" /* LINK_VIA_REDIRECT */, eventId)];
                }
            });
        });
    }
    /**
     * Returns a {@link @firebase/auth-types#UserCredential} from the redirect-based sign-in flow.
     *
     * @remarks
     * If sign-in succeeded, returns the signed in user. If sign-in was unsuccessful, fails with an
     * error. If no redirect operation was called, returns a {@link @firebase/auth-types#UserCredential}
     * with a null `user`.
     *
     * @example
     * ```javascript
     * // Sign in using a redirect.
     * const provider = new FacebookAuthProvider();
     * // You can add additional scopes to the provider:
     * provider.addScope('user_birthday');
     * // Start a sign in process for an unauthenticated user.
     * await signInWithRedirect(auth, provider);
     * // This will trigger a full page redirect away from your app
     *
     * // After returning from the redirect when your app initializes you can obtain the result
     * const result = await getRedirectResult(auth);
     * if (result) {
     *   // This is the signed-in user
     *   const user = result.user;
     *   // This gives you a Facebook Access Token.
     *   const credential = provider.credentialFromResult(auth, result);
     *   const token = credential.accessToken;
     * }
     * // As this API can be used for sign-in, linking and reauthentication,
     * // check the operationType to determine what triggered this redirect
     * // operation.
     * const operationType = result.operationType;
     * ```
     *
     * @param auth - The Auth instance.
     * @param resolver - An instance of {@link @firebase/auth-types#PopupRedirectResolver}, optional
     * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
     *
     * @public
     */
    function getRedirectResult(auth, resolver) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _castAuth(auth)._initializationPromise];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, _getRedirectResult(auth, resolver, false)];
                }
            });
        });
    }
    function _getRedirectResult(auth, resolverExtern, bypassAuthState) {
        if (bypassAuthState === void 0) { bypassAuthState = false; }
        return __awaiter(this, void 0, void 0, function () {
            var authInternal, resolver, action, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        authInternal = _castAuth(auth);
                        resolver = _withDefaultResolver(authInternal, resolverExtern);
                        action = new RedirectAction(authInternal, resolver, bypassAuthState);
                        return [4 /*yield*/, action.execute()];
                    case 1:
                        result = _a.sent();
                        if (!(result && !bypassAuthState)) return [3 /*break*/, 4];
                        delete result.user._redirectEventId;
                        return [4 /*yield*/, authInternal._persistUserIfCurrent(result.user)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, authInternal._setRedirectUser(null, resolverExtern)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/, result];
                }
            });
        });
    }
    /** @internal */
    function prepareUserForRedirect(user) {
        return __awaiter(this, void 0, void 0, function () {
            var eventId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        eventId = _generateEventId(user.uid + ":::");
                        user._redirectEventId = eventId;
                        return [4 /*yield*/, user.auth._setRedirectUser(user)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, user.auth._persistUserIfCurrent(user)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, eventId];
                }
            });
        });
    }
    // We only get one redirect outcome for any one auth, so just store it
    // in here.
    var redirectOutcomeMap = new Map();
    var RedirectAction = /** @class */ (function (_super) {
        __extends(RedirectAction, _super);
        function RedirectAction(auth, resolver, bypassAuthState) {
            if (bypassAuthState === void 0) { bypassAuthState = false; }
            var _this = _super.call(this, auth, [
                "signInViaRedirect" /* SIGN_IN_VIA_REDIRECT */,
                "linkViaRedirect" /* LINK_VIA_REDIRECT */,
                "reauthViaRedirect" /* REAUTH_VIA_REDIRECT */,
                "unknown" /* UNKNOWN */
            ], resolver, undefined, bypassAuthState) || this;
            _this.eventId = null;
            return _this;
        }
        /**
         * Override the execute function; if we already have a redirect result, then
         * just return it.
         */
        RedirectAction.prototype.execute = function () {
            return __awaiter(this, void 0, void 0, function () {
                var readyOutcome, result_1, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            readyOutcome = redirectOutcomeMap.get(this.auth._key());
                            if (!!readyOutcome) return [3 /*break*/, 5];
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, _super.prototype.execute.call(this)];
                        case 2:
                            result_1 = _a.sent();
                            readyOutcome = function () { return Promise.resolve(result_1); };
                            return [3 /*break*/, 4];
                        case 3:
                            e_1 = _a.sent();
                            readyOutcome = function () { return Promise.reject(e_1); };
                            return [3 /*break*/, 4];
                        case 4:
                            redirectOutcomeMap.set(this.auth._key(), readyOutcome);
                            _a.label = 5;
                        case 5: return [2 /*return*/, readyOutcome()];
                    }
                });
            });
        };
        RedirectAction.prototype.onAuthEvent = function (event) {
            return __awaiter(this, void 0, void 0, function () {
                var user;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (event.type === "signInViaRedirect" /* SIGN_IN_VIA_REDIRECT */) {
                                return [2 /*return*/, _super.prototype.onAuthEvent.call(this, event)];
                            }
                            else if (event.type === "unknown" /* UNKNOWN */) {
                                // This is a sentinel value indicating there's no pending redirect
                                this.resolve(null);
                                return [2 /*return*/];
                            }
                            if (!event.eventId) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.auth._redirectUserForId(event.eventId)];
                        case 1:
                            user = _a.sent();
                            if (user) {
                                this.user = user;
                                return [2 /*return*/, _super.prototype.onAuthEvent.call(this, event)];
                            }
                            else {
                                this.resolve(null);
                            }
                            _a.label = 2;
                        case 2: return [2 /*return*/];
                    }
                });
            });
        };
        RedirectAction.prototype.onExecution = function () {
            return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {
                return [2 /*return*/];
            }); });
        };
        RedirectAction.prototype.cleanUp = function () { };
        return RedirectAction;
    }(AbstractPopupRedirectOperation));

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * URL for Authentication widget which will initiate the OAuth handshake
     *
     * @internal
     */
    var WIDGET_PATH = '__/auth/handler';
    /**
     * URL for emulated environment
     *
     * @internal
     */
    var EMULATOR_WIDGET_PATH = 'emulator/auth/handler';
    /**
     * The special web storage event
     *
     * @internal
     */
    var WEB_STORAGE_SUPPORT_KEY = 'webStorageSupport';
    /**
     * Chooses a popup/redirect resolver to use. This prefers the override (which
     * is directly passed in), and falls back to the property set on the auth
     * object. If neither are available, this function errors w/ an argument error.
     *
     * @internal
     */
    function _withDefaultResolver(auth, resolverOverride) {
        if (resolverOverride) {
            return _getInstance(resolverOverride);
        }
        _assert(auth._popupRedirectResolver, auth, "argument-error" /* ARGUMENT_ERROR */);
        return auth._popupRedirectResolver;
    }
    var BrowserPopupRedirectResolver = /** @class */ (function () {
        function BrowserPopupRedirectResolver() {
            this.eventManagers = {};
            this.iframes = {};
            this.originValidationPromises = {};
            this._redirectPersistence = browserSessionPersistence;
            this._completeRedirectFn = _getRedirectResult;
        }
        // Wrapping in async even though we don't await anywhere in order
        // to make sure errors are raised as promise rejections
        BrowserPopupRedirectResolver.prototype._openPopup = function (auth, provider, authType, eventId) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var url;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            debugAssert((_a = this.eventManagers[auth._key()]) === null || _a === void 0 ? void 0 : _a.manager, '_initialize() not called before _openPopup()');
                            return [4 /*yield*/, this.originValidation(auth)];
                        case 1:
                            _b.sent();
                            url = getRedirectUrl(auth, provider, authType, eventId);
                            return [2 /*return*/, _open(auth, url, _generateEventId())];
                    }
                });
            });
        };
        BrowserPopupRedirectResolver.prototype._openRedirect = function (auth, provider, authType, eventId) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.originValidation(auth)];
                        case 1:
                            _a.sent();
                            _setWindowLocation(getRedirectUrl(auth, provider, authType, eventId));
                            return [2 /*return*/, new Promise(function () { })];
                    }
                });
            });
        };
        BrowserPopupRedirectResolver.prototype._initialize = function (auth) {
            var key = auth._key();
            if (this.eventManagers[key]) {
                var _a = this.eventManagers[key], manager = _a.manager, promise_1 = _a.promise;
                if (manager) {
                    return Promise.resolve(manager);
                }
                else {
                    debugAssert(promise_1, 'If manager is not set, promise should be');
                    return promise_1;
                }
            }
            var promise = this.initAndGetManager(auth);
            this.eventManagers[key] = { promise: promise };
            return promise;
        };
        BrowserPopupRedirectResolver.prototype.initAndGetManager = function (auth) {
            return __awaiter(this, void 0, void 0, function () {
                var iframe, manager;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, _openIframe(auth)];
                        case 1:
                            iframe = _a.sent();
                            manager = new AuthEventManager(auth);
                            iframe.register('authEvent', function (iframeEvent) {
                                _assert(iframeEvent === null || iframeEvent === void 0 ? void 0 : iframeEvent.authEvent, auth, "invalid-auth-event" /* INVALID_AUTH_EVENT */);
                                // TODO: Consider splitting redirect and popup events earlier on
                                var handled = manager.onEvent(iframeEvent.authEvent);
                                return { status: handled ? "ACK" /* ACK */ : "ERROR" /* ERROR */ };
                            }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
                            this.eventManagers[auth._key()] = { manager: manager };
                            this.iframes[auth._key()] = iframe;
                            return [2 /*return*/, manager];
                    }
                });
            });
        };
        BrowserPopupRedirectResolver.prototype._isIframeWebStorageSupported = function (auth, cb) {
            var iframe = this.iframes[auth._key()];
            iframe.send(WEB_STORAGE_SUPPORT_KEY, { type: WEB_STORAGE_SUPPORT_KEY }, function (result) {
                var _a;
                var isSupported = (_a = result === null || result === void 0 ? void 0 : result[0]) === null || _a === void 0 ? void 0 : _a[WEB_STORAGE_SUPPORT_KEY];
                if (isSupported !== undefined) {
                    cb(!!isSupported);
                }
                _fail(auth, "internal-error" /* INTERNAL_ERROR */);
            }, gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER);
        };
        BrowserPopupRedirectResolver.prototype.originValidation = function (auth) {
            var key = auth._key();
            if (!this.originValidationPromises[key]) {
                this.originValidationPromises[key] = _validateOrigin(auth);
            }
            return this.originValidationPromises[key];
        };
        return BrowserPopupRedirectResolver;
    }());
    /**
     * An implementation of {@link @firebase/auth-types#PopupRedirectResolver} suitable for browser
     * based applications.
     *
     * @public
     */
    var browserPopupRedirectResolver = BrowserPopupRedirectResolver;
    function getRedirectUrl(auth, provider, authType, eventId) {
        _assert(auth.config.authDomain, auth, "auth-domain-config-required" /* MISSING_AUTH_DOMAIN */);
        _assert(auth.config.apiKey, auth, "invalid-api-key" /* INVALID_API_KEY */);
        var params = {
            apiKey: auth.config.apiKey,
            appName: auth.name,
            authType: authType,
            redirectUrl: _getCurrentUrl(),
            v: app.SDK_VERSION,
            eventId: eventId
        };
        if (provider instanceof OAuthProvider) {
            provider.setDefaultLanguage(auth.languageCode);
            params.providerId = provider.providerId || '';
            if (!isEmpty(provider.getCustomParameters())) {
                params.customParameters = JSON.stringify(provider.getCustomParameters());
            }
            var scopes = provider.getScopes().filter(function (scope) { return scope !== ''; });
            if (scopes.length > 0) {
                params.scopes = scopes.join(',');
            }
            // TODO set additionalParams?
            // let additionalParams = provider.getAdditionalParams();
            // for (let key in additionalParams) {
            //   if (!params.hasOwnProperty(key)) {
            //     params[key] = additionalParams[key]
            //   }
            // }
        }
        if (auth.tenantId) {
            params.tid = auth.tenantId;
        }
        for (var _i = 0, _a = Object.keys(params); _i < _a.length; _i++) {
            var key = _a[_i];
            if (params[key] === undefined) {
                delete params[key];
            }
        }
        // TODO: maybe set eid as endipointId
        // TODO: maybe set fw as Frameworks.join(",")
        var url = new URL(getHandlerBase(auth) + "?" + querystring(params).slice(1));
        return url.toString();
    }
    function getHandlerBase(_a) {
        var config = _a.config;
        if (!config.emulator) {
            return "https://" + config.authDomain + "/" + WIDGET_PATH;
        }
        return _emulatorUrl(config, EMULATOR_WIDGET_PATH);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function startSignInPhoneMfa(auth, request) {
        return _performApiRequest(auth, "POST" /* POST */, "/v2/accounts/mfaSignIn:start" /* START_PHONE_MFA_SIGN_IN */, __assign({ tenantId: auth.tenantId }, request));
    }
    function finalizeSignInPhoneMfa(auth, request) {
        return _performApiRequest(auth, "POST" /* POST */, "/v2/accounts/mfaSignIn:finalize" /* FINALIZE_PHONE_MFA_SIGN_IN */, __assign({ tenantId: auth.tenantId }, request));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getRecaptchaParams(auth) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _performApiRequest(auth, "GET" /* GET */, "/v1/recaptchaParams" /* GET_RECAPTCHA_PARAM */)];
                    case 1: return [2 /*return*/, ((_a.sent()).recaptchaSiteKey || '')];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _SOLVE_TIME_MS = 500;
    var _EXPIRATION_TIME_MS = 60000;
    var _WIDGET_ID_START = 1000000000000;
    var MockReCaptcha = /** @class */ (function () {
        function MockReCaptcha(auth) {
            this.auth = auth;
            this.counter = _WIDGET_ID_START;
            this._widgets = new Map();
        }
        MockReCaptcha.prototype.render = function (container, parameters) {
            var id = this.counter;
            this._widgets.set(id, new MockWidget(container, this.auth.name, parameters || {}));
            this.counter++;
            return id;
        };
        MockReCaptcha.prototype.reset = function (optWidgetId) {
            var _a;
            var id = optWidgetId || _WIDGET_ID_START;
            void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.delete());
            this._widgets.delete(id);
        };
        MockReCaptcha.prototype.getResponse = function (optWidgetId) {
            var _a;
            var id = optWidgetId || _WIDGET_ID_START;
            return ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.getResponse()) || '';
        };
        MockReCaptcha.prototype.execute = function (optWidgetId) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var id;
                return __generator(this, function (_b) {
                    id = optWidgetId || _WIDGET_ID_START;
                    void ((_a = this._widgets.get(id)) === null || _a === void 0 ? void 0 : _a.execute());
                    return [2 /*return*/, ''];
                });
            });
        };
        return MockReCaptcha;
    }());
    var MockWidget = /** @class */ (function () {
        function MockWidget(containerOrId, appName, params) {
            var _this = this;
            this.params = params;
            this.timerId = null;
            this.deleted = false;
            this.responseToken = null;
            this.clickHandler = function () {
                _this.execute();
            };
            var container = typeof containerOrId === 'string'
                ? document.getElementById(containerOrId)
                : containerOrId;
            _assert(container, "argument-error" /* ARGUMENT_ERROR */, { appName: appName });
            this.container = container;
            this.isVisible = this.params.size !== 'invisible';
            if (this.isVisible) {
                this.execute();
            }
            else {
                this.container.addEventListener('click', this.clickHandler);
            }
        }
        MockWidget.prototype.getResponse = function () {
            this.checkIfDeleted();
            return this.responseToken;
        };
        MockWidget.prototype.delete = function () {
            this.checkIfDeleted();
            this.deleted = true;
            if (this.timerId) {
                clearTimeout(this.timerId);
                this.timerId = null;
            }
            this.container.removeEventListener('click', this.clickHandler);
        };
        MockWidget.prototype.execute = function () {
            var _this = this;
            this.checkIfDeleted();
            if (this.timerId) {
                return;
            }
            this.timerId = window.setTimeout(function () {
                _this.responseToken = generateRandomAlphaNumericString(50);
                var _a = _this.params, callback = _a.callback, expiredCallback = _a["expired-callback"];
                if (callback) {
                    try {
                        callback(_this.responseToken);
                    }
                    catch (e) { }
                }
                _this.timerId = window.setTimeout(function () {
                    _this.timerId = null;
                    _this.responseToken = null;
                    if (expiredCallback) {
                        try {
                            expiredCallback();
                        }
                        catch (e) { }
                    }
                    if (_this.isVisible) {
                        _this.execute();
                    }
                }, _EXPIRATION_TIME_MS);
            }, _SOLVE_TIME_MS);
        };
        MockWidget.prototype.checkIfDeleted = function () {
            if (this.deleted) {
                throw new Error('reCAPTCHA mock was already deleted!');
            }
        };
        return MockWidget;
    }());
    function generateRandomAlphaNumericString(len) {
        var chars = [];
        var allowedChars = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        for (var i = 0; i < len; i++) {
            chars.push(allowedChars.charAt(Math.floor(Math.random() * allowedChars.length)));
        }
        return chars.join('');
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // ReCaptcha will load using the same callback, so the callback function needs
    // to be kept around
    var _JSLOAD_CALLBACK = _generateCallbackName('rcb');
    var NETWORK_TIMEOUT_DELAY = new Delay(30000, 60000);
    var RECAPTCHA_BASE = 'https://www.google.com/recaptcha/api.js?';
    /**
     * Loader for the GReCaptcha library. There should only ever be one of this.
     */
    var ReCaptchaLoaderImpl = /** @class */ (function () {
        function ReCaptchaLoaderImpl() {
            this.hostLanguage = '';
            this.counter = 0;
            this.librarySeparatelyLoaded = !!_window().grecaptcha;
        }
        ReCaptchaLoaderImpl.prototype.load = function (auth, hl) {
            var _this = this;
            if (hl === void 0) { hl = ''; }
            _assert(isHostLanguageValid(hl), auth, "argument-error" /* ARGUMENT_ERROR */);
            if (this.shouldResolveImmediately(hl)) {
                return Promise.resolve(_window().grecaptcha);
            }
            return new Promise(function (resolve, reject) {
                var networkTimeout = _window().setTimeout(function () {
                    reject(_createError(auth, "network-request-failed" /* NETWORK_REQUEST_FAILED */));
                }, NETWORK_TIMEOUT_DELAY.get());
                _window()[_JSLOAD_CALLBACK] = function () {
                    _window().clearTimeout(networkTimeout);
                    delete _window()[_JSLOAD_CALLBACK];
                    var recaptcha = _window().grecaptcha;
                    if (!recaptcha) {
                        reject(_createError(auth, "internal-error" /* INTERNAL_ERROR */));
                        return;
                    }
                    // Wrap the greptcha render function so that we know if the developer has
                    // called it separately
                    var render = recaptcha.render;
                    recaptcha.render = function (container, params) {
                        var widgetId = render(container, params);
                        _this.counter++;
                        return widgetId;
                    };
                    _this.hostLanguage = hl;
                    resolve(recaptcha);
                };
                var url = RECAPTCHA_BASE + "?" + querystring({
                    onload: _JSLOAD_CALLBACK,
                    render: 'explicit',
                    hl: hl
                });
                _loadJS(url).catch(function () {
                    clearTimeout(networkTimeout);
                    reject(_createError(auth, "internal-error" /* INTERNAL_ERROR */));
                });
            });
        };
        ReCaptchaLoaderImpl.prototype.clearedOneInstance = function () {
            this.counter--;
        };
        ReCaptchaLoaderImpl.prototype.shouldResolveImmediately = function (hl) {
            // We can resolve immediately if:
            //   • grecaptcha is already defined AND (
            //     1. the requested language codes are the same OR
            //     2. there exists already a ReCaptcha on the page
            //     3. the library was already loaded by the app
            // In cases (2) and (3), we _can't_ reload as it would break the recaptchas
            // that are already in the page
            return (!!_window().grecaptcha &&
                (hl === this.hostLanguage ||
                    this.counter > 0 ||
                    this.librarySeparatelyLoaded));
        };
        return ReCaptchaLoaderImpl;
    }());
    function isHostLanguageValid(hl) {
        return hl.length <= 6 && /^\s*[a-zA-Z0-9\-]*\s*$/.test(hl);
    }
    var MockReCaptchaLoaderImpl = /** @class */ (function () {
        function MockReCaptchaLoaderImpl() {
        }
        MockReCaptchaLoaderImpl.prototype.load = function (auth) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, new MockReCaptcha(auth)];
                });
            });
        };
        MockReCaptchaLoaderImpl.prototype.clearedOneInstance = function () { };
        return MockReCaptchaLoaderImpl;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var RECAPTCHA_VERIFIER_TYPE = 'recaptcha';
    var DEFAULT_PARAMS = {
        theme: 'light',
        type: 'image'
    };
    /**
     * {@inheritdoc @firebase/auth-types#RecaptchaVerifier}
     * @public
     */
    var RecaptchaVerifier = /** @class */ (function () {
        function RecaptchaVerifier(containerOrId, parameters, authExtern) {
            if (parameters === void 0) { parameters = __assign({}, DEFAULT_PARAMS); }
            this.parameters = parameters;
            this.type = RECAPTCHA_VERIFIER_TYPE;
            this.destroyed = false;
            this.widgetId = null;
            this.tokenChangeListeners = new Set();
            this.renderPromise = null;
            this.recaptcha = null;
            this.auth = _castAuth(authExtern);
            this.isInvisible = this.parameters.size === 'invisible';
            _assert(typeof document !== 'undefined', this.auth, "operation-not-supported-in-this-environment" /* OPERATION_NOT_SUPPORTED */);
            var container = typeof containerOrId === 'string'
                ? document.getElementById(containerOrId)
                : containerOrId;
            _assert(container, this.auth, "argument-error" /* ARGUMENT_ERROR */);
            this.container = container;
            this.parameters.callback = this.makeTokenCallback(this.parameters.callback);
            this._recaptchaLoader = this.auth.settings.appVerificationDisabledForTesting
                ? new MockReCaptchaLoaderImpl()
                : new ReCaptchaLoaderImpl();
            this.validateStartingState();
            // TODO: Figure out if sdk version is needed
        }
        /** {@inheritdoc @firebase/auth-types#RecaptchaVerifier.verify} */
        RecaptchaVerifier.prototype.verify = function () {
            return __awaiter(this, void 0, void 0, function () {
                var id, recaptcha, response;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.assertNotDestroyed();
                            return [4 /*yield*/, this.render()];
                        case 1:
                            id = _a.sent();
                            recaptcha = this.getAssertedRecaptcha();
                            response = recaptcha.getResponse(id);
                            if (response) {
                                return [2 /*return*/, response];
                            }
                            return [2 /*return*/, new Promise(function (resolve) {
                                    var tokenChange = function (token) {
                                        if (!token) {
                                            return; // Ignore token expirations.
                                        }
                                        _this.tokenChangeListeners.delete(tokenChange);
                                        resolve(token);
                                    };
                                    _this.tokenChangeListeners.add(tokenChange);
                                    if (_this.isInvisible) {
                                        recaptcha.execute(id);
                                    }
                                })];
                    }
                });
            });
        };
        /** {@inheritdoc @firebase/auth-types#RecaptchaVerifier.render} */
        RecaptchaVerifier.prototype.render = function () {
            var _this = this;
            try {
                this.assertNotDestroyed();
            }
            catch (e) {
                // This method returns a promise. Since it's not async (we want to return the
                // _same_ promise if rendering is still occurring), the API surface should
                // reject with the error rather than just throw
                return Promise.reject(e);
            }
            if (this.renderPromise) {
                return this.renderPromise;
            }
            this.renderPromise = this.makeRenderPromise().catch(function (e) {
                _this.renderPromise = null;
                throw e;
            });
            return this.renderPromise;
        };
        /** @internal */
        RecaptchaVerifier.prototype._reset = function () {
            this.assertNotDestroyed();
            if (this.widgetId !== null) {
                this.getAssertedRecaptcha().reset(this.widgetId);
            }
        };
        /** {@inheritdoc @firebase/auth-types#RecaptchaVerifier.clear} */
        RecaptchaVerifier.prototype.clear = function () {
            var _this = this;
            this.assertNotDestroyed();
            this.destroyed = true;
            this._recaptchaLoader.clearedOneInstance();
            if (!this.isInvisible) {
                this.container.childNodes.forEach(function (node) {
                    _this.container.removeChild(node);
                });
            }
        };
        RecaptchaVerifier.prototype.validateStartingState = function () {
            _assert(!this.parameters.sitekey, this.auth, "argument-error" /* ARGUMENT_ERROR */);
            _assert(this.isInvisible || !this.container.hasChildNodes(), this.auth, "argument-error" /* ARGUMENT_ERROR */);
        };
        RecaptchaVerifier.prototype.makeTokenCallback = function (existing) {
            var _this = this;
            return function (token) {
                _this.tokenChangeListeners.forEach(function (listener) { return listener(token); });
                if (typeof existing === 'function') {
                    existing(token);
                }
                else if (typeof existing === 'string') {
                    var globalFunc = _window()[existing];
                    if (typeof globalFunc === 'function') {
                        globalFunc(token);
                    }
                }
            };
        };
        RecaptchaVerifier.prototype.assertNotDestroyed = function () {
            _assert(!this.destroyed, this.auth, "internal-error" /* INTERNAL_ERROR */);
        };
        RecaptchaVerifier.prototype.makeRenderPromise = function () {
            return __awaiter(this, void 0, void 0, function () {
                var container, guaranteedEmpty;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.init()];
                        case 1:
                            _a.sent();
                            if (!this.widgetId) {
                                container = this.container;
                                if (!this.isInvisible) {
                                    guaranteedEmpty = document.createElement('div');
                                    container.appendChild(guaranteedEmpty);
                                    container = guaranteedEmpty;
                                }
                                this.widgetId = this.getAssertedRecaptcha().render(container, this.parameters);
                            }
                            return [2 /*return*/, this.widgetId];
                    }
                });
            });
        };
        RecaptchaVerifier.prototype.init = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, siteKey;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _assert(_isHttpOrHttps() && !_isWorker(), this.auth, "internal-error" /* INTERNAL_ERROR */);
                            return [4 /*yield*/, domReady()];
                        case 1:
                            _b.sent();
                            _a = this;
                            return [4 /*yield*/, this._recaptchaLoader.load(this.auth, this.auth.languageCode || undefined)];
                        case 2:
                            _a.recaptcha = _b.sent();
                            return [4 /*yield*/, getRecaptchaParams(this.auth)];
                        case 3:
                            siteKey = _b.sent();
                            _assert(siteKey, this.auth, "internal-error" /* INTERNAL_ERROR */);
                            this.parameters.sitekey = siteKey;
                            return [2 /*return*/];
                    }
                });
            });
        };
        RecaptchaVerifier.prototype.getAssertedRecaptcha = function () {
            _assert(this.recaptcha, this.auth, "internal-error" /* INTERNAL_ERROR */);
            return this.recaptcha;
        };
        return RecaptchaVerifier;
    }());
    function domReady() {
        var resolver = null;
        return new Promise(function (resolve) {
            if (document.readyState === 'complete') {
                resolve();
                return;
            }
            // Document not ready, wait for load before resolving.
            // Save resolver, so we can remove listener in case it was externally
            // cancelled.
            resolver = function () { return resolve(); };
            window.addEventListener('load', resolver);
        }).catch(function (e) {
            if (resolver) {
                window.removeEventListener('load', resolver);
            }
            throw e;
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ConfirmationResult = /** @class */ (function () {
        function ConfirmationResult(verificationId, onConfirmation) {
            this.verificationId = verificationId;
            this.onConfirmation = onConfirmation;
        }
        ConfirmationResult.prototype.confirm = function (verificationCode) {
            var authCredential = PhoneAuthCredential._fromVerification(this.verificationId, verificationCode);
            return this.onConfirmation(authCredential);
        };
        return ConfirmationResult;
    }());
    /**
     * Asynchronously signs in using a phone number.
     *
     * @remarks
     * This method sends a code via SMS to the given
     * phone number, and returns a {@link @firebase/auth-types#ConfirmationResult}. After the user
     * provides the code sent to their phone, call {@link @firebase/auth-types#ConfirmationResult.confirm}
     * with the code to sign the user in.
     *
     * For abuse prevention, this method also requires a {@link @firebase/auth-types#ApplicationVerifier}.
     * This SDK includes a reCAPTCHA-based implementation, {@link RecaptchaVerifier}.
     *
     * @example
     * ```javascript
     * // 'recaptcha-container' is the ID of an element in the DOM.
     * const applicationVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');
     * const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, applicationVerifier);
     * // Obtain a verificationCode from the user.
     * const credential = await confirmationResult.confirm(verificationCode);
     * ```
     *
     * @param auth - The Auth instance.
     * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
     * @param appVerifier - The {@link @firebase/auth-types#ApplicationVerifier}.
     *
     * @public
     */
    function signInWithPhoneNumber$1(auth, phoneNumber, appVerifier) {
        return __awaiter(this, void 0, void 0, function () {
            var verificationId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _verifyPhoneNumber(_castAuth(auth), phoneNumber, appVerifier)];
                    case 1:
                        verificationId = _a.sent();
                        return [2 /*return*/, new ConfirmationResult(verificationId, function (cred) {
                                return signInWithCredential(auth, cred);
                            })];
                }
            });
        });
    }
    /**
     * Links the user account with the given phone number.
     *
     * @param user - The user.
     * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
     * @param appVerifier - The {@link @firebase/auth-types#ApplicationVerifier}.
     *
     * @public
     */
    function linkWithPhoneNumber$1(user, phoneNumber, appVerifier) {
        return __awaiter(this, void 0, void 0, function () {
            var userInternal, verificationId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userInternal = user;
                        return [4 /*yield*/, _assertLinkedStatus(false, userInternal, "phone" /* PHONE */)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, _verifyPhoneNumber(userInternal.auth, phoneNumber, appVerifier)];
                    case 2:
                        verificationId = _a.sent();
                        return [2 /*return*/, new ConfirmationResult(verificationId, function (cred) {
                                return linkWithCredential(user, cred);
                            })];
                }
            });
        });
    }
    /**
     * Re-authenticates a user using a fresh phne credential.
     *
     * @remarks Use before operations such as {@link updatePassword} that require tokens from recent sign-in attempts.
     *
     * @param user - The user.
     * @param phoneNumber - The user's phone number in E.164 format (e.g. +16505550101).
     * @param appVerifier - The {@link @firebase/auth-types#ApplicationVerifier}.
     *
     * @public
     */
    function reauthenticateWithPhoneNumber(user, phoneNumber, appVerifier) {
        return __awaiter(this, void 0, void 0, function () {
            var userInternal, verificationId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userInternal = user;
                        return [4 /*yield*/, _verifyPhoneNumber(userInternal.auth, phoneNumber, appVerifier)];
                    case 1:
                        verificationId = _a.sent();
                        return [2 /*return*/, new ConfirmationResult(verificationId, function (cred) {
                                return reauthenticateWithCredential(user, cred);
                            })];
                }
            });
        });
    }
    /**
     * Returns a verification ID to be used in conjunction with the SMS code that is sent.
     *
     * @internal
     */
    function _verifyPhoneNumber(auth, options, verifier) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var recaptchaToken, phoneInfoOptions, session, response, mfaEnrollmentId, response, sessionInfo;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, verifier.verify()];
                    case 1:
                        recaptchaToken = _b.sent();
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, , 10, 11]);
                        _assert(typeof recaptchaToken === 'string', auth, "argument-error" /* ARGUMENT_ERROR */);
                        _assert(verifier.type === RECAPTCHA_VERIFIER_TYPE, auth, "argument-error" /* ARGUMENT_ERROR */);
                        phoneInfoOptions = void 0;
                        if (typeof options === 'string') {
                            phoneInfoOptions = {
                                phoneNumber: options
                            };
                        }
                        else {
                            phoneInfoOptions = options;
                        }
                        if (!('session' in phoneInfoOptions)) return [3 /*break*/, 7];
                        session = phoneInfoOptions.session;
                        if (!('phoneNumber' in phoneInfoOptions)) return [3 /*break*/, 4];
                        _assert(session.type === "enroll" /* ENROLL */, auth, "internal-error" /* INTERNAL_ERROR */);
                        return [4 /*yield*/, startEnrollPhoneMfa(auth, {
                                idToken: session.credential,
                                phoneEnrollmentInfo: {
                                    phoneNumber: phoneInfoOptions.phoneNumber,
                                    recaptchaToken: recaptchaToken
                                }
                            })];
                    case 3:
                        response = _b.sent();
                        return [2 /*return*/, response.phoneSessionInfo.sessionInfo];
                    case 4:
                        _assert(session.type === "signin" /* SIGN_IN */, auth, "internal-error" /* INTERNAL_ERROR */);
                        mfaEnrollmentId = ((_a = phoneInfoOptions.multiFactorHint) === null || _a === void 0 ? void 0 : _a.uid) ||
                            phoneInfoOptions.multiFactorUid;
                        _assert(mfaEnrollmentId, auth, "missing-multi-factor-info" /* MISSING_MFA_INFO */);
                        return [4 /*yield*/, startSignInPhoneMfa(auth, {
                                mfaPendingCredential: session.credential,
                                mfaEnrollmentId: mfaEnrollmentId,
                                phoneSignInInfo: {
                                    recaptchaToken: recaptchaToken
                                }
                            })];
                    case 5:
                        response = _b.sent();
                        return [2 /*return*/, response.phoneResponseInfo.sessionInfo];
                    case 6: return [3 /*break*/, 9];
                    case 7: return [4 /*yield*/, sendPhoneVerificationCode(auth, {
                            phoneNumber: phoneInfoOptions.phoneNumber,
                            recaptchaToken: recaptchaToken
                        })];
                    case 8:
                        sessionInfo = (_b.sent()).sessionInfo;
                        return [2 /*return*/, sessionInfo];
                    case 9: return [3 /*break*/, 11];
                    case 10:
                        verifier._reset();
                        return [7 /*endfinally*/];
                    case 11: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Updates the user's phone number.
     *
     * @example
     * ```
     * // 'recaptcha-container' is the ID of an element in the DOM.
     * const applicationVerifier = new RecaptchaVerifier('recaptcha-container');
     * const provider = new PhoneAuthProvider(auth);
     * const verificationId = await provider.verifyPhoneNumber('+16505550101', applicationVerifier);
     * // Obtain the verificationCode from the user.
     * const phoneCredential = PhoneAuthProvider.credential(verificationId, verificationCode);
     * await updatePhoneNumber(user, phoneCredential);
     * ```
     *
     * @param user - The user.
     * @param credential - A credential authenticating the new phone number.
     *
     * @public
     */
    function updatePhoneNumber(user, credential) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _link(user, credential)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * {@inheritdoc @firebase/auth-types#PhoneAuthProvider}
     * @public
     */
    var PhoneAuthProvider = /** @class */ (function () {
        function PhoneAuthProvider(auth) {
            /** {@inheritdoc @firebase/auth-types#PhoneAuthProvider.providerId} */
            this.providerId = PhoneAuthProvider.PROVIDER_ID;
            this.auth = _castAuth(auth);
        }
        /** {@inheritdoc @firebase/auth-types#PhoneAuthProvider.verifyPhoneNumber} */
        PhoneAuthProvider.prototype.verifyPhoneNumber = function (phoneOptions, applicationVerifier) {
            return _verifyPhoneNumber(this.auth, phoneOptions, applicationVerifier);
        };
        /** {@inheritdoc @firebase/auth-types#PhoneAuthProvider.credential} */
        PhoneAuthProvider.credential = function (verificationId, verificationCode) {
            return PhoneAuthCredential._fromVerification(verificationId, verificationCode);
        };
        PhoneAuthProvider.credentialFromResult = function (userCredential) {
            var credential = userCredential;
            _assert(credential._tokenResponse, credential.user.auth, "argument-error" /* ARGUMENT_ERROR */);
            var _a = credential._tokenResponse, phoneNumber = _a.phoneNumber, temporaryProof = _a.temporaryProof;
            if (phoneNumber && temporaryProof) {
                return PhoneAuthCredential._fromTokenResponse(phoneNumber, temporaryProof);
            }
            _fail(credential.user.auth, "argument-error" /* ARGUMENT_ERROR */);
        };
        /** {@inheritdoc @firebase/auth-types#PhoneAuthProvider.PROVIDER_ID} */
        PhoneAuthProvider.PROVIDER_ID = "phone" /* PHONE */;
        /** {@inheritdoc @firebase/auth-types#PhoneAuthProvider.PHONE_SIGN_IN_METHOD} */
        PhoneAuthProvider.PHONE_SIGN_IN_METHOD = "phone" /* PHONE */;
        return PhoneAuthProvider;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _POLL_WINDOW_CLOSE_TIMEOUT = new Delay(2000, 10000);
    /**
     * Authenticates a Firebase client using a popup-based OAuth authentication flow.
     *
     * @remarks
     * If succeeds, returns the signed in user along with the provider's credential. If sign in was
     * unsuccessful, returns an error object containing additional information about the error.
     *
     * @example
     * ```javascript
     * // Sign in using a popup.
     * const provider = new FacebookAuthProvider();
     * const result = await signInWithPopup(auth, provider);
     *
     * // The signed-in user info.
     * const user = result.user;
     * // This gives you a Facebook Access Token.
     * const credential = provider.credentialFromResult(auth, result);
     * const token = credential.accessToken;
     * ```
     *
     * @param auth - The Auth instance.
     * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
     * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
     * @param resolver - An instance of {@link @firebase/auth-types#PopupRedirectResolver}, optional
     * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
     *
     *
     * @public
     */
    function signInWithPopup(auth, provider, resolver) {
        return __awaiter(this, void 0, void 0, function () {
            var authInternal, resolverInternal, action;
            return __generator(this, function (_a) {
                authInternal = _castAuth(auth);
                _assert(provider instanceof OAuthProvider, auth, "argument-error" /* ARGUMENT_ERROR */);
                resolverInternal = _withDefaultResolver(authInternal, resolver);
                action = new PopupOperation(authInternal, "signInViaPopup" /* SIGN_IN_VIA_POPUP */, provider, resolverInternal);
                return [2 /*return*/, action.executeNotNull()];
            });
        });
    }
    /**
     * Reauthenticates the current user with the specified {@link OAuthProvider} using a pop-up based
     * OAuth flow.
     *
     * @remarks
     * If the reauthentication is successful, the returned result will contain the user and the
     * provider's credential.
     *
     * @example
     * ```javascript
     * // Sign in using a popup.
     * const provider = new FacebookAuthProvider();
     * const result = await signInWithPopup(auth, provider);
     * // Reauthenticate using a popup.
     * await reauthenticateWithPopup(result.user, provider);
     * ```
     *
     * @param user - The user.
     * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
     * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
     * @param resolver - An instance of {@link @firebase/auth-types#PopupRedirectResolver}, optional
     * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
     *
     * @public
     */
    function reauthenticateWithPopup(user, provider, resolver) {
        return __awaiter(this, void 0, void 0, function () {
            var userInternal, resolverInternal, action;
            return __generator(this, function (_a) {
                userInternal = user;
                _assert(provider instanceof OAuthProvider, userInternal.auth, "argument-error" /* ARGUMENT_ERROR */);
                resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
                action = new PopupOperation(userInternal.auth, "reauthViaPopup" /* REAUTH_VIA_POPUP */, provider, resolverInternal, userInternal);
                return [2 /*return*/, action.executeNotNull()];
            });
        });
    }
    /**
     * Links the authenticated provider to the user account using a pop-up based OAuth flow.
     *
     * @remarks
     * If the linking is successful, the returned result will contain the user and the provider's credential.
     *
     *
     * @example
     * ```javascript
     * // Sign in using some other provider.
     * const result = await signInWithEmailAndPassword(auth, email, password);
     * // Link using a popup.
     * const provider = new FacebookAuthProvider();
     * await linkWithPopup(result.user, provider);
     * ```
     *
     * @param user - The user.
     * @param provider - The provider to authenticate. The provider has to be an {@link OAuthProvider}.
     * Non-OAuth providers like {@link EmailAuthProvider} will throw an error.
     * @param resolver - An instance of {@link @firebase/auth-types#PopupRedirectResolver}, optional
     * if already supplied to {@link initializeAuth} or provided by {@link getAuth}.
     *
     * @public
     */
    function linkWithPopup(user, provider, resolver) {
        return __awaiter(this, void 0, void 0, function () {
            var userInternal, resolverInternal, action;
            return __generator(this, function (_a) {
                userInternal = user;
                _assert(provider instanceof OAuthProvider, userInternal.auth, "argument-error" /* ARGUMENT_ERROR */);
                resolverInternal = _withDefaultResolver(userInternal.auth, resolver);
                action = new PopupOperation(userInternal.auth, "linkViaPopup" /* LINK_VIA_POPUP */, provider, resolverInternal, userInternal);
                return [2 /*return*/, action.executeNotNull()];
            });
        });
    }
    /**
     * Popup event manager. Handles the popup's entire lifecycle; listens to auth
     * events
     *
     * @internal
     */
    var PopupOperation = /** @class */ (function (_super) {
        __extends(PopupOperation, _super);
        function PopupOperation(auth, filter, provider, resolver, user) {
            var _this = _super.call(this, auth, filter, resolver, user) || this;
            _this.provider = provider;
            _this.authWindow = null;
            _this.pollId = null;
            if (PopupOperation.currentPopupAction) {
                PopupOperation.currentPopupAction.cancel();
            }
            PopupOperation.currentPopupAction = _this;
            return _this;
        }
        PopupOperation.prototype.executeNotNull = function () {
            return __awaiter(this, void 0, void 0, function () {
                var result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.execute()];
                        case 1:
                            result = _a.sent();
                            _assert(result, this.auth, "internal-error" /* INTERNAL_ERROR */);
                            return [2 /*return*/, result];
                    }
                });
            });
        };
        PopupOperation.prototype.onExecution = function () {
            return __awaiter(this, void 0, void 0, function () {
                var eventId, _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            debugAssert(this.filter.length === 1, 'Popup operations only handle one event');
                            eventId = _generateEventId();
                            _a = this;
                            return [4 /*yield*/, this.resolver._openPopup(this.auth, this.provider, this.filter[0], // There's always one, see constructor
                                eventId)];
                        case 1:
                            _a.authWindow = _b.sent();
                            this.authWindow.associatedEvent = eventId;
                            // Check for web storage support _after_ the popup is loaded. Checking for
                            // web storage is slow (on the order of a second or so). Rather than
                            // waiting on that before opening the window, optimistically open the popup
                            // and check for storage support at the same time. If storage support is
                            // not available, this will cause the whole thing to reject properly. It
                            // will also close the popup, but since the promise has already rejected,
                            // the popup closed by user poll will reject into the void.
                            this.resolver._isIframeWebStorageSupported(this.auth, function (isSupported) {
                                if (!isSupported) {
                                    _this.reject(_createError(_this.auth, "web-storage-unsupported" /* WEB_STORAGE_UNSUPPORTED */));
                                }
                            });
                            // Handle user closure. Notice this does *not* use await
                            this.pollUserCancellation();
                            return [2 /*return*/];
                    }
                });
            });
        };
        Object.defineProperty(PopupOperation.prototype, "eventId", {
            get: function () {
                var _a;
                return ((_a = this.authWindow) === null || _a === void 0 ? void 0 : _a.associatedEvent) || null;
            },
            enumerable: false,
            configurable: true
        });
        PopupOperation.prototype.cancel = function () {
            this.reject(_createError(this.auth, "cancelled-popup-request" /* EXPIRED_POPUP_REQUEST */));
        };
        PopupOperation.prototype.cleanUp = function () {
            if (this.authWindow) {
                this.authWindow.close();
            }
            if (this.pollId) {
                window.clearTimeout(this.pollId);
            }
            this.authWindow = null;
            this.pollId = null;
            PopupOperation.currentPopupAction = null;
        };
        PopupOperation.prototype.pollUserCancellation = function () {
            var _this = this;
            var poll = function () {
                var _a, _b;
                if ((_b = (_a = _this.authWindow) === null || _a === void 0 ? void 0 : _a.window) === null || _b === void 0 ? void 0 : _b.closed) {
                    // Make sure that there is sufficient time for whatever action to
                    // complete. The window could have closed but the sign in network
                    // call could still be in flight.
                    _this.pollId = window.setTimeout(function () {
                        _this.pollId = null;
                        _this.reject(_createError(_this.auth, "popup-closed-by-user" /* POPUP_CLOSED_BY_USER */));
                    }, 2000 /* AUTH_EVENT */);
                    return;
                }
                _this.pollId = window.setTimeout(poll, _POLL_WINDOW_CLOSE_TIMEOUT.get());
            };
            poll();
        };
        // Only one popup is ever shown at once. The lifecycle of the current popup
        // can be managed / cancelled by the constructor.
        PopupOperation.currentPopupAction = null;
        return PopupOperation;
    }(AbstractPopupRedirectOperation));

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MultiFactorAssertion = /** @class */ (function () {
        function MultiFactorAssertion(factorId) {
            this.factorId = factorId;
        }
        MultiFactorAssertion.prototype._process = function (auth, session, displayName) {
            switch (session.type) {
                case "enroll" /* ENROLL */:
                    return this._finalizeEnroll(auth, session.credential, displayName);
                case "signin" /* SIGN_IN */:
                    return this._finalizeSignIn(auth, session.credential);
                default:
                    return debugFail('unexpected MultiFactorSessionType');
            }
        };
        return MultiFactorAssertion;
    }());

    /**
     * {@inheritdoc @firebase/auth-types#PhoneMultiFactorAssertion}
     *
     * @public
     */
    var PhoneMultiFactorAssertion = /** @class */ (function (_super) {
        __extends(PhoneMultiFactorAssertion, _super);
        function PhoneMultiFactorAssertion(credential) {
            var _this = _super.call(this, "phone" /* PHONE */) || this;
            _this.credential = credential;
            return _this;
        }
        /** @internal */
        PhoneMultiFactorAssertion._fromCredential = function (credential) {
            return new PhoneMultiFactorAssertion(credential);
        };
        /** @internal */
        PhoneMultiFactorAssertion.prototype._finalizeEnroll = function (auth, idToken, displayName) {
            return finalizeEnrollPhoneMfa(auth, {
                idToken: idToken,
                displayName: displayName,
                phoneVerificationInfo: this.credential._makeVerificationRequest()
            });
        };
        /** @internal */
        PhoneMultiFactorAssertion.prototype._finalizeSignIn = function (auth, mfaPendingCredential) {
            return finalizeSignInPhoneMfa(auth, {
                mfaPendingCredential: mfaPendingCredential,
                phoneVerificationInfo: this.credential._makeVerificationRequest()
            });
        };
        return PhoneMultiFactorAssertion;
    }(MultiFactorAssertion));
    /**
     * {@inheritdoc @firebase/auth-types#PhoneMultiFactorGenerator}
     * @public
     */
    var PhoneMultiFactorGenerator = /** @class */ (function () {
        function PhoneMultiFactorGenerator() {
        }
        /** {@inheritdoc @firebase/auth-types#PhoneMultiFactorGenerator.assertion} */
        PhoneMultiFactorGenerator.assertion = function (credential) {
            return PhoneMultiFactorAssertion._fromCredential(credential);
        };
        return PhoneMultiFactorGenerator;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Initializes an Auth instance with platform specific default dependencies.
     *
     * @param app - The Firebase App.
     *
     * @public
     */
    function getAuth(app) {
        return initializeAuth(app, {
            popupRedirectResolver: browserPopupRedirectResolver,
            persistence: [indexedDBLocalPersistence, browserLocalPersistence]
        });
    }
    registerAuth("Browser" /* BROWSER */);

    exports.ActionCodeURL = ActionCodeURL;
    exports.AuthCredential = AuthCredential;
    exports.EmailAuthCredential = EmailAuthCredential;
    exports.EmailAuthProvider = EmailAuthProvider;
    exports.FacebookAuthProvider = FacebookAuthProvider;
    exports.GithubAuthProvider = GithubAuthProvider;
    exports.GoogleAuthProvider = GoogleAuthProvider;
    exports.OAuthCredential = OAuthCredential;
    exports.OAuthProvider = OAuthProvider;
    exports.PhoneAuthCredential = PhoneAuthCredential;
    exports.PhoneAuthProvider = PhoneAuthProvider;
    exports.PhoneMultiFactorGenerator = PhoneMultiFactorGenerator;
    exports.RecaptchaVerifier = RecaptchaVerifier;
    exports.TwitterAuthProvider = TwitterAuthProvider;
    exports.applyActionCode = applyActionCode$1;
    exports.browserLocalPersistence = browserLocalPersistence;
    exports.browserPopupRedirectResolver = browserPopupRedirectResolver;
    exports.browserSessionPersistence = browserSessionPersistence;
    exports.checkActionCode = checkActionCode;
    exports.confirmPasswordReset = confirmPasswordReset;
    exports.createUserWithEmailAndPassword = createUserWithEmailAndPassword;
    exports.debugErrorMap = debugErrorMap;
    exports.deleteUser = deleteUser;
    exports.fetchSignInMethodsForEmail = fetchSignInMethodsForEmail;
    exports.getAdditionalUserInfo = getAdditionalUserInfo;
    exports.getAuth = getAuth;
    exports.getIdToken = getIdToken;
    exports.getIdTokenResult = getIdTokenResult;
    exports.getMultiFactorResolver = getMultiFactorResolver;
    exports.getRedirectResult = getRedirectResult;
    exports.inMemoryPersistence = inMemoryPersistence;
    exports.indexedDBLocalPersistence = indexedDBLocalPersistence;
    exports.initializeAuth = initializeAuth;
    exports.isSignInWithEmailLink = isSignInWithEmailLink;
    exports.linkWithCredential = linkWithCredential;
    exports.linkWithPhoneNumber = linkWithPhoneNumber$1;
    exports.linkWithPopup = linkWithPopup;
    exports.linkWithRedirect = linkWithRedirect;
    exports.multiFactor = multiFactor;
    exports.onAuthStateChanged = onAuthStateChanged;
    exports.onIdTokenChanged = onIdTokenChanged;
    exports.parseActionCodeURL = parseActionCodeURL;
    exports.prodErrorMap = prodErrorMap;
    exports.reauthenticateWithCredential = reauthenticateWithCredential;
    exports.reauthenticateWithPhoneNumber = reauthenticateWithPhoneNumber;
    exports.reauthenticateWithPopup = reauthenticateWithPopup;
    exports.reauthenticateWithRedirect = reauthenticateWithRedirect;
    exports.reload = reload;
    exports.sendEmailVerification = sendEmailVerification$1;
    exports.sendPasswordResetEmail = sendPasswordResetEmail$1;
    exports.sendSignInLinkToEmail = sendSignInLinkToEmail$1;
    exports.setPersistence = setPersistence;
    exports.signInAnonymously = signInAnonymously;
    exports.signInWithCredential = signInWithCredential;
    exports.signInWithCustomToken = signInWithCustomToken$1;
    exports.signInWithEmailAndPassword = signInWithEmailAndPassword;
    exports.signInWithEmailLink = signInWithEmailLink$1;
    exports.signInWithPhoneNumber = signInWithPhoneNumber$1;
    exports.signInWithPopup = signInWithPopup;
    exports.signInWithRedirect = signInWithRedirect;
    exports.signOut = signOut;
    exports.unlink = unlink;
    exports.updateCurrentUser = updateCurrentUser;
    exports.updateEmail = updateEmail;
    exports.updatePassword = updatePassword;
    exports.updatePhoneNumber = updatePhoneNumber;
    exports.updateProfile = updateProfile$1;
    exports.useDeviceLanguage = useDeviceLanguage;
    exports.verifyBeforeUpdateEmail = verifyBeforeUpdateEmail;
    exports.verifyPasswordResetCode = verifyPasswordResetCode;

    Object.defineProperty(exports, '__esModule', { value: true });


              }).apply(this, arguments);
            } catch(err) {
                console.error(err);
                throw new Error(
                  'Cannot instantiate firebase-auth.js - ' +
                  'be sure to load firebase-app.js first.'
                );
              }

})));


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@firebase/app')) :
    typeof define === 'function' && define.amd ? define(['exports', '@firebase/app'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.firebase = global.firebase || {}, global.firebase.functions = global.firebase.functions || {}), global.firebase.app));
}(this, (function (exports, app) { 'use strict';

    try {
                (function() {

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ERROR_NAME = 'FirebaseError';
    // Based on code from:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
    var FirebaseError = /** @class */ (function (_super) {
        __extends(FirebaseError, _super);
        function FirebaseError(code, message, customData) {
            var _this = _super.call(this, message) || this;
            _this.code = code;
            _this.customData = customData;
            _this.name = ERROR_NAME;
            // Fix For ES5
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(_this, FirebaseError.prototype);
            // Maintains proper stack trace for where our error was thrown.
            // Only available on V8.
            if (Error.captureStackTrace) {
                Error.captureStackTrace(_this, ErrorFactory.prototype.create);
            }
            return _this;
        }
        return FirebaseError;
    }(Error));
    var ErrorFactory = /** @class */ (function () {
        function ErrorFactory(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
        }
        ErrorFactory.prototype.create = function (code) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            var customData = data[0] || {};
            var fullCode = this.service + "/" + code;
            var template = this.errors[code];
            var message = template ? replaceTemplate(template, customData) : 'Error';
            // Service Name: Error message (service/code).
            var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
            var error = new FirebaseError(fullCode, fullMessage, customData);
            return error;
        };
        return ErrorFactory;
    }());
    function replaceTemplate(template, data) {
        return template.replace(PATTERN, function (_, key) {
            var value = data[key];
            return value != null ? String(value) : "<" + key + "?>";
        });
    }
    var PATTERN = /\{\$([^}]+)}/g;

    /**
     * Component for service name T, e.g. `auth`, `auth-internal`
     */
    var Component = /** @class */ (function () {
        /**
         *
         * @param name The public service name, e.g. app, auth, firestore, database
         * @param instanceFactory Service factory responsible for creating the public interface
         * @param type whether the service provided by the component is public or private
         */
        function Component(name, instanceFactory, type) {
            this.name = name;
            this.instanceFactory = instanceFactory;
            this.type = type;
            this.multipleInstances = false;
            /**
             * Properties to be added to the service namespace
             */
            this.serviceProps = {};
            this.instantiationMode = "LAZY" /* LAZY */;
        }
        Component.prototype.setInstantiationMode = function (mode) {
            this.instantiationMode = mode;
            return this;
        };
        Component.prototype.setMultipleInstances = function (multipleInstances) {
            this.multipleInstances = multipleInstances;
            return this;
        };
        Component.prototype.setServiceProps = function (props) {
            this.serviceProps = props;
            return this;
        };
        return Component;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';
    var UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';
    function mapValues(
    // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    o, f) {
        var result = {};
        for (var key in o) {
            if (o.hasOwnProperty(key)) {
                result[key] = f(o[key]);
            }
        }
        return result;
    }
    /**
     * Takes data and encodes it in a JSON-friendly way, such that types such as
     * Date are preserved.
     * @internal
     * @param data - Data to encode.
     */
    function encode(data) {
        if (data == null) {
            return null;
        }
        if (data instanceof Number) {
            data = data.valueOf();
        }
        if (typeof data === 'number' && isFinite(data)) {
            // Any number in JS is safe to put directly in JSON and parse as a double
            // without any loss of precision.
            return data;
        }
        if (data === true || data === false) {
            return data;
        }
        if (Object.prototype.toString.call(data) === '[object String]') {
            return data;
        }
        if (Array.isArray(data)) {
            return data.map(function (x) { return encode(x); });
        }
        if (typeof data === 'function' || typeof data === 'object') {
            return mapValues(data, function (x) { return encode(x); });
        }
        // If we got this far, the data is not encodable.
        throw new Error('Data cannot be encoded in JSON: ' + data);
    }
    /**
     * Takes data that's been encoded in a JSON-friendly form and returns a form
     * with richer datatypes, such as Dates, etc.
     * @internal
     * @param json - JSON to convert.
     */
    function decode(json) {
        if (json == null) {
            return json;
        }
        if (json['@type']) {
            switch (json['@type']) {
                case LONG_TYPE:
                // Fall through and handle this the same as unsigned.
                case UNSIGNED_LONG_TYPE: {
                    // Technically, this could work return a valid number for malformed
                    // data if there was a number followed by garbage. But it's just not
                    // worth all the extra code to detect that case.
                    var value = Number(json['value']);
                    if (isNaN(value)) {
                        throw new Error('Data cannot be decoded from JSON: ' + json);
                    }
                    return value;
                }
                default: {
                    throw new Error('Data cannot be decoded from JSON: ' + json);
                }
            }
        }
        if (Array.isArray(json)) {
            return json.map(function (x) { return decode(x); });
        }
        if (typeof json === 'function' || typeof json === 'object') {
            return mapValues(json, function (x) { return decode(x); });
        }
        // Anything else is safe to return.
        return json;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Type constant for Firebase Functions.
     */
    var FUNCTIONS_TYPE = 'functions';

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Standard error codes for different ways a request can fail, as defined by:
     * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
     *
     * This map is used primarily to convert from a backend error code string to
     * a client SDK error code string, and make sure it's in the supported set.
     */
    var errorCodeMap = {
        OK: 'ok',
        CANCELLED: 'cancelled',
        UNKNOWN: 'unknown',
        INVALID_ARGUMENT: 'invalid-argument',
        DEADLINE_EXCEEDED: 'deadline-exceeded',
        NOT_FOUND: 'not-found',
        ALREADY_EXISTS: 'already-exists',
        PERMISSION_DENIED: 'permission-denied',
        UNAUTHENTICATED: 'unauthenticated',
        RESOURCE_EXHAUSTED: 'resource-exhausted',
        FAILED_PRECONDITION: 'failed-precondition',
        ABORTED: 'aborted',
        OUT_OF_RANGE: 'out-of-range',
        UNIMPLEMENTED: 'unimplemented',
        INTERNAL: 'internal',
        UNAVAILABLE: 'unavailable',
        DATA_LOSS: 'data-loss'
    };
    /**
     * An explicit error that can be thrown from a handler to send an error to the
     * client that called the function.
     */
    var FunctionsError = /** @class */ (function (_super) {
        __extends(FunctionsError, _super);
        function FunctionsError(
        /**
         * A standard error code that will be returned to the client. This also
         * determines the HTTP status code of the response, as defined in code.proto.
         */
        code, message, 
        /**
         * Extra data to be converted to JSON and included in the error response.
         */
        details) {
            var _this = _super.call(this, FUNCTIONS_TYPE + "/" + code, message || '') || this;
            _this.details = details;
            return _this;
        }
        return FunctionsError;
    }(FirebaseError));
    /**
     * Takes an HTTP status code and returns the corresponding ErrorCode.
     * This is the standard HTTP status code -> error mapping defined in:
     * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
     *
     * @param status An HTTP status code.
     * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.
     */
    function codeForHTTPStatus(status) {
        // Make sure any successful status is OK.
        if (status >= 200 && status < 300) {
            return 'ok';
        }
        switch (status) {
            case 0:
                // This can happen if the server returns 500.
                return 'internal';
            case 400:
                return 'invalid-argument';
            case 401:
                return 'unauthenticated';
            case 403:
                return 'permission-denied';
            case 404:
                return 'not-found';
            case 409:
                return 'aborted';
            case 429:
                return 'resource-exhausted';
            case 499:
                return 'cancelled';
            case 500:
                return 'internal';
            case 501:
                return 'unimplemented';
            case 503:
                return 'unavailable';
            case 504:
                return 'deadline-exceeded';
        }
        return 'unknown';
    }
    /**
     * Takes an HTTP response and returns the corresponding Error, if any.
     */
    function _errorForResponse(status, bodyJSON) {
        var code = codeForHTTPStatus(status);
        // Start with reasonable defaults from the status code.
        var description = code;
        var details = undefined;
        // Then look through the body for explicit details.
        try {
            var errorJSON = bodyJSON && bodyJSON.error;
            if (errorJSON) {
                var status_1 = errorJSON.status;
                if (typeof status_1 === 'string') {
                    if (!errorCodeMap[status_1]) {
                        // They must've included an unknown error code in the body.
                        return new FunctionsError('internal', 'internal');
                    }
                    code = errorCodeMap[status_1];
                    // TODO(klimt): Add better default descriptions for error enums.
                    // The default description needs to be updated for the new code.
                    description = status_1;
                }
                var message = errorJSON.message;
                if (typeof message === 'string') {
                    description = message;
                }
                details = errorJSON.details;
                if (details !== undefined) {
                    details = decode(details);
                }
            }
        }
        catch (e) {
            // If we couldn't parse explicit error data, that's fine.
        }
        if (code === 'ok') {
            // Technically, there's an edge case where a developer could explicitly
            // return an error code of OK, and we will treat it as success, but that
            // seems reasonable.
            return null;
        }
        return new FunctionsError(code, description, details);
    }

    /**
     * Helper class to get metadata that should be included with a function call.
     * @internal
     */
    var ContextProvider = /** @class */ (function () {
        function ContextProvider(authProvider, messagingProvider) {
            var _this = this;
            this.auth = null;
            this.messaging = null;
            this.auth = authProvider.getImmediate({ optional: true });
            this.messaging = messagingProvider.getImmediate({
                optional: true
            });
            if (!this.auth) {
                authProvider.get().then(function (auth) { return (_this.auth = auth); }, function () {
                    /* get() never rejects */
                });
            }
            if (!this.messaging) {
                messagingProvider.get().then(function (messaging) { return (_this.messaging = messaging); }, function () {
                    /* get() never rejects */
                });
            }
        }
        ContextProvider.prototype.getAuthToken = function () {
            return __awaiter(this, void 0, void 0, function () {
                var token, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.auth) {
                                return [2 /*return*/, undefined];
                            }
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.auth.getToken()];
                        case 2:
                            token = _a.sent();
                            return [2 /*return*/, token === null || token === void 0 ? void 0 : token.accessToken];
                        case 3:
                            e_1 = _a.sent();
                            // If there's any error when trying to get the auth token, leave it off.
                            return [2 /*return*/, undefined];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        ContextProvider.prototype.getMessagingToken = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (!this.messaging ||
                        !('Notification' in self) ||
                        Notification.permission !== 'granted') {
                        return [2 /*return*/, undefined];
                    }
                    try {
                        return [2 /*return*/, this.messaging.getToken()];
                    }
                    catch (e) {
                        // We don't warn on this, because it usually means messaging isn't set up.
                        // console.warn('Failed to retrieve instance id token.', e);
                        // If there's any error when trying to get the token, leave it off.
                        return [2 /*return*/, undefined];
                    }
                    return [2 /*return*/];
                });
            });
        };
        ContextProvider.prototype.getContext = function () {
            return __awaiter(this, void 0, void 0, function () {
                var authToken, messagingToken;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.getAuthToken()];
                        case 1:
                            authToken = _a.sent();
                            return [4 /*yield*/, this.getMessagingToken()];
                        case 2:
                            messagingToken = _a.sent();
                            return [2 /*return*/, { authToken: authToken, messagingToken: messagingToken }];
                    }
                });
            });
        };
        return ContextProvider;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_REGION = 'us-central1';
    /**
     * Returns a Promise that will be rejected after the given duration.
     * The error will be of type FunctionsError.
     *
     * @param millis Number of milliseconds to wait before rejecting.
     */
    function failAfter(millis) {
        return new Promise(function (_, reject) {
            setTimeout(function () {
                reject(new FunctionsError('deadline-exceeded', 'deadline-exceeded'));
            }, millis);
        });
    }
    /**
     * The main class for the Firebase Functions SDK.
     * @internal
     */
    var FunctionsService = /** @class */ (function () {
        /**
         * Creates a new Functions service for the given app.
         * @param app - The FirebaseApp to use.
         */
        function FunctionsService(app, authProvider, messagingProvider, regionOrCustomDomain, fetchImpl) {
            var _this = this;
            if (regionOrCustomDomain === void 0) { regionOrCustomDomain = DEFAULT_REGION; }
            this.app = app;
            this.fetchImpl = fetchImpl;
            this.emulatorOrigin = null;
            this.contextProvider = new ContextProvider(authProvider, messagingProvider);
            // Cancels all ongoing requests when resolved.
            this.cancelAllRequests = new Promise(function (resolve) {
                _this.deleteService = function () {
                    return Promise.resolve(resolve());
                };
            });
            // Resolve the region or custom domain overload by attempting to parse it.
            try {
                var url = new URL(regionOrCustomDomain);
                this.customDomain = url.origin;
                this.region = DEFAULT_REGION;
            }
            catch (e) {
                this.customDomain = null;
                this.region = regionOrCustomDomain;
            }
        }
        FunctionsService.prototype._delete = function () {
            return this.deleteService();
        };
        /**
         * Returns the URL for a callable with the given name.
         * @param name - The name of the callable.
         * @internal
         */
        FunctionsService.prototype._url = function (name) {
            var projectId = this.app.options.projectId;
            if (this.emulatorOrigin !== null) {
                var origin_1 = this.emulatorOrigin;
                return origin_1 + "/" + projectId + "/" + this.region + "/" + name;
            }
            if (this.customDomain !== null) {
                return this.customDomain + "/" + name;
            }
            return "https://" + this.region + "-" + projectId + ".cloudfunctions.net/" + name;
        };
        return FunctionsService;
    }());
    /**
     * Modify this instance to communicate with the Cloud Functions emulator.
     *
     * Note: this must be called before this instance has been used to do any operations.
     *
     * @param host The emulator host (ex: localhost)
     * @param port The emulator port (ex: 5001)
     * @public
     */
    function useFunctionsEmulator(functionsInstance, host, port) {
        functionsInstance.emulatorOrigin = "http://" + host + ":" + port;
    }
    /**
     * Returns a reference to the callable https trigger with the given name.
     * @param name - The name of the trigger.
     * @public
     */
    function httpsCallable(functionsInstance, name, options) {
        return function (data) {
            return call(functionsInstance, name, data, options || {});
        };
    }
    /**
     * Does an HTTP POST and returns the completed response.
     * @param url The url to post to.
     * @param body The JSON body of the post.
     * @param headers The HTTP headers to include in the request.
     * @return A Promise that will succeed when the request finishes.
     */
    function postJSON(url, body, headers, fetchImpl) {
        return __awaiter(this, void 0, void 0, function () {
            var response, e_1, json, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        headers['Content-Type'] = 'application/json';
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, fetchImpl(url, {
                                method: 'POST',
                                body: JSON.stringify(body),
                                headers: headers
                            })];
                    case 2:
                        response = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        // This could be an unhandled error on the backend, or it could be a
                        // network error. There's no way to know, since an unhandled error on the
                        // backend will fail to set the proper CORS header, and thus will be
                        // treated as a network error by fetch.
                        return [2 /*return*/, {
                                status: 0,
                                json: null
                            }];
                    case 4:
                        json = null;
                        _a.label = 5;
                    case 5:
                        _a.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, response.json()];
                    case 6:
                        json = _a.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        e_2 = _a.sent();
                        return [3 /*break*/, 8];
                    case 8: return [2 /*return*/, {
                            status: response.status,
                            json: json
                        }];
                }
            });
        });
    }
    /**
     * Calls a callable function asynchronously and returns the result.
     * @param name The name of the callable trigger.
     * @param data The data to pass as params to the function.s
     */
    function call(functionsInstance, name, data, options) {
        return __awaiter(this, void 0, void 0, function () {
            var url, body, headers, context, timeout, response, error, responseData, decodedData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = functionsInstance._url(name);
                        // Encode any special types, such as dates, in the input data.
                        data = encode(data);
                        body = { data: data };
                        headers = {};
                        return [4 /*yield*/, functionsInstance.contextProvider.getContext()];
                    case 1:
                        context = _a.sent();
                        if (context.authToken) {
                            headers['Authorization'] = 'Bearer ' + context.authToken;
                        }
                        if (context.messagingToken) {
                            headers['Firebase-Instance-ID-Token'] = context.messagingToken;
                        }
                        timeout = options.timeout || 70000;
                        return [4 /*yield*/, Promise.race([
                                postJSON(url, body, headers, functionsInstance.fetchImpl),
                                failAfter(timeout),
                                functionsInstance.cancelAllRequests
                            ])];
                    case 2:
                        response = _a.sent();
                        // If service was deleted, interrupted response throws an error.
                        if (!response) {
                            throw new FunctionsError('cancelled', 'Firebase Functions instance was deleted.');
                        }
                        error = _errorForResponse(response.status, response.json);
                        if (error) {
                            throw error;
                        }
                        if (!response.json) {
                            throw new FunctionsError('internal', 'Response is not valid JSON object.');
                        }
                        responseData = response.json.data;
                        // TODO(klimt): For right now, allow "result" instead of "data", for
                        // backwards compatibility.
                        if (typeof responseData === 'undefined') {
                            responseData = response.json.result;
                        }
                        if (typeof responseData === 'undefined') {
                            // Consider the response malformed.
                            throw new FunctionsError('internal', 'Response is missing data field.');
                        }
                        decodedData = decode(responseData);
                        return [2 /*return*/, { data: decodedData }];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function registerFunctions(fetchImpl) {
        var factory = function (container, regionOrCustomDomain) {
            // Dependencies
            var app = container.getProvider('app-exp').getImmediate();
            var authProvider = container.getProvider('auth-internal');
            var messagingProvider = container.getProvider('messaging');
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return new FunctionsService(app, authProvider, messagingProvider, regionOrCustomDomain, fetchImpl);
        };
        app._registerComponent(new Component(FUNCTIONS_TYPE, factory, "PUBLIC" /* PUBLIC */).setMultipleInstances(true));
    }

    var name = "@firebase/functions-exp";
    var version = "0.0.900";

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a Functions instance for the given app.
     * @param app - The FirebaseApp to use.
     * @param regionOrCustomDomain - one of:
     *   a) The region the callable functions are located in (ex: us-central1)
     *   b) A custom domain hosting the callable functions (ex: https://mydomain.com)
     * @public
     */
    function getFunctions(app$1, regionOrCustomDomain) {
        if (regionOrCustomDomain === void 0) { regionOrCustomDomain = DEFAULT_REGION; }
        // Dependencies
        var functionsProvider = app._getProvider(app$1, FUNCTIONS_TYPE);
        var functionsInstance = functionsProvider.getImmediate({
            identifier: regionOrCustomDomain
        });
        return functionsInstance;
    }
    /**
     * Modify this instance to communicate with the Cloud Functions emulator.
     *
     * Note: this must be called before this instance has been used to do any operations.
     *
     * @param host The emulator host (ex: localhost)
     * @param port The emulator port (ex: 5001)
     * @public
     */
    function useFunctionsEmulator$1(functionsInstance, host, port) {
        useFunctionsEmulator(functionsInstance, host, port);
    }
    /**
     * Returns a reference to the callable https trigger with the given name.
     * @param name - The name of the trigger.
     * @public
     */
    function httpsCallable$1(functionsInstance, name, options) {
        return httpsCallable(functionsInstance, name, options);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    registerFunctions(fetch.bind(self));
    app.registerVersion(name, version);

    exports.getFunctions = getFunctions;
    exports.httpsCallable = httpsCallable$1;
    exports.useFunctionsEmulator = useFunctionsEmulator$1;

    Object.defineProperty(exports, '__esModule', { value: true });


              }).apply(this, arguments);
            } catch(err) {
                console.error(err);
                throw new Error(
                  'Cannot instantiate firebase-functions.js - ' +
                  'be sure to load firebase-app.js first.'
                );
              }

})));


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@firebase/app')) :
    typeof define === 'function' && define.amd ? define(['exports', '@firebase/app'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.firebase = global.firebase || {}, global.firebase.firestore = global.firebase.firestore || {}), global.firebase.app));
}(this, (function (exports, app) { 'use strict';

    try {
                (function() {

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns navigator.userAgent string or '' if it's not defined.
     * @return user agent string
     */
    function getUA() {
        if (typeof navigator !== 'undefined' &&
            typeof navigator['userAgent'] === 'string') {
            return navigator['userAgent'];
        }
        else {
            return '';
        }
    }
    /**
     * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
     *
     * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
     * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
     * wait for a callback.
     */
    function isMobileCordova() {
        return (typeof window !== 'undefined' &&
            // @ts-ignore Setting up an broadly applicable index signature for Window
            // just to deal with this case would probably be a bad idea.
            !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
            /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));
    }
    function isBrowserExtension() {
        var runtime = typeof chrome === 'object'
            ? chrome.runtime
            : typeof browser === 'object'
                ? browser.runtime
                : undefined;
        return typeof runtime === 'object' && runtime.id !== undefined;
    }
    /**
     * Detect React Native.
     *
     * @return true if ReactNative environment is detected.
     */
    function isReactNative() {
        return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
    }
    /** Detects Electron apps. */
    function isElectron() {
        return getUA().indexOf('Electron/') >= 0;
    }
    /** Detects Internet Explorer. */
    function isIE() {
        var ua = getUA();
        return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
    }
    /** Detects Universal Windows Platform apps. */
    function isUWP() {
        return getUA().indexOf('MSAppHost/') >= 0;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ERROR_NAME = 'FirebaseError';
    // Based on code from:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
    var FirebaseError = /** @class */ (function (_super) {
        __extends(FirebaseError, _super);
        function FirebaseError(code, message, customData) {
            var _this = _super.call(this, message) || this;
            _this.code = code;
            _this.customData = customData;
            _this.name = ERROR_NAME;
            // Fix For ES5
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(_this, FirebaseError.prototype);
            // Maintains proper stack trace for where our error was thrown.
            // Only available on V8.
            if (Error.captureStackTrace) {
                Error.captureStackTrace(_this, ErrorFactory.prototype.create);
            }
            return _this;
        }
        return FirebaseError;
    }(Error));
    var ErrorFactory = /** @class */ (function () {
        function ErrorFactory(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
        }
        ErrorFactory.prototype.create = function (code) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            var customData = data[0] || {};
            var fullCode = this.service + "/" + code;
            var template = this.errors[code];
            var message = template ? replaceTemplate(template, customData) : 'Error';
            // Service Name: Error message (service/code).
            var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
            var error = new FirebaseError(fullCode, fullMessage, customData);
            return error;
        };
        return ErrorFactory;
    }());
    function replaceTemplate(template, data) {
        return template.replace(PATTERN, function (_, key) {
            var value = data[key];
            return value != null ? String(value) : "<" + key + "?>";
        });
    }
    var PATTERN = /\{\$([^}]+)}/g;

    /**
     * Component for service name T, e.g. `auth`, `auth-internal`
     */
    var Component = /** @class */ (function () {
        /**
         *
         * @param name The public service name, e.g. app, auth, firestore, database
         * @param instanceFactory Service factory responsible for creating the public interface
         * @param type whether the service provided by the component is public or private
         */
        function Component(name, instanceFactory, type) {
            this.name = name;
            this.instanceFactory = instanceFactory;
            this.type = type;
            this.multipleInstances = false;
            /**
             * Properties to be added to the service namespace
             */
            this.serviceProps = {};
            this.instantiationMode = "LAZY" /* LAZY */;
        }
        Component.prototype.setInstantiationMode = function (mode) {
            this.instantiationMode = mode;
            return this;
        };
        Component.prototype.setMultipleInstances = function (multipleInstances) {
            this.multipleInstances = multipleInstances;
            return this;
        };
        Component.prototype.setServiceProps = function (props) {
            this.serviceProps = props;
            return this;
        };
        return Component;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a;
    /**
     * The JS SDK supports 5 log levels and also allows a user the ability to
     * silence the logs altogether.
     *
     * The order is a follows:
     * DEBUG < VERBOSE < INFO < WARN < ERROR
     *
     * All of the log types above the current log level will be captured (i.e. if
     * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
     * `VERBOSE` logs will not)
     */
    var LogLevel;
    (function (LogLevel) {
        LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
        LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
        LogLevel[LogLevel["INFO"] = 2] = "INFO";
        LogLevel[LogLevel["WARN"] = 3] = "WARN";
        LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
        LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(LogLevel || (LogLevel = {}));
    var levelStringToEnum = {
        'debug': LogLevel.DEBUG,
        'verbose': LogLevel.VERBOSE,
        'info': LogLevel.INFO,
        'warn': LogLevel.WARN,
        'error': LogLevel.ERROR,
        'silent': LogLevel.SILENT
    };
    /**
     * The default log level
     */
    var defaultLogLevel = LogLevel.INFO;
    /**
     * By default, `console.debug` is not displayed in the developer console (in
     * chrome). To avoid forcing users to have to opt-in to these logs twice
     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
     * logs to the `console.log` function.
     */
    var ConsoleMethod = (_a = {},
        _a[LogLevel.DEBUG] = 'log',
        _a[LogLevel.VERBOSE] = 'log',
        _a[LogLevel.INFO] = 'info',
        _a[LogLevel.WARN] = 'warn',
        _a[LogLevel.ERROR] = 'error',
        _a);
    /**
     * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
     * messages on to their corresponding console counterparts (if the log method
     * is supported by the current log level)
     */
    var defaultLogHandler = function (instance, logType) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (logType < instance.logLevel) {
            return;
        }
        var now = new Date().toISOString();
        var method = ConsoleMethod[logType];
        if (method) {
            console[method].apply(console, __spreadArrays(["[" + now + "]  " + instance.name + ":"], args));
        }
        else {
            throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
        }
    };
    var Logger = /** @class */ (function () {
        /**
         * Gives you an instance of a Logger to capture messages according to
         * Firebase's logging scheme.
         *
         * @param name The name that the logs will be associated with
         */
        function Logger(name) {
            this.name = name;
            /**
             * The log level of the given Logger instance.
             */
            this._logLevel = defaultLogLevel;
            /**
             * The main (internal) log handler for the Logger instance.
             * Can be set to a new function in internal package code but not by user.
             */
            this._logHandler = defaultLogHandler;
            /**
             * The optional, additional, user-defined log handler for the Logger instance.
             */
            this._userLogHandler = null;
        }
        Object.defineProperty(Logger.prototype, "logLevel", {
            get: function () {
                return this._logLevel;
            },
            set: function (val) {
                if (!(val in LogLevel)) {
                    throw new TypeError("Invalid value \"" + val + "\" assigned to `logLevel`");
                }
                this._logLevel = val;
            },
            enumerable: false,
            configurable: true
        });
        // Workaround for setter/getter having to be the same type.
        Logger.prototype.setLogLevel = function (val) {
            this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
        };
        Object.defineProperty(Logger.prototype, "logHandler", {
            get: function () {
                return this._logHandler;
            },
            set: function (val) {
                if (typeof val !== 'function') {
                    throw new TypeError('Value assigned to `logHandler` must be a function');
                }
                this._logHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Logger.prototype, "userLogHandler", {
            get: function () {
                return this._userLogHandler;
            },
            set: function (val) {
                this._userLogHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * The functions below are all based on the `console` interface
         */
        Logger.prototype.debug = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));
        };
        Logger.prototype.log = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));
        };
        Logger.prototype.info = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));
        };
        Logger.prototype.warn = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));
        };
        Logger.prototype.error = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));
        };
        return Logger;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$1 = function(d, b) {
        extendStatics$1 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics$1(d, b);
    };

    function __extends$1(d, b) {
        extendStatics$1(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    var h, goog = goog || {}, k = commonjsGlobal || self;
    function aa() { }
    function ba(a) { var b = typeof a; b = "object" != b ? b : a ? Array.isArray(a) ? "array" : b : "null"; return "array" == b || "object" == b && "number" == typeof a.length; }
    function n(a) { var b = typeof a; return "object" == b && null != a || "function" == b; }
    function ca(a) { return Object.prototype.hasOwnProperty.call(a, da) && a[da] || (a[da] = ++ea); }
    var da = "closure_uid_" + (1E9 * Math.random() >>> 0), ea = 0;
    function fa(a, b, c) { return a.call.apply(a.bind, arguments); }
    function ha(a, b, c) { if (!a)
        throw Error(); if (2 < arguments.length) {
        var d = Array.prototype.slice.call(arguments, 2);
        return function () { var e = Array.prototype.slice.call(arguments); Array.prototype.unshift.apply(e, d); return a.apply(b, e); };
    } return function () { return a.apply(b, arguments); }; }
    function p(a, b, c) { Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? p = fa : p = ha; return p.apply(null, arguments); }
    function ja(a, b) { var c = Array.prototype.slice.call(arguments, 1); return function () { var d = c.slice(); d.push.apply(d, arguments); return a.apply(this, d); }; }
    function q() { return Date.now(); }
    function r(a, b) { function c() { } c.prototype = b.prototype; a.X = b.prototype; a.prototype = new c; a.prototype.constructor = a; a.Kb = function (d, e, f) { for (var g = Array(arguments.length - 2), m = 2; m < arguments.length; m++)
        g[m - 2] = arguments[m]; return b.prototype[e].apply(d, g); }; }
    function t() { this.j = this.j; this.i = this.i; }
    var ka = 0;
    t.prototype.j = !1;
    t.prototype.ja = function () { if (!this.j && (this.j = !0, this.G(), 0 != ka)) {
        var a = ca(this);
    } };
    t.prototype.G = function () { if (this.i)
        for (; this.i.length;)
            this.i.shift()(); };
    var ma = Array.prototype.indexOf ? function (a, b) { return Array.prototype.indexOf.call(a, b, void 0); } : function (a, b) { if ("string" === typeof a)
        return "string" !== typeof b || 1 != b.length ? -1 : a.indexOf(b, 0); for (var c = 0; c < a.length; c++)
        if (c in a && a[c] === b)
            return c; return -1; }, na = Array.prototype.forEach ? function (a, b, c) { Array.prototype.forEach.call(a, b, c); } : function (a, b, c) { for (var d = a.length, e = "string" === typeof a ? a.split("") : a, f = 0; f < d; f++)
        f in e && b.call(c, e[f], f, a); };
    function oa(a) { a: {
        var b = pa;
        for (var c = a.length, d = "string" === typeof a ? a.split("") : a, e = 0; e < c; e++)
            if (e in d && b.call(void 0, d[e], e, a)) {
                b = e;
                break a;
            }
        b = -1;
    } return 0 > b ? null : "string" === typeof a ? a.charAt(b) : a[b]; }
    function qa(a) { return Array.prototype.concat.apply([], arguments); }
    function ra(a) { var b = a.length; if (0 < b) {
        for (var c = Array(b), d = 0; d < b; d++)
            c[d] = a[d];
        return c;
    } return []; }
    function sa(a) { return /^[\s\xa0]*$/.test(a); }
    var ta = String.prototype.trim ? function (a) { return a.trim(); } : function (a) { return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]; };
    function v(a, b) { return -1 != a.indexOf(b); }
    function ua(a, b) { return a < b ? -1 : a > b ? 1 : 0; }
    var w;
    a: {
        var va = k.navigator;
        if (va) {
            var wa = va.userAgent;
            if (wa) {
                w = wa;
                break a;
            }
        }
        w = "";
    }
    function za(a, b, c) { for (var d in a)
        b.call(c, a[d], d, a); }
    function Aa(a) { var b = {}; for (var c in a)
        b[c] = a[c]; return b; }
    var Ba = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
    function Ca(a, b) { var c, d; for (var e = 1; e < arguments.length; e++) {
        d = arguments[e];
        for (c in d)
            a[c] = d[c];
        for (var f = 0; f < Ba.length; f++)
            c = Ba[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
    } }
    function Da(a) { Da[" "](a); return a; }
    Da[" "] = aa;
    function Ea(a, b) { var c = Fa; return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a); }
    var Ga = v(w, "Opera"), x = v(w, "Trident") || v(w, "MSIE"), Ha = v(w, "Edge"), Ia = Ha || x, Ja = v(w, "Gecko") && !(v(w.toLowerCase(), "webkit") && !v(w, "Edge")) && !(v(w, "Trident") || v(w, "MSIE")) && !v(w, "Edge"), Ka = v(w.toLowerCase(), "webkit") && !v(w, "Edge");
    function La() { var a = k.document; return a ? a.documentMode : void 0; }
    var Ma;
    a: {
        var Na = "", Oa = function () { var a = w; if (Ja)
            return /rv:([^\);]+)(\)|;)/.exec(a); if (Ha)
            return /Edge\/([\d\.]+)/.exec(a); if (x)
            return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a); if (Ka)
            return /WebKit\/(\S+)/.exec(a); if (Ga)
            return /(?:Version)[ \/]?(\S+)/.exec(a); }();
        Oa && (Na = Oa ? Oa[1] : "");
        if (x) {
            var Pa = La();
            if (null != Pa && Pa > parseFloat(Na)) {
                Ma = String(Pa);
                break a;
            }
        }
        Ma = Na;
    }
    var Fa = {};
    function Qa(a) { return Ea(a, function () { {
        var b = 0;
        var e = ta(String(Ma)).split("."), f = ta(String(a)).split("."), g = Math.max(e.length, f.length);
        for (var m = 0; 0 == b && m < g; m++) {
            var c = e[m] || "", d = f[m] || "";
            do {
                c = /(\d*)(\D*)(.*)/.exec(c) || ["", "", "", ""];
                d = /(\d*)(\D*)(.*)/.exec(d) || ["", "", "", ""];
                if (0 == c[0].length && 0 == d[0].length)
                    break;
                b = ua(0 == c[1].length ? 0 : parseInt(c[1], 10), 0 == d[1].length ? 0 : parseInt(d[1], 10)) || ua(0 == c[2].length, 0 == d[2].length) || ua(c[2], d[2]);
                c = c[3];
                d = d[3];
            } while (0 == b);
        }
    } return 0 <= b; }); }
    var Ra;
    if (k.document && x) {
        var Sa = La();
        Ra = Sa ? Sa : parseInt(Ma, 10) || void 0;
    }
    else
        Ra = void 0;
    var Ta = Ra;
    var Ua = !x || 9 <= Number(Ta), Va = x && !Qa("9"), Wa = function () { if (!k.addEventListener || !Object.defineProperty)
        return !1; var a = !1, b = Object.defineProperty({}, "passive", { get: function () { a = !0; } }); try {
        k.addEventListener("test", aa, b), k.removeEventListener("test", aa, b);
    }
    catch (c) { } return a; }();
    function y(a, b) { this.type = a; this.a = this.target = b; this.defaultPrevented = !1; }
    y.prototype.b = function () { this.defaultPrevented = !0; };
    function z(a, b) {
        y.call(this, a ? a.type : "");
        this.relatedTarget = this.a = this.target = null;
        this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
        this.key = "";
        this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;
        this.pointerId = 0;
        this.pointerType = "";
        this.c = null;
        if (a) {
            var c = this.type = a.type, d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
            this.target = a.target || a.srcElement;
            this.a = b;
            if (b = a.relatedTarget) {
                if (Ja) {
                    a: {
                        try {
                            Da(b.nodeName);
                            var e = !0;
                            break a;
                        }
                        catch (f) { }
                        e = !1;
                    }
                    e || (b = null);
                }
            }
            else
                "mouseover" ==
                    c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);
            this.relatedTarget = b;
            d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
            this.button = a.button;
            this.key = a.key || "";
            this.ctrlKey = a.ctrlKey;
            this.altKey = a.altKey;
            this.shiftKey = a.shiftKey;
            this.metaKey =
                a.metaKey;
            this.pointerId = a.pointerId || 0;
            this.pointerType = "string" === typeof a.pointerType ? a.pointerType : Xa[a.pointerType] || "";
            this.c = a;
            a.defaultPrevented && this.b();
        }
    }
    r(z, y);
    var Xa = { 2: "touch", 3: "pen", 4: "mouse" };
    z.prototype.b = function () { z.X.b.call(this); var a = this.c; if (a.preventDefault)
        a.preventDefault();
    else if (a.returnValue = !1, Va)
        try {
            if (a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode)
                a.keyCode = -1;
        }
        catch (b) { } };
    var A = "closure_listenable_" + (1E6 * Math.random() | 0), Ya = 0;
    function Za(a, b, c, d, e) { this.listener = a; this.proxy = null; this.src = b; this.type = c; this.capture = !!d; this.ca = e; this.key = ++Ya; this.Y = this.Z = !1; }
    function $a(a) { a.Y = !0; a.listener = null; a.proxy = null; a.src = null; a.ca = null; }
    function ab(a) { this.src = a; this.a = {}; this.b = 0; }
    ab.prototype.add = function (a, b, c, d, e) { var f = a.toString(); a = this.a[f]; a || (a = this.a[f] = [], this.b++); var g = bb(a, b, d, e); -1 < g ? (b = a[g], c || (b.Z = !1)) : (b = new Za(b, this.src, f, !!d, e), b.Z = c, a.push(b)); return b; };
    function cb(a, b) { var c = b.type; if (c in a.a) {
        var d = a.a[c], e = ma(d, b), f;
        (f = 0 <= e) && Array.prototype.splice.call(d, e, 1);
        f && ($a(b), 0 == a.a[c].length && (delete a.a[c], a.b--));
    } }
    function bb(a, b, c, d) { for (var e = 0; e < a.length; ++e) {
        var f = a[e];
        if (!f.Y && f.listener == b && f.capture == !!c && f.ca == d)
            return e;
    } return -1; }
    var db = "closure_lm_" + (1E6 * Math.random() | 0), eb = {};
    function gb(a, b, c, d, e) { if (d && d.once)
        return hb(a, b, c, d, e); if (Array.isArray(b)) {
        for (var f = 0; f < b.length; f++)
            gb(a, b[f], c, d, e);
        return null;
    } c = ib(c); return a && a[A] ? a.va(b, c, n(d) ? !!d.capture : !!d, e) : jb(a, b, c, !1, d, e); }
    function jb(a, b, c, d, e, f) {
        if (!b)
            throw Error("Invalid event type");
        var g = n(e) ? !!e.capture : !!e;
        if (g && !Ua)
            return null;
        var m = kb(a);
        m || (a[db] = m = new ab(a));
        c = m.add(b, c, d, g, f);
        if (c.proxy)
            return c;
        d = lb();
        c.proxy = d;
        d.src = a;
        d.listener = c;
        if (a.addEventListener)
            Wa || (e = g), void 0 === e && (e = !1), a.addEventListener(b.toString(), d, e);
        else if (a.attachEvent)
            a.attachEvent(mb(b.toString()), d);
        else if (a.addListener && a.removeListener)
            a.addListener(d);
        else
            throw Error("addEventListener and attachEvent are unavailable.");
        return c;
    }
    function lb() { var a = nb, b = Ua ? function (c) { return a.call(b.src, b.listener, c); } : function (c) { c = a.call(b.src, b.listener, c); if (!c)
        return c; }; return b; }
    function hb(a, b, c, d, e) { if (Array.isArray(b)) {
        for (var f = 0; f < b.length; f++)
            hb(a, b[f], c, d, e);
        return null;
    } c = ib(c); return a && a[A] ? a.wa(b, c, n(d) ? !!d.capture : !!d, e) : jb(a, b, c, !0, d, e); }
    function ob(a, b, c, d, e) { if (Array.isArray(b))
        for (var f = 0; f < b.length; f++)
            ob(a, b[f], c, d, e);
    else
        (d = n(d) ? !!d.capture : !!d, c = ib(c), a && a[A]) ? (a = a.c, b = String(b).toString(), b in a.a && (f = a.a[b], c = bb(f, c, d, e), -1 < c && ($a(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.a[b], a.b--)))) : a && (a = kb(a)) && (b = a.a[b.toString()], a = -1, b && (a = bb(b, c, d, e)), (c = -1 < a ? b[a] : null) && pb(c)); }
    function pb(a) { if ("number" !== typeof a && a && !a.Y) {
        var b = a.src;
        if (b && b[A])
            cb(b.c, a);
        else {
            var c = a.type, d = a.proxy;
            b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(mb(c), d) : b.addListener && b.removeListener && b.removeListener(d);
            (c = kb(b)) ? (cb(c, a), 0 == c.b && (c.src = null, b[db] = null)) : $a(a);
        }
    } }
    function mb(a) { return a in eb ? eb[a] : eb[a] = "on" + a; }
    function qb(a, b) { var c = a.listener, d = a.ca || a.src; a.Z && pb(a); return c.call(d, b); }
    function nb(a, b) { if (a.Y)
        return !0; if (!Ua) {
        if (!b)
            a: {
                b = ["window", "event"];
                for (var c = k, d = 0; d < b.length; d++)
                    if (c = c[b[d]], null == c) {
                        b = null;
                        break a;
                    }
                b = c;
            }
        b = new z(b, this);
        return qb(a, b);
    } return qb(a, new z(b, this)); }
    function kb(a) { a = a[db]; return a instanceof ab ? a : null; }
    var sb = "__closure_events_fn_" + (1E9 * Math.random() >>> 0);
    function ib(a) { if ("function" === typeof a)
        return a; a[sb] || (a[sb] = function (b) { return a.handleEvent(b); }); return a[sb]; }
    function D() { t.call(this); this.c = new ab(this); this.J = this; this.C = null; }
    r(D, t);
    D.prototype[A] = !0;
    h = D.prototype;
    h.addEventListener = function (a, b, c, d) { gb(this, a, b, c, d); };
    h.removeEventListener = function (a, b, c, d) { ob(this, a, b, c, d); };
    function E(a, b) { var c, d = a.C; if (d)
        for (c = []; d; d = d.C)
            c.push(d); a = a.J; d = b.type || b; if ("string" === typeof b)
        b = new y(b, a);
    else if (b instanceof y)
        b.target = b.target || a;
    else {
        var e = b;
        b = new y(d, a);
        Ca(b, e);
    } e = !0; if (c)
        for (var f = c.length - 1; 0 <= f; f--) {
            var g = b.a = c[f];
            e = tb(g, d, !0, b) && e;
        } g = b.a = a; e = tb(g, d, !0, b) && e; e = tb(g, d, !1, b) && e; if (c)
        for (f = 0; f < c.length; f++)
            g = b.a = c[f], e = tb(g, d, !1, b) && e; }
    h.G = function () { D.X.G.call(this); if (this.c) {
        var a = this.c, c;
        for (c in a.a) {
            for (var d = a.a[c], e = 0; e < d.length; e++)
                $a(d[e]);
            delete a.a[c];
            a.b--;
        }
    } this.C = null; };
    h.va = function (a, b, c, d) { return this.c.add(String(a), b, !1, c, d); };
    h.wa = function (a, b, c, d) { return this.c.add(String(a), b, !0, c, d); };
    function tb(a, b, c, d) { b = a.c.a[String(b)]; if (!b)
        return !0; b = b.concat(); for (var e = !0, f = 0; f < b.length; ++f) {
        var g = b[f];
        if (g && !g.Y && g.capture == c) {
            var m = g.listener, l = g.ca || g.src;
            g.Z && cb(a.c, g);
            e = !1 !== m.call(l, d) && e;
        }
    } return e && !d.defaultPrevented; }
    var ub = k.JSON.stringify;
    function vb() { this.b = this.a = null; }
    var xb = new /** @class */ (function () {
        function class_1(a, b) {
            this.c = a;
            this.f = b;
            this.b = 0;
            this.a = null;
        }
        class_1.prototype.get = function () { var a; 0 < this.b ? (this.b--, a = this.a, this.a = a.next, a.next = null) : a = this.c(); return a; };
        return class_1;
    }())(function () { return new wb; }, function (a) { a.reset(); });
    vb.prototype.add = function (a, b) { var c = xb.get(); c.set(a, b); this.b ? this.b.next = c : this.a = c; this.b = c; };
    function yb() { var a = zb, b = null; a.a && (b = a.a, a.a = a.a.next, a.a || (a.b = null), b.next = null); return b; }
    function wb() { this.next = this.b = this.a = null; }
    wb.prototype.set = function (a, b) { this.a = a; this.b = b; this.next = null; };
    wb.prototype.reset = function () { this.next = this.b = this.a = null; };
    function Ab(a) { k.setTimeout(function () { throw a; }, 0); }
    function Bb(a, b) { Cb || Db(); Eb || (Cb(), Eb = !0); zb.add(a, b); }
    var Cb;
    function Db() { var a = k.Promise.resolve(void 0); Cb = function () { a.then(Fb); }; }
    var Eb = !1, zb = new vb;
    function Fb() { for (var a; a = yb();) {
        try {
            a.a.call(a.b);
        }
        catch (c) {
            Ab(c);
        }
        var b = xb;
        b.f(a);
        100 > b.b && (b.b++, a.next = b.a, b.a = a);
    } Eb = !1; }
    function Gb(a, b) { D.call(this); this.b = a || 1; this.a = b || k; this.f = p(this.Za, this); this.g = q(); }
    r(Gb, D);
    h = Gb.prototype;
    h.aa = !1;
    h.M = null;
    h.Za = function () { if (this.aa) {
        var a = q() - this.g;
        0 < a && a < .8 * this.b ? this.M = this.a.setTimeout(this.f, this.b - a) : (this.M && (this.a.clearTimeout(this.M), this.M = null), E(this, "tick"), this.aa && (Hb(this), this.start()));
    } };
    h.start = function () { this.aa = !0; this.M || (this.M = this.a.setTimeout(this.f, this.b), this.g = q()); };
    function Hb(a) { a.aa = !1; a.M && (a.a.clearTimeout(a.M), a.M = null); }
    h.G = function () { Gb.X.G.call(this); Hb(this); delete this.a; };
    function Ib(a, b, c) { if ("function" === typeof a)
        c && (a = p(a, c));
    else if (a && "function" == typeof a.handleEvent)
        a = p(a.handleEvent, a);
    else
        throw Error("Invalid listener argument"); return 2147483647 < Number(b) ? -1 : k.setTimeout(a, b || 0); }
    function Jb(a) { a.a = Ib(function () { a.a = null; a.c && (a.c = !1, Jb(a)); }, a.h); var b = a.b; a.b = null; a.g.apply(null, b); }
    var Kb = /** @class */ (function (_super) {
        __extends$1(Kb, _super);
        function Kb(a, b) {
            var _this = _super.call(this) || this;
            _this.g = a;
            _this.h = b;
            _this.b = null;
            _this.c = !1;
            _this.a = null;
            return _this;
        }
        Kb.prototype.f = function (a) { this.b = arguments; this.a ? this.c = !0 : Jb(this); };
        Kb.prototype.G = function () { _super.prototype.G.call(this); this.a && (k.clearTimeout(this.a), this.a = null, this.c = !1, this.b = null); };
        return Kb;
    }(t));
    function F(a) { t.call(this); this.b = a; this.a = {}; }
    r(F, t);
    var Lb = [];
    function Mb(a, b, c, d) { Array.isArray(c) || (c && (Lb[0] = c.toString()), c = Lb); for (var e = 0; e < c.length; e++) {
        var f = gb(b, c[e], d || a.handleEvent, !1, a.b || a);
        if (!f)
            break;
        a.a[f.key] = f;
    } }
    function Nb(a) { za(a.a, function (b, c) { this.a.hasOwnProperty(c) && pb(b); }, a); a.a = {}; }
    F.prototype.G = function () { F.X.G.call(this); Nb(this); };
    F.prototype.handleEvent = function () { throw Error("EventHandler.handleEvent not implemented"); };
    function Ob() { this.a = !0; }
    function Pb(a, b, c, d, e, f) { a.info(function () { if (a.a)
        if (f) {
            var g = "";
            for (var m = f.split("&"), l = 0; l < m.length; l++) {
                var u = m[l].split("=");
                if (1 < u.length) {
                    var C = u[0];
                    u = u[1];
                    var B = C.split("_");
                    g = 2 <= B.length && "type" == B[1] ? g + (C + "=" + u + "&") : g + (C + "=redacted&");
                }
            }
        }
        else
            g = null;
    else
        g = f; return "XMLHTTP REQ (" + d + ") [attempt " + e + "]: " + b + "\n" + c + "\n" + g; }); }
    function Qb(a, b, c, d, e, f, g) { a.info(function () { return "XMLHTTP RESP (" + d + ") [ attempt " + e + "]: " + b + "\n" + c + "\n" + f + " " + g; }); }
    function G(a, b, c, d) { a.info(function () { return "XMLHTTP TEXT (" + b + "): " + Rb(a, c) + (d ? " " + d : ""); }); }
    function Sb(a, b) { a.info(function () { return "TIMEOUT: " + b; }); }
    Ob.prototype.info = function () { };
    function Rb(a, b) { if (!a.a)
        return b; if (!b)
        return null; try {
        var c = JSON.parse(b);
        if (c)
            for (a = 0; a < c.length; a++)
                if (Array.isArray(c[a])) {
                    var d = c[a];
                    if (!(2 > d.length)) {
                        var e = d[1];
                        if (Array.isArray(e) && !(1 > e.length)) {
                            var f = e[0];
                            if ("noop" != f && "stop" != f && "close" != f)
                                for (var g = 1; g < e.length; g++)
                                    e[g] = "";
                        }
                    }
                }
        return ub(c);
    }
    catch (m) {
        return b;
    } }
    var H = {}, Tb = null;
    function Ub() { return Tb = Tb || new D; }
    H.Fa = "serverreachability";
    function Vb(a) { y.call(this, H.Fa, a); }
    r(Vb, y);
    function I(a) { var b = Ub(); E(b, new Vb(b, a)); }
    H.STAT_EVENT = "statevent";
    function Wb(a, b) { y.call(this, H.STAT_EVENT, a); this.stat = b; }
    r(Wb, y);
    function J(a) { var b = Ub(); E(b, new Wb(b, a)); }
    H.Ga = "timingevent";
    function Xb(a) { y.call(this, H.Ga, a); }
    r(Xb, y);
    function K(a, b) { if ("function" !== typeof a)
        throw Error("Fn must not be null and must be a function"); return k.setTimeout(function () { a(); }, b); }
    var Yb = { NO_ERROR: 0, $a: 1, nb: 2, mb: 3, hb: 4, lb: 5, ob: 6, Da: 7, TIMEOUT: 8, rb: 9 };
    var Zb = { fb: "complete", Bb: "success", Ea: "error", Da: "abort", tb: "ready", ub: "readystatechange", TIMEOUT: "timeout", pb: "incrementaldata", sb: "progress", ib: "downloadprogress", Jb: "uploadprogress" };
    function $b() { }
    $b.prototype.a = null;
    function ac(a) { var b; (b = a.a) || (b = a.a = {}); return b; }
    function bc() { }
    var L = { OPEN: "a", eb: "b", Ea: "c", qb: "d" };
    function cc() { y.call(this, "d"); }
    r(cc, y);
    function dc() { y.call(this, "c"); }
    r(dc, y);
    var ec;
    function fc() { }
    r(fc, $b);
    ec = new fc;
    function M(a, b, c, d) { this.g = a; this.c = b; this.f = c; this.S = d || 1; this.J = new F(this); this.P = gc; a = Ia ? 125 : void 0; this.R = new Gb(a); this.B = null; this.b = !1; this.j = this.l = this.i = this.H = this.u = this.T = this.o = null; this.s = []; this.a = null; this.D = 0; this.h = this.m = null; this.N = -1; this.A = !1; this.O = 0; this.F = null; this.V = this.C = this.U = this.I = !1; }
    var gc = 45E3, hc = {}, ic = {};
    h = M.prototype;
    h.setTimeout = function (a) { this.P = a; };
    function jc(a, b, c) { a.H = 1; a.i = kc(N(b)); a.j = c; a.I = !0; lc(a, null); }
    function lc(a, b) { a.u = q(); mc(a); a.l = N(a.i); var c = a.l, d = a.S; Array.isArray(d) || (d = [String(d)]); nc(c.b, "t", d); a.D = 0; a.a = oc(a.g, a.g.C ? b : null); 0 < a.O && (a.F = new Kb(p(a.Ca, a, a.a), a.O)); Mb(a.J, a.a, "readystatechange", a.Xa); b = a.B ? Aa(a.B) : {}; a.j ? (a.m || (a.m = "POST"), b["Content-Type"] = "application/x-www-form-urlencoded", a.a.ba(a.l, a.m, a.j, b)) : (a.m = "GET", a.a.ba(a.l, a.m, null, b)); I(1); Pb(a.c, a.m, a.l, a.f, a.S, a.j); }
    h.Xa = function (a) { a = a.target; var b = this.F; b && 3 == O(a) ? b.f() : this.Ca(a); };
    h.Ca = function (a) {
        try {
            if (a == this.a)
                a: {
                    var b = O(this.a), c = this.a.ua(), d = this.a.W();
                    if (!(3 > b || 3 == b && !Ia && !this.a.$())) {
                        this.A || 4 != b || 7 == c || (8 == c || 0 >= d ? I(3) : I(2));
                        pc(this);
                        var e = this.a.W();
                        this.N = e;
                        var f = this.a.$();
                        this.b = 200 == e;
                        Qb(this.c, this.m, this.l, this.f, this.S, b, e);
                        if (this.b) {
                            if (this.U && !this.C) {
                                b: {
                                    if (this.a) {
                                        var g, m = this.a;
                                        if ((g = m.a ? m.a.getResponseHeader("X-HTTP-Initial-Response") : null) && !sa(g)) {
                                            var l = g;
                                            break b;
                                        }
                                    }
                                    l = null;
                                }
                                if (l)
                                    G(this.c, this.f, l, "Initial handshake response via X-HTTP-Initial-Response"),
                                        this.C = !0, qc(this, l);
                                else {
                                    this.b = !1;
                                    this.h = 3;
                                    J(12);
                                    P(this);
                                    rc(this);
                                    break a;
                                }
                            }
                            this.I ? (sc(this, b, f), Ia && this.b && 3 == b && (Mb(this.J, this.R, "tick", this.Wa), this.R.start())) : (G(this.c, this.f, f, null), qc(this, f));
                            4 == b && P(this);
                            this.b && !this.A && (4 == b ? uc(this.g, this) : (this.b = !1, mc(this)));
                        }
                        else
                            400 == e && 0 < f.indexOf("Unknown SID") ? (this.h = 3, J(12)) : (this.h = 0, J(13)), P(this), rc(this);
                    }
                }
        }
        catch (u) { }
        finally { }
    };
    function sc(a, b, c) { for (var d = !0; !a.A && a.D < c.length;) {
        var e = vc(a, c);
        if (e == ic) {
            4 == b && (a.h = 4, J(14), d = !1);
            G(a.c, a.f, null, "[Incomplete Response]");
            break;
        }
        else if (e == hc) {
            a.h = 4;
            J(15);
            G(a.c, a.f, c, "[Invalid Chunk]");
            d = !1;
            break;
        }
        else
            G(a.c, a.f, e, null), qc(a, e);
    } 4 == b && 0 == c.length && (a.h = 1, J(16), d = !1); a.b = a.b && d; d ? 0 < c.length && !a.V && (a.V = !0, b = a.g, b.a == a && b.U && !b.F && (b.c.info("Great, no buffering proxy detected. Bytes received: " + c.length), wc(b), b.F = !0, J(11))) : (G(a.c, a.f, c, "[Invalid Chunked Response]"), P(a), rc(a)); }
    h.Wa = function () { if (this.a) {
        var a = O(this.a), b = this.a.$();
        this.D < b.length && (pc(this), sc(this, a, b), this.b && 4 != a && mc(this));
    } };
    function vc(a, b) { var c = a.D, d = b.indexOf("\n", c); if (-1 == d)
        return ic; c = Number(b.substring(c, d)); if (isNaN(c))
        return hc; d += 1; if (d + c > b.length)
        return ic; b = b.substr(d, c); a.D = d + c; return b; }
    h.cancel = function () { this.A = !0; P(this); };
    function mc(a) { a.T = q() + a.P; yc(a, a.P); }
    function yc(a, b) { if (null != a.o)
        throw Error("WatchDog timer not null"); a.o = K(p(a.Va, a), b); }
    function pc(a) { a.o && (k.clearTimeout(a.o), a.o = null); }
    h.Va = function () { this.o = null; var a = q(); 0 <= a - this.T ? (Sb(this.c, this.l), 2 != this.H && (I(3), J(17)), P(this), this.h = 2, rc(this)) : yc(this, this.T - a); };
    function rc(a) { 0 == a.g.v || a.A || uc(a.g, a); }
    function P(a) { pc(a); var b = a.F; b && "function" == typeof b.ja && b.ja(); a.F = null; Hb(a.R); Nb(a.J); a.a && (b = a.a, a.a = null, b.abort(), b.ja()); }
    function qc(a, b) {
        try {
            var c = a.g;
            if (0 != c.v && (c.a == a || zc(c.b, a)))
                if (c.I = a.N, !a.C && zc(c.b, a) && 3 == c.v) {
                    try {
                        var d = c.ka.a.parse(b);
                    }
                    catch (tc) {
                        d = null;
                    }
                    if (Array.isArray(d) && 3 == d.length) {
                        var e = d;
                        if (0 == e[0])
                            a: {
                                if (!c.j) {
                                    if (c.a)
                                        if (c.a.u + 3E3 < a.u)
                                            Ac(c), Bc(c);
                                        else
                                            break a;
                                    Cc(c);
                                    J(18);
                                }
                            }
                        else
                            c.oa = e[1], 0 < c.oa - c.P && 37500 > e[2] && c.H && 0 == c.o && !c.m && (c.m = K(p(c.Sa, c), 6E3));
                        if (1 >= Dc(c.b) && c.ea) {
                            try {
                                c.ea();
                            }
                            catch (tc) { }
                            c.ea = void 0;
                        }
                    }
                    else
                        Q(c, 11);
                }
                else if ((a.C || c.a == a) && Ac(c), !sa(b))
                    for (b = d = c.ka.a.parse(b), d = 0; d < b.length; d++)
                        if (e =
                            b[d], c.P = e[0], e = e[1], 2 == c.v)
                            if ("c" == e[0]) {
                                c.J = e[1];
                                c.ga = e[2];
                                var f = e[3];
                                null != f && (c.ha = f, c.c.info("VER=" + c.ha));
                                var g = e[4];
                                null != g && (c.pa = g, c.c.info("SVER=" + c.pa));
                                var m = e[5];
                                if (null != m && "number" === typeof m && 0 < m) {
                                    var l = 1.5 * m;
                                    c.D = l;
                                    c.c.info("backChannelRequestTimeoutMs_=" + l);
                                }
                                l = c;
                                var u = a.a;
                                if (u) {
                                    var C = u.a ? u.a.getResponseHeader("X-Client-Wire-Protocol") : null;
                                    if (C) {
                                        var B = l.b;
                                        !B.a && (v(C, "spdy") || v(C, "quic") || v(C, "h2")) && (B.f = B.g, B.a = new Set, B.b && (Ec(B, B.b), B.b = null));
                                    }
                                    if (l.A) {
                                        var rb = u.a ? u.a.getResponseHeader("X-HTTP-Session-Id") :
                                            null;
                                        rb && (l.na = rb, R(l.B, l.A, rb));
                                    }
                                }
                                c.v = 3;
                                c.f && c.f.ta();
                                c.U && (c.N = q() - a.u, c.c.info("Handshake RTT: " + c.N + "ms"));
                                l = c;
                                var xa = a;
                                l.la = Fc(l, l.C ? l.ga : null, l.fa);
                                if (xa.C) {
                                    Gc(l.b, xa);
                                    var ya = xa, xc = l.D;
                                    xc && ya.setTimeout(xc);
                                    ya.o && (pc(ya), mc(ya));
                                    l.a = xa;
                                }
                                else
                                    Hc(l);
                                0 < c.g.length && Ic(c);
                            }
                            else
                                "stop" != e[0] && "close" != e[0] || Q(c, 7);
                        else
                            3 == c.v && ("stop" == e[0] || "close" == e[0] ? "stop" == e[0] ? Q(c, 7) : Jc(c) : "noop" != e[0] && c.f && c.f.sa(e), c.o = 0);
            I(4);
        }
        catch (tc) { }
    }
    function Kc(a) { if (a.K && "function" == typeof a.K)
        return a.K(); if ("string" === typeof a)
        return a.split(""); if (ba(a)) {
        for (var b = [], c = a.length, d = 0; d < c; d++)
            b.push(a[d]);
        return b;
    } b = []; c = 0; for (d in a)
        b[c++] = a[d]; return a = b; }
    function Lc(a, b) { if (a.forEach && "function" == typeof a.forEach)
        a.forEach(b, void 0);
    else if (ba(a) || "string" === typeof a)
        na(a, b, void 0);
    else {
        if (a.L && "function" == typeof a.L)
            var c = a.L();
        else if (a.K && "function" == typeof a.K)
            c = void 0;
        else if (ba(a) || "string" === typeof a) {
            c = [];
            for (var d = a.length, e = 0; e < d; e++)
                c.push(e);
        }
        else
            for (e in c = [], d = 0, a)
                c[d++] = e;
        d = Kc(a);
        e = d.length;
        for (var f = 0; f < e; f++)
            b.call(void 0, d[f], c && c[f], a);
    } }
    function S(a, b) { this.b = {}; this.a = []; this.c = 0; var c = arguments.length; if (1 < c) {
        if (c % 2)
            throw Error("Uneven number of arguments");
        for (var d = 0; d < c; d += 2)
            this.set(arguments[d], arguments[d + 1]);
    }
    else if (a)
        if (a instanceof S)
            for (c = a.L(), d = 0; d < c.length; d++)
                this.set(c[d], a.get(c[d]));
        else
            for (d in a)
                this.set(d, a[d]); }
    h = S.prototype;
    h.K = function () { Mc(this); for (var a = [], b = 0; b < this.a.length; b++)
        a.push(this.b[this.a[b]]); return a; };
    h.L = function () { Mc(this); return this.a.concat(); };
    function Mc(a) { if (a.c != a.a.length) {
        for (var b = 0, c = 0; b < a.a.length;) {
            var d = a.a[b];
            T(a.b, d) && (a.a[c++] = d);
            b++;
        }
        a.a.length = c;
    } if (a.c != a.a.length) {
        var e = {};
        for (c = b = 0; b < a.a.length;)
            d = a.a[b], T(e, d) || (a.a[c++] = d, e[d] = 1), b++;
        a.a.length = c;
    } }
    h.get = function (a, b) { return T(this.b, a) ? this.b[a] : b; };
    h.set = function (a, b) { T(this.b, a) || (this.c++, this.a.push(a)); this.b[a] = b; };
    h.forEach = function (a, b) { for (var c = this.L(), d = 0; d < c.length; d++) {
        var e = c[d], f = this.get(e);
        a.call(b, f, e, this);
    } };
    function T(a, b) { return Object.prototype.hasOwnProperty.call(a, b); }
    var Nc = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;
    function Oc(a, b) { if (a) {
        a = a.split("&");
        for (var c = 0; c < a.length; c++) {
            var d = a[c].indexOf("="), e = null;
            if (0 <= d) {
                var f = a[c].substring(0, d);
                e = a[c].substring(d + 1);
            }
            else
                f = a[c];
            b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
        }
    } }
    function U(a, b) { this.c = this.j = this.f = ""; this.h = null; this.i = this.g = ""; this.a = !1; if (a instanceof U) {
        this.a = void 0 !== b ? b : a.a;
        Pc(this, a.f);
        this.j = a.j;
        Qc(this, a.c);
        Rc(this, a.h);
        this.g = a.g;
        b = a.b;
        var c = new Sc;
        c.c = b.c;
        b.a && (c.a = new S(b.a), c.b = b.b);
        Tc(this, c);
        this.i = a.i;
    }
    else
        a && (c = String(a).match(Nc)) ? (this.a = !!b, Pc(this, c[1] || "", !0), this.j = Uc(c[2] || ""), Qc(this, c[3] || "", !0), Rc(this, c[4]), this.g = Uc(c[5] || "", !0), Tc(this, c[6] || "", !0), this.i = Uc(c[7] || "")) : (this.a = !!b, this.b = new Sc(null, this.a)); }
    U.prototype.toString = function () { var a = [], b = this.f; b && a.push(Vc(b, Wc, !0), ":"); var c = this.c; if (c || "file" == b)
        a.push("//"), (b = this.j) && a.push(Vc(b, Wc, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.h, null != c && a.push(":", String(c)); if (c = this.g)
        this.c && "/" != c.charAt(0) && a.push("/"), a.push(Vc(c, "/" == c.charAt(0) ? Xc : Yc, !0)); (c = this.b.toString()) && a.push("?", c); (c = this.i) && a.push("#", Vc(c, Zc)); return a.join(""); };
    function N(a) { return new U(a); }
    function Pc(a, b, c) { a.f = c ? Uc(b, !0) : b; a.f && (a.f = a.f.replace(/:$/, "")); }
    function Qc(a, b, c) { a.c = c ? Uc(b, !0) : b; }
    function Rc(a, b) { if (b) {
        b = Number(b);
        if (isNaN(b) || 0 > b)
            throw Error("Bad port number " + b);
        a.h = b;
    }
    else
        a.h = null; }
    function Tc(a, b, c) { b instanceof Sc ? (a.b = b, $c(a.b, a.a)) : (c || (b = Vc(b, ad)), a.b = new Sc(b, a.a)); }
    function R(a, b, c) { a.b.set(b, c); }
    function kc(a) { R(a, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ q()).toString(36)); return a; }
    function bd(a) { return a instanceof U ? N(a) : new U(a, void 0); }
    function cd(a, b, c, d) { var e = new U(null, void 0); a && Pc(e, a); b && Qc(e, b); c && Rc(e, c); d && (e.g = d); return e; }
    function Uc(a, b) { return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : ""; }
    function Vc(a, b, c) { return "string" === typeof a ? (a = encodeURI(a).replace(b, dd), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null; }
    function dd(a) { a = a.charCodeAt(0); return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16); }
    var Wc = /[#\/\?@]/g, Yc = /[#\?:]/g, Xc = /[#\?]/g, ad = /[#\?@]/g, Zc = /#/g;
    function Sc(a, b) { this.b = this.a = null; this.c = a || null; this.f = !!b; }
    function V(a) { a.a || (a.a = new S, a.b = 0, a.c && Oc(a.c, function (b, c) { a.add(decodeURIComponent(b.replace(/\+/g, " ")), c); })); }
    h = Sc.prototype;
    h.add = function (a, b) { V(this); this.c = null; a = W(this, a); var c = this.a.get(a); c || this.a.set(a, c = []); c.push(b); this.b += 1; return this; };
    function ed(a, b) { V(a); b = W(a, b); T(a.a.b, b) && (a.c = null, a.b -= a.a.get(b).length, a = a.a, T(a.b, b) && (delete a.b[b], a.c--, a.a.length > 2 * a.c && Mc(a))); }
    function fd(a, b) { V(a); b = W(a, b); return T(a.a.b, b); }
    h.forEach = function (a, b) { V(this); this.a.forEach(function (c, d) { na(c, function (e) { a.call(b, e, d, this); }, this); }, this); };
    h.L = function () { V(this); for (var a = this.a.K(), b = this.a.L(), c = [], d = 0; d < b.length; d++)
        for (var e = a[d], f = 0; f < e.length; f++)
            c.push(b[d]); return c; };
    h.K = function (a) { V(this); var b = []; if ("string" === typeof a)
        fd(this, a) && (b = qa(b, this.a.get(W(this, a))));
    else {
        a = this.a.K();
        for (var c = 0; c < a.length; c++)
            b = qa(b, a[c]);
    } return b; };
    h.set = function (a, b) { V(this); this.c = null; a = W(this, a); fd(this, a) && (this.b -= this.a.get(a).length); this.a.set(a, [b]); this.b += 1; return this; };
    h.get = function (a, b) { if (!a)
        return b; a = this.K(a); return 0 < a.length ? String(a[0]) : b; };
    function nc(a, b, c) { ed(a, b); 0 < c.length && (a.c = null, a.a.set(W(a, b), ra(c)), a.b += c.length); }
    h.toString = function () { if (this.c)
        return this.c; if (!this.a)
        return ""; for (var a = [], b = this.a.L(), c = 0; c < b.length; c++) {
        var d = b[c], e = encodeURIComponent(String(d));
        d = this.K(d);
        for (var f = 0; f < d.length; f++) {
            var g = e;
            "" !== d[f] && (g += "=" + encodeURIComponent(String(d[f])));
            a.push(g);
        }
    } return this.c = a.join("&"); };
    function W(a, b) { b = String(b); a.f && (b = b.toLowerCase()); return b; }
    function $c(a, b) { b && !a.f && (V(a), a.c = null, a.a.forEach(function (c, d) { var e = d.toLowerCase(); d != e && (ed(this, d), nc(this, e, c)); }, a)); a.f = b; }
    var gd = /** @class */ (function () {
        function gd(a, b) {
            this.b = a;
            this.a = b;
        }
        return gd;
    }());
    function hd(a) { this.g = a || id; k.PerformanceNavigationTiming ? (a = k.performance.getEntriesByType("navigation"), a = 0 < a.length && ("hq" == a[0].nextHopProtocol || "h2" == a[0].nextHopProtocol)) : a = !!(k.ia && k.ia.ya && k.ia.ya() && k.ia.ya().Lb); this.f = a ? this.g : 1; this.a = null; 1 < this.f && (this.a = new Set); this.b = null; this.c = []; }
    var id = 10;
    function jd(a) { return a.b ? !0 : a.a ? a.a.size >= a.f : !1; }
    function Dc(a) { return a.b ? 1 : a.a ? a.a.size : 0; }
    function zc(a, b) { return a.b ? a.b == b : a.a ? a.a.has(b) : !1; }
    function Ec(a, b) { a.a ? a.a.add(b) : a.b = b; }
    function Gc(a, b) { a.b && a.b == b ? a.b = null : a.a && a.a.has(b) && a.a.delete(b); }
    hd.prototype.cancel = function () {
        var e_1, _a;
        this.c = kd(this);
        if (this.b)
            this.b.cancel(), this.b = null;
        else if (this.a && 0 !== this.a.size) {
            try {
                for (var _b = __values(this.a.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var a = _c.value;
                    a.cancel();
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.a.clear();
        }
    };
    function kd(a) {
        var e_2, _a;
        if (null != a.b)
            return a.c.concat(a.b.s);
        if (null != a.a && 0 !== a.a.size) {
            var b = a.c;
            try {
                for (var _b = __values(a.a.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var c = _c.value;
                    b = b.concat(c.s);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return b;
        }
        return ra(a.c);
    }
    function ld() { }
    ld.prototype.stringify = function (a) { return k.JSON.stringify(a, void 0); };
    ld.prototype.parse = function (a) { return k.JSON.parse(a, void 0); };
    function md() { this.a = new ld; }
    function nd(a, b, c) { var d = c || ""; try {
        Lc(a, function (e, f) { var g = e; n(e) && (g = ub(e)); b.push(d + f + "=" + encodeURIComponent(g)); });
    }
    catch (e) {
        throw b.push(d + "type=" + encodeURIComponent("_badmap")), e;
    } }
    function od(a, b) { var c = new Ob; if (k.Image) {
        var d = new Image;
        d.onload = ja(pd, c, d, "TestLoadImage: loaded", !0, b);
        d.onerror = ja(pd, c, d, "TestLoadImage: error", !1, b);
        d.onabort = ja(pd, c, d, "TestLoadImage: abort", !1, b);
        d.ontimeout = ja(pd, c, d, "TestLoadImage: timeout", !1, b);
        k.setTimeout(function () { if (d.ontimeout)
            d.ontimeout(); }, 1E4);
        d.src = a;
    }
    else
        b(!1); }
    function pd(a, b, c, d, e) { try {
        b.onload = null, b.onerror = null, b.onabort = null, b.ontimeout = null, e(d);
    }
    catch (f) { } }
    var qd = k.JSON.parse;
    function X(a) { D.call(this); this.headers = new S; this.H = a || null; this.b = !1; this.s = this.a = null; this.B = ""; this.h = 0; this.f = ""; this.g = this.A = this.l = this.u = !1; this.o = 0; this.m = null; this.I = rd; this.D = this.F = !1; }
    r(X, D);
    var rd = "", sd = /^https?$/i, td = ["POST", "PUT"];
    h = X.prototype;
    h.ba = function (a, b, c, d) {
        if (this.a)
            throw Error("[goog.net.XhrIo] Object is active with another request=" + this.B + "; newUri=" + a);
        b = b ? b.toUpperCase() : "GET";
        this.B = a;
        this.f = "";
        this.h = 0;
        this.u = !1;
        this.b = !0;
        this.a = new XMLHttpRequest;
        this.s = this.H ? ac(this.H) : ac(ec);
        this.a.onreadystatechange = p(this.za, this);
        try {
            this.A = !0, this.a.open(b, String(a), !0), this.A = !1;
        }
        catch (f) {
            ud(this, f);
            return;
        }
        a = c || "";
        var e = new S(this.headers);
        d && Lc(d, function (f, g) { e.set(g, f); });
        d = oa(e.L());
        c = k.FormData && a instanceof k.FormData;
        !(0 <=
            ma(td, b)) || d || c || e.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
        e.forEach(function (f, g) { this.a.setRequestHeader(g, f); }, this);
        this.I && (this.a.responseType = this.I);
        "withCredentials" in this.a && this.a.withCredentials !== this.F && (this.a.withCredentials = this.F);
        try {
            vd(this), 0 < this.o && ((this.D = wd(this.a)) ? (this.a.timeout = this.o, this.a.ontimeout = p(this.xa, this)) : this.m = Ib(this.xa, this.o, this)), this.l = !0, this.a.send(a), this.l = !1;
        }
        catch (f) {
            ud(this, f);
        }
    };
    function wd(a) { return x && Qa(9) && "number" === typeof a.timeout && void 0 !== a.ontimeout; }
    function pa(a) { return "content-type" == a.toLowerCase(); }
    h.xa = function () { "undefined" != typeof goog && this.a && (this.f = "Timed out after " + this.o + "ms, aborting", this.h = 8, E(this, "timeout"), this.abort(8)); };
    function ud(a, b) { a.b = !1; a.a && (a.g = !0, a.a.abort(), a.g = !1); a.f = b; a.h = 5; xd(a); yd(a); }
    function xd(a) { a.u || (a.u = !0, E(a, "complete"), E(a, "error")); }
    h.abort = function (a) { this.a && this.b && (this.b = !1, this.g = !0, this.a.abort(), this.g = !1, this.h = a || 7, E(this, "complete"), E(this, "abort"), yd(this)); };
    h.G = function () { this.a && (this.b && (this.b = !1, this.g = !0, this.a.abort(), this.g = !1), yd(this, !0)); X.X.G.call(this); };
    h.za = function () { this.j || (this.A || this.l || this.g ? zd(this) : this.Ua()); };
    h.Ua = function () { zd(this); };
    function zd(a) {
        if (a.b && "undefined" != typeof goog && (!a.s[1] || 4 != O(a) || 2 != a.W()))
            if (a.l && 4 == O(a))
                Ib(a.za, 0, a);
            else if (E(a, "readystatechange"), 4 == O(a)) {
                a.b = !1;
                try {
                    {
                        var l = a.W();
                        a: switch (l) {
                            case 200:
                            case 201:
                            case 202:
                            case 204:
                            case 206:
                            case 304:
                            case 1223:
                                var b = !0;
                                break a;
                            default: b = !1;
                        }
                        var c;
                        if (!(c = b)) {
                            var d;
                            if (d = 0 === l) {
                                var e = String(a.B).match(Nc)[1] || null;
                                if (!e && k.self && k.self.location) {
                                    var f = k.self.location.protocol;
                                    e = f.substr(0, f.length - 1);
                                }
                                d = !sd.test(e ? e.toLowerCase() : "");
                            }
                            c = d;
                        }
                        var g = c;
                    }
                    if (g)
                        E(a, "complete"),
                            E(a, "success");
                    else {
                        a.h = 6;
                        try {
                            var m = 2 < O(a) ? a.a.statusText : "";
                        }
                        catch (l) {
                            m = "";
                        }
                        a.f = m + " [" + a.W() + "]";
                        xd(a);
                    }
                }
                finally {
                    yd(a);
                }
            }
    }
    function yd(a, b) { if (a.a) {
        vd(a);
        var c = a.a, d = a.s[0] ? aa : null;
        a.a = null;
        a.s = null;
        b || E(a, "ready");
        try {
            c.onreadystatechange = d;
        }
        catch (e) { }
    } }
    function vd(a) { a.a && a.D && (a.a.ontimeout = null); a.m && (k.clearTimeout(a.m), a.m = null); }
    function O(a) { return a.a ? a.a.readyState : 0; }
    h.W = function () { try {
        return 2 < O(this) ? this.a.status : -1;
    }
    catch (a) {
        return -1;
    } };
    h.$ = function () { try {
        return this.a ? this.a.responseText : "";
    }
    catch (a) {
        return "";
    } };
    h.Pa = function (a) { if (this.a) {
        var b = this.a.responseText;
        a && 0 == b.indexOf(a) && (b = b.substring(a.length));
        return qd(b);
    } };
    h.ua = function () { return this.h; };
    h.Qa = function () { return "string" === typeof this.f ? this.f : String(this.f); };
    function Ad(a) { var b = ""; za(a, function (c, d) { b += d; b += ":"; b += c; b += "\r\n"; }); return b; }
    function Bd(a, b, c) { a: {
        for (d in c) {
            var d = !1;
            break a;
        }
        d = !0;
    } d || (c = Ad(c), "string" === typeof a ? (null != c && encodeURIComponent(String(c))) : R(a, b, c)); }
    function Cd(a, b, c) { return c && c.internalChannelParams ? c.internalChannelParams[a] || b : b; }
    function Dd(a) {
        this.pa = 0;
        this.g = [];
        this.c = new Ob;
        this.ga = this.la = this.B = this.fa = this.a = this.na = this.A = this.V = this.i = this.O = this.l = null;
        this.Oa = this.R = 0;
        this.La = Cd("failFast", !1, a);
        this.H = this.m = this.j = this.h = this.f = null;
        this.S = !0;
        this.I = this.oa = this.P = -1;
        this.T = this.o = this.u = 0;
        this.Ha = Cd("baseRetryDelayMs", 5E3, a);
        this.Ra = Cd("retryDelaySeedMs", 1E4, a);
        this.Ma = Cd("forwardChannelMaxRetries", 2, a);
        this.ma = Cd("forwardChannelRequestTimeoutMs", 2E4, a);
        this.Na = a && a.g || void 0;
        this.D = void 0;
        this.C = a && a.supportsCrossDomainXhr ||
            !1;
        this.J = "";
        this.b = new hd(a && a.concurrentRequestLimit);
        this.ka = new md;
        this.da = a && a.fastHandshake || !1;
        this.Ia = a && a.b || !1;
        a && a.f && (this.c.a = !1);
        a && a.forceLongPolling && (this.S = !1);
        this.U = !this.da && this.S && a && a.detectBufferingProxy || !1;
        this.ea = void 0;
        this.N = 0;
        this.F = !1;
        this.s = null;
        (this.Ka = a && a.c || !1) && this.c.info("Opt-in to enable Chrome Origin Trials.");
    }
    h = Dd.prototype;
    h.ha = 8;
    h.v = 1;
    function Jc(a) { Ed(a); if (3 == a.v) {
        var b = a.R++, c = N(a.B);
        R(c, "SID", a.J);
        R(c, "RID", b);
        R(c, "TYPE", "terminate");
        Fd(a, c);
        b = new M(a, a.c, b, void 0);
        b.H = 2;
        b.i = kc(N(c));
        c = !1;
        k.navigator && k.navigator.sendBeacon && (c = k.navigator.sendBeacon(b.i.toString(), ""));
        !c && k.Image && ((new Image).src = b.i, c = !0);
        c || (b.a = oc(b.g, null), b.a.ba(b.i));
        b.u = q();
        mc(b);
    } Gd(a); }
    function Bc(a) { a.a && (wc(a), a.a.cancel(), a.a = null); }
    function Ed(a) { Bc(a); a.j && (k.clearTimeout(a.j), a.j = null); Ac(a); a.b.cancel(); a.h && ("number" === typeof a.h && k.clearTimeout(a.h), a.h = null); }
    function Hd(a, b) { a.g.push(new gd(a.Oa++, b)); 3 == a.v && Ic(a); }
    function Ic(a) { jd(a.b) || a.h || (a.h = !0, Bb(a.Ba, a), a.u = 0); }
    function Id(a, b) { if (Dc(a.b) >= a.b.f - (a.h ? 1 : 0))
        return !1; if (a.h)
        return a.g = b.s.concat(a.g), !0; if (1 == a.v || 2 == a.v || a.u >= (a.La ? 0 : a.Ma))
        return !1; a.h = K(p(a.Ba, a, b), Jd(a, a.u)); a.u++; return !0; }
    h.Ba = function (a) {
        if (this.h)
            if (this.h = null, 1 == this.v) {
                if (!a) {
                    this.R = Math.floor(1E5 * Math.random());
                    a = this.R++;
                    var b = new M(this, this.c, a, void 0), c = this.l;
                    this.O && (c ? (c = Aa(c), Ca(c, this.O)) : c = this.O);
                    null === this.i && (b.B = c);
                    var d;
                    if (this.da)
                        a: {
                            for (var e = d = 0; e < this.g.length; e++) {
                                b: {
                                    var f = this.g[e];
                                    if ("__data__" in f.a && (f = f.a.__data__, "string" === typeof f)) {
                                        f = f.length;
                                        break b;
                                    }
                                    f = void 0;
                                }
                                if (void 0 === f)
                                    break;
                                d += f;
                                if (4096 < d) {
                                    d = e;
                                    break a;
                                }
                                if (4096 === d || e === this.g.length - 1) {
                                    d = e + 1;
                                    break a;
                                }
                            }
                            d = 1E3;
                        }
                    else
                        d = 1E3;
                    d = Kd(this, b, d);
                    e = N(this.B);
                    R(e, "RID", a);
                    R(e, "CVER", 22);
                    this.A && R(e, "X-HTTP-Session-Id", this.A);
                    Fd(this, e);
                    this.i && c && Bd(e, this.i, c);
                    Ec(this.b, b);
                    this.Ia && R(e, "TYPE", "init");
                    this.da ? (R(e, "$req", d), R(e, "SID", "null"), b.U = !0, jc(b, e, null)) : jc(b, e, d);
                    this.v = 2;
                }
            }
            else
                3 == this.v && (a ? Ld(this, a) : 0 == this.g.length || jd(this.b) || Ld(this));
    };
    function Ld(a, b) { var c; b ? c = b.f : c = a.R++; var d = N(a.B); R(d, "SID", a.J); R(d, "RID", c); R(d, "AID", a.P); Fd(a, d); a.i && a.l && Bd(d, a.i, a.l); c = new M(a, a.c, c, a.u + 1); null === a.i && (c.B = a.l); b && (a.g = b.s.concat(a.g)); b = Kd(a, c, 1E3); c.setTimeout(Math.round(.5 * a.ma) + Math.round(.5 * a.ma * Math.random())); Ec(a.b, c); jc(c, d, b); }
    function Fd(a, b) { a.f && Lc({}, function (c, d) { R(b, d, c); }); }
    function Kd(a, b, c) { c = Math.min(a.g.length, c); var d = a.f ? p(a.f.Ja, a.f, a) : null; a: for (var e = a.g, f = -1;;) {
        var g = ["count=" + c];
        -1 == f ? 0 < c ? (f = e[0].b, g.push("ofs=" + f)) : f = 0 : g.push("ofs=" + f);
        for (var m = !0, l = 0; l < c; l++) {
            var u = e[l].b, C = e[l].a;
            u -= f;
            if (0 > u)
                f = Math.max(0, e[l].b - 100), m = !1;
            else
                try {
                    nd(C, g, "req" + u + "_");
                }
                catch (B) {
                    d && d(C);
                }
        }
        if (m) {
            d = g.join("&");
            break a;
        }
    } a = a.g.splice(0, c); b.s = a; return d; }
    function Hc(a) { a.a || a.j || (a.T = 1, Bb(a.Aa, a), a.o = 0); }
    function Cc(a) { if (a.a || a.j || 3 <= a.o)
        return !1; a.T++; a.j = K(p(a.Aa, a), Jd(a, a.o)); a.o++; return !0; }
    h.Aa = function () { this.j = null; Md(this); if (this.U && !(this.F || null == this.a || 0 >= this.N)) {
        var a = 2 * this.N;
        this.c.info("BP detection timer enabled: " + a);
        this.s = K(p(this.Ta, this), a);
    } };
    h.Ta = function () { this.s && (this.s = null, this.c.info("BP detection timeout reached."), this.c.info("Buffering proxy detected and switch to long-polling!"), this.H = !1, this.F = !0, J(10), Bc(this), Md(this)); };
    function wc(a) { null != a.s && (k.clearTimeout(a.s), a.s = null); }
    function Md(a) { a.a = new M(a, a.c, "rpc", a.T); null === a.i && (a.a.B = a.l); a.a.O = 0; var b = N(a.la); R(b, "RID", "rpc"); R(b, "SID", a.J); R(b, "CI", a.H ? "0" : "1"); R(b, "AID", a.P); Fd(a, b); R(b, "TYPE", "xmlhttp"); a.i && a.l && Bd(b, a.i, a.l); a.D && a.a.setTimeout(a.D); var c = a.a; a = a.ga; c.H = 1; c.i = kc(N(b)); c.j = null; c.I = !0; lc(c, a); }
    h.Sa = function () { null != this.m && (this.m = null, Bc(this), Cc(this), J(19)); };
    function Ac(a) { null != a.m && (k.clearTimeout(a.m), a.m = null); }
    function uc(a, b) { var c = null; if (a.a == b) {
        Ac(a);
        wc(a);
        a.a = null;
        var d = 2;
    }
    else if (zc(a.b, b))
        c = b.s, Gc(a.b, b), d = 1;
    else
        return; a.I = b.N; if (0 != a.v)
        if (b.b)
            if (1 == d) {
                c = b.j ? b.j.length : 0;
                b = q() - b.u;
                var e = a.u;
                d = Ub();
                E(d, new Xb(d, c, b, e));
                Ic(a);
            }
            else
                Hc(a);
        else if (e = b.h, 3 == e || 0 == e && 0 < a.I || !(1 == d && Id(a, b) || 2 == d && Cc(a)))
            switch (c && 0 < c.length && (b = a.b, b.c = b.c.concat(c)), e) {
                case 1:
                    Q(a, 5);
                    break;
                case 4:
                    Q(a, 10);
                    break;
                case 3:
                    Q(a, 6);
                    break;
                default: Q(a, 2);
            } }
    function Jd(a, b) { var c = a.Ha + Math.floor(Math.random() * a.Ra); a.f || (c *= 2); return c * b; }
    function Q(a, b) { a.c.info("Error code " + b); if (2 == b) {
        var c = null;
        a.f && (c = null);
        var d = p(a.Ya, a);
        c || (c = new U("//www.google.com/images/cleardot.gif"), k.location && "http" == k.location.protocol || Pc(c, "https"), kc(c));
        od(c.toString(), d);
    }
    else
        J(2); a.v = 0; a.f && a.f.ra(b); Gd(a); Ed(a); }
    h.Ya = function (a) { a ? (this.c.info("Successfully pinged google.com"), J(2)) : (this.c.info("Failed to ping google.com"), J(1)); };
    function Gd(a) { a.v = 0; a.I = -1; if (a.f) {
        if (0 != kd(a.b).length || 0 != a.g.length)
            a.b.c.length = 0, ra(a.g), a.g.length = 0;
        a.f.qa();
    } }
    function Fc(a, b, c) { var d = bd(c); if ("" != d.c)
        b && Qc(d, b + "." + d.c), Rc(d, d.h);
    else {
        var e = k.location;
        d = cd(e.protocol, b ? b + "." + e.hostname : e.hostname, +e.port, c);
    } a.V && za(a.V, function (f, g) { R(d, g, f); }); b = a.A; c = a.na; b && c && R(d, b, c); R(d, "VER", a.ha); Fd(a, d); return d; }
    function oc(a, b) { if (b && !a.C)
        throw Error("Can't create secondary domain capable XhrIo object."); b = new X(a.Na); b.F = a.C; return b; }
    function Nd() { }
    h = Nd.prototype;
    h.ta = function () { };
    h.sa = function () { };
    h.ra = function () { };
    h.qa = function () { };
    h.Ja = function () { };
    function Od() { if (x && !(10 <= Number(Ta)))
        throw Error("Environmental error: no available transport."); }
    Od.prototype.a = function (a, b) { return new Y(a, b); };
    function Y(a, b) {
        D.call(this);
        this.a = new Dd(b);
        this.o = a;
        this.b = b && b.messageUrlParams || null;
        a = b && b.messageHeaders || null;
        b && b.clientProtocolHeaderRequired && (a ? a["X-Client-Protocol"] = "webchannel" : a = { "X-Client-Protocol": "webchannel" });
        this.a.l = a;
        a = b && b.initMessageHeaders || null;
        b && b.messageContentType && (a ? a["X-WebChannel-Content-Type"] = b.messageContentType : a = { "X-WebChannel-Content-Type": b.messageContentType });
        b && b.a && (a ? a["X-WebChannel-Client-Profile"] = b.a : a = { "X-WebChannel-Client-Profile": b.a });
        this.a.O =
            a;
        (a = b && b.httpHeadersOverwriteParam) && !sa(a) && (this.a.i = a);
        this.m = b && b.supportsCrossDomainXhr || !1;
        this.l = b && b.sendRawJson || !1;
        (b = b && b.httpSessionIdParam) && !sa(b) && (this.a.A = b, a = this.b, null !== a && b in a && (a = this.b, b in a && delete a[b]));
        this.f = new Z(this);
    }
    r(Y, D);
    Y.prototype.g = function () { this.a.f = this.f; this.m && (this.a.C = !0); var a = this.a, b = this.o, c = this.b || void 0; J(0); a.fa = b; a.V = c || {}; a.H = a.S; a.B = Fc(a, null, a.fa); Ic(a); };
    Y.prototype.close = function () { Jc(this.a); };
    Y.prototype.h = function (a) { if ("string" === typeof a) {
        var b = {};
        b.__data__ = a;
        Hd(this.a, b);
    }
    else
        this.l ? (b = {}, b.__data__ = ub(a), Hd(this.a, b)) : Hd(this.a, a); };
    Y.prototype.G = function () { this.a.f = null; delete this.f; Jc(this.a); delete this.a; Y.X.G.call(this); };
    function Pd(a) { cc.call(this); var b = a.__sm__; if (b) {
        a: {
            for (var c in b) {
                a = c;
                break a;
            }
            a = void 0;
        }
        (this.c = a) ? (a = this.c, this.data = null !== b && a in b ? b[a] : void 0) : this.data = b;
    }
    else
        this.data = a; }
    r(Pd, cc);
    function Qd() { dc.call(this); this.status = 1; }
    r(Qd, dc);
    function Z(a) { this.a = a; }
    r(Z, Nd);
    Z.prototype.ta = function () { E(this.a, "a"); };
    Z.prototype.sa = function (a) { E(this.a, new Pd(a)); };
    Z.prototype.ra = function (a) { E(this.a, new Qd(a)); };
    Z.prototype.qa = function () { E(this.a, "b"); }; /*

     Copyright 2017 Google LLC

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
    */
    Od.prototype.createWebChannel = Od.prototype.a;
    Y.prototype.send = Y.prototype.h;
    Y.prototype.open = Y.prototype.g;
    Y.prototype.close = Y.prototype.close;
    Yb.NO_ERROR = 0;
    Yb.TIMEOUT = 8;
    Yb.HTTP_ERROR = 6;
    Zb.COMPLETE = "complete";
    bc.EventType = L;
    L.OPEN = "a";
    L.CLOSE = "b";
    L.ERROR = "c";
    L.MESSAGE = "d";
    D.prototype.listen = D.prototype.va;
    X.prototype.listenOnce = X.prototype.wa;
    X.prototype.getLastError = X.prototype.Qa;
    X.prototype.getLastErrorCode = X.prototype.ua;
    X.prototype.getStatus = X.prototype.W;
    X.prototype.getResponseJson = X.prototype.Pa;
    X.prototype.getResponseText = X.prototype.$;
    X.prototype.send = X.prototype.ba;
    var createWebChannelTransport = function () { return new Od; };
    var getStatEventTarget = function () { return Ub(); };
    var ErrorCode = Yb;
    var EventType = Zb;
    var Event = H;
    var Stat = { gb: 0, jb: 1, kb: 2, Db: 3, Ib: 4, Fb: 5, Gb: 6, Eb: 7, Cb: 8, Hb: 9, PROXY: 10, NOPROXY: 11, Ab: 12, wb: 13, xb: 14, vb: 15, yb: 16, zb: 17, bb: 18, ab: 19, cb: 20 };
    var WebChannel = bc;
    var XhrIo = X;

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Simple wrapper around a nullable UID. Mostly exists to make code more
     * readable.
     */ class P$1 {
        constructor(t) {
            this.uid = t;
        }
        t() {
            return null != this.uid;
        }
        /**
         * Returns a key representing this user, suitable for inclusion in a
         * dictionary.
         */    i() {
            return this.t() ? "uid:" + this.uid : "anonymous-user";
        }
        isEqual(t) {
            return t.uid === this.uid;
        }
    }

    /** A user with a null UID. */ P$1.UNAUTHENTICATED = new P$1(null), 
    // TODO(mikelehen): Look into getting a proper uid-equivalent for
    // non-FirebaseAuth providers.
    P$1.o = new P$1("google-credentials-uid"), P$1.u = new P$1("first-party-uid");

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const V$1 = new Logger("@firebase/firestore");

    // Helper methods are needed because variables can't be exported as read/write
    function g() {
        return V$1.logLevel;
    }

    /**
     * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).
     *
     * @param logLevel - The verbosity you set for activity and error logging. Can
     *   be any of the following values:
     *
     *   <ul>
     *     <li>`debug` for the most verbose logging level, primarily for
     *     debugging.</li>
     *     <li>`error` to log errors only.</li>
     *     <li><code>`silent` to turn off logging.</li>
     *   </ul>
     */ function y$1(t) {
        V$1.setLogLevel(t);
    }

    function p$1(t, ...e) {
        if (V$1.logLevel <= LogLevel.DEBUG) {
            const n = e.map(S$1);
            V$1.debug("Firestore (8.1.1): " + t, ...n);
        }
    }

    function b(t, ...e) {
        if (V$1.logLevel <= LogLevel.ERROR) {
            const n = e.map(S$1);
            V$1.error("Firestore (8.1.1): " + t, ...n);
        }
    }

    function v$1(t, ...e) {
        if (V$1.logLevel <= LogLevel.WARN) {
            const n = e.map(S$1);
            V$1.warn("Firestore (8.1.1): " + t, ...n);
        }
    }

    /**
     * Converts an additional log parameter to a string representation.
     */ function S$1(t) {
        if ("string" == typeof t) return t;
        try {
            return e = t, JSON.stringify(e);
        } catch (e) {
            // Converting to JSON failed, just log the object directly
            return t;
        }
        /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
        /** Formats an object as a JSON string, suitable for logging. */
        var e;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Unconditionally fails, throwing an Error with the given message.
     * Messages are stripped in production builds.
     *
     * Returns `never` and can be used in expressions:
     * @example
     * let futureVar = fail('not implemented yet');
     */ function D$1(t = "Unexpected state") {
        // Log the failure in addition to throw an exception, just in case the
        // exception is swallowed.
        const e = "FIRESTORE (8.1.1) INTERNAL ASSERTION FAILED: " + t;
        // NOTE: We don't use FirestoreError here because these are internal failures
        // that cannot be handled by the user. (Also it would create a circular
        // dependency between the error and assert modules which doesn't work.)
        throw b(e), new Error(e);
    }

    /**
     * Fails if the given assertion condition is false, throwing an Error with the
     * given message if it did.
     *
     * Messages are stripped in production builds.
     */ function C(t, e) {
        t || D$1();
    }

    /**
     * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an
     * instance of `T` before casting.
     */ function N$1(t, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    e) {
        return t;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const x$1 = {
        // Causes are copied from:
        // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
        /** Not an error; returned on success. */
        OK: "ok",
        /** The operation was cancelled (typically by the caller). */
        CANCELLED: "cancelled",
        /** Unknown error or an error from a different error domain. */
        UNKNOWN: "unknown",
        /**
         * Client specified an invalid argument. Note that this differs from
         * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
         * problematic regardless of the state of the system (e.g., a malformed file
         * name).
         */
        INVALID_ARGUMENT: "invalid-argument",
        /**
         * Deadline expired before operation could complete. For operations that
         * change the state of the system, this error may be returned even if the
         * operation has completed successfully. For example, a successful response
         * from a server could have been delayed long enough for the deadline to
         * expire.
         */
        DEADLINE_EXCEEDED: "deadline-exceeded",
        /** Some requested entity (e.g., file or directory) was not found. */
        NOT_FOUND: "not-found",
        /**
         * Some entity that we attempted to create (e.g., file or directory) already
         * exists.
         */
        ALREADY_EXISTS: "already-exists",
        /**
         * The caller does not have permission to execute the specified operation.
         * PERMISSION_DENIED must not be used for rejections caused by exhausting
         * some resource (use RESOURCE_EXHAUSTED instead for those errors).
         * PERMISSION_DENIED must not be used if the caller can not be identified
         * (use UNAUTHENTICATED instead for those errors).
         */
        PERMISSION_DENIED: "permission-denied",
        /**
         * The request does not have valid authentication credentials for the
         * operation.
         */
        UNAUTHENTICATED: "unauthenticated",
        /**
         * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
         * entire file system is out of space.
         */
        RESOURCE_EXHAUSTED: "resource-exhausted",
        /**
         * Operation was rejected because the system is not in a state required for
         * the operation's execution. For example, directory to be deleted may be
         * non-empty, an rmdir operation is applied to a non-directory, etc.
         *
         * A litmus test that may help a service implementor in deciding
         * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
         *  (a) Use UNAVAILABLE if the client can retry just the failing call.
         *  (b) Use ABORTED if the client should retry at a higher-level
         *      (e.g., restarting a read-modify-write sequence).
         *  (c) Use FAILED_PRECONDITION if the client should not retry until
         *      the system state has been explicitly fixed. E.g., if an "rmdir"
         *      fails because the directory is non-empty, FAILED_PRECONDITION
         *      should be returned since the client should not retry unless
         *      they have first fixed up the directory by deleting files from it.
         *  (d) Use FAILED_PRECONDITION if the client performs conditional
         *      REST Get/Update/Delete on a resource and the resource on the
         *      server does not match the condition. E.g., conflicting
         *      read-modify-write on the same resource.
         */
        FAILED_PRECONDITION: "failed-precondition",
        /**
         * The operation was aborted, typically due to a concurrency issue like
         * sequencer check failures, transaction aborts, etc.
         *
         * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
         * and UNAVAILABLE.
         */
        ABORTED: "aborted",
        /**
         * Operation was attempted past the valid range. E.g., seeking or reading
         * past end of file.
         *
         * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
         * if the system state changes. For example, a 32-bit file system will
         * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
         * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
         * an offset past the current file size.
         *
         * There is a fair bit of overlap between FAILED_PRECONDITION and
         * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
         * when it applies so that callers who are iterating through a space can
         * easily look for an OUT_OF_RANGE error to detect when they are done.
         */
        OUT_OF_RANGE: "out-of-range",
        /** Operation is not implemented or not supported/enabled in this service. */
        UNIMPLEMENTED: "unimplemented",
        /**
         * Internal errors. Means some invariants expected by underlying System has
         * been broken. If you see one of these errors, Something is very broken.
         */
        INTERNAL: "internal",
        /**
         * The service is currently unavailable. This is a most likely a transient
         * condition and may be corrected by retrying with a backoff.
         *
         * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
         * and UNAVAILABLE.
         */
        UNAVAILABLE: "unavailable",
        /** Unrecoverable data loss or corruption. */
        DATA_LOSS: "data-loss"
    };

    /** An error returned by a Firestore operation. */ class M$1 extends Error {
        /** @hideconstructor */
        constructor(t, e) {
            super(e), this.code = t, this.message = e, this.name = "FirebaseError", 
            // HACK: We write a toString property directly because Error is not a real
            // class and so inheritance does not work correctly. We could alternatively
            // do the same "back-door inheritance" trick that FirebaseError does.
            this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class k$1 {
        constructor(t, e) {
            this.user = e, this.type = "OAuth", this.h = {}, 
            // Set the headers using Object Literal notation to avoid minification
            this.h.Authorization = "Bearer " + t;
        }
    }

    /** A CredentialsProvider that always yields an empty token. */ class O$1 {
        constructor() {
            /**
             * Stores the listener registered with setChangeListener()
             * This isn't actually necessary since the UID never changes, but we use this
             * to verify the listen contract is adhered to in tests.
             */
            this.l = null;
        }
        getToken() {
            return Promise.resolve(null);
        }
        _() {}
        T(t) {
            this.l = t, 
            // Fire with initial user.
            t(P$1.UNAUTHENTICATED);
        }
        I() {
            this.l = null;
        }
    }

    class F$1 {
        constructor(t) {
            /**
             * The auth token listener registered with FirebaseApp, retained here so we
             * can unregister it.
             */
            this.m = null, 
            /** Tracks the current User. */
            this.currentUser = P$1.UNAUTHENTICATED, this.A = !1, 
            /**
             * Counter used to detect if the token changed while a getToken request was
             * outstanding.
             */
            this.R = 0, 
            /** The listener registered with setChangeListener(). */
            this.l = null, this.forceRefresh = !1, this.m = () => {
                this.R++, this.currentUser = this.P(), this.A = !0, this.l && this.l(this.currentUser);
            }, this.R = 0, this.auth = t.getImmediate({
                optional: !0
            }), this.auth ? this.auth.addAuthTokenListener(this.m) : (
            // if auth is not available, invoke tokenListener once with null token
            this.m(null), t.get().then((t => {
                this.auth = t, this.m && 
                // tokenListener can be removed by removeChangeListener()
                this.auth.addAuthTokenListener(this.m);
            }), (() => {})));
        }
        getToken() {
            // Take note of the current value of the tokenCounter so that this method
            // can fail (with an ABORTED error) if there is a token change while the
            // request is outstanding.
            const t = this.R, e = this.forceRefresh;
            return this.forceRefresh = !1, this.auth ? this.auth.getToken(e).then((e => 
            // Cancel the request since the token changed while the request was
            // outstanding so the response is potentially for a previous user (which
            // user, we can't be sure).
            this.R !== t ? (p$1("FirebaseCredentialsProvider", "getToken aborted due to token change."), 
            this.getToken()) : e ? (C("string" == typeof e.accessToken), new k$1(e.accessToken, this.currentUser)) : null)) : Promise.resolve(null);
        }
        _() {
            this.forceRefresh = !0;
        }
        T(t) {
            this.l = t, 
            // Fire the initial event
            this.A && t(this.currentUser);
        }
        I() {
            this.auth && this.auth.removeAuthTokenListener(this.m), this.m = null, this.l = null;
        }
        // Auth.getUid() can return null even with a user logged in. It is because
        // getUid() is synchronous, but the auth code populating Uid is asynchronous.
        // This method should only be called in the AuthTokenListener callback
        // to guarantee to get the actual user.
        P() {
            const t = this.auth && this.auth.getUid();
            return C(null === t || "string" == typeof t), new P$1(t);
        }
    }

    /*
     * FirstPartyToken provides a fresh token each time its value
     * is requested, because if the token is too old, requests will be rejected.
     * Technically this may no longer be necessary since the SDK should gracefully
     * recover from unauthenticated errors (see b/33147818 for context), but it's
     * safer to keep the implementation as-is.
     */ class $ {
        constructor(t, e) {
            this.V = t, this.g = e, this.type = "FirstParty", this.user = P$1.u;
        }
        get h() {
            const t = {
                "X-Goog-AuthUser": this.g
            }, e = this.V.auth.getAuthHeaderValueForFirstParty([]);
            // Use array notation to prevent minification
                    return e && (t.Authorization = e), t;
        }
    }

    /*
     * Provides user credentials required for the Firestore JavaScript SDK
     * to authenticate the user, using technique that is only available
     * to applications hosted by Google.
     */ class L$1 {
        constructor(t, e) {
            this.V = t, this.g = e;
        }
        getToken() {
            return Promise.resolve(new $(this.V, this.g));
        }
        T(t) {
            // Fire with initial uid.
            t(P$1.u);
        }
        I() {}
        _() {}
    }

    /**
     * Builds a CredentialsProvider depending on the type of
     * the credentials passed in.
     */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Generates `nBytes` of random bytes.
     *
     * If `nBytes < 0` , an error will be thrown.
     */
    function B(t) {
        // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.
        const e = 
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        "undefined" != typeof self && (self.crypto || self.msCrypto), n = new Uint8Array(t);
        if (e && "function" == typeof e.getRandomValues) e.getRandomValues(n); else 
        // Falls back to Math.random
        for (let e = 0; e < t; e++) n[e] = Math.floor(256 * Math.random());
        return n;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class q$1 {
        static p() {
            // Alphanumeric characters
            const t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", e = Math.floor(256 / t.length) * t.length;
            // The largest byte value that is a multiple of `char.length`.
                    let n = "";
            for (;n.length < 20; ) {
                const s = B(40);
                for (let i = 0; i < s.length; ++i) 
                // Only accept values that are [0, maxMultiple), this ensures they can
                // be evenly mapped to indices of `chars` via a modulo operation.
                n.length < 20 && s[i] < e && (n += t.charAt(s[i] % t.length));
            }
            return n;
        }
    }

    function U$1(t, e) {
        return t < e ? -1 : t > e ? 1 : 0;
    }

    /** Helper to compare arrays using isEqual(). */ function K$1(t, e, n) {
        return t.length === e.length && t.every(((t, s) => n(t, e[s])));
    }

    /**
     * Returns the immediate lexicographically-following string. This is useful to
     * construct an inclusive range for indexeddb iterators.
     */ function Q$1(t) {
        // Return the input string, with an additional NUL byte appended.
        return t + "\0";
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // The earlist date supported by Firestore timestamps (0001-01-01T00:00:00Z).
    /**
     * A `Timestamp` represents a point in time independent of any time zone or
     * calendar, represented as seconds and fractions of seconds at nanosecond
     * resolution in UTC Epoch time.
     *
     * It is encoded using the Proleptic Gregorian Calendar which extends the
     * Gregorian calendar backwards to year one. It is encoded assuming all minutes
     * are 60 seconds long, i.e. leap seconds are "smeared" so that no leap second
     * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to
     * 9999-12-31T23:59:59.999999999Z.
     *
     * @see https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto
     */
    class W$1 {
        /**
         * Creates a new timestamp.
         *
         * @param seconds - The number of seconds of UTC time since Unix epoch
         *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
         *     9999-12-31T23:59:59Z inclusive.
         * @param nanoseconds - The non-negative fractions of a second at nanosecond
         *     resolution. Negative second values with fractions must still have
         *     non-negative nanoseconds values that count forward in time. Must be
         *     from 0 to 999,999,999 inclusive.
         */
        constructor(t, e) {
            if (this.seconds = t, this.nanoseconds = e, e < 0) throw new M$1(x$1.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
            if (e >= 1e9) throw new M$1(x$1.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
            if (t < -62135596800) throw new M$1(x$1.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
            // This will break in the year 10,000.
                    if (t >= 253402300800) throw new M$1(x$1.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t);
        }
        /**
         * Creates a new timestamp with the current date, with millisecond precision.
         *
         * @returns a new timestamp representing the current date.
         */    static now() {
            return W$1.fromMillis(Date.now());
        }
        /**
         * Creates a new timestamp from the given date.
         *
         * @param date - The date to initialize the `Timestamp` from.
         * @returns A new `Timestamp` representing the same point in time as the given
         *     date.
         */    static fromDate(t) {
            return W$1.fromMillis(t.getTime());
        }
        /**
         * Creates a new timestamp from the given number of milliseconds.
         *
         * @param milliseconds - Number of milliseconds since Unix epoch
         *     1970-01-01T00:00:00Z.
         * @returns A new `Timestamp` representing the same point in time as the given
         *     number of milliseconds.
         */    static fromMillis(t) {
            const e = Math.floor(t / 1e3);
            return new W$1(e, 1e6 * (t - 1e3 * e));
        }
        /**
         * Converts a `Timestamp` to a JavaScript `Date` object. This conversion causes
         * a loss of precision since `Date` objects only support millisecond precision.
         *
         * @returns JavaScript `Date` object representing the same point in time as
         *     this `Timestamp`, with millisecond precision.
         */    toDate() {
            return new Date(this.toMillis());
        }
        /**
         * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
         * epoch). This operation causes a loss of precision.
         *
         * @returns The point in time corresponding to this timestamp, represented as
         *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
         */    toMillis() {
            return 1e3 * this.seconds + this.nanoseconds / 1e6;
        }
        v(t) {
            return this.seconds === t.seconds ? U$1(this.nanoseconds, t.nanoseconds) : U$1(this.seconds, t.seconds);
        }
        /**
         * Returns true if this `Timestamp` is equal to the provided one.
         *
         * @param other - The `Timestamp` to compare against.
         * @returns true if this `Timestamp` is equal to the provided one.
         */    isEqual(t) {
            return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;
        }
        toString() {
            return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
        }
        toJSON() {
            return {
                seconds: this.seconds,
                nanoseconds: this.nanoseconds
            };
        }
        /**
         * Converts this object to a primitive string, which allows Timestamp objects to be compared
         * using the `>`, `<=`, `>=` and `>` operators.
         */    valueOf() {
            // This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is
            // translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded
            // with zeroes to be a consistent length. Strings with this format then have a lexiographical
            // ordering that matches the expected ordering. The <seconds> translation is done to avoid
            // having a leading negative sign (i.e. a leading '-' character) in its string representation,
            // which would affect its lexiographical ordering.
            const t = this.seconds - -62135596800;
            // Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.
                    return String(t).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A version of a document in Firestore. This corresponds to the version
     * timestamp, such as update_time or read_time.
     */ class j {
        constructor(t) {
            this.timestamp = t;
        }
        static S(t) {
            return new j(t);
        }
        static min() {
            return new j(new W$1(0, 0));
        }
        D(t) {
            return this.timestamp.v(t.timestamp);
        }
        isEqual(t) {
            return this.timestamp.isEqual(t.timestamp);
        }
        /** Returns a number representation of the version for use in spec tests. */    C() {
            // Convert to microseconds.
            return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
        }
        toString() {
            return "SnapshotVersion(" + this.timestamp.toString() + ")";
        }
        N() {
            return this.timestamp;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Path represents an ordered sequence of string segments.
     */
    class G$1 {
        constructor(t, e, n) {
            void 0 === e ? e = 0 : e > t.length && D$1(), void 0 === n ? n = t.length - e : n > t.length - e && D$1(), 
            this.segments = t, this.offset = e, this.M = n;
        }
        get length() {
            return this.M;
        }
        isEqual(t) {
            return 0 === G$1.k(this, t);
        }
        child(t) {
            const e = this.segments.slice(this.offset, this.limit());
            return t instanceof G$1 ? t.forEach((t => {
                e.push(t);
            })) : e.push(t), this.O(e);
        }
        /** The index of one past the last segment of the path. */    limit() {
            return this.offset + this.length;
        }
        F(t) {
            return t = void 0 === t ? 1 : t, this.O(this.segments, this.offset + t, this.length - t);
        }
        $() {
            return this.O(this.segments, this.offset, this.length - 1);
        }
        L() {
            return this.segments[this.offset];
        }
        B() {
            return this.get(this.length - 1);
        }
        get(t) {
            return this.segments[this.offset + t];
        }
        q() {
            return 0 === this.length;
        }
        U(t) {
            if (t.length < this.length) return !1;
            for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;
            return !0;
        }
        K(t) {
            if (this.length + 1 !== t.length) return !1;
            for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;
            return !0;
        }
        forEach(t) {
            for (let e = this.offset, n = this.limit(); e < n; e++) t(this.segments[e]);
        }
        W() {
            return this.segments.slice(this.offset, this.limit());
        }
        static k(t, e) {
            const n = Math.min(t.length, e.length);
            for (let s = 0; s < n; s++) {
                const n = t.get(s), i = e.get(s);
                if (n < i) return -1;
                if (n > i) return 1;
            }
            return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;
        }
    }

    /**
     * A slash-separated path for navigating resources (documents and collections)
     * within Firestore.
     */ class z$1 extends G$1 {
        O(t, e, n) {
            return new z$1(t, e, n);
        }
        j() {
            // NOTE: The client is ignorant of any path segments containing escape
            // sequences (e.g. __id123__) and just passes them through raw (they exist
            // for legacy reasons and should not be used frequently).
            return this.W().join("/");
        }
        toString() {
            return this.j();
        }
        /**
         * Creates a resource path from the given slash-delimited string. If multiple
         * arguments are provided, all components are combined. Leading and trailing
         * slashes from all components are ignored.
         */    static G(...t) {
            // NOTE: The client is ignorant of any path segments containing escape
            // sequences (e.g. __id123__) and just passes them through raw (they exist
            // for legacy reasons and should not be used frequently).
            const e = [];
            for (const n of t) {
                if (n.indexOf("//") >= 0) throw new M$1(x$1.INVALID_ARGUMENT, `Invalid segment (${n}). Paths must not contain // in them.`);
                // Strip leading and traling slashed.
                            e.push(...n.split("/").filter((t => t.length > 0)));
            }
            return new z$1(e);
        }
        static H() {
            return new z$1([]);
        }
    }

    const H$1 = /^[_a-zA-Z][_a-zA-Z0-9]*$/;

    /** A dot-separated path for navigating sub-objects within a document. */ class J$1 extends G$1 {
        O(t, e, n) {
            return new J$1(t, e, n);
        }
        /**
         * Returns true if the string could be used as a segment in a field path
         * without escaping.
         */    static J(t) {
            return H$1.test(t);
        }
        j() {
            return this.W().map((t => (t = t.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), J$1.J(t) || (t = "`" + t + "`"), 
            t))).join(".");
        }
        toString() {
            return this.j();
        }
        /**
         * Returns true if this field references the key of a document.
         */    Y() {
            return 1 === this.length && "__name__" === this.get(0);
        }
        /**
         * The field designating the key of a document.
         */    static X() {
            return new J$1([ "__name__" ]);
        }
        /**
         * Parses a field string from the given server-formatted string.
         *
         * - Splitting the empty string is not allowed (for now at least).
         * - Empty segments within the string (e.g. if there are two consecutive
         *   separators) are not allowed.
         *
         * TODO(b/37244157): we should make this more strict. Right now, it allows
         * non-identifier path components, even if they aren't escaped.
         */    static Z(t) {
            const e = [];
            let n = "", s = 0;
            const i = () => {
                if (0 === n.length) throw new M$1(x$1.INVALID_ARGUMENT, `Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);
                e.push(n), n = "";
            };
            let r = !1;
            for (;s < t.length; ) {
                const e = t[s];
                if ("\\" === e) {
                    if (s + 1 === t.length) throw new M$1(x$1.INVALID_ARGUMENT, "Path has trailing escape character: " + t);
                    const e = t[s + 1];
                    if ("\\" !== e && "." !== e && "`" !== e) throw new M$1(x$1.INVALID_ARGUMENT, "Path has invalid escape sequence: " + t);
                    n += e, s += 2;
                } else "`" === e ? (r = !r, s++) : "." !== e || r ? (n += e, s++) : (i(), s++);
            }
            if (i(), r) throw new M$1(x$1.INVALID_ARGUMENT, "Unterminated ` in path: " + t);
            return new J$1(e);
        }
        static H() {
            return new J$1([]);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class Y$1 {
        constructor(t) {
            this.path = t;
        }
        static tt(t) {
            return new Y$1(z$1.G(t));
        }
        static et(t) {
            return new Y$1(z$1.G(t).F(5));
        }
        /** Returns true if the document is in the specified collectionId. */    nt(t) {
            return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;
        }
        isEqual(t) {
            return null !== t && 0 === z$1.k(this.path, t.path);
        }
        toString() {
            return this.path.toString();
        }
        static k(t, e) {
            return z$1.k(t.path, e.path);
        }
        static st(t) {
            return t.length % 2 == 0;
        }
        /**
         * Creates and returns a new document key with the given segments.
         *
         * @param segments - The segments of the path to the document
         * @returns A new instance of DocumentKey
         */    static it(t) {
            return new Y$1(new z$1(t.slice()));
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class X$1 {
        /**
         * Constructs a DatabaseInfo using the provided host, databaseId and
         * persistenceKey.
         *
         * @param databaseId - The database to use.
         * @param persistenceKey - A unique identifier for this Firestore's local
         * storage (used in conjunction with the databaseId).
         * @param host - The Firestore backend host to connect to.
         * @param ssl - Whether to use SSL when connecting.
         * @param forceLongPolling - Whether to use the forceLongPolling option
         * when using WebChannel as the network transport.
         * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
         * option when using WebChannel as the network transport.
         */
        constructor(t, e, n, s, i, r) {
            this.rt = t, this.persistenceKey = e, this.host = n, this.ssl = s, this.forceLongPolling = i, 
            this.ot = r;
        }
    }

    /** The default database name for a project. */
    /** Represents the database ID a Firestore client is associated with. */
    class Z$1 {
        constructor(t, e) {
            this.projectId = t, this.database = e || "(default)";
        }
        get ct() {
            return "(default)" === this.database;
        }
        isEqual(t) {
            return t instanceof Z$1 && t.projectId === this.projectId && t.database === this.database;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns whether a variable is either undefined or null.
     */ function tt(t) {
        return null == t;
    }

    /** Returns whether the value represents -0. */ function et(t) {
        // Detect if the value is -0.0. Based on polyfill from
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
        return 0 === t && 1 / t == -1 / 0;
    }

    /**
     * Returns whether a value is an integer and in the safe integer range
     * @param value - The value to test for being an integer and in the safe range
     */ function nt(t) {
        return "number" == typeof t && Number.isInteger(t) && !et(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Visible for testing
    class st {
        constructor(t, e = null, n = [], s = [], i = null, r = null, o = null) {
            this.path = t, this.collectionGroup = e, this.orderBy = n, this.filters = s, this.limit = i, 
            this.startAt = r, this.endAt = o, this.ut = null;
        }
    }

    /**
     * Initializes a Target with a path and optional additional query constraints.
     * Path must currently be empty if this is a collection group query.
     *
     * NOTE: you should always construct `Target` from `Query.toTarget` instead of
     * using this factory method, because `Query` provides an implicit `orderBy`
     * property.
     */ function it(t, e = null, n = [], s = [], i = null, r = null, o = null) {
        return new st(t, e, n, s, i, r, o);
    }

    function rt(t) {
        const e = N$1(t);
        if (null === e.ut) {
            let t = e.path.j();
            null !== e.collectionGroup && (t += "|cg:" + e.collectionGroup), t += "|f:", t += e.filters.map((t => ts(t))).join(","), 
            t += "|ob:", t += e.orderBy.map((t => function(t) {
                // TODO(b/29183165): Make this collision robust.
                return t.field.j() + t.dir;
            }(t))).join(","), tt(e.limit) || (t += "|l:", t += e.limit), e.startAt && (t += "|lb:", 
            t += hs(e.startAt)), e.endAt && (t += "|ub:", t += hs(e.endAt)), e.ut = t;
        }
        return e.ut;
    }

    function ot(t) {
        let e = t.path.j();
        return null !== t.collectionGroup && (e += " collectionGroup=" + t.collectionGroup), 
        t.filters.length > 0 && (e += `, filters: [${t.filters.map((t => {
        return `${(e = t).field.j()} ${e.op} ${ee(e.value)}`;
        /** Returns a debug description for `filter`. */
        var e;
        /** Filter that matches on key fields (i.e. '__name__'). */    })).join(", ")}]`), 
        tt(t.limit) || (e += ", limit: " + t.limit), t.orderBy.length > 0 && (e += `, orderBy: [${t.orderBy.map((t => function(t) {
        return `${t.field.j()} (${t.dir})`;
    }(t))).join(", ")}]`), t.startAt && (e += ", startAt: " + hs(t.startAt)), t.endAt && (e += ", endAt: " + hs(t.endAt)), 
        `Target(${e})`;
    }

    function ct(t, e) {
        if (t.limit !== e.limit) return !1;
        if (t.orderBy.length !== e.orderBy.length) return !1;
        for (let n = 0; n < t.orderBy.length; n++) if (!ws(t.orderBy[n], e.orderBy[n])) return !1;
        if (t.filters.length !== e.filters.length) return !1;
        for (let i = 0; i < t.filters.length; i++) if (n = t.filters[i], s = e.filters[i], 
        n.op !== s.op || !n.field.isEqual(s.field) || !Yt(n.value, s.value)) return !1;
        var n, s;
        return t.collectionGroup === e.collectionGroup && (!!t.path.isEqual(e.path) && (!!_s(t.startAt, e.startAt) && _s(t.endAt, e.endAt)));
    }

    function ut(t) {
        return Y$1.st(t.path) && null === t.collectionGroup && 0 === t.filters.length;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Converts a Base64 encoded string to a binary string. */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Immutable class that represents a "proto" byte string.
     *
     * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when
     * sent on the wire. This class abstracts away this differentiation by holding
     * the proto byte string in a common class that must be converted into a string
     * before being sent as a proto.
     */
    class at {
        constructor(t) {
            this.at = t;
        }
        static fromBase64String(t) {
            const e = atob(t);
            return new at(e);
        }
        static fromUint8Array(t) {
            const e = 
            /**
     * Helper function to convert an Uint8array to a binary string.
     */
            function(t) {
                let e = "";
                for (let n = 0; n < t.length; ++n) e += String.fromCharCode(t[n]);
                return e;
            }
            /**
     * Helper function to convert a binary string to an Uint8Array.
     */ (t);
            return new at(e);
        }
        toBase64() {
            return t = this.at, btoa(t);
            /** Converts a binary string to a Base64 encoded string. */
            var t;
        }
        toUint8Array() {
            return function(t) {
                const e = new Uint8Array(t.length);
                for (let n = 0; n < t.length; n++) e[n] = t.charCodeAt(n);
                return e;
            }
            /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
            /**
     * An immutable set of metadata that the local store tracks for each target.
     */ (this.at);
        }
        ht() {
            return 2 * this.at.length;
        }
        D(t) {
            return U$1(this.at, t.at);
        }
        isEqual(t) {
            return this.at === t.at;
        }
    }

    at.lt = new at("");

    class ht {
        constructor(
        /** The target being listened to. */
        t, 
        /**
         * The target ID to which the target corresponds; Assigned by the
         * LocalStore for user listens and by the SyncEngine for limbo watches.
         */
        e, 
        /** The purpose of the target. */
        n, 
        /**
         * The sequence number of the last transaction during which this target data
         * was modified.
         */
        s, 
        /** The latest snapshot version seen for this target. */
        i = j.min()
        /**
         * The maximum snapshot version at which the associated view
         * contained no limbo documents.
         */ , r = j.min()
        /**
         * An opaque, server-assigned token that allows watching a target to be
         * resumed after disconnecting without retransmitting all the data that
         * matches the target. The resume token essentially identifies a point in
         * time from which the server should resume sending results.
         */ , o = at.lt) {
            this.target = t, this.targetId = e, this._t = n, this.sequenceNumber = s, this.ft = i, 
            this.lastLimboFreeSnapshotVersion = r, this.resumeToken = o;
        }
        /** Creates a new target data instance with an updated sequence number. */    dt(t) {
            return new ht(this.target, this.targetId, this._t, t, this.ft, this.lastLimboFreeSnapshotVersion, this.resumeToken);
        }
        /**
         * Creates a new target data instance with an updated resume token and
         * snapshot version.
         */    wt(t, e) {
            return new ht(this.target, this.targetId, this._t, this.sequenceNumber, e, this.lastLimboFreeSnapshotVersion, t);
        }
        /**
         * Creates a new target data instance with an updated last limbo free
         * snapshot version number.
         */    Et(t) {
            return new ht(this.target, this.targetId, this._t, this.sequenceNumber, this.ft, t, this.resumeToken);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class lt {
        // TODO(b/33078163): just use simplest form of existence filter for now
        constructor(t) {
            this.count = t;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Error Codes describing the different ways GRPC can fail. These are copied
     * directly from GRPC's sources here:
     *
     * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
     *
     * Important! The names of these identifiers matter because the string forms
     * are used for reverse lookups from the webchannel stream. Do NOT change the
     * names of these identifiers or change this into a const enum.
     */ var _t, ft;

    /**
     * Determines whether an error code represents a permanent error when received
     * in response to a non-write operation.
     *
     * See isPermanentWriteError for classifying write errors.
     */
    function dt(t) {
        switch (t) {
          case x$1.OK:
            return D$1();

          case x$1.CANCELLED:
          case x$1.UNKNOWN:
          case x$1.DEADLINE_EXCEEDED:
          case x$1.RESOURCE_EXHAUSTED:
          case x$1.INTERNAL:
          case x$1.UNAVAILABLE:
     // Unauthenticated means something went wrong with our token and we need
            // to retry with new credentials which will happen automatically.
                  case x$1.UNAUTHENTICATED:
            return !1;

          case x$1.INVALID_ARGUMENT:
          case x$1.NOT_FOUND:
          case x$1.ALREADY_EXISTS:
          case x$1.PERMISSION_DENIED:
          case x$1.FAILED_PRECONDITION:
     // Aborted might be retried in some scenarios, but that is dependant on
            // the context and should handled individually by the calling code.
            // See https://cloud.google.com/apis/design/errors.
                  case x$1.ABORTED:
          case x$1.OUT_OF_RANGE:
          case x$1.UNIMPLEMENTED:
          case x$1.DATA_LOSS:
            return !0;

          default:
            return D$1();
        }
    }

    /**
     * Determines whether an error code represents a permanent error when received
     * in response to a write operation.
     *
     * Write operations must be handled specially because as of b/119437764, ABORTED
     * errors on the write stream should be retried too (even though ABORTED errors
     * are not generally retryable).
     *
     * Note that during the initial handshake on the write stream an ABORTED error
     * signals that we should discard our stream token (i.e. it is permanent). This
     * means a handshake error should be classified with isPermanentError, above.
     */
    /**
     * Maps an error Code from GRPC status code number, like 0, 1, or 14. These
     * are not the same as HTTP status codes.
     *
     * @returns The Code equivalent to the given GRPC status code. Fails if there
     *     is no match.
     */
    function wt(t) {
        if (void 0 === t) 
        // This shouldn't normally happen, but in certain error cases (like trying
        // to send invalid proto messages) we may get an error with no GRPC code.
        return b("GRPC error has no .code"), x$1.UNKNOWN;
        switch (t) {
          case _t.OK:
            return x$1.OK;

          case _t.CANCELLED:
            return x$1.CANCELLED;

          case _t.UNKNOWN:
            return x$1.UNKNOWN;

          case _t.DEADLINE_EXCEEDED:
            return x$1.DEADLINE_EXCEEDED;

          case _t.RESOURCE_EXHAUSTED:
            return x$1.RESOURCE_EXHAUSTED;

          case _t.INTERNAL:
            return x$1.INTERNAL;

          case _t.UNAVAILABLE:
            return x$1.UNAVAILABLE;

          case _t.UNAUTHENTICATED:
            return x$1.UNAUTHENTICATED;

          case _t.INVALID_ARGUMENT:
            return x$1.INVALID_ARGUMENT;

          case _t.NOT_FOUND:
            return x$1.NOT_FOUND;

          case _t.ALREADY_EXISTS:
            return x$1.ALREADY_EXISTS;

          case _t.PERMISSION_DENIED:
            return x$1.PERMISSION_DENIED;

          case _t.FAILED_PRECONDITION:
            return x$1.FAILED_PRECONDITION;

          case _t.ABORTED:
            return x$1.ABORTED;

          case _t.OUT_OF_RANGE:
            return x$1.OUT_OF_RANGE;

          case _t.UNIMPLEMENTED:
            return x$1.UNIMPLEMENTED;

          case _t.DATA_LOSS:
            return x$1.DATA_LOSS;

          default:
            return D$1();
        }
    }

    /**
     * Converts an HTTP response's error status to the equivalent error code.
     *
     * @param status - An HTTP error response status ("FAILED_PRECONDITION",
     * "UNKNOWN", etc.)
     * @returns The equivalent Code. Non-matching responses are mapped to
     *     Code.UNKNOWN.
     */ (ft = _t || (_t = {}))[ft.OK = 0] = "OK", ft[ft.CANCELLED = 1] = "CANCELLED", 
    ft[ft.UNKNOWN = 2] = "UNKNOWN", ft[ft.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", 
    ft[ft.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", ft[ft.NOT_FOUND = 5] = "NOT_FOUND", 
    ft[ft.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", ft[ft.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", 
    ft[ft.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", ft[ft.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", 
    ft[ft.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", ft[ft.ABORTED = 10] = "ABORTED", 
    ft[ft.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", ft[ft.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", 
    ft[ft.INTERNAL = 13] = "INTERNAL", ft[ft.UNAVAILABLE = 14] = "UNAVAILABLE", ft[ft.DATA_LOSS = 15] = "DATA_LOSS";

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // An immutable sorted map implementation, based on a Left-leaning Red-Black
    // tree.
    class Et {
        constructor(t, e) {
            this.k = t, this.root = e || It.EMPTY;
        }
        // Returns a copy of the map, with the specified key/value added or replaced.
        Tt(t, e) {
            return new Et(this.k, this.root.Tt(t, e, this.k).copy(null, null, It.It, null, null));
        }
        // Returns a copy of the map, with the specified key removed.
        remove(t) {
            return new Et(this.k, this.root.remove(t, this.k).copy(null, null, It.It, null, null));
        }
        // Returns the value of the node with the given key, or null.
        get(t) {
            let e = this.root;
            for (;!e.q(); ) {
                const n = this.k(t, e.key);
                if (0 === n) return e.value;
                n < 0 ? e = e.left : n > 0 && (e = e.right);
            }
            return null;
        }
        // Returns the index of the element in this sorted map, or -1 if it doesn't
        // exist.
        indexOf(t) {
            // Number of nodes that were pruned when descending right
            let e = 0, n = this.root;
            for (;!n.q(); ) {
                const s = this.k(t, n.key);
                if (0 === s) return e + n.left.size;
                s < 0 ? n = n.left : (
                // Count all nodes left of the node plus the node itself
                e += n.left.size + 1, n = n.right);
            }
            // Node not found
                    return -1;
        }
        q() {
            return this.root.q();
        }
        // Returns the total number of nodes in the map.
        get size() {
            return this.root.size;
        }
        // Returns the minimum key in the map.
        At() {
            return this.root.At();
        }
        // Returns the maximum key in the map.
        Rt() {
            return this.root.Rt();
        }
        // Traverses the map in key order and calls the specified action function
        // for each key/value pair. If action returns true, traversal is aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        Pt(t) {
            return this.root.Pt(t);
        }
        forEach(t) {
            this.Pt(((e, n) => (t(e, n), !1)));
        }
        toString() {
            const t = [];
            return this.Pt(((e, n) => (t.push(`${e}:${n}`), !1))), `{${t.join(", ")}}`;
        }
        // Traverses the map in reverse key order and calls the specified action
        // function for each key/value pair. If action returns true, traversal is
        // aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        Vt(t) {
            return this.root.Vt(t);
        }
        // Returns an iterator over the SortedMap.
        gt() {
            return new Tt(this.root, null, this.k, !1);
        }
        yt(t) {
            return new Tt(this.root, t, this.k, !1);
        }
        bt() {
            return new Tt(this.root, null, this.k, !0);
        }
        vt(t) {
            return new Tt(this.root, t, this.k, !0);
        }
    }

     // end SortedMap
    // An iterator over an LLRBNode.
    class Tt {
        constructor(t, e, n, s) {
            this.St = s, this.Dt = [];
            let i = 1;
            for (;!t.q(); ) if (i = e ? n(t.key, e) : 1, 
            // flip the comparison if we're going in reverse
            s && (i *= -1), i < 0) 
            // This node is less than our start key. ignore it
            t = this.St ? t.left : t.right; else {
                if (0 === i) {
                    // This node is exactly equal to our start key. Push it on the stack,
                    // but stop iterating;
                    this.Dt.push(t);
                    break;
                }
                // This node is greater than our start key, add it to the stack and move
                // to the next one
                this.Dt.push(t), t = this.St ? t.right : t.left;
            }
        }
        Ct() {
            let t = this.Dt.pop();
            const e = {
                key: t.key,
                value: t.value
            };
            if (this.St) for (t = t.left; !t.q(); ) this.Dt.push(t), t = t.right; else for (t = t.right; !t.q(); ) this.Dt.push(t), 
            t = t.left;
            return e;
        }
        Nt() {
            return this.Dt.length > 0;
        }
        xt() {
            if (0 === this.Dt.length) return null;
            const t = this.Dt[this.Dt.length - 1];
            return {
                key: t.key,
                value: t.value
            };
        }
    }

     // end SortedMapIterator
    // Represents a node in a Left-leaning Red-Black tree.
    class It {
        constructor(t, e, n, s, i) {
            this.key = t, this.value = e, this.color = null != n ? n : It.RED, this.left = null != s ? s : It.EMPTY, 
            this.right = null != i ? i : It.EMPTY, this.size = this.left.size + 1 + this.right.size;
        }
        // Returns a copy of the current node, optionally replacing pieces of it.
        copy(t, e, n, s, i) {
            return new It(null != t ? t : this.key, null != e ? e : this.value, null != n ? n : this.color, null != s ? s : this.left, null != i ? i : this.right);
        }
        q() {
            return !1;
        }
        // Traverses the tree in key order and calls the specified action function
        // for each node. If action returns true, traversal is aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        Pt(t) {
            return this.left.Pt(t) || t(this.key, this.value) || this.right.Pt(t);
        }
        // Traverses the tree in reverse key order and calls the specified action
        // function for each node. If action returns true, traversal is aborted.
        // Returns the first truthy value returned by action, or the last falsey
        // value returned by action.
        Vt(t) {
            return this.right.Vt(t) || t(this.key, this.value) || this.left.Vt(t);
        }
        // Returns the minimum node in the tree.
        min() {
            return this.left.q() ? this : this.left.min();
        }
        // Returns the maximum key in the tree.
        At() {
            return this.min().key;
        }
        // Returns the maximum key in the tree.
        Rt() {
            return this.right.q() ? this.key : this.right.Rt();
        }
        // Returns new tree, with the key/value added.
        Tt(t, e, n) {
            let s = this;
            const i = n(t, s.key);
            return s = i < 0 ? s.copy(null, null, null, s.left.Tt(t, e, n), null) : 0 === i ? s.copy(null, e, null, null, null) : s.copy(null, null, null, null, s.right.Tt(t, e, n)), 
            s.Mt();
        }
        kt() {
            if (this.left.q()) return It.EMPTY;
            let t = this;
            return t.left.Ot() || t.left.left.Ot() || (t = t.Ft()), t = t.copy(null, null, null, t.left.kt(), null), 
            t.Mt();
        }
        // Returns new tree, with the specified item removed.
        remove(t, e) {
            let n, s = this;
            if (e(t, s.key) < 0) s.left.q() || s.left.Ot() || s.left.left.Ot() || (s = s.Ft()), 
            s = s.copy(null, null, null, s.left.remove(t, e), null); else {
                if (s.left.Ot() && (s = s.$t()), s.right.q() || s.right.Ot() || s.right.left.Ot() || (s = s.Lt()), 
                0 === e(t, s.key)) {
                    if (s.right.q()) return It.EMPTY;
                    n = s.right.min(), s = s.copy(n.key, n.value, null, null, s.right.kt());
                }
                s = s.copy(null, null, null, null, s.right.remove(t, e));
            }
            return s.Mt();
        }
        Ot() {
            return this.color;
        }
        // Returns new tree after performing any needed rotations.
        Mt() {
            let t = this;
            return t.right.Ot() && !t.left.Ot() && (t = t.Bt()), t.left.Ot() && t.left.left.Ot() && (t = t.$t()), 
            t.left.Ot() && t.right.Ot() && (t = t.qt()), t;
        }
        Ft() {
            let t = this.qt();
            return t.right.left.Ot() && (t = t.copy(null, null, null, null, t.right.$t()), t = t.Bt(), 
            t = t.qt()), t;
        }
        Lt() {
            let t = this.qt();
            return t.left.left.Ot() && (t = t.$t(), t = t.qt()), t;
        }
        Bt() {
            const t = this.copy(null, null, It.RED, null, this.right.left);
            return this.right.copy(null, null, this.color, t, null);
        }
        $t() {
            const t = this.copy(null, null, It.RED, this.left.right, null);
            return this.left.copy(null, null, this.color, null, t);
        }
        qt() {
            const t = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);
            return this.copy(null, null, !this.color, t, e);
        }
        // For testing.
        Ut() {
            const t = this.Kt();
            return Math.pow(2, t) <= this.size + 1;
        }
        // In a balanced RB tree, the black-depth (number of black nodes) from root to
        // leaves is equal on both sides.  This function verifies that or asserts.
        Kt() {
            if (this.Ot() && this.left.Ot()) throw D$1();
            if (this.right.Ot()) throw D$1();
            const t = this.left.Kt();
            if (t !== this.right.Kt()) throw D$1();
            return t + (this.Ot() ? 0 : 1);
        }
    }

     // end LLRBNode
    // Empty node is shared between all LLRB trees.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    It.EMPTY = null, It.RED = !0, It.It = !1;

    // end LLRBEmptyNode
    It.EMPTY = new 
    // Represents an empty node (a leaf node in the Red-Black Tree).
    class {
        constructor() {
            this.size = 0;
        }
        get key() {
            throw D$1();
        }
        get value() {
            throw D$1();
        }
        get color() {
            throw D$1();
        }
        get left() {
            throw D$1();
        }
        get right() {
            throw D$1();
        }
        // Returns a copy of the current node.
        copy(t, e, n, s, i) {
            return this;
        }
        // Returns a copy of the tree, with the specified key/value added.
        Tt(t, e, n) {
            return new It(t, e);
        }
        // Returns a copy of the tree, with the specified key removed.
        remove(t, e) {
            return this;
        }
        q() {
            return !0;
        }
        Pt(t) {
            return !1;
        }
        Vt(t) {
            return !1;
        }
        At() {
            return null;
        }
        Rt() {
            return null;
        }
        Ot() {
            return !1;
        }
        // For testing.
        Ut() {
            return !0;
        }
        Kt() {
            return 0;
        }
    };

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * SortedSet is an immutable (copy-on-write) collection that holds elements
     * in order specified by the provided comparator.
     *
     * NOTE: if provided comparator returns 0 for two elements, we consider them to
     * be equal!
     */
    class mt {
        constructor(t) {
            this.k = t, this.data = new Et(this.k);
        }
        has(t) {
            return null !== this.data.get(t);
        }
        first() {
            return this.data.At();
        }
        last() {
            return this.data.Rt();
        }
        get size() {
            return this.data.size;
        }
        indexOf(t) {
            return this.data.indexOf(t);
        }
        /** Iterates elements in order defined by "comparator" */    forEach(t) {
            this.data.Pt(((e, n) => (t(e), !1)));
        }
        /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */    Qt(t, e) {
            const n = this.data.yt(t[0]);
            for (;n.Nt(); ) {
                const s = n.Ct();
                if (this.k(s.key, t[1]) >= 0) return;
                e(s.key);
            }
        }
        /**
         * Iterates over `elem`s such that: start &lt;= elem until false is returned.
         */    Wt(t, e) {
            let n;
            for (n = void 0 !== e ? this.data.yt(e) : this.data.gt(); n.Nt(); ) {
                if (!t(n.Ct().key)) return;
            }
        }
        /** Finds the least element greater than or equal to `elem`. */    jt(t) {
            const e = this.data.yt(t);
            return e.Nt() ? e.Ct().key : null;
        }
        gt() {
            return new At(this.data.gt());
        }
        yt(t) {
            return new At(this.data.yt(t));
        }
        /** Inserts or updates an element */    add(t) {
            return this.copy(this.data.remove(t).Tt(t, !0));
        }
        /** Deletes an element */    delete(t) {
            return this.has(t) ? this.copy(this.data.remove(t)) : this;
        }
        q() {
            return this.data.q();
        }
        Gt(t) {
            let e = this;
            // Make sure `result` always refers to the larger one of the two sets.
                    return e.size < t.size && (e = t, t = this), t.forEach((t => {
                e = e.add(t);
            })), e;
        }
        isEqual(t) {
            if (!(t instanceof mt)) return !1;
            if (this.size !== t.size) return !1;
            const e = this.data.gt(), n = t.data.gt();
            for (;e.Nt(); ) {
                const t = e.Ct().key, s = n.Ct().key;
                if (0 !== this.k(t, s)) return !1;
            }
            return !0;
        }
        W() {
            const t = [];
            return this.forEach((e => {
                t.push(e);
            })), t;
        }
        toString() {
            const t = [];
            return this.forEach((e => t.push(e))), "SortedSet(" + t.toString() + ")";
        }
        copy(t) {
            const e = new mt(this.k);
            return e.data = t, e;
        }
    }

    class At {
        constructor(t) {
            this.zt = t;
        }
        Ct() {
            return this.zt.Ct().key;
        }
        Nt() {
            return this.zt.Nt();
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const Rt = new Et(Y$1.k);

    function Pt() {
        return Rt;
    }

    function Vt() {
        return Pt();
    }

    const gt = new Et(Y$1.k);

    function yt() {
        return gt;
    }

    const pt = new Et(Y$1.k);

    const bt = new mt(Y$1.k);

    function vt(...t) {
        let e = bt;
        for (const n of t) e = e.add(n);
        return e;
    }

    const St = new mt(U$1);

    function Dt() {
        return St;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * DocumentSet is an immutable (copy-on-write) collection that holds documents
     * in order specified by the provided comparator. We always add a document key
     * comparator on top of what is provided to guarantee document equality based on
     * the key.
     */ class Ct {
        /** The default ordering is by key if the comparator is omitted */
        constructor(t) {
            // We are adding document key comparator to the end as it's the only
            // guaranteed unique property of a document.
            this.k = t ? (e, n) => t(e, n) || Y$1.k(e.key, n.key) : (t, e) => Y$1.k(t.key, e.key), 
            this.Ht = yt(), this.Jt = new Et(this.k);
        }
        /**
         * Returns an empty copy of the existing DocumentSet, using the same
         * comparator.
         */    static Yt(t) {
            return new Ct(t.k);
        }
        has(t) {
            return null != this.Ht.get(t);
        }
        get(t) {
            return this.Ht.get(t);
        }
        first() {
            return this.Jt.At();
        }
        last() {
            return this.Jt.Rt();
        }
        q() {
            return this.Jt.q();
        }
        /**
         * Returns the index of the provided key in the document set, or -1 if the
         * document key is not present in the set;
         */    indexOf(t) {
            const e = this.Ht.get(t);
            return e ? this.Jt.indexOf(e) : -1;
        }
        get size() {
            return this.Jt.size;
        }
        /** Iterates documents in order defined by "comparator" */    forEach(t) {
            this.Jt.Pt(((e, n) => (t(e), !1)));
        }
        /** Inserts or updates a document with the same key */    add(t) {
            // First remove the element if we have it.
            const e = this.delete(t.key);
            return e.copy(e.Ht.Tt(t.key, t), e.Jt.Tt(t, null));
        }
        /** Deletes a document with a given key */    delete(t) {
            const e = this.get(t);
            return e ? this.copy(this.Ht.remove(t), this.Jt.remove(e)) : this;
        }
        isEqual(t) {
            if (!(t instanceof Ct)) return !1;
            if (this.size !== t.size) return !1;
            const e = this.Jt.gt(), n = t.Jt.gt();
            for (;e.Nt(); ) {
                const t = e.Ct().key, s = n.Ct().key;
                if (!t.isEqual(s)) return !1;
            }
            return !0;
        }
        toString() {
            const t = [];
            return this.forEach((e => {
                t.push(e.toString());
            })), 0 === t.length ? "DocumentSet ()" : "DocumentSet (\n  " + t.join("  \n") + "\n)";
        }
        copy(t, e) {
            const n = new Ct;
            return n.k = this.k, n.Ht = t, n.Jt = e, n;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * DocumentChangeSet keeps track of a set of changes to docs in a query, merging
     * duplicate events for the same doc.
     */ class Nt {
        constructor() {
            this.Xt = new Et(Y$1.k);
        }
        track(t) {
            const e = t.doc.key, n = this.Xt.get(e);
            n ? 
            // Merge the new change with the existing change.
            0 /* Added */ !== t.type && 3 /* Metadata */ === n.type ? this.Xt = this.Xt.Tt(e, t) : 3 /* Metadata */ === t.type && 1 /* Removed */ !== n.type ? this.Xt = this.Xt.Tt(e, {
                type: n.type,
                doc: t.doc
            }) : 2 /* Modified */ === t.type && 2 /* Modified */ === n.type ? this.Xt = this.Xt.Tt(e, {
                type: 2 /* Modified */ ,
                doc: t.doc
            }) : 2 /* Modified */ === t.type && 0 /* Added */ === n.type ? this.Xt = this.Xt.Tt(e, {
                type: 0 /* Added */ ,
                doc: t.doc
            }) : 1 /* Removed */ === t.type && 0 /* Added */ === n.type ? this.Xt = this.Xt.remove(e) : 1 /* Removed */ === t.type && 2 /* Modified */ === n.type ? this.Xt = this.Xt.Tt(e, {
                type: 1 /* Removed */ ,
                doc: n.doc
            }) : 0 /* Added */ === t.type && 1 /* Removed */ === n.type ? this.Xt = this.Xt.Tt(e, {
                type: 2 /* Modified */ ,
                doc: t.doc
            }) : 
            // This includes these cases, which don't make sense:
            // Added->Added
            // Removed->Removed
            // Modified->Added
            // Removed->Modified
            // Metadata->Added
            // Removed->Metadata
            D$1() : this.Xt = this.Xt.Tt(e, t);
        }
        Zt() {
            const t = [];
            return this.Xt.Pt(((e, n) => {
                t.push(n);
            })), t;
        }
    }

    class xt {
        constructor(t, e, n, s, i, r, o, c) {
            this.query = t, this.docs = e, this.te = n, this.docChanges = s, this.ee = i, this.fromCache = r, 
            this.ne = o, this.se = c;
        }
        /** Returns a view snapshot as if all documents in the snapshot were added. */    static ie(t, e, n, s) {
            const i = [];
            return e.forEach((t => {
                i.push({
                    type: 0 /* Added */ ,
                    doc: t
                });
            })), new xt(t, e, Ct.Yt(e), i, n, s, 
            /* syncStateChanged= */ !0, 
            /* excludesMetadataChanges= */ !1);
        }
        get hasPendingWrites() {
            return !this.ee.q();
        }
        isEqual(t) {
            if (!(this.fromCache === t.fromCache && this.ne === t.ne && this.ee.isEqual(t.ee) && zn(this.query, t.query) && this.docs.isEqual(t.docs) && this.te.isEqual(t.te))) return !1;
            const e = this.docChanges, n = t.docChanges;
            if (e.length !== n.length) return !1;
            for (let t = 0; t < e.length; t++) if (e[t].type !== n[t].type || !e[t].doc.isEqual(n[t].doc)) return !1;
            return !0;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An event from the RemoteStore. It is split into targetChanges (changes to the
     * state or the set of documents in our watched targets) and documentUpdates
     * (changes to the actual documents).
     */ class Mt {
        constructor(
        /**
         * The snapshot version this event brings us up to, or MIN if not set.
         */
        t, 
        /**
         * A map from target to changes to the target. See TargetChange.
         */
        e, 
        /**
         * A set of targets that is known to be inconsistent. Listens for these
         * targets should be re-established without resume tokens.
         */
        n, 
        /**
         * A set of which documents have changed or been deleted, along with the
         * doc's new values (if not deleted).
         */
        s, 
        /**
         * A set of which document updates are due only to limbo resolution targets.
         */
        i) {
            this.ft = t, this.re = e, this.oe = n, this.ce = s, this.ue = i;
        }
        /**
         * HACK: Views require RemoteEvents in order to determine whether the view is
         * CURRENT, but secondary tabs don't receive remote events. So this method is
         * used to create a synthesized RemoteEvent that can be used to apply a
         * CURRENT status change to a View, for queries executed in a different tab.
         */
        // PORTING NOTE: Multi-tab only
        static ae(t, e) {
            const n = new Map;
            return n.set(t, kt.he(t, e)), new Mt(j.min(), n, Dt(), Pt(), vt());
        }
    }

    /**
     * A TargetChange specifies the set of changes for a specific target as part of
     * a RemoteEvent. These changes track which documents are added, modified or
     * removed, as well as the target's resume token and whether the target is
     * marked CURRENT.
     * The actual changes *to* documents are not part of the TargetChange since
     * documents may be part of multiple targets.
     */ class kt {
        constructor(
        /**
         * An opaque, server-assigned token that allows watching a query to be resumed
         * after disconnecting without retransmitting all the data that matches the
         * query. The resume token essentially identifies a point in time from which
         * the server should resume sending results.
         */
        t, 
        /**
         * The "current" (synced) status of this target. Note that "current"
         * has special meaning in the RPC protocol that implies that a target is
         * both up-to-date and consistent with the rest of the watch stream.
         */
        e, 
        /**
         * The set of documents that were newly assigned to this target as part of
         * this remote event.
         */
        n, 
        /**
         * The set of documents that were already assigned to this target but received
         * an update during this remote event.
         */
        s, 
        /**
         * The set of documents that were removed from this target as part of this
         * remote event.
         */
        i) {
            this.resumeToken = t, this.le = e, this._e = n, this.fe = s, this.de = i;
        }
        /**
         * This method is used to create a synthesized TargetChanges that can be used to
         * apply a CURRENT status change to a View (for queries executed in a different
         * tab) or for new queries (to raise snapshots with correct CURRENT status).
         */    static he(t, e) {
            return new kt(at.lt, e, vt(), vt(), vt());
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents a changed document and a list of target ids to which this change
     * applies.
     *
     * If document has been deleted NoDocument will be provided.
     */ class Ot {
        constructor(
        /** The new document applies to all of these targets. */
        t, 
        /** The new document is removed from all of these targets. */
        e, 
        /** The key of the document for this change. */
        n, 
        /**
         * The new document or NoDocument if it was deleted. Is null if the
         * document went out of view without the server sending a new document.
         */
        s) {
            this.we = t, this.removedTargetIds = e, this.key = n, this.Ee = s;
        }
    }

    class Ft {
        constructor(t, e) {
            this.targetId = t, this.Te = e;
        }
    }

    class $t {
        constructor(
        /** What kind of change occurred to the watch target. */
        t, 
        /** The target IDs that were added/removed/set. */
        e, 
        /**
         * An opaque, server-assigned token that allows watching a target to be
         * resumed after disconnecting without retransmitting all the data that
         * matches the target. The resume token essentially identifies a point in
         * time from which the server should resume sending results.
         */
        n = at.lt
        /** An RPC error indicating why the watch failed. */ , s = null) {
            this.state = t, this.targetIds = e, this.resumeToken = n, this.cause = s;
        }
    }

    /** Tracks the internal state of a Watch target. */ class Lt {
        constructor() {
            /**
             * The number of pending responses (adds or removes) that we are waiting on.
             * We only consider targets active that have no pending responses.
             */
            this.Ie = 0, 
            /**
             * Keeps track of the document changes since the last raised snapshot.
             *
             * These changes are continuously updated as we receive document updates and
             * always reflect the current set of changes against the last issued snapshot.
             */
            this.me = Ut(), 
            /** See public getters for explanations of these fields. */
            this.Ae = at.lt, this.Re = !1, 
            /**
             * Whether this target state should be included in the next snapshot. We
             * initialize to true so that newly-added targets are included in the next
             * RemoteEvent.
             */
            this.Pe = !0;
        }
        /**
         * Whether this target has been marked 'current'.
         *
         * 'Current' has special meaning in the RPC protocol: It implies that the
         * Watch backend has sent us all changes up to the point at which the target
         * was added and that the target is consistent with the rest of the watch
         * stream.
         */    get le() {
            return this.Re;
        }
        /** The last resume token sent to us for this target. */    get resumeToken() {
            return this.Ae;
        }
        /** Whether this target has pending target adds or target removes. */    get Ve() {
            return 0 !== this.Ie;
        }
        /** Whether we have modified any state that should trigger a snapshot. */    get ge() {
            return this.Pe;
        }
        /**
         * Applies the resume token to the TargetChange, but only when it has a new
         * value. Empty resumeTokens are discarded.
         */    ye(t) {
            t.ht() > 0 && (this.Pe = !0, this.Ae = t);
        }
        /**
         * Creates a target change from the current set of changes.
         *
         * To reset the document changes after raising this snapshot, call
         * `clearPendingChanges()`.
         */    pe() {
            let t = vt(), e = vt(), n = vt();
            return this.me.forEach(((s, i) => {
                switch (i) {
                  case 0 /* Added */ :
                    t = t.add(s);
                    break;

                  case 2 /* Modified */ :
                    e = e.add(s);
                    break;

                  case 1 /* Removed */ :
                    n = n.add(s);
                    break;

                  default:
                    D$1();
                }
            })), new kt(this.Ae, this.Re, t, e, n);
        }
        /**
         * Resets the document changes and sets `hasPendingChanges` to false.
         */    be() {
            this.Pe = !1, this.me = Ut();
        }
        ve(t, e) {
            this.Pe = !0, this.me = this.me.Tt(t, e);
        }
        Se(t) {
            this.Pe = !0, this.me = this.me.remove(t);
        }
        De() {
            this.Ie += 1;
        }
        Ce() {
            this.Ie -= 1;
        }
        Ne() {
            this.Pe = !0, this.Re = !0;
        }
    }

    /**
     * A helper class to accumulate watch changes into a RemoteEvent.
     */
    class Bt {
        constructor(t) {
            this.xe = t, 
            /** The internal state of all tracked targets. */
            this.Me = new Map, 
            /** Keeps track of the documents to update since the last raised snapshot. */
            this.ke = Pt(), 
            /** A mapping of document keys to their set of target IDs. */
            this.Oe = qt(), 
            /**
             * A list of targets with existence filter mismatches. These targets are
             * known to be inconsistent and their listens needs to be re-established by
             * RemoteStore.
             */
            this.Fe = new mt(U$1);
        }
        /**
         * Processes and adds the DocumentWatchChange to the current set of changes.
         */    $e(t) {
            for (const e of t.we) t.Ee instanceof Mn ? this.Le(e, t.Ee) : t.Ee instanceof kn && this.Be(e, t.key, t.Ee);
            for (const e of t.removedTargetIds) this.Be(e, t.key, t.Ee);
        }
        /** Processes and adds the WatchTargetChange to the current set of changes. */    qe(t) {
            this.Ue(t, (e => {
                const n = this.Ke(e);
                switch (t.state) {
                  case 0 /* NoChange */ :
                    this.Qe(e) && n.ye(t.resumeToken);
                    break;

                  case 1 /* Added */ :
                    // We need to decrement the number of pending acks needed from watch
                    // for this targetId.
                    n.Ce(), n.Ve || 
                    // We have a freshly added target, so we need to reset any state
                    // that we had previously. This can happen e.g. when remove and add
                    // back a target for existence filter mismatches.
                    n.be(), n.ye(t.resumeToken);
                    break;

                  case 2 /* Removed */ :
                    // We need to keep track of removed targets to we can post-filter and
                    // remove any target changes.
                    // We need to decrement the number of pending acks needed from watch
                    // for this targetId.
                    n.Ce(), n.Ve || this.removeTarget(e);
                    break;

                  case 3 /* Current */ :
                    this.Qe(e) && (n.Ne(), n.ye(t.resumeToken));
                    break;

                  case 4 /* Reset */ :
                    this.Qe(e) && (
                    // Reset the target and synthesizes removes for all existing
                    // documents. The backend will re-add any documents that still
                    // match the target before it sends the next global snapshot.
                    this.We(e), n.ye(t.resumeToken));
                    break;

                  default:
                    D$1();
                }
            }));
        }
        /**
         * Iterates over all targetIds that the watch change applies to: either the
         * targetIds explicitly listed in the change or the targetIds of all currently
         * active targets.
         */    Ue(t, e) {
            t.targetIds.length > 0 ? t.targetIds.forEach(e) : this.Me.forEach(((t, n) => {
                this.Qe(n) && e(n);
            }));
        }
        /**
         * Handles existence filters and synthesizes deletes for filter mismatches.
         * Targets that are invalidated by filter mismatches are added to
         * `pendingTargetResets`.
         */    je(t) {
            const e = t.targetId, n = t.Te.count, s = this.Ge(e);
            if (s) {
                const t = s.target;
                if (ut(t)) if (0 === n) {
                    // The existence filter told us the document does not exist. We deduce
                    // that this document does not exist and apply a deleted document to
                    // our updates. Without applying this deleted document there might be
                    // another query that will raise this document as part of a snapshot
                    // until it is resolved, essentially exposing inconsistency between
                    // queries.
                    const n = new Y$1(t.path);
                    this.Be(e, n, new kn(n, j.min()));
                } else C(1 === n); else {
                    this.ze(e) !== n && (
                    // Existence filter mismatch: We reset the mapping and raise a new
                    // snapshot with `isFromCache:true`.
                    this.We(e), this.Fe = this.Fe.add(e));
                }
            }
        }
        /**
         * Converts the currently accumulated state into a remote event at the
         * provided snapshot version. Resets the accumulated changes before returning.
         */    He(t) {
            const e = new Map;
            this.Me.forEach(((n, s) => {
                const i = this.Ge(s);
                if (i) {
                    if (n.le && ut(i.target)) {
                        // Document queries for document that don't exist can produce an empty
                        // result set. To update our local cache, we synthesize a document
                        // delete if we have not previously received the document. This
                        // resolves the limbo state of the document, removing it from
                        // limboDocumentRefs.
                        // TODO(dimond): Ideally we would have an explicit lookup target
                        // instead resulting in an explicit delete message and we could
                        // remove this special logic.
                        const e = new Y$1(i.target.path);
                        null !== this.ke.get(e) || this.Je(s, e) || this.Be(s, e, new kn(e, t));
                    }
                    n.ge && (e.set(s, n.pe()), n.be());
                }
            }));
            let n = vt();
            // We extract the set of limbo-only document updates as the GC logic
            // special-cases documents that do not appear in the target cache.
            
            // TODO(gsoltis): Expand on this comment once GC is available in the JS
            // client.
                    this.Oe.forEach(((t, e) => {
                let s = !0;
                e.Wt((t => {
                    const e = this.Ge(t);
                    return !e || 2 /* LimboResolution */ === e._t || (s = !1, !1);
                })), s && (n = n.add(t));
            }));
            const s = new Mt(t, e, this.Fe, this.ke, n);
            return this.ke = Pt(), this.Oe = qt(), this.Fe = new mt(U$1), s;
        }
        /**
         * Adds the provided document to the internal list of document updates and
         * its document key to the given target's mapping.
         */
        // Visible for testing.
        Le(t, e) {
            if (!this.Qe(t)) return;
            const n = this.Je(t, e.key) ? 2 /* Modified */ : 0 /* Added */;
            this.Ke(t).ve(e.key, n), this.ke = this.ke.Tt(e.key, e), this.Oe = this.Oe.Tt(e.key, this.Ye(e.key).add(t));
        }
        /**
         * Removes the provided document from the target mapping. If the
         * document no longer matches the target, but the document's state is still
         * known (e.g. we know that the document was deleted or we received the change
         * that caused the filter mismatch), the new document can be provided
         * to update the remote document cache.
         */
        // Visible for testing.
        Be(t, e, n) {
            if (!this.Qe(t)) return;
            const s = this.Ke(t);
            this.Je(t, e) ? s.ve(e, 1 /* Removed */) : 
            // The document may have entered and left the target before we raised a
            // snapshot, so we can just ignore the change.
            s.Se(e), this.Oe = this.Oe.Tt(e, this.Ye(e).delete(t)), n && (this.ke = this.ke.Tt(e, n));
        }
        removeTarget(t) {
            this.Me.delete(t);
        }
        /**
         * Returns the current count of documents in the target. This includes both
         * the number of documents that the LocalStore considers to be part of the
         * target as well as any accumulated changes.
         */    ze(t) {
            const e = this.Ke(t).pe();
            return this.xe.Xe(t).size + e._e.size - e.de.size;
        }
        /**
         * Increment the number of acks needed from watch before we can consider the
         * server to be 'in-sync' with the client's active targets.
         */    De(t) {
            this.Ke(t).De();
        }
        Ke(t) {
            let e = this.Me.get(t);
            return e || (e = new Lt, this.Me.set(t, e)), e;
        }
        Ye(t) {
            let e = this.Oe.get(t);
            return e || (e = new mt(U$1), this.Oe = this.Oe.Tt(t, e)), e;
        }
        /**
         * Verifies that the user is still interested in this target (by calling
         * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
         * from watch.
         */    Qe(t) {
            const e = null !== this.Ge(t);
            return e || p$1("WatchChangeAggregator", "Detected inactive target", t), e;
        }
        /**
         * Returns the TargetData for an active target (i.e. a target that the user
         * is still interested in that has no outstanding target change requests).
         */    Ge(t) {
            const e = this.Me.get(t);
            return e && e.Ve ? null : this.xe.Ze(t);
        }
        /**
         * Resets the state of a Watch target to its initial state (e.g. sets
         * 'current' to false, clears the resume token and removes its target mapping
         * from all documents).
         */    We(t) {
            this.Me.set(t, new Lt);
            this.xe.Xe(t).forEach((e => {
                this.Be(t, e, /*updatedDocument=*/ null);
            }));
        }
        /**
         * Returns whether the LocalStore considers the document to be part of the
         * specified target.
         */    Je(t, e) {
            return this.xe.Xe(t).has(e);
        }
    }

    function qt() {
        return new Et(Y$1.k);
    }

    function Ut() {
        return new Et(Y$1.k);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function Kt(t) {
        let e = 0;
        for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && e++;
        return e;
    }

    function Qt(t, e) {
        for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);
    }

    function Wt(t) {
        for (const e in t) if (Object.prototype.hasOwnProperty.call(t, e)) return !1;
        return !0;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents a locally-applied ServerTimestamp.
     *
     * Server Timestamps are backed by MapValues that contain an internal field
     * `__type__` with a value of `server_timestamp`. The previous value and local
     * write time are stored in its `__previous_value__` and `__local_write_time__`
     * fields respectively.
     *
     * Notes:
     * - ServerTimestampValue instances are created as the result of applying a
     *   TransformMutation (see TransformMutation.applyTo()). They can only exist in
     *   the local view of a document. Therefore they do not need to be parsed or
     *   serialized.
     * - When evaluated locally (e.g. for snapshot.data()), they by default
     *   evaluate to `null`. This behavior can be configured by passing custom
     *   FieldValueOptions to value().
     * - With respect to other ServerTimestampValues, they sort by their
     *   localWriteTime.
     */ function jt(t) {
        var e, n;
        return "server_timestamp" === (null === (n = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === n ? void 0 : n.stringValue);
    }

    /**
     * Creates a new ServerTimestamp proto value (using the internal format).
     */
    /**
     * Returns the value of the field before this ServerTimestamp was set.
     *
     * Preserving the previous values allows the user to display the last resoled
     * value until the backend responds with the timestamp.
     */
    function Gt(t) {
        const e = t.mapValue.fields.__previous_value__;
        return jt(e) ? Gt(e) : e;
    }

    /**
     * Returns the local time at which this timestamp was first set.
     */ function zt(t) {
        const e = se(t.mapValue.fields.__local_write_time__.timestampValue);
        return new W$1(e.seconds, e.nanos);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // A RegExp matching ISO 8601 UTC timestamps with optional fraction.
    const Ht = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);

    /** Extracts the backend's type order for the provided value. */ function Jt(t) {
        return "nullValue" in t ? 0 /* NullValue */ : "booleanValue" in t ? 1 /* BooleanValue */ : "integerValue" in t || "doubleValue" in t ? 2 /* NumberValue */ : "timestampValue" in t ? 3 /* TimestampValue */ : "stringValue" in t ? 5 /* StringValue */ : "bytesValue" in t ? 6 /* BlobValue */ : "referenceValue" in t ? 7 /* RefValue */ : "geoPointValue" in t ? 8 /* GeoPointValue */ : "arrayValue" in t ? 9 /* ArrayValue */ : "mapValue" in t ? jt(t) ? 4 /* ServerTimestampValue */ : 10 /* ObjectValue */ : D$1();
    }

    /** Tests `left` and `right` for equality based on the backend semantics. */ function Yt(t, e) {
        const n = Jt(t);
        if (n !== Jt(e)) return !1;
        switch (n) {
          case 0 /* NullValue */ :
            return !0;

          case 1 /* BooleanValue */ :
            return t.booleanValue === e.booleanValue;

          case 4 /* ServerTimestampValue */ :
            return zt(t).isEqual(zt(e));

          case 3 /* TimestampValue */ :
            return function(t, e) {
                if ("string" == typeof t.timestampValue && "string" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) 
                // Use string equality for ISO 8601 timestamps
                return t.timestampValue === e.timestampValue;
                const n = se(t.timestampValue), s = se(e.timestampValue);
                return n.seconds === s.seconds && n.nanos === s.nanos;
            }(t, e);

          case 5 /* StringValue */ :
            return t.stringValue === e.stringValue;

          case 6 /* BlobValue */ :
            return function(t, e) {
                return re(t.bytesValue).isEqual(re(e.bytesValue));
            }(t, e);

          case 7 /* RefValue */ :
            return t.referenceValue === e.referenceValue;

          case 8 /* GeoPointValue */ :
            return function(t, e) {
                return ie(t.geoPointValue.latitude) === ie(e.geoPointValue.latitude) && ie(t.geoPointValue.longitude) === ie(e.geoPointValue.longitude);
            }(t, e);

          case 2 /* NumberValue */ :
            return function(t, e) {
                if ("integerValue" in t && "integerValue" in e) return ie(t.integerValue) === ie(e.integerValue);
                if ("doubleValue" in t && "doubleValue" in e) {
                    const n = ie(t.doubleValue), s = ie(e.doubleValue);
                    return n === s ? et(n) === et(s) : isNaN(n) && isNaN(s);
                }
                return !1;
            }(t, e);

          case 9 /* ArrayValue */ :
            return K$1(t.arrayValue.values || [], e.arrayValue.values || [], Yt);

          case 10 /* ObjectValue */ :
            return function(t, e) {
                const n = t.mapValue.fields || {}, s = e.mapValue.fields || {};
                if (Kt(n) !== Kt(s)) return !1;
                for (const t in n) if (n.hasOwnProperty(t) && (void 0 === s[t] || !Yt(n[t], s[t]))) return !1;
                return !0;
            }
            /** Returns true if the ArrayValue contains the specified element. */ (t, e);

          default:
            return D$1();
        }
    }

    function Xt(t, e) {
        return void 0 !== (t.values || []).find((t => Yt(t, e)));
    }

    function Zt(t, e) {
        const n = Jt(t), s = Jt(e);
        if (n !== s) return U$1(n, s);
        switch (n) {
          case 0 /* NullValue */ :
            return 0;

          case 1 /* BooleanValue */ :
            return U$1(t.booleanValue, e.booleanValue);

          case 2 /* NumberValue */ :
            return function(t, e) {
                const n = ie(t.integerValue || t.doubleValue), s = ie(e.integerValue || e.doubleValue);
                return n < s ? -1 : n > s ? 1 : n === s ? 0 : 
                // one or both are NaN.
                isNaN(n) ? isNaN(s) ? 0 : -1 : 1;
            }(t, e);

          case 3 /* TimestampValue */ :
            return te(t.timestampValue, e.timestampValue);

          case 4 /* ServerTimestampValue */ :
            return te(zt(t), zt(e));

          case 5 /* StringValue */ :
            return U$1(t.stringValue, e.stringValue);

          case 6 /* BlobValue */ :
            return function(t, e) {
                const n = re(t), s = re(e);
                return n.D(s);
            }(t.bytesValue, e.bytesValue);

          case 7 /* RefValue */ :
            return function(t, e) {
                const n = t.split("/"), s = e.split("/");
                for (let t = 0; t < n.length && t < s.length; t++) {
                    const e = U$1(n[t], s[t]);
                    if (0 !== e) return e;
                }
                return U$1(n.length, s.length);
            }(t.referenceValue, e.referenceValue);

          case 8 /* GeoPointValue */ :
            return function(t, e) {
                const n = U$1(ie(t.latitude), ie(e.latitude));
                if (0 !== n) return n;
                return U$1(ie(t.longitude), ie(e.longitude));
            }(t.geoPointValue, e.geoPointValue);

          case 9 /* ArrayValue */ :
            return function(t, e) {
                const n = t.values || [], s = e.values || [];
                for (let t = 0; t < n.length && t < s.length; ++t) {
                    const e = Zt(n[t], s[t]);
                    if (e) return e;
                }
                return U$1(n.length, s.length);
            }(t.arrayValue, e.arrayValue);

          case 10 /* ObjectValue */ :
            return function(t, e) {
                const n = t.fields || {}, s = Object.keys(n), i = e.fields || {}, r = Object.keys(i);
                // Even though MapValues are likely sorted correctly based on their insertion
                // order (e.g. when received from the backend), local modifications can bring
                // elements out of order. We need to re-sort the elements to ensure that
                // canonical IDs are independent of insertion order.
                s.sort(), r.sort();
                for (let t = 0; t < s.length && t < r.length; ++t) {
                    const e = U$1(s[t], r[t]);
                    if (0 !== e) return e;
                    const o = Zt(n[s[t]], i[r[t]]);
                    if (0 !== o) return o;
                }
                return U$1(s.length, r.length);
            }
            /**
     * Generates the canonical ID for the provided field value (as used in Target
     * serialization).
     */ (t.mapValue, e.mapValue);

          default:
            throw D$1();
        }
    }

    function te(t, e) {
        if ("string" == typeof t && "string" == typeof e && t.length === e.length) return U$1(t, e);
        const n = se(t), s = se(e), i = U$1(n.seconds, s.seconds);
        return 0 !== i ? i : U$1(n.nanos, s.nanos);
    }

    function ee(t) {
        return ne(t);
    }

    function ne(t) {
        return "nullValue" in t ? "null" : "booleanValue" in t ? "" + t.booleanValue : "integerValue" in t ? "" + t.integerValue : "doubleValue" in t ? "" + t.doubleValue : "timestampValue" in t ? function(t) {
            const e = se(t);
            return `time(${e.seconds},${e.nanos})`;
        }(t.timestampValue) : "stringValue" in t ? t.stringValue : "bytesValue" in t ? re(t.bytesValue).toBase64() : "referenceValue" in t ? (n = t.referenceValue, 
        Y$1.et(n).toString()) : "geoPointValue" in t ? `geo(${(e = t.geoPointValue).latitude},${e.longitude})` : "arrayValue" in t ? function(t) {
            let e = "[", n = !0;
            for (const s of t.values || []) n ? n = !1 : e += ",", e += ne(s);
            return e + "]";
        }
        /**
     * Converts the possible Proto values for a timestamp value into a "seconds and
     * nanos" representation.
     */ (t.arrayValue) : "mapValue" in t ? function(t) {
            // Iteration order in JavaScript is not guaranteed. To ensure that we generate
            // matching canonical IDs for identical maps, we need to sort the keys.
            const e = Object.keys(t.fields || {}).sort();
            let n = "{", s = !0;
            for (const i of e) s ? s = !1 : n += ",", n += `${i}:${ne(t.fields[i])}`;
            return n + "}";
        }(t.mapValue) : D$1();
        var e, n;
    }

    function se(t) {
        // The json interface (for the browser) will return an iso timestamp string,
        // while the proto js library (for node) will return a
        // google.protobuf.Timestamp instance.
        if (C(!!t), "string" == typeof t) {
            // The date string can have higher precision (nanos) than the Date class
            // (millis), so we do some custom parsing here.
            // Parse the nanos right out of the string.
            let e = 0;
            const n = Ht.exec(t);
            if (C(!!n), n[1]) {
                // Pad the fraction out to 9 digits (nanos).
                let t = n[1];
                t = (t + "000000000").substr(0, 9), e = Number(t);
            }
            // Parse the date to get the seconds.
                    const s = new Date(t);
            return {
                seconds: Math.floor(s.getTime() / 1e3),
                nanos: e
            };
        }
        return {
            seconds: ie(t.seconds),
            nanos: ie(t.nanos)
        };
    }

    /**
     * Converts the possible Proto types for numbers into a JavaScript number.
     * Returns 0 if the value is not numeric.
     */ function ie(t) {
        // TODO(bjornick): Handle int64 greater than 53 bits.
        return "number" == typeof t ? t : "string" == typeof t ? Number(t) : 0;
    }

    /** Converts the possible Proto types for Blobs into a ByteString. */ function re(t) {
        return "string" == typeof t ? at.fromBase64String(t) : at.fromUint8Array(t);
    }

    /** Returns a reference value for the provided database and key. */ function oe(t, e) {
        return {
            referenceValue: `projects/${t.projectId}/databases/${t.database}/documents/${e.path.j()}`
        };
    }

    /** Returns true if `value` is an IntegerValue . */ function ce(t) {
        return !!t && "integerValue" in t;
    }

    /** Returns true if `value` is a DoubleValue. */
    /** Returns true if `value` is an ArrayValue. */
    function ue(t) {
        return !!t && "arrayValue" in t;
    }

    /** Returns true if `value` is a NullValue. */ function ae(t) {
        return !!t && "nullValue" in t;
    }

    /** Returns true if `value` is NaN. */ function he(t) {
        return !!t && "doubleValue" in t && isNaN(Number(t.doubleValue));
    }

    /** Returns true if `value` is a MapValue. */ function le(t) {
        return !!t && "mapValue" in t;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const _e = (() => {
        const t = {
            asc: "ASCENDING",
            desc: "DESCENDING"
        };
        return t;
    })(), fe = (() => {
        const t = {
            "<": "LESS_THAN",
            "<=": "LESS_THAN_OR_EQUAL",
            ">": "GREATER_THAN",
            ">=": "GREATER_THAN_OR_EQUAL",
            "==": "EQUAL",
            "!=": "NOT_EQUAL",
            "array-contains": "ARRAY_CONTAINS",
            in: "IN",
            "not-in": "NOT_IN",
            "array-contains-any": "ARRAY_CONTAINS_ANY"
        };
        return t;
    })();

    /**
     * This class generates JsonObject values for the Datastore API suitable for
     * sending to either GRPC stub methods or via the JSON/HTTP REST API.
     *
     * The serializer supports both Protobuf.js and Proto3 JSON formats. By
     * setting `useProto3Json` to true, the serializer will use the Proto3 JSON
     * format.
     *
     * For a description of the Proto3 JSON format check
     * https://developers.google.com/protocol-buffers/docs/proto3#json
     *
     * TODO(klimt): We can remove the databaseId argument if we keep the full
     * resource name in documents.
     */
    class de {
        constructor(t, e) {
            this.rt = t, this.tn = e;
        }
    }

    /**
     * Returns an IntegerValue for `value`.
     */
    function we(t) {
        return {
            integerValue: "" + t
        };
    }

    /**
     * Returns an DoubleValue for `value` that is encoded based the serializer's
     * `useProto3Json` setting.
     */ function Ee(t, e) {
        if (t.tn) {
            if (isNaN(e)) return {
                doubleValue: "NaN"
            };
            if (e === 1 / 0) return {
                doubleValue: "Infinity"
            };
            if (e === -1 / 0) return {
                doubleValue: "-Infinity"
            };
        }
        return {
            doubleValue: et(e) ? "-0" : e
        };
    }

    /**
     * Returns a value for a number that's appropriate to put into a proto.
     * The return value is an IntegerValue if it can safely represent the value,
     * otherwise a DoubleValue is returned.
     */ function Te(t, e) {
        return nt(e) ? we(e) : Ee(t, e);
    }

    /**
     * Returns a value for a Date that's appropriate to put into a proto.
     */ function Ie(t, e) {
        if (t.tn) {
            return `${new Date(1e3 * e.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "")}.${("000000000" + e.nanoseconds).slice(-9)}Z`;
        }
        return {
            seconds: "" + e.seconds,
            nanos: e.nanoseconds
        };
    }

    /**
     * Returns a value for bytes that's appropriate to put in a proto.
     *
     * Visible for testing.
     */
    function me(t, e) {
        return t.tn ? e.toBase64() : e.toUint8Array();
    }

    /**
     * Returns a ByteString based on the proto string value.
     */ function Ae(t, e) {
        return Ie(t, e.N());
    }

    function Re(t) {
        return C(!!t), j.S(function(t) {
            const e = se(t);
            return new W$1(e.seconds, e.nanos);
        }(t));
    }

    function Pe(t, e) {
        return function(t) {
            return new z$1([ "projects", t.projectId, "databases", t.database ]);
        }(t).child("documents").child(e).j();
    }

    function Ve(t) {
        const e = z$1.G(t);
        return C(Je(e)), e;
    }

    function ge(t, e) {
        return Pe(t.rt, e.path);
    }

    function ye(t, e) {
        const n = Ve(e);
        if (n.get(1) !== t.rt.projectId) throw new M$1(x$1.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + n.get(1) + " vs " + t.rt.projectId);
        if (n.get(3) !== t.rt.database) throw new M$1(x$1.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + n.get(3) + " vs " + t.rt.database);
        return new Y$1(Se(n));
    }

    function pe(t, e) {
        return Pe(t.rt, e);
    }

    function be(t) {
        const e = Ve(t);
        // In v1beta1 queries for collections at the root did not have a trailing
        // "/documents". In v1 all resource paths contain "/documents". Preserve the
        // ability to read the v1beta1 form for compatibility with queries persisted
        // in the local target cache.
            return 4 === e.length ? z$1.H() : Se(e);
    }

    function ve(t) {
        return new z$1([ "projects", t.rt.projectId, "databases", t.rt.database ]).j();
    }

    function Se(t) {
        return C(t.length > 4 && "documents" === t.get(4)), t.F(5);
    }

    /** Creates a Document proto from key and fields (but no create/update time) */ function De(t, e, n) {
        return {
            name: ge(t, e),
            fields: n.proto.mapValue.fields
        };
    }

    function Ce(t, e) {
        return "found" in e ? function(t, e) {
            C(!!e.found), e.found.name, e.found.updateTime;
            const n = ye(t, e.found.name), s = Re(e.found.updateTime), i = new Dn({
                mapValue: {
                    fields: e.found.fields
                }
            });
            return new Mn(n, s, i, {});
        }(t, e) : "missing" in e ? function(t, e) {
            C(!!e.missing), C(!!e.readTime);
            const n = ye(t, e.missing), s = Re(e.readTime);
            return new kn(n, s);
        }(t, e) : D$1();
    }

    function Ne(t, e) {
        let n;
        if ("targetChange" in e) {
            e.targetChange;
            // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'
            // if unset
            const s = function(t) {
                return "NO_CHANGE" === t ? 0 /* NoChange */ : "ADD" === t ? 1 /* Added */ : "REMOVE" === t ? 2 /* Removed */ : "CURRENT" === t ? 3 /* Current */ : "RESET" === t ? 4 /* Reset */ : D$1();
            }(e.targetChange.targetChangeType || "NO_CHANGE"), i = e.targetChange.targetIds || [], r = function(t, e) {
                return t.tn ? (C(void 0 === e || "string" == typeof e), at.fromBase64String(e || "")) : (C(void 0 === e || e instanceof Uint8Array), 
                at.fromUint8Array(e || new Uint8Array));
            }(t, e.targetChange.resumeToken), o = e.targetChange.cause, c = o && function(t) {
                const e = void 0 === t.code ? x$1.UNKNOWN : wt(t.code);
                return new M$1(e, t.message || "");
            }
            /**
     * Returns a value for a number (or null) that's appropriate to put into
     * a google.protobuf.Int32Value proto.
     * DO NOT USE THIS FOR ANYTHING ELSE.
     * This method cheats. It's typed as returning "number" because that's what
     * our generated proto interfaces say Int32Value must be. But GRPC actually
     * expects a { value: <number> } struct.
     */ (o);
            n = new $t(s, i, r, c || null);
        } else if ("documentChange" in e) {
            e.documentChange;
            const s = e.documentChange;
            s.document, s.document.name, s.document.updateTime;
            const i = ye(t, s.document.name), r = Re(s.document.updateTime), o = new Dn({
                mapValue: {
                    fields: s.document.fields
                }
            }), c = new Mn(i, r, o, {}), u = s.targetIds || [], a = s.removedTargetIds || [];
            n = new Ot(u, a, c.key, c);
        } else if ("documentDelete" in e) {
            e.documentDelete;
            const s = e.documentDelete;
            s.document;
            const i = ye(t, s.document), r = s.readTime ? Re(s.readTime) : j.min(), o = new kn(i, r), c = s.removedTargetIds || [];
            n = new Ot([], c, o.key, o);
        } else if ("documentRemove" in e) {
            e.documentRemove;
            const s = e.documentRemove;
            s.document;
            const i = ye(t, s.document), r = s.removedTargetIds || [];
            n = new Ot([], r, i, null);
        } else {
            if (!("filter" in e)) return D$1();
            {
                e.filter;
                const t = e.filter;
                t.targetId;
                const s = t.count || 0, i = new lt(s), r = t.targetId;
                n = new Ft(r, i);
            }
        }
        return n;
    }

    function xe(t, e) {
        let n;
        if (e instanceof Pn) n = {
            update: De(t, e.key, e.value)
        }; else if (e instanceof vn) n = {
            delete: ge(t, e.key)
        }; else if (e instanceof Vn) n = {
            update: De(t, e.key, e.data),
            updateMask: He(e.en)
        }; else if (e instanceof yn) n = {
            transform: {
                document: ge(t, e.key),
                fieldTransforms: e.fieldTransforms.map((t => function(t, e) {
                    const n = e.transform;
                    if (n instanceof en) return {
                        fieldPath: e.field.j(),
                        setToServerValue: "REQUEST_TIME"
                    };
                    if (n instanceof nn) return {
                        fieldPath: e.field.j(),
                        appendMissingElements: {
                            values: n.elements
                        }
                    };
                    if (n instanceof rn) return {
                        fieldPath: e.field.j(),
                        removeAllFromArray: {
                            values: n.elements
                        }
                    };
                    if (n instanceof cn) return {
                        fieldPath: e.field.j(),
                        increment: n.nn
                    };
                    throw D$1();
                }(0, t)))
            }
        }; else {
            if (!(e instanceof Sn)) return D$1();
            n = {
                verify: ge(t, e.key)
            };
        }
        return e.rn.sn || (n.currentDocument = function(t, e) {
            return void 0 !== e.updateTime ? {
                updateTime: Ae(t, e.updateTime)
            } : void 0 !== e.exists ? {
                exists: e.exists
            } : D$1();
        }(t, e.rn)), n;
    }

    function Me(t, e) {
        const n = e.currentDocument ? function(t) {
            return void 0 !== t.updateTime ? dn.updateTime(Re(t.updateTime)) : void 0 !== t.exists ? dn.exists(t.exists) : dn.on();
        }(e.currentDocument) : dn.on();
        if (e.update) {
            e.update.name;
            const s = ye(t, e.update.name), i = new Dn({
                mapValue: {
                    fields: e.update.fields
                }
            });
            if (e.updateMask) {
                const t = function(t) {
                    const e = t.fieldPaths || [];
                    return new hn(e.map((t => J$1.Z(t))));
                }(e.updateMask);
                return new Vn(s, i, t, n);
            }
            return new Pn(s, i, n);
        }
        if (e.delete) {
            const s = ye(t, e.delete);
            return new vn(s, n);
        }
        if (e.transform) {
            const s = ye(t, e.transform.document), i = e.transform.fieldTransforms.map((e => function(t, e) {
                let n = null;
                if ("setToServerValue" in e) C("REQUEST_TIME" === e.setToServerValue), n = new en; else if ("appendMissingElements" in e) {
                    const t = e.appendMissingElements.values || [];
                    n = new nn(t);
                } else if ("removeAllFromArray" in e) {
                    const t = e.removeAllFromArray.values || [];
                    n = new rn(t);
                } else "increment" in e ? n = new cn(t, e.increment) : D$1();
                const s = J$1.Z(e.fieldPath);
                return new ln(s, n);
            }(t, e)));
            return C(!0 === n.exists), new yn(s, i);
        }
        if (e.verify) {
            const s = ye(t, e.verify);
            return new Sn(s, n);
        }
        return D$1();
    }

    function ke(t, e) {
        return t && t.length > 0 ? (C(void 0 !== e), t.map((t => function(t, e) {
            // NOTE: Deletes don't have an updateTime.
            let n = t.updateTime ? Re(t.updateTime) : Re(e);
            n.isEqual(j.min()) && (
            // The Firestore Emulator currently returns an update time of 0 for
            // deletes of non-existing documents (rather than null). This breaks the
            // test "get deleted doc while offline with source=cache" as NoDocuments
            // with version 0 are filtered by IndexedDb's RemoteDocumentCache.
            // TODO(#2149): Remove this when Emulator is fixed
            n = Re(e));
            let s = null;
            return t.transformResults && t.transformResults.length > 0 && (s = t.transformResults), 
            new fn(n, s);
        }(t, e)))) : [];
    }

    function Oe(t, e) {
        return {
            documents: [ pe(t, e.path) ]
        };
    }

    function Fe(t, e) {
        // Dissect the path into parent, collectionId, and optional key filter.
        const n = {
            structuredQuery: {}
        }, s = e.path;
        null !== e.collectionGroup ? (n.parent = pe(t, s), n.structuredQuery.from = [ {
            collectionId: e.collectionGroup,
            allDescendants: !0
        } ]) : (n.parent = pe(t, s.$()), n.structuredQuery.from = [ {
            collectionId: s.B()
        } ]);
        const i = function(t) {
            if (0 === t.length) return;
            const e = t.map((t => 
            // visible for testing
            function(t) {
                if ("==" /* EQUAL */ === t.op) {
                    if (he(t.value)) return {
                        unaryFilter: {
                            field: We(t.field),
                            op: "IS_NAN"
                        }
                    };
                    if (ae(t.value)) return {
                        unaryFilter: {
                            field: We(t.field),
                            op: "IS_NULL"
                        }
                    };
                } else if ("!=" /* NOT_EQUAL */ === t.op) {
                    if (he(t.value)) return {
                        unaryFilter: {
                            field: We(t.field),
                            op: "IS_NOT_NAN"
                        }
                    };
                    if (ae(t.value)) return {
                        unaryFilter: {
                            field: We(t.field),
                            op: "IS_NOT_NULL"
                        }
                    };
                }
                return {
                    fieldFilter: {
                        field: We(t.field),
                        op: Qe(t.op),
                        value: t.value
                    }
                };
            }(t)));
            if (1 === e.length) return e[0];
            return {
                compositeFilter: {
                    op: "AND",
                    filters: e
                }
            };
        }(e.filters);
        i && (n.structuredQuery.where = i);
        const r = function(t) {
            if (0 === t.length) return;
            return t.map((t => 
            // visible for testing
            function(t) {
                return {
                    field: We(t.field),
                    direction: Ke(t.dir)
                };
            }(t)));
        }(e.orderBy);
        r && (n.structuredQuery.orderBy = r);
        const o = function(t, e) {
            return t.tn || tt(e) ? e : {
                value: e
            };
        }
        /**
     * Returns a number (or null) from a google.protobuf.Int32Value proto.
     */ (t, e.limit);
        return null !== o && (n.structuredQuery.limit = o), e.startAt && (n.structuredQuery.startAt = qe(e.startAt)), 
        e.endAt && (n.structuredQuery.endAt = qe(e.endAt)), n;
    }

    function $e(t) {
        let e = be(t.parent);
        const n = t.structuredQuery, s = n.from ? n.from.length : 0;
        let i = null;
        if (s > 0) {
            C(1 === s);
            const t = n.from[0];
            t.allDescendants ? i = t.collectionId : e = e.child(t.collectionId);
        }
        let r = [];
        n.where && (r = Be(n.where));
        let o = [];
        n.orderBy && (o = n.orderBy.map((t => function(t) {
            return new fs(je(t.field), 
            // visible for testing
            function(t) {
                switch (t) {
                  case "ASCENDING":
                    return "asc" /* ASCENDING */;

                  case "DESCENDING":
                    return "desc" /* DESCENDING */;

                  default:
                    return;
                }
            }
            // visible for testing
            (t.direction));
        }(t))));
        let c = null;
        n.limit && (c = function(t) {
            let e;
            return e = "object" == typeof t ? t.value : t, tt(e) ? null : e;
        }(n.limit));
        let u = null;
        n.startAt && (u = Ue(n.startAt));
        let a = null;
        return n.endAt && (a = Ue(n.endAt)), $n(e, i, o, r, c, "F" /* First */ , u, a);
    }

    function Le(t, e) {
        const n = function(t, e) {
            switch (e) {
              case 0 /* Listen */ :
                return null;

              case 1 /* ExistenceFilterMismatch */ :
                return "existence-filter-mismatch";

              case 2 /* LimboResolution */ :
                return "limbo-document";

              default:
                return D$1();
            }
        }(0, e._t);
        return null == n ? null : {
            "goog-listen-tags": n
        };
    }

    function Be(t) {
        return t ? void 0 !== t.unaryFilter ? [ ze(t) ] : void 0 !== t.fieldFilter ? [ Ge(t) ] : void 0 !== t.compositeFilter ? t.compositeFilter.filters.map((t => Be(t))).reduce(((t, e) => t.concat(e))) : D$1() : [];
    }

    function qe(t) {
        return {
            before: t.before,
            values: t.position
        };
    }

    function Ue(t) {
        const e = !!t.before, n = t.values || [];
        return new as(n, e);
    }

    // visible for testing
    function Ke(t) {
        return _e[t];
    }

    function Qe(t) {
        return fe[t];
    }

    function We(t) {
        return {
            fieldPath: t.j()
        };
    }

    function je(t) {
        return J$1.Z(t.fieldPath);
    }

    function Ge(t) {
        return Zn.create(je(t.fieldFilter.field), function(t) {
            switch (t) {
              case "EQUAL":
                return "==" /* EQUAL */;

              case "NOT_EQUAL":
                return "!=" /* NOT_EQUAL */;

              case "GREATER_THAN":
                return ">" /* GREATER_THAN */;

              case "GREATER_THAN_OR_EQUAL":
                return ">=" /* GREATER_THAN_OR_EQUAL */;

              case "LESS_THAN":
                return "<" /* LESS_THAN */;

              case "LESS_THAN_OR_EQUAL":
                return "<=" /* LESS_THAN_OR_EQUAL */;

              case "ARRAY_CONTAINS":
                return "array-contains" /* ARRAY_CONTAINS */;

              case "IN":
                return "in" /* IN */;

              case "NOT_IN":
                return "not-in" /* NOT_IN */;

              case "ARRAY_CONTAINS_ANY":
                return "array-contains-any" /* ARRAY_CONTAINS_ANY */;

              case "OPERATOR_UNSPECIFIED":
              default:
                return D$1();
            }
        }(t.fieldFilter.op), t.fieldFilter.value);
    }

    function ze(t) {
        switch (t.unaryFilter.op) {
          case "IS_NAN":
            const e = je(t.unaryFilter.field);
            return Zn.create(e, "==" /* EQUAL */ , {
                doubleValue: NaN
            });

          case "IS_NULL":
            const n = je(t.unaryFilter.field);
            return Zn.create(n, "==" /* EQUAL */ , {
                nullValue: "NULL_VALUE"
            });

          case "IS_NOT_NAN":
            const s = je(t.unaryFilter.field);
            return Zn.create(s, "!=" /* NOT_EQUAL */ , {
                doubleValue: NaN
            });

          case "IS_NOT_NULL":
            const i = je(t.unaryFilter.field);
            return Zn.create(i, "!=" /* NOT_EQUAL */ , {
                nullValue: "NULL_VALUE"
            });

          case "OPERATOR_UNSPECIFIED":
          default:
            return D$1();
        }
    }

    function He(t) {
        const e = [];
        return t.fields.forEach((t => e.push(t.j()))), {
            fieldPaths: e
        };
    }

    function Je(t) {
        // Resource names have at least 4 components (project ID, database ID)
        return t.length >= 4 && "projects" === t.get(0) && "databases" === t.get(2);
    }

    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Represents a transform within a TransformMutation. */ class Ye {
        constructor() {
            // Make sure that the structural type of `TransformOperation` is unique.
            // See https://github.com/microsoft/TypeScript/issues/5451
            this.cn = void 0;
        }
    }

    /**
     * Computes the local transform result against the provided `previousValue`,
     * optionally using the provided localWriteTime.
     */ function Xe(t, e, n) {
        return t instanceof en ? function(t, e) {
            const n = {
                fields: {
                    __type__: {
                        stringValue: "server_timestamp"
                    },
                    __local_write_time__: {
                        timestampValue: {
                            seconds: t.seconds,
                            nanos: t.nanoseconds
                        }
                    }
                }
            };
            return e && (n.fields.__previous_value__ = e), {
                mapValue: n
            };
        }(n, e) : t instanceof nn ? sn(t, e) : t instanceof rn ? on(t, e) : function(t, e) {
            // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit
            // precision and resolves overflows by reducing precision, we do not
            // manually cap overflows at 2^63.
            const n = tn(t, e), s = un(n) + un(t.nn);
            return ce(n) && ce(t.nn) ? we(s) : Ee(t.serializer, s);
        }(t, e);
    }

    /**
     * Computes a final transform result after the transform has been acknowledged
     * by the server, potentially using the server-provided transformResult.
     */ function Ze(t, e, n) {
        // The server just sends null as the transform result for array operations,
        // so we have to calculate a result the same as we do for local
        // applications.
        return t instanceof nn ? sn(t, e) : t instanceof rn ? on(t, e) : n;
    }

    /**
     * If this transform operation is not idempotent, returns the base value to
     * persist for this transform. If a base value is returned, the transform
     * operation is always applied to this base value, even if document has
     * already been updated.
     *
     * Base values provide consistent behavior for non-idempotent transforms and
     * allow us to return the same latency-compensated value even if the backend
     * has already applied the transform operation. The base value is null for
     * idempotent transforms, as they can be re-played even if the backend has
     * already applied them.
     *
     * @returns a base value to store along with the mutation, or null for
     * idempotent transforms.
     */ function tn(t, e) {
        return t instanceof cn ? ce(n = e) || function(t) {
            return !!t && "doubleValue" in t;
        }
        /** Returns true if `value` is either an IntegerValue or a DoubleValue. */ (n) ? e : {
            integerValue: 0
        } : null;
        var n;
    }

    /** Transforms a value into a server-generated timestamp. */
    class en extends Ye {}

    /** Transforms an array value via a union operation. */ class nn extends Ye {
        constructor(t) {
            super(), this.elements = t;
        }
    }

    function sn(t, e) {
        const n = an(e);
        for (const e of t.elements) n.some((t => Yt(t, e))) || n.push(e);
        return {
            arrayValue: {
                values: n
            }
        };
    }

    /** Transforms an array value via a remove operation. */ class rn extends Ye {
        constructor(t) {
            super(), this.elements = t;
        }
    }

    function on(t, e) {
        let n = an(e);
        for (const e of t.elements) n = n.filter((t => !Yt(t, e)));
        return {
            arrayValue: {
                values: n
            }
        };
    }

    /**
     * Implements the backend semantics for locally computed NUMERIC_ADD (increment)
     * transforms. Converts all field values to integers or doubles, but unlike the
     * backend does not cap integer values at 2^63. Instead, JavaScript number
     * arithmetic is used and precision loss can occur for values greater than 2^53.
     */ class cn extends Ye {
        constructor(t, e) {
            super(), this.serializer = t, this.nn = e;
        }
    }

    function un(t) {
        return ie(t.integerValue || t.doubleValue);
    }

    function an(t) {
        return ue(t) && t.arrayValue.values ? t.arrayValue.values.slice() : [];
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provides a set of fields that can be used to partially patch a document.
     * FieldMask is used in conjunction with ObjectValue.
     * Examples:
     *   foo - Overwrites foo entirely with the provided value. If foo is not
     *         present in the companion ObjectValue, the field is deleted.
     *   foo.bar - Overwrites only the field bar of the object foo.
     *             If foo is not an object, foo is replaced with an object
     *             containing foo
     */ class hn {
        constructor(t) {
            this.fields = t, 
            // TODO(dimond): validation of FieldMask
            // Sort the field mask to support `FieldMask.isEqual()` and assert below.
            t.sort(J$1.k);
        }
        /**
         * Verifies that `fieldPath` is included by at least one field in this field
         * mask.
         *
         * This is an O(n) operation, where `n` is the size of the field mask.
         */    un(t) {
            for (const e of this.fields) if (e.U(t)) return !0;
            return !1;
        }
        isEqual(t) {
            return K$1(this.fields, t.fields, ((t, e) => t.isEqual(e)));
        }
    }

    /** A field path and the TransformOperation to perform upon it. */ class ln {
        constructor(t, e) {
            this.field = t, this.transform = e;
        }
    }

    function _n(t, e) {
        return t.field.isEqual(e.field) && function(t, e) {
            return t instanceof nn && e instanceof nn || t instanceof rn && e instanceof rn ? K$1(t.elements, e.elements, Yt) : t instanceof cn && e instanceof cn ? Yt(t.nn, e.nn) : t instanceof en && e instanceof en;
        }(t.transform, e.transform);
    }

    /** The result of successfully applying a mutation to the backend. */ class fn {
        constructor(
        /**
         * The version at which the mutation was committed:
         *
         * - For most operations, this is the updateTime in the WriteResult.
         * - For deletes, the commitTime of the WriteResponse (because deletes are
         *   not stored and have no updateTime).
         *
         * Note that these versions can be different: No-op writes will not change
         * the updateTime even though the commitTime advances.
         */
        t, 
        /**
         * The resulting fields returned from the backend after a
         * TransformMutation has been committed. Contains one FieldValue for each
         * FieldTransform that was in the mutation.
         *
         * Will be null if the mutation was not a TransformMutation.
         */
        e) {
            this.version = t, this.transformResults = e;
        }
    }

    /**
     * Encodes a precondition for a mutation. This follows the model that the
     * backend accepts with the special case of an explicit "empty" precondition
     * (meaning no precondition).
     */ class dn {
        constructor(t, e) {
            this.updateTime = t, this.exists = e;
        }
        /** Creates a new empty Precondition. */    static on() {
            return new dn;
        }
        /** Creates a new Precondition with an exists flag. */    static exists(t) {
            return new dn(void 0, t);
        }
        /** Creates a new Precondition based on a version a document exists at. */    static updateTime(t) {
            return new dn(t);
        }
        /** Returns whether this Precondition is empty. */    get sn() {
            return void 0 === this.updateTime && void 0 === this.exists;
        }
        isEqual(t) {
            return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);
        }
    }

    /**
     * Returns true if the preconditions is valid for the given document
     * (or null if no document is available).
     */ function wn(t, e) {
        return void 0 !== t.updateTime ? e instanceof Mn && e.version.isEqual(t.updateTime) : void 0 === t.exists || t.exists === e instanceof Mn;
    }

    /**
     * A mutation describes a self-contained change to a document. Mutations can
     * create, replace, delete, and update subsets of documents.
     *
     * Mutations not only act on the value of the document but also its version.
     *
     * For local mutations (mutations that haven't been committed yet), we preserve
     * the existing version for Set, Patch, and Transform mutations. For Delete
     * mutations, we reset the version to 0.
     *
     * Here's the expected transition table.
     *
     * MUTATION           APPLIED TO            RESULTS IN
     *
     * SetMutation        Document(v3)          Document(v3)
     * SetMutation        NoDocument(v3)        Document(v0)
     * SetMutation        null                  Document(v0)
     * PatchMutation      Document(v3)          Document(v3)
     * PatchMutation      NoDocument(v3)        NoDocument(v3)
     * PatchMutation      null                  null
     * TransformMutation  Document(v3)          Document(v3)
     * TransformMutation  NoDocument(v3)        NoDocument(v3)
     * TransformMutation  null                  null
     * DeleteMutation     Document(v3)          NoDocument(v0)
     * DeleteMutation     NoDocument(v3)        NoDocument(v0)
     * DeleteMutation     null                  NoDocument(v0)
     *
     * For acknowledged mutations, we use the updateTime of the WriteResponse as
     * the resulting version for Set, Patch, and Transform mutations. As deletes
     * have no explicit update time, we use the commitTime of the WriteResponse for
     * Delete mutations.
     *
     * If a mutation is acknowledged by the backend but fails the precondition check
     * locally, we return an `UnknownDocument` and rely on Watch to send us the
     * updated version.
     *
     * Note that TransformMutations don't create Documents (in the case of being
     * applied to a NoDocument), even though they would on the backend. This is
     * because the client always combines the TransformMutation with a SetMutation
     * or PatchMutation and we only want to apply the transform if the prior
     * mutation resulted in a Document (always true for a SetMutation, but not
     * necessarily for a PatchMutation).
     *
     * ## Subclassing Notes
     *
     * Subclasses of Mutation need to implement applyToRemoteDocument() and
     * applyToLocalView() to implement the actual behavior of applying the mutation
     * to some source document.
     */ class En {}

    /**
     * Applies this mutation to the given MaybeDocument or null for the purposes
     * of computing a new remote document. If the input document doesn't match the
     * expected state (e.g. it is null or outdated), an `UnknownDocument` can be
     * returned.
     *
     * @param mutation - The mutation to apply.
     * @param maybeDoc - The document to mutate. The input document can be null if
     *     the client has no knowledge of the pre-mutation state of the document.
     * @param mutationResult - The result of applying the mutation from the backend.
     * @returns The mutated document. The returned document may be an
     *     UnknownDocument if the mutation could not be applied to the locally
     *     cached base document.
     */ function Tn(t, e, n) {
        return t instanceof Pn ? function(t, e, n) {
            // Unlike applySetMutationToLocalView, if we're applying a mutation to a
            // remote document the server has accepted the mutation so the precondition
            // must have held.
            return new Mn(t.key, n.version, t.value, {
                hasCommittedMutations: !0
            });
        }(t, 0, n) : t instanceof Vn ? function(t, e, n) {
            if (!wn(t.rn, e)) 
            // Since the mutation was not rejected, we know that the  precondition
            // matched on the backend. We therefore must not have the expected version
            // of the document in our cache and return an UnknownDocument with the
            // known updateTime.
            return new On(t.key, n.version);
            const s = gn(t, e);
            return new Mn(t.key, n.version, s, {
                hasCommittedMutations: !0
            });
        }(t, e, n) : t instanceof yn ? function(t, e, n) {
            if (C(null != n.transformResults), !wn(t.rn, e)) 
            // Since the mutation was not rejected, we know that the  precondition
            // matched on the backend. We therefore must not have the expected version
            // of the document in our cache and return an UnknownDocument with the
            // known updateTime.
            return new On(t.key, n.version);
            const s = pn(t, e), i = 
            /**
     * Creates a list of "transform results" (a transform result is a field value
     * representing the result of applying a transform) for use after a
     * TransformMutation has been acknowledged by the server.
     *
     * @param fieldTransforms - The field transforms to apply the result to.
     * @param baseDoc - The document prior to applying this mutation batch.
     * @param serverTransformResults - The transform results received by the server.
     * @returns The transform results list.
     */
            function(t, e, n) {
                const s = [];
                C(t.length === n.length);
                for (let i = 0; i < n.length; i++) {
                    const r = t[i], o = r.transform;
                    let c = null;
                    e instanceof Mn && (c = e.field(r.field)), s.push(Ze(o, c, n[i]));
                }
                return s;
            }
            /**
     * Creates a list of "transform results" (a transform result is a field value
     * representing the result of applying a transform) for use when applying a
     * TransformMutation locally.
     *
     * @param fieldTransforms - The field transforms to apply the result to.
     * @param localWriteTime - The local time of the transform mutation (used to
     *     generate ServerTimestampValues).
     * @param maybeDoc - The current state of the document after applying all
     *     previous mutations.
     * @param baseDoc - The document prior to applying this mutation batch.
     * @returns The transform results list.
     */ (t.fieldTransforms, e, n.transformResults), r = n.version, o = bn(t, s.data(), i);
            return new Mn(t.key, r, o, {
                hasCommittedMutations: !0
            });
        }(t, e, n) : function(t, e, n) {
            // Unlike applyToLocalView, if we're applying a mutation to a remote
            // document the server has accepted the mutation so the precondition must
            // have held.
            return new kn(t.key, n.version, {
                hasCommittedMutations: !0
            });
        }(t, 0, n);
    }

    /**
     * Applies this mutation to the given MaybeDocument or null for the purposes
     * of computing the new local view of a document. Both the input and returned
     * documents can be null.
     *
     * @param mutation - The mutation to apply.
     * @param maybeDoc - The document to mutate. The input document can be null if
     *     the client has no knowledge of the pre-mutation state of the document.
     * @param baseDoc - The state of the document prior to this mutation batch. The
     *     input document can be null if the client has no knowledge of the
     *     pre-mutation state of the document.
     * @param localWriteTime - A timestamp indicating the local write time of the
     *     batch this mutation is a part of.
     * @returns The mutated document. The returned document may be null, but only
     *     if maybeDoc was null and the mutation would not create a new document.
     */ function In(t, e, n, s) {
        return t instanceof Pn ? function(t, e) {
            if (!wn(t.rn, e)) return e;
            const n = Rn(e);
            return new Mn(t.key, n, t.value, {
                an: !0
            });
        }
        /**
     * A mutation that modifies fields of the document at the given key with the
     * given values. The values are applied through a field mask:
     *
     *  * When a field is in both the mask and the values, the corresponding field
     *    is updated.
     *  * When a field is in neither the mask nor the values, the corresponding
     *    field is unmodified.
     *  * When a field is in the mask but not in the values, the corresponding field
     *    is deleted.
     *  * When a field is not in the mask but is in the values, the values map is
     *    ignored.
     */ (t, e) : t instanceof Vn ? function(t, e) {
            if (!wn(t.rn, e)) return e;
            const n = Rn(e), s = gn(t, e);
            return new Mn(t.key, n, s, {
                an: !0
            });
        }
        /**
     * Patches the data of document if available or creates a new document. Note
     * that this does not check whether or not the precondition of this patch
     * holds.
     */ (t, e) : t instanceof yn ? function(t, e, n, s) {
            if (!wn(t.rn, e)) return e;
            const i = pn(t, e), r = function(t, e, n, s) {
                const i = [];
                for (const r of t) {
                    const t = r.transform;
                    let o = null;
                    n instanceof Mn && (o = n.field(r.field)), null === o && s instanceof Mn && (
                    // If the current document does not contain a value for the mutated
                    // field, use the value that existed before applying this mutation
                    // batch. This solves an edge case where a PatchMutation clears the
                    // values in a nested map before the TransformMutation is applied.
                    o = s.field(r.field)), i.push(Xe(t, o, e));
                }
                return i;
            }(t.fieldTransforms, n, e, s), o = bn(t, i.data(), r);
            return new Mn(t.key, i.version, o, {
                an: !0
            });
        }(t, e, s, n) : function(t, e) {
            if (!wn(t.rn, e)) return e;
            return new kn(t.key, j.min());
        }
        /**
     * A mutation that verifies the existence of the document at the given key with
     * the provided precondition.
     *
     * The `verify` operation is only used in Transactions, and this class serves
     * primarily to facilitate serialization into protos.
     */ (t, e);
    }

    /**
     * If this mutation is not idempotent, returns the base value to persist with
     * this mutation. If a base value is returned, the mutation is always applied
     * to this base value, even if document has already been updated.
     *
     * The base value is a sparse object that consists of only the document
     * fields for which this mutation contains a non-idempotent transformation
     * (e.g. a numeric increment). The provided value guarantees consistent
     * behavior for non-idempotent transforms and allow us to return the same
     * latency-compensated value even if the backend has already applied the
     * mutation. The base value is null for idempotent mutations, as they can be
     * re-played even if the backend has already applied them.
     *
     * @returns a base value to store along with the mutation, or null for
     * idempotent mutations.
     */ function mn(t, e) {
        return t instanceof yn ? function(t, e) {
            let n = null;
            for (const s of t.fieldTransforms) {
                const t = e instanceof Mn ? e.field(s.field) : void 0, i = tn(s.transform, t || null);
                null != i && (n = null == n ? (new Cn).set(s.field, i) : n.set(s.field, i));
            }
            return n ? n.hn() : null;
        }
        /**
     * Asserts that the given MaybeDocument is actually a Document and verifies
     * that it matches the key for this mutation. Since we only support
     * transformations with precondition exists this method is guaranteed to be
     * safe.
     */ (t, e) : null;
    }

    function An(t, e) {
        return t.type === e.type && (!!t.key.isEqual(e.key) && (!!t.rn.isEqual(e.rn) && (0 /* Set */ === t.type ? t.value.isEqual(e.value) : 1 /* Patch */ === t.type ? t.data.isEqual(e.data) && t.en.isEqual(e.en) : 2 /* Transform */ !== t.type || K$1(t.fieldTransforms, t.fieldTransforms, ((t, e) => _n(t, e))))));
    }

    /**
     * Returns the version from the given document for use as the result of a
     * mutation. Mutations are defined to return the version of the base document
     * only if it is an existing document. Deleted and unknown documents have a
     * post-mutation version of SnapshotVersion.min().
     */ function Rn(t) {
        return t instanceof Mn ? t.version : j.min();
    }

    /**
     * A mutation that creates or replaces the document at the given key with the
     * object value contents.
     */ class Pn extends En {
        constructor(t, e, n) {
            super(), this.key = t, this.value = e, this.rn = n, this.type = 0 /* Set */;
        }
    }

    class Vn extends En {
        constructor(t, e, n, s) {
            super(), this.key = t, this.data = e, this.en = n, this.rn = s, this.type = 1 /* Patch */;
        }
    }

    function gn(t, e) {
        let n;
        return n = e instanceof Mn ? e.data() : Dn.empty(), function(t, e) {
            const n = new Cn(e);
            return t.en.fields.forEach((e => {
                if (!e.q()) {
                    const s = t.data.field(e);
                    null !== s ? n.set(e, s) : n.delete(e);
                }
            })), n.hn();
        }
        /**
     * A mutation that modifies specific fields of the document with transform
     * operations. Currently the only supported transform is a server timestamp, but
     * IP Address, increment(n), etc. could be supported in the future.
     *
     * It is somewhat similar to a PatchMutation in that it patches specific fields
     * and has no effect when applied to a null or NoDocument (see comment on
     * Mutation for rationale).
     */ (t, n);
    }

    class yn extends En {
        constructor(t, e) {
            super(), this.key = t, this.fieldTransforms = e, this.type = 2 /* Transform */ , 
            // NOTE: We set a precondition of exists: true as a safety-check, since we
            // always combine TransformMutations with a SetMutation or PatchMutation which
            // (if successful) should end up with an existing document.
            this.rn = dn.exists(!0);
        }
    }

    function pn(t, e) {
        return e;
    }

    function bn(t, e, n) {
        const s = new Cn(e);
        for (let e = 0; e < t.fieldTransforms.length; e++) {
            const i = t.fieldTransforms[e];
            s.set(i.field, n[e]);
        }
        return s.hn();
    }

    /** A mutation that deletes the document at the given key. */ class vn extends En {
        constructor(t, e) {
            super(), this.key = t, this.rn = e, this.type = 3 /* Delete */;
        }
    }

    class Sn extends En {
        constructor(t, e) {
            super(), this.key = t, this.rn = e, this.type = 4 /* Verify */;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An ObjectValue represents a MapValue in the Firestore Proto and offers the
     * ability to add and remove fields (via the ObjectValueBuilder).
     */ class Dn {
        constructor(t) {
            this.proto = t;
        }
        static empty() {
            return new Dn({
                mapValue: {}
            });
        }
        /**
         * Returns the value at the given path or null.
         *
         * @param path - the path to search
         * @returns The value at the path or if there it doesn't exist.
         */    field(t) {
            if (t.q()) return this.proto;
            {
                let e = this.proto;
                for (let n = 0; n < t.length - 1; ++n) {
                    if (!e.mapValue.fields) return null;
                    if (e = e.mapValue.fields[t.get(n)], !le(e)) return null;
                }
                return e = (e.mapValue.fields || {})[t.B()], e || null;
            }
        }
        isEqual(t) {
            return Yt(this.proto, t.proto);
        }
    }

    /**
     * An ObjectValueBuilder provides APIs to set and delete fields from an
     * ObjectValue.
     */ class Cn {
        /**
         * @param baseObject - The object to mutate.
         */
        constructor(t = Dn.empty()) {
            this.ln = t, 
            /** A map that contains the accumulated changes in this builder. */
            this._n = new Map;
        }
        /**
         * Sets the field to the provided value.
         *
         * @param path - The field path to set.
         * @param value - The value to set.
         * @returns The current Builder instance.
         */    set(t, e) {
            return this.fn(t, e), this;
        }
        /**
         * Removes the field at the specified path. If there is no field at the
         * specified path, nothing is changed.
         *
         * @param path - The field path to remove.
         * @returns The current Builder instance.
         */    delete(t) {
            return this.fn(t, null), this;
        }
        /**
         * Adds `value` to the overlay map at `path`. Creates nested map entries if
         * needed.
         */    fn(t, e) {
            let n = this._n;
            for (let e = 0; e < t.length - 1; ++e) {
                const s = t.get(e);
                let i = n.get(s);
                i instanceof Map ? 
                // Re-use a previously created map
                n = i : i && 10 /* ObjectValue */ === Jt(i) ? (
                // Convert the existing Protobuf MapValue into a map
                i = new Map(Object.entries(i.mapValue.fields || {})), n.set(s, i), n = i) : (
                // Create an empty map to represent the current nesting level
                i = new Map, n.set(s, i), n = i);
            }
            n.set(t.B(), e);
        }
        /** Returns an ObjectValue with all mutations applied. */    hn() {
            const t = this.dn(J$1.H(), this._n);
            return null != t ? new Dn(t) : this.ln;
        }
        /**
         * Applies any overlays from `currentOverlays` that exist at `currentPath`
         * and returns the merged data at `currentPath` (or null if there were no
         * changes).
         *
         * @param currentPath - The path at the current nesting level. Can be set to
         * FieldValue.emptyPath() to represent the root.
         * @param currentOverlays - The overlays at the current nesting level in the
         * same format as `overlayMap`.
         * @returns The merged data at `currentPath` or null if no modifications
         * were applied.
         */    dn(t, e) {
            let n = !1;
            const s = this.ln.field(t), i = le(s) ? // If there is already data at the current path, base our
            Object.assign({}, s.mapValue.fields) : {};
            return e.forEach(((e, s) => {
                if (e instanceof Map) {
                    const r = this.dn(t.child(s), e);
                    null != r && (i[s] = r, n = !0);
                } else null !== e ? (i[s] = e, n = !0) : i.hasOwnProperty(s) && (delete i[s], n = !0);
            })), n ? {
                mapValue: {
                    fields: i
                }
            } : null;
        }
    }

    /**
     * Returns a FieldMask built from all fields in a MapValue.
     */ function Nn(t) {
        const e = [];
        return Qt(t.fields || {}, ((t, n) => {
            const s = new J$1([ t ]);
            if (le(n)) {
                const t = Nn(n.mapValue).fields;
                if (0 === t.length) 
                // Preserve the empty map by adding it to the FieldMask.
                e.push(s); else 
                // For nested and non-empty ObjectValues, add the FieldPath of the
                // leaf nodes.
                for (const n of t) e.push(s.child(n));
            } else 
            // For nested and non-empty ObjectValues, add the FieldPath of the leaf
            // nodes.
            e.push(s);
        })), new hn(e);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The result of a lookup for a given path may be an existing document or a
     * marker that this document does not exist at a given version.
     */ class xn {
        constructor(t, e) {
            this.key = t, this.version = e;
        }
    }

    /**
     * Represents a document in Firestore with a key, version, data and whether the
     * data has local mutations applied to it.
     */ class Mn extends xn {
        constructor(t, e, n, s) {
            super(t, e), this.wn = n, this.an = !!s.an, this.hasCommittedMutations = !!s.hasCommittedMutations;
        }
        field(t) {
            return this.wn.field(t);
        }
        data() {
            return this.wn;
        }
        En() {
            return this.wn.proto;
        }
        isEqual(t) {
            return t instanceof Mn && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.an === t.an && this.hasCommittedMutations === t.hasCommittedMutations && this.wn.isEqual(t.wn);
        }
        toString() {
            return `Document(${this.key}, ${this.version}, ${this.wn.toString()}, {hasLocalMutations: ${this.an}}), {hasCommittedMutations: ${this.hasCommittedMutations}})`;
        }
        get hasPendingWrites() {
            return this.an || this.hasCommittedMutations;
        }
    }

    /**
     * Compares the value for field `field` in the provided documents. Throws if
     * the field does not exist in both documents.
     */
    /**
     * A class representing a deleted document.
     * Version is set to 0 if we don't point to any specific time, otherwise it
     * denotes time we know it didn't exist at.
     */
    class kn extends xn {
        constructor(t, e, n) {
            super(t, e), this.hasCommittedMutations = !(!n || !n.hasCommittedMutations);
        }
        toString() {
            return `NoDocument(${this.key}, ${this.version})`;
        }
        get hasPendingWrites() {
            return this.hasCommittedMutations;
        }
        isEqual(t) {
            return t instanceof kn && t.hasCommittedMutations === this.hasCommittedMutations && t.version.isEqual(this.version) && t.key.isEqual(this.key);
        }
    }

    /**
     * A class representing an existing document whose data is unknown (e.g. a
     * document that was updated without a known base document).
     */ class On extends xn {
        toString() {
            return `UnknownDocument(${this.key}, ${this.version})`;
        }
        get hasPendingWrites() {
            return !0;
        }
        isEqual(t) {
            return t instanceof On && t.version.isEqual(this.version) && t.key.isEqual(this.key);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Query encapsulates all the query attributes we support in the SDK. It can
     * be run against the LocalStore, as well as be converted to a `Target` to
     * query the RemoteStore results.
     *
     * Visible for testing.
     */ class Fn {
        /**
         * Initializes a Query with a path and optional additional query constraints.
         * Path must currently be empty if this is a collection group query.
         */
        constructor(t, e = null, n = [], s = [], i = null, r = "F" /* First */ , o = null, c = null) {
            this.path = t, this.collectionGroup = e, this.Tn = n, this.filters = s, this.limit = i, 
            this.limitType = r, this.startAt = o, this.endAt = c, this.In = null, 
            // The corresponding `Target` of this `Query` instance.
            this.mn = null, this.startAt, this.endAt;
        }
    }

    /** Creates a new Query instance with the options provided. */ function $n(t, e, n, s, i, r, o, c) {
        return new Fn(t, e, n, s, i, r, o, c);
    }

    /** Creates a new Query for a query that matches all documents at `path` */ function Ln(t) {
        return new Fn(t);
    }

    /**
     * Helper to convert a collection group query into a collection query at a
     * specific path. This is used when executing collection group queries, since
     * we have to split the query into a set of collection queries at multiple
     * paths.
     */ function Bn(t) {
        return !tt(t.limit) && "F" /* First */ === t.limitType;
    }

    function qn(t) {
        return !tt(t.limit) && "L" /* Last */ === t.limitType;
    }

    function Un(t) {
        return t.Tn.length > 0 ? t.Tn[0].field : null;
    }

    function Kn(t) {
        for (const e of t.filters) if (e.An()) return e.field;
        return null;
    }

    /**
     * Checks if any of the provided Operators are included in the query and
     * returns the first one that is, or null if none are.
     */
    /**
     * Returns whether the query matches a collection group rather than a specific
     * collection.
     */
    function Qn(t) {
        return null !== t.collectionGroup;
    }

    /**
     * Returns the implicit order by constraint that is used to execute the Query,
     * which can be different from the order by constraints the user provided (e.g.
     * the SDK and backend always orders by `__name__`).
     */ function Wn(t) {
        const e = N$1(t);
        if (null === e.In) {
            e.In = [];
            const t = Kn(e), n = Un(e);
            if (null !== t && null === n) 
            // In order to implicitly add key ordering, we must also add the
            // inequality filter field for it to be a valid query.
            // Note that the default inequality field and key ordering is ascending.
            t.Y() || e.In.push(new fs(t)), e.In.push(new fs(J$1.X(), "asc" /* ASCENDING */)); else {
                let t = !1;
                for (const n of e.Tn) e.In.push(n), n.field.Y() && (t = !0);
                if (!t) {
                    // The order of the implicit key ordering always matches the last
                    // explicit order by
                    const t = e.Tn.length > 0 ? e.Tn[e.Tn.length - 1].dir : "asc" /* ASCENDING */;
                    e.In.push(new fs(J$1.X(), t));
                }
            }
        }
        return e.In;
    }

    /**
     * Converts this `Query` instance to it's corresponding `Target` representation.
     */ function jn(t) {
        const e = N$1(t);
        if (!e.mn) if ("F" /* First */ === e.limitType) e.mn = it(e.path, e.collectionGroup, Wn(e), e.filters, e.limit, e.startAt, e.endAt); else {
            // Flip the orderBy directions since we want the last results
            const t = [];
            for (const n of Wn(e)) {
                const e = "desc" /* DESCENDING */ === n.dir ? "asc" /* ASCENDING */ : "desc" /* DESCENDING */;
                t.push(new fs(n.field, e));
            }
            // We need to swap the cursors to match the now-flipped query ordering.
                    const n = e.endAt ? new as(e.endAt.position, !e.endAt.before) : null, s = e.startAt ? new as(e.startAt.position, !e.startAt.before) : null;
            // Now return as a LimitType.First query.
            e.mn = it(e.path, e.collectionGroup, t, e.filters, e.limit, n, s);
        }
        return e.mn;
    }

    function Gn(t, e, n) {
        return new Fn(t.path, t.collectionGroup, t.Tn.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);
    }

    function zn(t, e) {
        return ct(jn(t), jn(e)) && t.limitType === e.limitType;
    }

    // TODO(b/29183165): This is used to get a unique string from a query to, for
    // example, use as a dictionary key, but the implementation is subject to
    // collisions. Make it collision-free.
    function Hn(t) {
        return `${rt(jn(t))}|lt:${t.limitType}`;
    }

    function Jn(t) {
        return `Query(target=${ot(jn(t))}; limitType=${t.limitType})`;
    }

    /** Returns whether `doc` matches the constraints of `query`. */ function Yn(t, e) {
        return function(t, e) {
            const n = e.key.path;
            return null !== t.collectionGroup ? e.key.nt(t.collectionGroup) && t.path.U(n) : Y$1.st(t.path) ? t.path.isEqual(n) : t.path.K(n);
        }
        /**
     * A document must have a value for every ordering clause in order to show up
     * in the results.
     */ (t, e) && function(t, e) {
            for (const n of t.Tn) 
            // order by key always matches
            if (!n.field.Y() && null === e.field(n.field)) return !1;
            return !0;
        }(t, e) && function(t, e) {
            for (const n of t.filters) if (!n.matches(e)) return !1;
            return !0;
        }
        /** Makes sure a document is within the bounds, if provided. */ (t, e) && function(t, e) {
            if (t.startAt && !ls(t.startAt, Wn(t), e)) return !1;
            if (t.endAt && ls(t.endAt, Wn(t), e)) return !1;
            return !0;
        }
        /**
     * Returns a new comparator function that can be used to compare two documents
     * based on the Query's ordering constraint.
     */ (t, e);
    }

    function Xn(t) {
        return (e, n) => {
            let s = !1;
            for (const i of Wn(t)) {
                const t = ds(i, e, n);
                if (0 !== t) return t;
                s = s || i.field.Y();
            }
            return 0;
        };
    }

    class Zn extends class {} {
        constructor(t, e, n) {
            super(), this.field = t, this.op = e, this.value = n;
        }
        /**
         * Creates a filter based on the provided arguments.
         */    static create(t, e, n) {
            return t.Y() ? "in" /* IN */ === e || "not-in" /* NOT_IN */ === e ? this.Rn(t, e, n) : new es(t, e, n) : "array-contains" /* ARRAY_CONTAINS */ === e ? new rs(t, n) : "in" /* IN */ === e ? new os(t, n) : "not-in" /* NOT_IN */ === e ? new cs(t, n) : "array-contains-any" /* ARRAY_CONTAINS_ANY */ === e ? new us(t, n) : new Zn(t, e, n);
        }
        static Rn(t, e, n) {
            return "in" /* IN */ === e ? new ns(t, n) : new ss(t, n);
        }
        matches(t) {
            const e = t.field(this.field);
            // Types do not have to match in NOT_EQUAL filters.
                    return "!=" /* NOT_EQUAL */ === this.op ? null !== e && this.Pn(Zt(e, this.value)) : null !== e && Jt(this.value) === Jt(e) && this.Pn(Zt(e, this.value));
            // Only compare types with matching backend order (such as double and int).
            }
        Pn(t) {
            switch (this.op) {
              case "<" /* LESS_THAN */ :
                return t < 0;

              case "<=" /* LESS_THAN_OR_EQUAL */ :
                return t <= 0;

              case "==" /* EQUAL */ :
                return 0 === t;

              case "!=" /* NOT_EQUAL */ :
                return 0 !== t;

              case ">" /* GREATER_THAN */ :
                return t > 0;

              case ">=" /* GREATER_THAN_OR_EQUAL */ :
                return t >= 0;

              default:
                return D$1();
            }
        }
        An() {
            return [ "<" /* LESS_THAN */ , "<=" /* LESS_THAN_OR_EQUAL */ , ">" /* GREATER_THAN */ , ">=" /* GREATER_THAN_OR_EQUAL */ , "!=" /* NOT_EQUAL */ , "not-in" /* NOT_IN */ ].indexOf(this.op) >= 0;
        }
    }

    function ts(t) {
        // TODO(b/29183165): Technically, this won't be unique if two values have
        // the same description, such as the int 3 and the string "3". So we should
        // add the types in here somehow, too.
        return t.field.j() + t.op.toString() + ee(t.value);
    }

    class es extends Zn {
        constructor(t, e, n) {
            super(t, e, n), this.key = Y$1.et(n.referenceValue);
        }
        matches(t) {
            const e = Y$1.k(t.key, this.key);
            return this.Pn(e);
        }
    }

    /** Filter that matches on key fields within an array. */ class ns extends Zn {
        constructor(t, e) {
            super(t, "in" /* IN */ , e), this.keys = is("in" /* IN */ , e);
        }
        matches(t) {
            return this.keys.some((e => e.isEqual(t.key)));
        }
    }

    /** Filter that matches on key fields not present within an array. */ class ss extends Zn {
        constructor(t, e) {
            super(t, "not-in" /* NOT_IN */ , e), this.keys = is("not-in" /* NOT_IN */ , e);
        }
        matches(t) {
            return !this.keys.some((e => e.isEqual(t.key)));
        }
    }

    function is(t, e) {
        var n;
        return ((null === (n = e.arrayValue) || void 0 === n ? void 0 : n.values) || []).map((t => Y$1.et(t.referenceValue)));
    }

    /** A Filter that implements the array-contains operator. */ class rs extends Zn {
        constructor(t, e) {
            super(t, "array-contains" /* ARRAY_CONTAINS */ , e);
        }
        matches(t) {
            const e = t.field(this.field);
            return ue(e) && Xt(e.arrayValue, this.value);
        }
    }

    /** A Filter that implements the IN operator. */ class os extends Zn {
        constructor(t, e) {
            super(t, "in" /* IN */ , e);
        }
        matches(t) {
            const e = t.field(this.field);
            return null !== e && Xt(this.value.arrayValue, e);
        }
    }

    /** A Filter that implements the not-in operator. */ class cs extends Zn {
        constructor(t, e) {
            super(t, "not-in" /* NOT_IN */ , e);
        }
        matches(t) {
            if (Xt(this.value.arrayValue, {
                nullValue: "NULL_VALUE"
            })) return !1;
            const e = t.field(this.field);
            return null !== e && !Xt(this.value.arrayValue, e);
        }
    }

    /** A Filter that implements the array-contains-any operator. */ class us extends Zn {
        constructor(t, e) {
            super(t, "array-contains-any" /* ARRAY_CONTAINS_ANY */ , e);
        }
        matches(t) {
            const e = t.field(this.field);
            return !(!ue(e) || !e.arrayValue.values) && e.arrayValue.values.some((t => Xt(this.value.arrayValue, t)));
        }
    }

    /**
     * Represents a bound of a query.
     *
     * The bound is specified with the given components representing a position and
     * whether it's just before or just after the position (relative to whatever the
     * query order is).
     *
     * The position represents a logical index position for a query. It's a prefix
     * of values for the (potentially implicit) order by clauses of a query.
     *
     * Bound provides a function to determine whether a document comes before or
     * after a bound. This is influenced by whether the position is just before or
     * just after the provided values.
     */ class as {
        constructor(t, e) {
            this.position = t, this.before = e;
        }
    }

    function hs(t) {
        // TODO(b/29183165): Make this collision robust.
        return `${t.before ? "b" : "a"}:${t.position.map((t => ee(t))).join(",")}`;
    }

    /**
     * Returns true if a document sorts before a bound using the provided sort
     * order.
     */ function ls(t, e, n) {
        let s = 0;
        for (let i = 0; i < t.position.length; i++) {
            const r = e[i], o = t.position[i];
            if (r.field.Y()) s = Y$1.k(Y$1.et(o.referenceValue), n.key); else {
                s = Zt(o, n.field(r.field));
            }
            if ("desc" /* DESCENDING */ === r.dir && (s *= -1), 0 !== s) break;
        }
        return t.before ? s <= 0 : s < 0;
    }

    function _s(t, e) {
        if (null === t) return null === e;
        if (null === e) return !1;
        if (t.before !== e.before || t.position.length !== e.position.length) return !1;
        for (let n = 0; n < t.position.length; n++) {
            if (!Yt(t.position[n], e.position[n])) return !1;
        }
        return !0;
    }

    /**
     * An ordering on a field, in some Direction. Direction defaults to ASCENDING.
     */ class fs {
        constructor(t, e = "asc" /* ASCENDING */) {
            this.field = t, this.dir = e;
        }
    }

    function ds(t, e, n) {
        const s = t.field.Y() ? Y$1.k(e.key, n.key) : function(t, e, n) {
            const s = e.field(t), i = n.field(t);
            return null !== s && null !== i ? Zt(s, i) : D$1();
        }(t.field, e, n);
        switch (t.dir) {
          case "asc" /* ASCENDING */ :
            return s;

          case "desc" /* DESCENDING */ :
            return -1 * s;

          default:
            return D$1();
        }
    }

    function ws(t, e) {
        return t.dir === e.dir && t.field.isEqual(e.field);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A batch of mutations that will be sent as one unit to the backend.
     */
    class Es {
        /**
         * @param batchId - The unique ID of this mutation batch.
         * @param localWriteTime - The original write time of this mutation.
         * @param baseMutations - Mutations that are used to populate the base
         * values when this mutation is applied locally. This can be used to locally
         * overwrite values that are persisted in the remote document cache. Base
         * mutations are never sent to the backend.
         * @param mutations - The user-provided mutations in this mutation batch.
         * User-provided mutations are applied both locally and remotely on the
         * backend.
         */
        constructor(t, e, n, s) {
            this.batchId = t, this.Vn = e, this.baseMutations = n, this.mutations = s;
        }
        /**
         * Applies all the mutations in this MutationBatch to the specified document
         * to create a new remote document
         *
         * @param docKey - The key of the document to apply mutations to.
         * @param maybeDoc - The document to apply mutations to.
         * @param batchResult - The result of applying the MutationBatch to the
         * backend.
         */    gn(t, e, n) {
            const s = n.yn;
            for (let n = 0; n < this.mutations.length; n++) {
                const i = this.mutations[n];
                if (i.key.isEqual(t)) {
                    e = Tn(i, e, s[n]);
                }
            }
            return e;
        }
        /**
         * Computes the local view of a document given all the mutations in this
         * batch.
         *
         * @param docKey - The key of the document to apply mutations to.
         * @param maybeDoc - The document to apply mutations to.
         */    pn(t, e) {
            // First, apply the base state. This allows us to apply non-idempotent
            // transform against a consistent set of values.
            for (const n of this.baseMutations) n.key.isEqual(t) && (e = In(n, e, e, this.Vn));
            const n = e;
            // Second, apply all user-provided mutations.
                    for (const s of this.mutations) s.key.isEqual(t) && (e = In(s, e, n, this.Vn));
            return e;
        }
        /**
         * Computes the local view for all provided documents given the mutations in
         * this batch.
         */    bn(t) {
            // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations
            // directly (as done in `applyToLocalView()`), we can reduce the complexity
            // to O(n).
            let e = t;
            return this.mutations.forEach((n => {
                const s = this.pn(n.key, t.get(n.key));
                s && (e = e.Tt(n.key, s));
            })), e;
        }
        keys() {
            return this.mutations.reduce(((t, e) => t.add(e.key)), vt());
        }
        isEqual(t) {
            return this.batchId === t.batchId && K$1(this.mutations, t.mutations, ((t, e) => An(t, e))) && K$1(this.baseMutations, t.baseMutations, ((t, e) => An(t, e)));
        }
    }

    /** The result of applying a mutation batch to the backend. */ class Ts {
        constructor(t, e, n, 
        /**
         * A pre-computed mapping from each mutated document to the resulting
         * version.
         */
        s) {
            this.batch = t, this.vn = e, this.yn = n, this.Sn = s;
        }
        /**
         * Creates a new MutationBatchResult for the given batch and results. There
         * must be one result for each mutation in the batch. This static factory
         * caches a document=&gt;version mapping (docVersions).
         */    static from(t, e, n) {
            C(t.mutations.length === n.length);
            let s = pt;
            const i = t.mutations;
            for (let t = 0; t < i.length; t++) s = s.Tt(i[t].key, n[t].version);
            return new Ts(t, e, n, s);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A map implementation that uses objects as keys. Objects must have an
     * associated equals function and must be immutable. Entries in the map are
     * stored together with the key being produced from the mapKeyFn. This map
     * automatically handles collisions of keys.
     */ class Is {
        constructor(t, e) {
            this.Dn = t, this.Cn = e, 
            /**
             * The inner map for a key/value pair. Due to the possibility of collisions we
             * keep a list of entries that we do a linear search through to find an actual
             * match. Note that collisions should be rare, so we still expect near
             * constant time lookups in practice.
             */
            this.Nn = {};
        }
        /** Get a value for this key, or undefined if it does not exist. */    get(t) {
            const e = this.Dn(t), n = this.Nn[e];
            if (void 0 !== n) for (const [e, s] of n) if (this.Cn(e, t)) return s;
        }
        has(t) {
            return void 0 !== this.get(t);
        }
        /** Put this key and value in the map. */    set(t, e) {
            const n = this.Dn(t), s = this.Nn[n];
            if (void 0 !== s) {
                for (let n = 0; n < s.length; n++) if (this.Cn(s[n][0], t)) return void (s[n] = [ t, e ]);
                s.push([ t, e ]);
            } else this.Nn[n] = [ [ t, e ] ];
        }
        /**
         * Remove this key from the map. Returns a boolean if anything was deleted.
         */    delete(t) {
            const e = this.Dn(t), n = this.Nn[e];
            if (void 0 === n) return !1;
            for (let s = 0; s < n.length; s++) if (this.Cn(n[s][0], t)) return 1 === n.length ? delete this.Nn[e] : n.splice(s, 1), 
            !0;
            return !1;
        }
        forEach(t) {
            Qt(this.Nn, ((e, n) => {
                for (const [e, s] of n) t(e, s);
            }));
        }
        q() {
            return Wt(this.Nn);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * PersistencePromise is essentially a re-implementation of Promise except
     * it has a .next() method instead of .then() and .next() and .catch() callbacks
     * are executed synchronously when a PersistencePromise resolves rather than
     * asynchronously (Promise implementations use setImmediate() or similar).
     *
     * This is necessary to interoperate with IndexedDB which will automatically
     * commit transactions if control is returned to the event loop without
     * synchronously initiating another operation on the transaction.
     *
     * NOTE: .then() and .catch() only allow a single consumer, unlike normal
     * Promises.
     */ class ms {
        constructor(t) {
            // NOTE: next/catchCallback will always point to our own wrapper functions,
            // not the user's raw next() or catch() callbacks.
            this.xn = null, this.Mn = null, 
            // When the operation resolves, we'll set result or error and mark isDone.
            this.result = void 0, this.error = void 0, this.kn = !1, 
            // Set to true when .then() or .catch() are called and prevents additional
            // chaining.
            this.On = !1, t((t => {
                this.kn = !0, this.result = t, this.xn && 
                // value should be defined unless T is Void, but we can't express
                // that in the type system.
                this.xn(t);
            }), (t => {
                this.kn = !0, this.error = t, this.Mn && this.Mn(t);
            }));
        }
        catch(t) {
            return this.next(void 0, t);
        }
        next(t, e) {
            return this.On && D$1(), this.On = !0, this.kn ? this.error ? this.Fn(e, this.error) : this.$n(t, this.result) : new ms(((n, s) => {
                this.xn = e => {
                    this.$n(t, e).next(n, s);
                }, this.Mn = t => {
                    this.Fn(e, t).next(n, s);
                };
            }));
        }
        Ln() {
            return new Promise(((t, e) => {
                this.next(t, e);
            }));
        }
        Bn(t) {
            try {
                const e = t();
                return e instanceof ms ? e : ms.resolve(e);
            } catch (t) {
                return ms.reject(t);
            }
        }
        $n(t, e) {
            return t ? this.Bn((() => t(e))) : ms.resolve(e);
        }
        Fn(t, e) {
            return t ? this.Bn((() => t(e))) : ms.reject(e);
        }
        static resolve(t) {
            return new ms(((e, n) => {
                e(t);
            }));
        }
        static reject(t) {
            return new ms(((e, n) => {
                n(t);
            }));
        }
        static qn(
        // Accept all Promise types in waitFor().
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        t) {
            return new ms(((e, n) => {
                let s = 0, i = 0, r = !1;
                t.forEach((t => {
                    ++s, t.next((() => {
                        ++i, r && i === s && e();
                    }), (t => n(t)));
                })), r = !0, i === s && e();
            }));
        }
        /**
         * Given an array of predicate functions that asynchronously evaluate to a
         * boolean, implements a short-circuiting `or` between the results. Predicates
         * will be evaluated until one of them returns `true`, then stop. The final
         * result will be whether any of them returned `true`.
         */    static Un(t) {
            let e = ms.resolve(!1);
            for (const n of t) e = e.next((t => t ? ms.resolve(t) : n()));
            return e;
        }
        static forEach(t, e) {
            const n = [];
            return t.forEach(((t, s) => {
                n.push(e.call(this, t, s));
            })), this.qn(n);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An in-memory buffer of entries to be written to a RemoteDocumentCache.
     * It can be used to batch up a set of changes to be written to the cache, but
     * additionally supports reading entries back with the `getEntry()` method,
     * falling back to the underlying RemoteDocumentCache if no entry is
     * buffered.
     *
     * Entries added to the cache *must* be read first. This is to facilitate
     * calculating the size delta of the pending changes.
     *
     * PORTING NOTE: This class was implemented then removed from other platforms.
     * If byte-counting ends up being needed on the other platforms, consider
     * porting this class as part of that implementation work.
     */ class As {
        constructor() {
            // A mapping of document key to the new cache entry that should be written (or null if any
            // existing cache entry should be removed).
            this.Kn = new Is((t => t.toString()), ((t, e) => t.isEqual(e))), this.Qn = !1;
        }
        Wn(t) {
            const e = this.Kn.get(t);
            return e ? e.readTime : j.min();
        }
        /**
         * Buffers a `RemoteDocumentCache.addEntry()` call.
         *
         * You can only modify documents that have already been retrieved via
         * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
         */    jn(t, e) {
            this.Gn(), this.Kn.set(t.key, {
                zn: t,
                readTime: e
            });
        }
        /**
         * Buffers a `RemoteDocumentCache.removeEntry()` call.
         *
         * You can only remove documents that have already been retrieved via
         * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
         */    Hn(t, e = null) {
            this.Gn(), this.Kn.set(t, {
                zn: null,
                readTime: e
            });
        }
        /**
         * Looks up an entry in the cache. The buffered changes will first be checked,
         * and if no buffered change applies, this will forward to
         * `RemoteDocumentCache.getEntry()`.
         *
         * @param transaction - The transaction in which to perform any persistence
         *     operations.
         * @param documentKey - The key of the entry to look up.
         * @returns The cached Document or NoDocument entry, or null if we have
         *     nothing cached.
         */    Jn(t, e) {
            this.Gn();
            const n = this.Kn.get(e);
            return void 0 !== n ? ms.resolve(n.zn) : this.Yn(t, e);
        }
        /**
         * Looks up several entries in the cache, forwarding to
         * `RemoteDocumentCache.getEntry()`.
         *
         * @param transaction - The transaction in which to perform any persistence
         *     operations.
         * @param documentKeys - The keys of the entries to look up.
         * @returns A map of cached `Document`s or `NoDocument`s, indexed by key. If
         *     an entry cannot be found, the corresponding key will be mapped to a
         *     null value.
         */    getEntries(t, e) {
            return this.Xn(t, e);
        }
        /**
         * Applies buffered changes to the underlying RemoteDocumentCache, using
         * the provided transaction.
         */    apply(t) {
            return this.Gn(), this.Qn = !0, this.Zn(t);
        }
        /** Helper to assert this.changes is not null  */    Gn() {}
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class Rs {
        constructor() {
            this.promise = new Promise(((t, e) => {
                this.resolve = t, this.reject = e;
            }));
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function Ps(t) {
        return new de(t, /* useProto3Json= */ !0);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function Vs(t) {
        /**
     * Returns true if obj is an object and contains at least one of the specified
     * methods.
     */
        return function(t, e) {
            if ("object" != typeof t || null === t) return !1;
            const n = t;
            for (const t of e) if (t in n && "function" == typeof n[t]) return !0;
            return !1;
        }
        /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ (t, [ "next", "error", "complete" ]);
    }

    const gs = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";

    /**
     * A base class representing a persistence transaction, encapsulating both the
     * transaction's sequence numbers as well as a list of onCommitted listeners.
     *
     * When you call Persistence.runTransaction(), it will create a transaction and
     * pass it to your callback. You then pass it to any method that operates
     * on persistence.
     */ class ys {
        constructor() {
            this.ts = [];
        }
        es(t) {
            this.ts.push(t);
        }
        ns() {
            this.ts.forEach((t => t()));
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A readonly view of the local state of all documents we're tracking (i.e. we
     * have a cached version in remoteDocumentCache or local mutations for the
     * document). The view is computed by applying the mutations in the
     * MutationQueue to the RemoteDocumentCache.
     */ class ps {
        constructor(t, e, n) {
            this.ss = t, this.rs = e, this.os = n;
        }
        /**
         * Get the local view of the document identified by `key`.
         *
         * @returns Local view of the document or null if we don't have any cached
         * state for it.
         */    cs(t, e) {
            return this.rs.us(t, e).next((n => this.hs(t, e, n)));
        }
        /** Internal version of `getDocument` that allows reusing batches. */    hs(t, e, n) {
            return this.ss.Jn(t, e).next((t => {
                for (const s of n) t = s.pn(e, t);
                return t;
            }));
        }
        // Returns the view of the given `docs` as they would appear after applying
        // all mutations in the given `batches`.
        ls(t, e, n) {
            let s = Vt();
            return e.forEach(((t, e) => {
                for (const s of n) e = s.pn(t, e);
                s = s.Tt(t, e);
            })), s;
        }
        /**
         * Gets the local view of the documents identified by `keys`.
         *
         * If we don't have cached state for a document in `keys`, a NoDocument will
         * be stored for that key in the resulting set.
         */    _s(t, e) {
            return this.ss.getEntries(t, e).next((e => this.fs(t, e)));
        }
        /**
         * Similar to `getDocuments`, but creates the local view from the given
         * `baseDocs` without retrieving documents from the local store.
         */    fs(t, e) {
            return this.rs.ds(t, e).next((n => {
                const s = this.ls(t, e, n);
                let i = Pt();
                return s.forEach(((t, e) => {
                    // TODO(http://b/32275378): Don't conflate missing / deleted.
                    e || (e = new kn(t, j.min())), i = i.Tt(t, e);
                })), i;
            }));
        }
        /**
         * Performs a query against the local view of all documents.
         *
         * @param transaction - The persistence transaction.
         * @param query - The query to match documents against.
         * @param sinceReadTime - If not set to SnapshotVersion.min(), return only
         *     documents that have been read since this snapshot version (exclusive).
         */    ws(t, e, n) {
            /**
     * Returns whether the query matches a single document by path (rather than a
     * collection).
     */
            return function(t) {
                return Y$1.st(t.path) && null === t.collectionGroup && 0 === t.filters.length;
            }(e) ? this.Es(t, e.path) : Qn(e) ? this.Ts(t, e, n) : this.Is(t, e, n);
        }
        Es(t, e) {
            // Just do a simple document lookup.
            return this.cs(t, new Y$1(e)).next((t => {
                let e = yt();
                return t instanceof Mn && (e = e.Tt(t.key, t)), e;
            }));
        }
        Ts(t, e, n) {
            const s = e.collectionGroup;
            let i = yt();
            return this.os.As(t, s).next((r => ms.forEach(r, (r => {
                const o = function(t, e) {
                    return new Fn(e, 
                    /*collectionGroup=*/ null, t.Tn.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
                }
                /**
     * Returns true if this query does not specify any query constraints that
     * could remove results.
     */ (e, r.child(s));
                return this.Is(t, o, n).next((t => {
                    t.forEach(((t, e) => {
                        i = i.Tt(t, e);
                    }));
                }));
            })).next((() => i))));
        }
        Is(t, e, n) {
            // Query the remote documents and overlay mutations.
            let s, i;
            return this.ss.ws(t, e, n).next((n => (s = n, this.rs.Rs(t, e)))).next((e => (i = e, 
            this.Ps(t, i, s).next((t => {
                s = t;
                for (const t of i) for (const e of t.mutations) {
                    const n = e.key, i = s.get(n), r = In(e, i, i, t.Vn);
                    s = r instanceof Mn ? s.Tt(n, r) : s.remove(n);
                }
            }))))).next((() => (
            // Finally, filter out any documents that don't actually match
            // the query.
            s.forEach(((t, n) => {
                Yn(e, n) || (s = s.remove(t));
            })), s)));
        }
        Ps(t, e, n) {
            let s = vt();
            for (const t of e) for (const e of t.mutations) e instanceof Vn && null === n.get(e.key) && (s = s.add(e.key));
            let i = n;
            return this.ss.getEntries(t, s).next((t => (t.forEach(((t, e) => {
                null !== e && e instanceof Mn && (i = i.Tt(t, e));
            })), i)));
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A set of changes to what documents are currently in view and out of view for
     * a given query. These changes are sent to the LocalStore by the View (via
     * the SyncEngine) and are used to pin / unpin documents as appropriate.
     */ class bs {
        constructor(t, e, n, s) {
            this.targetId = t, this.fromCache = e, this.Vs = n, this.gs = s;
        }
        static ys(t, e) {
            let n = vt(), s = vt();
            for (const t of e.docChanges) switch (t.type) {
              case 0 /* Added */ :
                n = n.add(t.doc.key);
                break;

              case 1 /* Removed */ :
                s = s.add(t.doc.key);
     // do nothing
                    }
            return new bs(t, e.fromCache, n, s);
        }
    }

    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to
     * exceed. All subsequent calls to next will return increasing values. If provided with a
     * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as
     * well as write out sequence numbers that it produces via `next()`.
     */ class vs {
        constructor(t, e) {
            this.previousValue = t, e && (e.ps = t => this.bs(t), this.vs = t => e.Ss(t));
        }
        bs(t) {
            return this.previousValue = Math.max(t, this.previousValue), this.previousValue;
        }
        next() {
            const t = ++this.previousValue;
            return this.vs && this.vs(t), t;
        }
    }

    vs.Ds = -1;

    /**
     * A helper for running delayed tasks following an exponential backoff curve
     * between attempts.
     *
     * Each delay is made up of a "base" delay which follows the exponential
     * backoff curve, and a +/- 50% "jitter" that is calculated and added to the
     * base delay. This prevents clients from accidentally synchronizing their
     * delays causing spikes of load to the backend.
     */
    class Ss {
        constructor(
        /**
         * The AsyncQueue to run backoff operations on.
         */
        t, 
        /**
         * The ID to use when scheduling backoff operations on the AsyncQueue.
         */
        e, 
        /**
         * The initial delay (used as the base delay on the first retry attempt).
         * Note that jitter will still be applied, so the actual delay could be as
         * little as 0.5*initialDelayMs.
         */
        n = 1e3
        /**
         * The multiplier to use to determine the extended base delay after each
         * attempt.
         */ , s = 1.5
        /**
         * The maximum base delay after which no further backoff is performed.
         * Note that jitter will still be applied, so the actual delay could be as
         * much as 1.5*maxDelayMs.
         */ , i = 6e4) {
            this.Cs = t, this.Ns = e, this.xs = n, this.Ms = s, this.ks = i, this.Os = 0, this.Fs = null, 
            /** The last backoff attempt, as epoch milliseconds. */
            this.$s = Date.now(), this.reset();
        }
        /**
         * Resets the backoff delay.
         *
         * The very next backoffAndWait() will have no delay. If it is called again
         * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
         * subsequent ones will increase according to the backoffFactor.
         */    reset() {
            this.Os = 0;
        }
        /**
         * Resets the backoff delay to the maximum delay (e.g. for use after a
         * RESOURCE_EXHAUSTED error).
         */    Ls() {
            this.Os = this.ks;
        }
        /**
         * Returns a promise that resolves after currentDelayMs, and increases the
         * delay for any subsequent attempts. If there was a pending backoff operation
         * already, it will be canceled.
         */    Bs(t) {
            // Cancel any pending backoff operation.
            this.cancel();
            // First schedule using the current base (which may be 0 and should be
            // honored as such).
            const e = Math.floor(this.Os + this.qs()), n = Math.max(0, Date.now() - this.$s), s = Math.max(0, e - n);
            // Guard against lastAttemptTime being in the future due to a clock change.
                    s > 0 && p$1("ExponentialBackoff", `Backing off for ${s} ms (base delay: ${this.Os} ms, delay with jitter: ${e} ms, last attempt: ${n} ms ago)`), 
            this.Fs = this.Cs.Us(this.Ns, s, (() => (this.$s = Date.now(), t()))), 
            // Apply backoff factor to determine next delay and ensure it is within
            // bounds.
            this.Os *= this.Ms, this.Os < this.xs && (this.Os = this.xs), this.Os > this.ks && (this.Os = this.ks);
        }
        Ks() {
            null !== this.Fs && (this.Fs.Qs(), this.Fs = null);
        }
        cancel() {
            null !== this.Fs && (this.Fs.cancel(), this.Fs = null);
        }
        /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */    qs() {
            return (Math.random() - .5) * this.Os;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // References to `window` are guarded by SimpleDb.isAvailable()
    /* eslint-disable no-restricted-globals */
    /**
     * Provides a wrapper around IndexedDb with a simplified interface that uses
     * Promise-like return values to chain operations. Real promises cannot be used
     * since .then() continuations are executed asynchronously (e.g. via
     * .setImmediate), which would cause IndexedDB to end the transaction.
     * See PersistencePromise for more details.
     */
    class Ds {
        /*
         * Creates a new SimpleDb wrapper for IndexedDb database `name`.
         *
         * Note that `version` must not be a downgrade. IndexedDB does not support
         * downgrading the schema version. We currently do not support any way to do
         * versioning outside of IndexedDB's versioning mechanism, as only
         * version-upgrade transactions are allowed to do things like create
         * objectstores.
         */
        constructor(t, e, n) {
            this.name = t, this.version = e, this.Ws = n;
            // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the
            // bug we're checking for should exist in iOS >= 12.2 and < 13, but for
            // whatever reason it's much harder to hit after 12.2 so we only proactively
            // log on 12.2.
            12.2 === Ds.js(getUA()) && b("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
        }
        /** Deletes the specified database. */    static delete(t) {
            return p$1("SimpleDb", "Removing database:", t), Os(window.indexedDB.deleteDatabase(t)).Ln();
        }
        /** Returns true if IndexedDB is available in the current environment. */    static Gs() {
            if ("undefined" == typeof indexedDB) return !1;
            if (Ds.zs()) return !0;
            // We extensively use indexed array values and compound keys,
            // which IE and Edge do not support. However, they still have indexedDB
            // defined on the window, so we need to check for them here and make sure
            // to return that persistence is not enabled for those browsers.
            // For tracking support of this feature, see here:
            // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/
            // Check the UA string to find out the browser.
                    const t = getUA(), e = Ds.js(t), n = 0 < e && e < 10, s = Ds.Hs(t), i = 0 < s && s < 4.5;
            // IE 10
            // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
            // IE 11
            // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
            // Edge
            // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,
            // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
            // iOS Safari: Disable for users running iOS version < 10.
                    return !(t.indexOf("MSIE ") > 0 || t.indexOf("Trident/") > 0 || t.indexOf("Edge/") > 0 || n || i);
        }
        /**
         * Returns true if the backing IndexedDB store is the Node IndexedDBShim
         * (see https://github.com/axemclion/IndexedDBShim).
         */    static zs() {
            var t;
            return "undefined" != typeof process && "YES" === (null === (t = process.env) || void 0 === t ? void 0 : t.Js);
        }
        /** Helper to get a typed SimpleDbStore from a transaction. */    static Ys(t, e) {
            return t.store(e);
        }
        // visible for testing
        /** Parse User Agent to determine iOS version. Returns -1 if not found. */
        static js(t) {
            const e = t.match(/i(?:phone|pad|pod) os ([\d_]+)/i), n = e ? e[1].split("_").slice(0, 2).join(".") : "-1";
            return Number(n);
        }
        // visible for testing
        /** Parse User Agent to determine Android version. Returns -1 if not found. */
        static Hs(t) {
            const e = t.match(/Android ([\d.]+)/i), n = e ? e[1].split(".").slice(0, 2).join(".") : "-1";
            return Number(n);
        }
        /**
         * Opens the specified database, creating or upgrading it if necessary.
         */    async Xs(t) {
            return this.db || (p$1("SimpleDb", "Opening database:", this.name), this.db = await new Promise(((e, n) => {
                // TODO(mikelehen): Investigate browser compatibility.
                // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB
                // suggests IE9 and older WebKit browsers handle upgrade
                // differently. They expect setVersion, as described here:
                // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion
                const s = indexedDB.open(this.name, this.version);
                s.onsuccess = t => {
                    const n = t.target.result;
                    e(n);
                }, s.onblocked = () => {
                    n(new Ns(t, "Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
                }, s.onerror = e => {
                    const s = e.target.error;
                    "VersionError" === s.name ? n(new M$1(x$1.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")) : n(new Ns(t, s));
                }, s.onupgradeneeded = t => {
                    p$1("SimpleDb", 'Database "' + this.name + '" requires upgrade from version:', t.oldVersion);
                    const e = t.target.result;
                    this.Ws.createOrUpgrade(e, s.transaction, t.oldVersion, this.version).next((() => {
                        p$1("SimpleDb", "Database upgrade to version " + this.version + " complete");
                    }));
                };
            }))), this.Zs && (this.db.onversionchange = t => this.Zs(t)), this.db;
        }
        ti(t) {
            this.Zs = t, this.db && (this.db.onversionchange = e => t(e));
        }
        async runTransaction(t, e, n, s) {
            const i = "readonly" === e;
            let r = 0;
            for (;;) {
                ++r;
                try {
                    this.db = await this.Xs(t);
                    const e = Ms.open(this.db, t, i ? "readonly" : "readwrite", n), r = s(e).catch((t => (
                    // Abort the transaction if there was an error.
                    e.abort(t), ms.reject(t)))).Ln();
                    // As noted above, errors are propagated by aborting the transaction. So
                    // we swallow any error here to avoid the browser logging it as unhandled.
                    return r.catch((() => {})), 
                    // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
                    // fire), but still return the original transactionFnResult back to the
                    // caller.
                    await e.ei, r;
                } catch (t) {
                    // TODO(schmidt-sebastian): We could probably be smarter about this and
                    // not retry exceptions that are likely unrecoverable (such as quota
                    // exceeded errors).
                    // Note: We cannot use an instanceof check for FirestoreException, since the
                    // exception is wrapped in a generic error by our async/await handling.
                    const e = "FirebaseError" !== t.name && r < 3;
                    if (p$1("SimpleDb", "Transaction failed with error:", t.message, "Retrying:", e), 
                    this.close(), !e) return Promise.reject(t);
                }
            }
        }
        close() {
            this.db && this.db.close(), this.db = void 0;
        }
    }

    /**
     * A controller for iterating over a key range or index. It allows an iterate
     * callback to delete the currently-referenced object, or jump to a new key
     * within the key range or index.
     */ class Cs {
        constructor(t) {
            this.ni = t, this.si = !1, this.ii = null;
        }
        get kn() {
            return this.si;
        }
        get ri() {
            return this.ii;
        }
        set cursor(t) {
            this.ni = t;
        }
        /**
         * This function can be called to stop iteration at any point.
         */    done() {
            this.si = !0;
        }
        /**
         * This function can be called to skip to that next key, which could be
         * an index or a primary key.
         */    oi(t) {
            this.ii = t;
        }
        /**
         * Delete the current cursor value from the object store.
         *
         * NOTE: You CANNOT do this with a keysOnly query.
         */    delete() {
            return Os(this.ni.delete());
        }
    }

    /** An error that wraps exceptions that thrown during IndexedDB execution. */ class Ns extends M$1 {
        constructor(t, e) {
            super(x$1.UNAVAILABLE, `IndexedDB transaction '${t}' failed: ${e}`), this.name = "IndexedDbTransactionError";
        }
    }

    /** Verifies whether `e` is an IndexedDbTransactionError. */ function xs(t) {
        // Use name equality, as instanceof checks on errors don't work with errors
        // that wrap other errors.
        return "IndexedDbTransactionError" === t.name;
    }

    /**
     * Wraps an IDBTransaction and exposes a store() method to get a handle to a
     * specific object store.
     */ class Ms {
        constructor(t, e) {
            this.action = t, this.transaction = e, this.aborted = !1, 
            /**
             * A promise that resolves with the result of the IndexedDb transaction.
             */
            this.ci = new Rs, this.transaction.oncomplete = () => {
                this.ci.resolve();
            }, this.transaction.onabort = () => {
                e.error ? this.ci.reject(new Ns(t, e.error)) : this.ci.resolve();
            }, this.transaction.onerror = e => {
                const n = $s(e.target.error);
                this.ci.reject(new Ns(t, n));
            };
        }
        static open(t, e, n, s) {
            try {
                return new Ms(e, t.transaction(s, n));
            } catch (t) {
                throw new Ns(e, t);
            }
        }
        get ei() {
            return this.ci.promise;
        }
        abort(t) {
            t && this.ci.reject(t), this.aborted || (p$1("SimpleDb", "Aborting transaction:", t ? t.message : "Client-initiated abort"), 
            this.aborted = !0, this.transaction.abort());
        }
        /**
         * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All
         * operations performed on the SimpleDbStore happen within the context of this
         * transaction and it cannot be used anymore once the transaction is
         * completed.
         *
         * Note that we can't actually enforce that the KeyType and ValueType are
         * correct, but they allow type safety through the rest of the consuming code.
         */    store(t) {
            const e = this.transaction.objectStore(t);
            return new ks(e);
        }
    }

    /**
     * A wrapper around an IDBObjectStore providing an API that:
     *
     * 1) Has generic KeyType / ValueType parameters to provide strongly-typed
     * methods for acting against the object store.
     * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every
     * method return a PersistencePromise instead.
     * 3) Provides a higher-level API to avoid needing to do excessive wrapping of
     * intermediate IndexedDB types (IDBCursorWithValue, etc.)
     */ class ks {
        constructor(t) {
            this.store = t;
        }
        put(t, e) {
            let n;
            return void 0 !== e ? (p$1("SimpleDb", "PUT", this.store.name, t, e), n = this.store.put(e, t)) : (p$1("SimpleDb", "PUT", this.store.name, "<auto-key>", t), 
            n = this.store.put(t)), Os(n);
        }
        /**
         * Adds a new value into an Object Store and returns the new key. Similar to
         * IndexedDb's `add()`, this method will fail on primary key collisions.
         *
         * @param value - The object to write.
         * @returns The key of the value to add.
         */    add(t) {
            p$1("SimpleDb", "ADD", this.store.name, t, t);
            return Os(this.store.add(t));
        }
        /**
         * Gets the object with the specified key from the specified store, or null
         * if no object exists with the specified key.
         *
         * @key The key of the object to get.
         * @returns The object with the specified key or null if no object exists.
         */    get(t) {
            // We're doing an unsafe cast to ValueType.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return Os(this.store.get(t)).next((e => (
            // Normalize nonexistence to null.
            void 0 === e && (e = null), p$1("SimpleDb", "GET", this.store.name, t, e), e)));
        }
        delete(t) {
            p$1("SimpleDb", "DELETE", this.store.name, t);
            return Os(this.store.delete(t));
        }
        /**
         * If we ever need more of the count variants, we can add overloads. For now,
         * all we need is to count everything in a store.
         *
         * Returns the number of rows in the store.
         */    count() {
            p$1("SimpleDb", "COUNT", this.store.name);
            return Os(this.store.count());
        }
        ui(t, e) {
            const n = this.cursor(this.options(t, e)), s = [];
            return this.ai(n, ((t, e) => {
                s.push(e);
            })).next((() => s));
        }
        hi(t, e) {
            p$1("SimpleDb", "DELETE ALL", this.store.name);
            const n = this.options(t, e);
            n.li = !1;
            const s = this.cursor(n);
            return this.ai(s, ((t, e, n) => n.delete()));
        }
        _i(t, e) {
            let n;
            e ? n = t : (n = {}, e = t);
            const s = this.cursor(n);
            return this.ai(s, e);
        }
        /**
         * Iterates over a store, but waits for the given callback to complete for
         * each entry before iterating the next entry. This allows the callback to do
         * asynchronous work to determine if this iteration should continue.
         *
         * The provided callback should return `true` to continue iteration, and
         * `false` otherwise.
         */    fi(t) {
            const e = this.cursor({});
            return new ms(((n, s) => {
                e.onerror = t => {
                    const e = $s(t.target.error);
                    s(e);
                }, e.onsuccess = e => {
                    const s = e.target.result;
                    s ? t(s.primaryKey, s.value).next((t => {
                        t ? s.continue() : n();
                    })) : n();
                };
            }));
        }
        ai(t, e) {
            const n = [];
            return new ms(((s, i) => {
                t.onerror = t => {
                    i(t.target.error);
                }, t.onsuccess = t => {
                    const i = t.target.result;
                    if (!i) return void s();
                    const r = new Cs(i), o = e(i.primaryKey, i.value, r);
                    if (o instanceof ms) {
                        const t = o.catch((t => (r.done(), ms.reject(t))));
                        n.push(t);
                    }
                    r.kn ? s() : null === r.ri ? i.continue() : i.continue(r.ri);
                };
            })).next((() => ms.qn(n)));
        }
        options(t, e) {
            let n = void 0;
            return void 0 !== t && ("string" == typeof t ? n = t : e = t), {
                index: n,
                range: e
            };
        }
        cursor(t) {
            let e = "next";
            if (t.reverse && (e = "prev"), t.index) {
                const n = this.store.index(t.index);
                return t.li ? n.openKeyCursor(t.range, e) : n.openCursor(t.range, e);
            }
            return this.store.openCursor(t.range, e);
        }
    }

    /**
     * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror
     * handlers to resolve / reject the PersistencePromise as appropriate.
     */ function Os(t) {
        return new ms(((e, n) => {
            t.onsuccess = t => {
                const n = t.target.result;
                e(n);
            }, t.onerror = t => {
                const e = $s(t.target.error);
                n(e);
            };
        }));
    }

    // Guard so we only report the error once.
    let Fs = !1;

    function $s(t) {
        const e = Ds.js(getUA());
        if (e >= 12.2 && e < 13) {
            const e = "An internal error was encountered in the Indexed Database server";
            if (t.message.indexOf(e) >= 0) {
                // Wrap error in a more descriptive one.
                const t = new M$1("internal", `IOS_INDEXEDDB_BUG1: IndexedDb has thrown '${e}'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.`);
                return Fs || (Fs = !0, 
                // Throw a global exception outside of this promise chain, for the user to
                // potentially catch.
                setTimeout((() => {
                    throw t;
                }), 0)), t;
            }
        }
        return t;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** The Platform's 'window' implementation or null if not available. */ function Ls() {
        // `window` is not always available, e.g. in ReactNative and WebWorkers.
        // eslint-disable-next-line no-restricted-globals
        return "undefined" != typeof window ? window : null;
    }

    /** The Platform's 'document' implementation or null if not available. */ function Bs() {
        // `document` is not always available, e.g. in ReactNative and WebWorkers.
        // eslint-disable-next-line no-restricted-globals
        return "undefined" != typeof document ? document : null;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents an operation scheduled to be run in the future on an AsyncQueue.
     *
     * It is created via DelayedOperation.createAndSchedule().
     *
     * Supports cancellation (via cancel()) and early execution (via skipDelay()).
     *
     * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type
     * in newer versions of TypeScript defines `finally`, which is not available in
     * IE.
     */
    class qs {
        constructor(t, e, n, s, i) {
            this.di = t, this.Ns = e, this.wi = n, this.op = s, this.Ei = i, this.Ti = new Rs, 
            this.then = this.Ti.promise.then.bind(this.Ti.promise), 
            // It's normal for the deferred promise to be canceled (due to cancellation)
            // and so we attach a dummy catch callback to avoid
            // 'UnhandledPromiseRejectionWarning' log spam.
            this.Ti.promise.catch((t => {}));
        }
        /**
         * Creates and returns a DelayedOperation that has been scheduled to be
         * executed on the provided asyncQueue after the provided delayMs.
         *
         * @param asyncQueue - The queue to schedule the operation on.
         * @param id - A Timer ID identifying the type of operation this is.
         * @param delayMs - The delay (ms) before the operation should be scheduled.
         * @param op - The operation to run.
         * @param removalCallback - A callback to be called synchronously once the
         *   operation is executed or canceled, notifying the AsyncQueue to remove it
         *   from its delayedOperations list.
         *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
         *   the DelayedOperation class public.
         */    static Ii(t, e, n, s, i) {
            const r = Date.now() + n, o = new qs(t, e, r, s, i);
            return o.start(n), o;
        }
        /**
         * Starts the timer. This is called immediately after construction by
         * createAndSchedule().
         */    start(t) {
            this.mi = setTimeout((() => this.Ai()), t);
        }
        /**
         * Queues the operation to run immediately (if it hasn't already been run or
         * canceled).
         */    Qs() {
            return this.Ai();
        }
        /**
         * Cancels the operation if it hasn't already been executed or canceled. The
         * promise will be rejected.
         *
         * As long as the operation has not yet been run, calling cancel() provides a
         * guarantee that the operation will not be run.
         */    cancel(t) {
            null !== this.mi && (this.clearTimeout(), this.Ti.reject(new M$1(x$1.CANCELLED, "Operation cancelled" + (t ? ": " + t : ""))));
        }
        Ai() {
            this.di.Ri((() => null !== this.mi ? (this.clearTimeout(), this.op().then((t => this.Ti.resolve(t)))) : Promise.resolve()));
        }
        clearTimeout() {
            null !== this.mi && (this.Ei(this), clearTimeout(this.mi), this.mi = null);
        }
    }

    class Us {
        constructor() {
            // The last promise in the queue.
            this.Pi = Promise.resolve(), 
            // A list of retryable operations. Retryable operations are run in order and
            // retried with backoff.
            this.Vi = [], 
            // Is this AsyncQueue being shut down? Once it is set to true, it will not
            // be changed again.
            this.gi = !1, 
            // Operations scheduled to be queued in the future. Operations are
            // automatically removed after they are run or canceled.
            this.yi = [], 
            // visible for testing
            this.pi = null, 
            // Flag set while there's an outstanding AsyncQueue operation, used for
            // assertion sanity-checks.
            this.bi = !1, 
            // List of TimerIds to fast-forward delays for.
            this.vi = [], 
            // Backoff timer used to schedule retries for retryable operations
            this.Si = new Ss(this, "async_queue_retry" /* AsyncQueueRetry */), 
            // Visibility handler that triggers an immediate retry of all retryable
            // operations. Meant to speed up recovery when we regain file system access
            // after page comes into foreground.
            this.Di = () => {
                const t = Bs();
                t && p$1("AsyncQueue", "Visibility state changed to " + t.visibilityState), this.Si.Ks();
            };
            const t = Bs();
            t && "function" == typeof t.addEventListener && t.addEventListener("visibilitychange", this.Di);
        }
        // Is this AsyncQueue being shut down? If true, this instance will not enqueue
        // any new operations, Promises from enqueue requests will not resolve.
        get Ci() {
            return this.gi;
        }
        /**
         * Adds a new operation to the queue without waiting for it to complete (i.e.
         * we ignore the Promise result).
         */    Ri(t) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.enqueue(t);
        }
        /**
         * Regardless if the queue has initialized shutdown, adds a new operation to the
         * queue without waiting for it to complete (i.e. we ignore the Promise result).
         */    Ni(t) {
            this.xi(), 
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.Mi(t);
        }
        /**
         * Initialize the shutdown of this queue. Once this method is called, the
         * only possible way to request running an operation is through
         * `enqueueEvenWhileRestricted()`.
         */    ki() {
            if (!this.gi) {
                this.gi = !0;
                const t = Bs();
                t && "function" == typeof t.removeEventListener && t.removeEventListener("visibilitychange", this.Di);
            }
        }
        /**
         * Adds a new operation to the queue. Returns a promise that will be resolved
         * when the promise returned by the new operation is (with its value).
         */    enqueue(t) {
            return this.xi(), this.gi ? new Promise((t => {})) : this.Mi(t);
        }
        /**
         * Enqueue a retryable operation.
         *
         * A retryable operation is rescheduled with backoff if it fails with a
         * IndexedDbTransactionError (the error type used by SimpleDb). All
         * retryable operations are executed in order and only run if all prior
         * operations were retried successfully.
         */    Oi(t) {
            this.Ri((() => (this.Vi.push(t), this.Fi())));
        }
        /**
         * Runs the next operation from the retryable queue. If the operation fails,
         * reschedules with backoff.
         */    async Fi() {
            if (0 !== this.Vi.length) {
                try {
                    await this.Vi[0](), this.Vi.shift(), this.Si.reset();
                } catch (t) {
                    if (!xs(t)) throw t;
     // Failure will be handled by AsyncQueue
                                    p$1("AsyncQueue", "Operation failed with retryable error: " + t);
                }
                this.Vi.length > 0 && 
                // If there are additional operations, we re-schedule `retryNextOp()`.
                // This is necessary to run retryable operations that failed during
                // their initial attempt since we don't know whether they are already
                // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
                // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
                // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
                // call scheduled here.
                // Since `backoffAndRun()` cancels an existing backoff and schedules a
                // new backoff on every call, there is only ever a single additional
                // operation in the queue.
                this.Si.Bs((() => this.Fi()));
            }
        }
        Mi(t) {
            const e = this.Pi.then((() => (this.bi = !0, t().catch((t => {
                this.pi = t, this.bi = !1;
                // Re-throw the error so that this.tail becomes a rejected Promise and
                // all further attempts to chain (via .then) will just short-circuit
                // and return the rejected Promise.
                throw b("INTERNAL UNHANDLED ERROR: ", 
                /**
     * Chrome includes Error.message in Error.stack. Other browsers do not.
     * This returns expected output of message + stack when available.
     * @param error - Error or FirestoreError
     */
                function(t) {
                    let e = t.message || "";
                    t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + "\n" + t.stack);
                    return e;
                }
                /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ (t)), t;
            })).then((t => (this.bi = !1, t))))));
            return this.Pi = e, e;
        }
        /**
         * Schedules an operation to be queued on the AsyncQueue once the specified
         * `delayMs` has elapsed. The returned DelayedOperation can be used to cancel
         * or fast-forward the operation prior to its running.
         */    Us(t, e, n) {
            this.xi(), 
            // Fast-forward delays for timerIds that have been overriden.
            this.vi.indexOf(t) > -1 && (e = 0);
            const s = qs.Ii(this, t, e, n, (t => this.$i(t)));
            return this.yi.push(s), s;
        }
        xi() {
            this.pi && D$1();
        }
        /**
         * Verifies there's an operation currently in-progress on the AsyncQueue.
         * Unfortunately we can't verify that the running code is in the promise chain
         * of that operation, so this isn't a foolproof check, but it should be enough
         * to catch some bugs.
         */    Li() {}
        /**
         * Waits until all currently queued tasks are finished executing. Delayed
         * operations are not run.
         */    async Bi() {
            // Operations in the queue prior to draining may have enqueued additional
            // operations. Keep draining the queue until the tail is no longer advanced,
            // which indicates that no more new operations were enqueued and that all
            // operations were executed.
            let t;
            do {
                t = this.Pi, await t;
            } while (t !== this.Pi);
        }
        /**
         * For Tests: Determine if a delayed operation with a particular TimerId
         * exists.
         */    qi(t) {
            for (const e of this.yi) if (e.Ns === t) return !0;
            return !1;
        }
        /**
         * For Tests: Runs some or all delayed operations early.
         *
         * @param lastTimerId - Delayed operations up to and including this TimerId
         * will be drained. Pass TimerId.All to run all delayed operations.
         * @returns a Promise that resolves once all operations have been run.
         */    Ui(t) {
            // Note that draining may generate more delayed ops, so we do that first.
            return this.Bi().then((() => {
                // Run ops in the same order they'd run if they ran naturally.
                this.yi.sort(((t, e) => t.wi - e.wi));
                for (const e of this.yi) if (e.Qs(), "all" /* All */ !== t && e.Ns === t) break;
                return this.Bi();
            }));
        }
        /**
         * For Tests: Skip all subsequent delays for a timer id.
         */    Ki(t) {
            this.vi.push(t);
        }
        /** Called once a DelayedOperation is run or canceled. */    $i(t) {
            // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
            const e = this.yi.indexOf(t);
            this.yi.splice(e, 1);
        }
    }

    /**
     * Returns a FirestoreError that can be surfaced to the user if the provided
     * error is an IndexedDbTransactionError. Re-throws the error otherwise.
     */ function Ks(t, e) {
        if (b("AsyncQueue", `${e}: ${t}`), xs(t)) return new M$1(x$1.UNAVAILABLE, `${e}: ${t}`);
        throw t;
    }

    function Qs([t, e], [n, s]) {
        const i = U$1(t, n);
        return 0 === i ? U$1(e, s) : i;
    }

    /**
     * Used to calculate the nth sequence number. Keeps a rolling buffer of the
     * lowest n values passed to `addElement`, and finally reports the largest of
     * them in `maxValue`.
     */ class Ws {
        constructor(t) {
            this.Qi = t, this.buffer = new mt(Qs), this.Wi = 0;
        }
        ji() {
            return ++this.Wi;
        }
        Gi(t) {
            const e = [ t, this.ji() ];
            if (this.buffer.size < this.Qi) this.buffer = this.buffer.add(e); else {
                const t = this.buffer.last();
                Qs(e, t) < 0 && (this.buffer = this.buffer.delete(t).add(e));
            }
        }
        get maxValue() {
            // Guaranteed to be non-empty. If we decide we are not collecting any
            // sequence numbers, nthSequenceNumber below short-circuits. If we have
            // decided that we are collecting n sequence numbers, it's because n is some
            // percentage of the existing sequence numbers. That means we should never
            // be in a situation where we are collecting sequence numbers but don't
            // actually have any.
            return this.buffer.last()[0];
        }
    }

    const js = {
        zi: !1,
        Hi: 0,
        Ji: 0,
        Yi: 0
    };

    class Gs {
        constructor(
        // When we attempt to collect, we will only do so if the cache size is greater than this
        // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.
        t, 
        // The percentage of sequence numbers that we will attempt to collect
        e, 
        // A cap on the total number of sequence numbers that will be collected. This prevents
        // us from collecting a huge number of sequence numbers if the cache has grown very large.
        n) {
            this.Xi = t, this.Zi = e, this.tr = n;
        }
        static er(t) {
            return new Gs(t, Gs.nr, Gs.sr);
        }
    }

    Gs.nr = 10, Gs.sr = 1e3, Gs.ir = new Gs(41943040, Gs.nr, Gs.sr), Gs.rr = new Gs(-1, 0, 0);

    /**
     * This class is responsible for the scheduling of LRU garbage collection. It handles checking
     * whether or not GC is enabled, as well as which delay to use before the next run.
     */
    class zs {
        constructor(t, e) {
            this.cr = t, this.di = e, this.ur = !1, this.ar = null;
        }
        start(t) {
            -1 !== this.cr.params.Xi && this.hr(t);
        }
        stop() {
            this.ar && (this.ar.cancel(), this.ar = null);
        }
        get lr() {
            return null !== this.ar;
        }
        hr(t) {
            const e = this.ur ? 3e5 : 6e4;
            p$1("LruGarbageCollector", `Garbage collection scheduled in ${e}ms`), this.ar = this.di.Us("lru_garbage_collection" /* LruGarbageCollection */ , e, (async () => {
                this.ar = null, this.ur = !0;
                try {
                    await t._r(this.cr);
                } catch (t) {
                    xs(t) ? p$1("LruGarbageCollector", "Ignoring IndexedDB error during garbage collection: ", t) : await Pr(t);
                }
                await this.hr(t);
            }));
        }
    }

    /** Implements the steps for LRU garbage collection. */ class Hs {
        constructor(t, e) {
            this.dr = t, this.params = e;
        }
        /** Given a percentile of target to collect, returns the number of targets to collect. */    wr(t, e) {
            return this.dr.Er(t).next((t => Math.floor(e / 100 * t)));
        }
        /** Returns the nth sequence number, counting in order from the smallest. */    Tr(t, e) {
            if (0 === e) return ms.resolve(vs.Ds);
            const n = new Ws(e);
            return this.dr.Ue(t, (t => n.Gi(t.sequenceNumber))).next((() => this.dr.Ir(t, (t => n.Gi(t))))).next((() => n.maxValue));
        }
        /**
         * Removes targets with a sequence number equal to or less than the given upper bound, and removes
         * document associations with those targets.
         */    mr(t, e, n) {
            return this.dr.mr(t, e, n);
        }
        /**
         * Removes documents that have a sequence number equal to or less than the upper bound and are not
         * otherwise pinned.
         */    Ar(t, e) {
            return this.dr.Ar(t, e);
        }
        Rr(t, e) {
            return -1 === this.params.Xi ? (p$1("LruGarbageCollector", "Garbage collection skipped; disabled"), 
            ms.resolve(js)) : this.Pr(t).next((n => n < this.params.Xi ? (p$1("LruGarbageCollector", `Garbage collection skipped; Cache size ${n} is lower than threshold ` + this.params.Xi), 
            js) : this.Vr(t, e)));
        }
        Pr(t) {
            return this.dr.Pr(t);
        }
        Vr(t, e) {
            let n, s, i, r, c, u, a;
            const h = Date.now();
            return this.wr(t, this.params.Zi).next((e => (
            // Cap at the configured max
            e > this.params.tr ? (p$1("LruGarbageCollector", `Capping sequence numbers to collect down to the maximum of ${this.params.tr} from ` + e), 
            s = this.params.tr) : s = e, r = Date.now(), this.Tr(t, s)))).next((s => (n = s, 
            c = Date.now(), this.mr(t, n, e)))).next((e => (i = e, u = Date.now(), this.Ar(t, n)))).next((t => {
                if (a = Date.now(), g() <= LogLevel.DEBUG) {
                    p$1("LruGarbageCollector", `LRU Garbage Collection\n\tCounted targets in ${r - h}ms\n\tDetermined least recently used ${s} in ` + (c - r) + "ms\n" + `\tRemoved ${i} targets in ` + (u - c) + "ms\n" + `\tRemoved ${t} documents in ` + (a - u) + "ms\n" + `Total Duration: ${a - h}ms`);
                }
                return ms.resolve({
                    zi: !0,
                    Hi: s,
                    Ji: i,
                    Yi: t
                });
            }));
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A query engine that takes advantage of the target document mapping in the
     * QueryCache. Query execution is optimized by only reading the documents that
     * previously matched a query plus any documents that were edited after the
     * query was last listened to.
     *
     * There are some cases when this optimization is not guaranteed to produce
     * the same results as full collection scans. In these cases, query
     * processing falls back to full scans. These cases are:
     *
     * - Limit queries where a document that matched the query previously no longer
     *   matches the query.
     *
     * - Limit queries where a document edit may cause the document to sort below
     *   another document that is in the local cache.
     *
     * - Queries that have never been CURRENT or free of limbo documents.
     */ class Js {
        /** Sets the document view to query against. */
        gr(t) {
            this.yr = t;
        }
        /** Returns all local documents matching the specified query. */    ws(t, e, n, s) {
            // Queries that match all documents don't benefit from using
            // key-based lookups. It is more efficient to scan all documents in a
            // collection, rather than to perform individual lookups.
            return function(t) {
                return 0 === t.filters.length && null === t.limit && null == t.startAt && null == t.endAt && (0 === t.Tn.length || 1 === t.Tn.length && t.Tn[0].field.Y());
            }(e) || n.isEqual(j.min()) ? this.pr(t, e) : this.yr._s(t, s).next((i => {
                const r = this.br(e, i);
                return (Bn(e) || qn(e)) && this.vr(e.limitType, r, s, n) ? this.pr(t, e) : (g() <= LogLevel.DEBUG && p$1("QueryEngine", "Re-using previous result from %s to execute query: %s", n.toString(), Jn(e)), 
                this.yr.ws(t, e, n).next((t => (
                // We merge `previousResults` into `updateResults`, since
                // `updateResults` is already a DocumentMap. If a document is
                // contained in both lists, then its contents are the same.
                r.forEach((e => {
                    t = t.Tt(e.key, e);
                })), t))));
            }));
            // Queries that have never seen a snapshot without limbo free documents
            // should also be run as a full collection scan.
            }
        /** Applies the query filter and sorting to the provided documents.  */    br(t, e) {
            // Sort the documents and re-apply the query filter since previously
            // matching documents do not necessarily still match the query.
            let n = new mt(Xn(t));
            return e.forEach(((e, s) => {
                s instanceof Mn && Yn(t, s) && (n = n.add(s));
            })), n;
        }
        /**
         * Determines if a limit query needs to be refilled from cache, making it
         * ineligible for index-free execution.
         *
         * @param sortedPreviousResults - The documents that matched the query when it
         * was last synchronized, sorted by the query's comparator.
         * @param remoteKeys - The document keys that matched the query at the last
         * snapshot.
         * @param limboFreeSnapshotVersion - The version of the snapshot when the
         * query was last synchronized.
         */    vr(t, e, n, s) {
            // The query needs to be refilled if a previously matching document no
            // longer matches.
            if (n.size !== e.size) return !0;
            // Limit queries are not eligible for index-free query execution if there is
            // a potential that an older document from cache now sorts before a document
            // that was previously part of the limit. This, however, can only happen if
            // the document at the edge of the limit goes out of limit.
            // If a document that is not the limit boundary sorts differently,
            // the boundary of the limit itself did not change and documents from cache
            // will continue to be "rejected" by this boundary. Therefore, we can ignore
            // any modifications that don't affect the last document.
                    const i = "F" /* First */ === t ? e.last() : e.first();
            return !!i && (i.hasPendingWrites || i.version.D(s) > 0);
        }
        pr(t, e) {
            return g() <= LogLevel.DEBUG && p$1("QueryEngine", "Using full collection scan to execute query:", Jn(e)), 
            this.yr.ws(t, e, j.min());
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Encodes a resource path into a IndexedDb-compatible string form.
     */
    function Ys(t) {
        let e = "";
        for (let n = 0; n < t.length; n++) e.length > 0 && (e = Zs(e)), e = Xs(t.get(n), e);
        return Zs(e);
    }

    /** Encodes a single segment of a resource path into the given result */ function Xs(t, e) {
        let n = e;
        const s = t.length;
        for (let e = 0; e < s; e++) {
            const s = t.charAt(e);
            switch (s) {
              case "\0":
                n += "";
                break;

              case "":
                n += "";
                break;

              default:
                n += s;
            }
        }
        return n;
    }

    /** Encodes a path separator into the given result */ function Zs(t) {
        return t + "";
    }

    /**
     * Decodes the given IndexedDb-compatible string form of a resource path into
     * a ResourcePath instance. Note that this method is not suitable for use with
     * decoding resource names from the server; those are One Platform format
     * strings.
     */ function ti(t) {
        // Event the empty path must encode as a path of at least length 2. A path
        // with exactly 2 must be the empty path.
        const e = t.length;
        if (C(e >= 2), 2 === e) return C("" === t.charAt(0) && "" === t.charAt(1)), z$1.H();
        // Escape characters cannot exist past the second-to-last position in the
        // source value.
            const n = e - 2, s = [];
        let i = "";
        for (let r = 0; r < e; ) {
            // The last two characters of a valid encoded path must be a separator, so
            // there must be an end to this segment.
            const e = t.indexOf("", r);
            (e < 0 || e > n) && D$1();
            switch (t.charAt(e + 1)) {
              case "":
                const n = t.substring(r, e);
                let o;
                0 === i.length ? 
                // Avoid copying for the common case of a segment that excludes \0
                // and \001
                o = n : (i += n, o = i, i = ""), s.push(o);
                break;

              case "":
                i += t.substring(r, e), i += "\0";
                break;

              case "":
                // The escape character can be used in the output to encode itself.
                i += t.substring(r, e + 1);
                break;

              default:
                D$1();
            }
            r = e + 2;
        }
        return new z$1(s);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Serializer for values stored in the LocalStore. */ class ei {
        constructor(t) {
            this.Sr = t;
        }
    }

    /** Decodes a remote document from storage locally to a Document. */ function ni(t, e) {
        if (e.document) return function(t, e, n) {
            const s = ye(t, e.name), i = Re(e.updateTime), r = new Dn({
                mapValue: {
                    fields: e.fields
                }
            });
            return new Mn(s, i, r, {
                hasCommittedMutations: !!n
            });
        }(t.Sr, e.document, !!e.hasCommittedMutations);
        if (e.noDocument) {
            const t = Y$1.it(e.noDocument.path), n = ci(e.noDocument.readTime);
            return new kn(t, n, {
                hasCommittedMutations: !!e.hasCommittedMutations
            });
        }
        if (e.unknownDocument) {
            const t = Y$1.it(e.unknownDocument.path), n = ci(e.unknownDocument.version);
            return new On(t, n);
        }
        return D$1();
    }

    /** Encodes a document for storage locally. */ function si(t, e, n) {
        const s = ii(n), i = e.key.path.$().W();
        if (e instanceof Mn) {
            const n = function(t, e) {
                return {
                    name: ge(t, e.key),
                    fields: e.En().mapValue.fields,
                    updateTime: Ie(t, e.version.N())
                };
            }(t.Sr, e), r = e.hasCommittedMutations;
            return new Mi(
            /* unknownDocument= */ null, 
            /* noDocument= */ null, n, r, s, i);
        }
        if (e instanceof kn) {
            const t = e.key.path.W(), n = oi(e.version), r = e.hasCommittedMutations;
            return new Mi(
            /* unknownDocument= */ null, new Ni(t, n), 
            /* document= */ null, r, s, i);
        }
        if (e instanceof On) {
            const t = e.key.path.W(), n = oi(e.version);
            return new Mi(new xi(t, n), 
            /* noDocument= */ null, 
            /* document= */ null, 
            /* hasCommittedMutations= */ !0, s, i);
        }
        return D$1();
    }

    function ii(t) {
        const e = t.N();
        return [ e.seconds, e.nanoseconds ];
    }

    function ri(t) {
        const e = new W$1(t[0], t[1]);
        return j.S(e);
    }

    function oi(t) {
        const e = t.N();
        return new bi(e.seconds, e.nanoseconds);
    }

    function ci(t) {
        const e = new W$1(t.seconds, t.nanoseconds);
        return j.S(e);
    }

    /** Encodes a batch of mutations into a DbMutationBatch for local storage. */
    /** Decodes a DbMutationBatch into a MutationBatch */
    function ui(t, e) {
        const n = (e.baseMutations || []).map((e => Me(t.Sr, e))), s = e.mutations.map((e => Me(t.Sr, e))), i = W$1.fromMillis(e.localWriteTimeMs);
        return new Es(e.batchId, i, n, s);
    }

    /** Decodes a DbTarget into TargetData */ function ai(t) {
        const e = ci(t.readTime), n = void 0 !== t.lastLimboFreeSnapshotVersion ? ci(t.lastLimboFreeSnapshotVersion) : j.min();
        let s;
        var i;
        return void 0 !== t.query.documents ? (C(1 === (i = t.query).documents.length), 
        s = jn(Ln(be(i.documents[0])))) : s = function(t) {
            return jn($e(t));
        }(t.query), new ht(s, t.targetId, 0 /* Listen */ , t.lastListenSequenceNumber, e, n, at.fromBase64String(t.resumeToken));
    }

    /** Encodes TargetData into a DbTarget for storage locally. */ function hi(t, e) {
        const n = oi(e.ft), s = oi(e.lastLimboFreeSnapshotVersion);
        let i;
        i = ut(e.target) ? Oe(t.Sr, e.target) : Fe(t.Sr, e.target);
        // We can't store the resumeToken as a ByteString in IndexedDb, so we
        // convert it to a base64 string for storage.
            const r = e.resumeToken.toBase64();
        // lastListenSequenceNumber is always 0 until we do real GC.
            return new Oi(e.targetId, rt(e.target), n, r, e.sequenceNumber, s, i);
    }

    /**
     * A helper function for figuring out what kind of query has been stored.
     */
    /**
     * Encodes a `BundledQuery` from bundle proto to a Query object.
     *
     * This reconstructs the original query used to build the bundle being loaded,
     * including features exists only in SDKs (for example: limit-to-last).
     */
    function li(t) {
        const e = $e({
            parent: t.parent,
            structuredQuery: t.structuredQuery
        });
        return "LAST" === t.limitType ? Gn(e, e.limit, "L" /* Last */) : e;
    }

    /** Encodes a NamedQuery proto object to a NamedQuery model object. */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** A mutation queue for a specific user, backed by IndexedDB. */
    class _i {
        constructor(
        /**
         * The normalized userId (e.g. null UID => "" userId) used to store /
         * retrieve mutations.
         */
        t, e, n, s) {
            this.userId = t, this.serializer = e, this.os = n, this.Dr = s, 
            /**
             * Caches the document keys for pending mutation batches. If the mutation
             * has been removed from IndexedDb, the cached value may continue to
             * be used to retrieve the batch's document keys. To remove a cached value
             * locally, `removeCachedMutationKeys()` should be invoked either directly
             * or through `removeMutationBatches()`.
             *
             * With multi-tab, when the primary client acknowledges or rejects a mutation,
             * this cache is used by secondary clients to invalidate the local
             * view of the documents that were previously affected by the mutation.
             */
            // PORTING NOTE: Multi-tab only.
            this.Cr = {};
        }
        /**
         * Creates a new mutation queue for the given user.
         * @param user - The user for which to create a mutation queue.
         * @param serializer - The serializer to use when persisting to IndexedDb.
         */    static Nr(t, e, n, s) {
            // TODO(mcg): Figure out what constraints there are on userIDs
            // In particular, are there any reserved characters? are empty ids allowed?
            // For the moment store these together in the same mutations table assuming
            // that empty userIDs aren't allowed.
            C("" !== t.uid);
            const i = t.t() ? t.uid : "";
            return new _i(i, e, n, s);
        }
        Mr(t) {
            let e = !0;
            const n = IDBKeyRange.bound([ this.userId, Number.NEGATIVE_INFINITY ], [ this.userId, Number.POSITIVE_INFINITY ]);
            return wi(t)._i({
                index: Di.userMutationsIndex,
                range: n
            }, ((t, n, s) => {
                e = !1, s.done();
            })).next((() => e));
        }
        kr(t, e, n, s) {
            const i = Ei(t), r = wi(t);
            // The IndexedDb implementation in Chrome (and Firefox) does not handle
            // compound indices that include auto-generated keys correctly. To ensure
            // that the index entry is added correctly in all browsers, we perform two
            // writes: The first write is used to retrieve the next auto-generated Batch
            // ID, and the second write populates the index and stores the actual
            // mutation batch.
            // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972
            // We write an empty object to obtain key
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return r.add({}).next((o => {
                C("number" == typeof o);
                const c = new Es(o, e, n, s), u = function(t, e, n) {
                    const s = n.baseMutations.map((e => xe(t.Sr, e))), i = n.mutations.map((e => xe(t.Sr, e)));
                    return new Di(e, n.batchId, n.Vn.toMillis(), s, i);
                }(this.serializer, this.userId, c), a = [];
                let h = new mt(((t, e) => U$1(t.j(), e.j())));
                for (const t of s) {
                    const e = Ci.key(this.userId, t.key.path, o);
                    h = h.add(t.key.path.$()), a.push(r.put(u)), a.push(i.put(e, Ci.PLACEHOLDER));
                }
                return h.forEach((e => {
                    a.push(this.os.Or(t, e));
                })), t.es((() => {
                    this.Cr[o] = c.keys();
                })), ms.qn(a).next((() => c));
            }));
        }
        Fr(t, e) {
            return wi(t).get(e).next((t => t ? (C(t.userId === this.userId), ui(this.serializer, t)) : null));
        }
        /**
         * Returns the document keys for the mutation batch with the given batchId.
         * For primary clients, this method returns `null` after
         * `removeMutationBatches()` has been called. Secondary clients return a
         * cached result until `removeCachedMutationKeys()` is invoked.
         */
        // PORTING NOTE: Multi-tab only.
        $r(t, e) {
            return this.Cr[e] ? ms.resolve(this.Cr[e]) : this.Fr(t, e).next((t => {
                if (t) {
                    const n = t.keys();
                    return this.Cr[e] = n, n;
                }
                return null;
            }));
        }
        Lr(t, e) {
            const n = e + 1, s = IDBKeyRange.lowerBound([ this.userId, n ]);
            let i = null;
            return wi(t)._i({
                index: Di.userMutationsIndex,
                range: s
            }, ((t, e, s) => {
                e.userId === this.userId && (C(e.batchId >= n), i = ui(this.serializer, e)), s.done();
            })).next((() => i));
        }
        Br(t) {
            const e = IDBKeyRange.upperBound([ this.userId, Number.POSITIVE_INFINITY ]);
            let n = -1;
            return wi(t)._i({
                index: Di.userMutationsIndex,
                range: e,
                reverse: !0
            }, ((t, e, s) => {
                n = e.batchId, s.done();
            })).next((() => n));
        }
        qr(t) {
            const e = IDBKeyRange.bound([ this.userId, -1 ], [ this.userId, Number.POSITIVE_INFINITY ]);
            return wi(t).ui(Di.userMutationsIndex, e).next((t => t.map((t => ui(this.serializer, t)))));
        }
        us(t, e) {
            // Scan the document-mutation index starting with a prefix starting with
            // the given documentKey.
            const n = Ci.prefixForPath(this.userId, e.path), s = IDBKeyRange.lowerBound(n), i = [];
            return Ei(t)._i({
                range: s
            }, ((n, s, r) => {
                const [o, c, u] = n, a = ti(c);
                // Only consider rows matching exactly the specific key of
                // interest. Note that because we order by path first, and we
                // order terminators before path separators, we'll encounter all
                // the index rows for documentKey contiguously. In particular, all
                // the rows for documentKey will occur before any rows for
                // documents nested in a subcollection beneath documentKey so we
                // can stop as soon as we hit any such row.
                            if (o === this.userId && e.path.isEqual(a)) 
                // Look up the mutation batch in the store.
                return wi(t).get(u).next((t => {
                    if (!t) throw D$1();
                    C(t.userId === this.userId), i.push(ui(this.serializer, t));
                }));
                r.done();
            })).next((() => i));
        }
        ds(t, e) {
            let n = new mt(U$1);
            const s = [];
            return e.forEach((e => {
                const i = Ci.prefixForPath(this.userId, e.path), r = IDBKeyRange.lowerBound(i), o = Ei(t)._i({
                    range: r
                }, ((t, s, i) => {
                    const [r, o, c] = t, u = ti(o);
                    // Only consider rows matching exactly the specific key of
                    // interest. Note that because we order by path first, and we
                    // order terminators before path separators, we'll encounter all
                    // the index rows for documentKey contiguously. In particular, all
                    // the rows for documentKey will occur before any rows for
                    // documents nested in a subcollection beneath documentKey so we
                    // can stop as soon as we hit any such row.
                                    r === this.userId && e.path.isEqual(u) ? n = n.add(c) : i.done();
                }));
                s.push(o);
            })), ms.qn(s).next((() => this.Ur(t, n)));
        }
        Rs(t, e) {
            const n = e.path, s = n.length + 1, i = Ci.prefixForPath(this.userId, n), r = IDBKeyRange.lowerBound(i);
            // Collect up unique batchIDs encountered during a scan of the index. Use a
            // SortedSet to accumulate batch IDs so they can be traversed in order in a
            // scan of the main table.
            let o = new mt(U$1);
            return Ei(t)._i({
                range: r
            }, ((t, e, i) => {
                const [r, c, u] = t, a = ti(c);
                r === this.userId && n.U(a) ? 
                // Rows with document keys more than one segment longer than the
                // query path can't be matches. For example, a query on 'rooms'
                // can't match the document /rooms/abc/messages/xyx.
                // TODO(mcg): we'll need a different scanner when we implement
                // ancestor queries.
                a.length === s && (o = o.add(u)) : i.done();
            })).next((() => this.Ur(t, o)));
        }
        Ur(t, e) {
            const n = [], s = [];
            // TODO(rockwood): Implement this using iterate.
            return e.forEach((e => {
                s.push(wi(t).get(e).next((t => {
                    if (null === t) throw D$1();
                    C(t.userId === this.userId), n.push(ui(this.serializer, t));
                })));
            })), ms.qn(s).next((() => n));
        }
        Kr(t, e) {
            return di(t.Qr, this.userId, e).next((n => (t.es((() => {
                this.Wr(e.batchId);
            })), ms.forEach(n, (e => this.Dr.jr(t, e))))));
        }
        /**
         * Clears the cached keys for a mutation batch. This method should be
         * called by secondary clients after they process mutation updates.
         *
         * Note that this method does not have to be called from primary clients as
         * the corresponding cache entries are cleared when an acknowledged or
         * rejected batch is removed from the mutation queue.
         */
        // PORTING NOTE: Multi-tab only
        Wr(t) {
            delete this.Cr[t];
        }
        Gr(t) {
            return this.Mr(t).next((e => {
                if (!e) return ms.resolve();
                // Verify that there are no entries in the documentMutations index if
                // the queue is empty.
                            const n = IDBKeyRange.lowerBound(Ci.prefixForUser(this.userId)), s = [];
                return Ei(t)._i({
                    range: n
                }, ((t, e, n) => {
                    if (t[0] === this.userId) {
                        const e = ti(t[1]);
                        s.push(e);
                    } else n.done();
                })).next((() => {
                    C(0 === s.length);
                }));
            }));
        }
        zr(t, e) {
            return fi(t, this.userId, e);
        }
        // PORTING NOTE: Multi-tab only (state is held in memory in other clients).
        /** Returns the mutation queue's metadata from IndexedDb. */
        Hr(t) {
            return Ti(t).get(this.userId).next((t => t || new Si(this.userId, -1, 
            /*lastStreamToken=*/ "")));
        }
    }

    /**
     * @returns true if the mutation queue for the given user contains a pending
     *         mutation for the given key.
     */ function fi(t, e, n) {
        const s = Ci.prefixForPath(e, n.path), i = s[1], r = IDBKeyRange.lowerBound(s);
        let o = !1;
        return Ei(t)._i({
            range: r,
            li: !0
        }, ((t, n, s) => {
            const [r, c, /*batchID*/ u] = t;
            r === e && c === i && (o = !0), s.done();
        })).next((() => o));
    }

    /** Returns true if any mutation queue contains the given document. */
    /**
     * Delete a mutation batch and the associated document mutations.
     * @returns A PersistencePromise of the document mutations that were removed.
     */
    function di(t, e, n) {
        const s = t.store(Di.store), i = t.store(Ci.store), r = [], o = IDBKeyRange.only(n.batchId);
        let c = 0;
        const u = s._i({
            range: o
        }, ((t, e, n) => (c++, n.delete())));
        r.push(u.next((() => {
            C(1 === c);
        })));
        const a = [];
        for (const t of n.mutations) {
            const s = Ci.key(e, t.key.path, n.batchId);
            r.push(i.delete(s)), a.push(t.key);
        }
        return ms.qn(r).next((() => a));
    }

    /**
     * Helper to get a typed SimpleDbStore for the mutations object store.
     */ function wi(t) {
        return sr.Ys(t, Di.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the mutationQueues object store.
     */ function Ei(t) {
        return sr.Ys(t, Ci.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the mutationQueues object store.
     */ function Ti(t) {
        return sr.Ys(t, Si.store);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The RemoteDocumentCache for IndexedDb. To construct, invoke
     * `newIndexedDbRemoteDocumentCache()`.
     */ class Ii {
        /**
         * @param serializer - The document serializer.
         * @param indexManager - The query indexes that need to be maintained.
         */
        constructor(t, e) {
            this.serializer = t, this.os = e;
        }
        /**
         * Adds the supplied entries to the cache.
         *
         * All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
         */    jn(t, e, n) {
            return Ri(t).put(Pi(e), n);
        }
        /**
         * Removes a document from the cache.
         *
         * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
         */    Hn(t, e) {
            const n = Ri(t), s = Pi(e);
            return n.delete(s);
        }
        /**
         * Updates the current cache size.
         *
         * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the
         * cache's metadata.
         */    updateMetadata(t, e) {
            return this.getMetadata(t).next((n => (n.byteSize += e, this.Jr(t, n))));
        }
        Jn(t, e) {
            return Ri(t).get(Pi(e)).next((t => this.Yr(t)));
        }
        /**
         * Looks up an entry in the cache.
         *
         * @param documentKey - The key of the entry to look up.
         * @returns The cached MaybeDocument entry and its size, or null if we have
         * nothing cached.
         */    Xr(t, e) {
            return Ri(t).get(Pi(e)).next((t => {
                const e = this.Yr(t);
                return e ? {
                    zn: e,
                    size: Vi(t)
                } : null;
            }));
        }
        getEntries(t, e) {
            let n = Vt();
            return this.Zr(t, e, ((t, e) => {
                const s = this.Yr(e);
                n = n.Tt(t, s);
            })).next((() => n));
        }
        /**
         * Looks up several entries in the cache.
         *
         * @param documentKeys - The set of keys entries to look up.
         * @returns A map of MaybeDocuments indexed by key (if a document cannot be
         *     found, the key will be mapped to null) and a map of sizes indexed by
         *     key (zero if the key cannot be found).
         */    eo(t, e) {
            let n = Vt(), s = new Et(Y$1.k);
            return this.Zr(t, e, ((t, e) => {
                const i = this.Yr(e);
                i ? (n = n.Tt(t, i), s = s.Tt(t, Vi(e))) : (n = n.Tt(t, null), s = s.Tt(t, 0));
            })).next((() => ({
                no: n,
                so: s
            })));
        }
        Zr(t, e, n) {
            if (e.q()) return ms.resolve();
            const s = IDBKeyRange.bound(e.first().path.W(), e.last().path.W()), i = e.gt();
            let r = i.Ct();
            return Ri(t)._i({
                range: s
            }, ((t, e, s) => {
                const o = Y$1.it(t);
                // Go through keys not found in cache.
                            for (;r && Y$1.k(r, o) < 0; ) n(r, null), r = i.Ct();
                r && r.isEqual(o) && (
                // Key found in cache.
                n(r, e), r = i.Nt() ? i.Ct() : null), 
                // Skip to the next key (if there is one).
                r ? s.oi(r.path.W()) : s.done();
            })).next((() => {
                // The rest of the keys are not in the cache. One case where `iterate`
                // above won't go through them is when the cache is empty.
                for (;r; ) n(r, null), r = i.Nt() ? i.Ct() : null;
            }));
        }
        ws(t, e, n) {
            let s = yt();
            const i = e.path.length + 1, r = {};
            if (n.isEqual(j.min())) {
                // Documents are ordered by key, so we can use a prefix scan to narrow
                // down the documents we need to match the query against.
                const t = e.path.W();
                r.range = IDBKeyRange.lowerBound(t);
            } else {
                // Execute an index-free query and filter by read time. This is safe
                // since all document changes to queries that have a
                // lastLimboFreeSnapshotVersion (`sinceReadTime`) have a read time set.
                const t = e.path.W(), s = ii(n);
                r.range = IDBKeyRange.lowerBound([ t, s ], 
                /* open= */ !0), r.index = Mi.collectionReadTimeIndex;
            }
            return Ri(t)._i(r, ((t, n, r) => {
                // The query is actually returning any path that starts with the query
                // path prefix which may include documents in subcollections. For
                // example, a query on 'rooms' will return rooms/abc/messages/xyx but we
                // shouldn't match it. Fix this by discarding rows with document keys
                // more than one segment longer than the query path.
                if (t.length !== i) return;
                const o = ni(this.serializer, n);
                e.path.U(o.key.path) ? o instanceof Mn && Yn(e, o) && (s = s.Tt(o.key, o)) : r.done();
            })).next((() => s));
        }
        io(t) {
            return new mi(this, !!t && t.ro);
        }
        oo(t) {
            return this.getMetadata(t).next((t => t.byteSize));
        }
        getMetadata(t) {
            return Ai(t).get(ki.key).next((t => (C(!!t), t)));
        }
        Jr(t, e) {
            return Ai(t).put(ki.key, e);
        }
        /**
         * Decodes `remoteDoc` and returns the document (or null, if the document
         * corresponds to the format used for sentinel deletes).
         */    Yr(t) {
            if (t) {
                const e = ni(this.serializer, t);
                return e instanceof kn && e.version.isEqual(j.min()) ? null : e;
            }
            return null;
        }
    }

    /**
     * Creates a new IndexedDbRemoteDocumentCache.
     *
     * @param serializer - The document serializer.
     * @param indexManager - The query indexes that need to be maintained.
     */
    /**
     * Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache.
     *
     * Unlike the MemoryRemoteDocumentChangeBuffer, the IndexedDb implementation computes the size
     * delta for all submitted changes. This avoids having to re-read all documents from IndexedDb
     * when we apply the changes.
     */
    class mi extends As {
        /**
         * @param documentCache - The IndexedDbRemoteDocumentCache to apply the changes to.
         * @param trackRemovals - Whether to create sentinel deletes that can be tracked by
         * `getNewDocumentChanges()`.
         */
        constructor(t, e) {
            super(), this.co = t, this.ro = e, 
            // A map of document sizes prior to applying the changes in this buffer.
            this.uo = new Is((t => t.toString()), ((t, e) => t.isEqual(e)));
        }
        Zn(t) {
            const e = [];
            let n = 0, s = new mt(((t, e) => U$1(t.j(), e.j())));
            return this.Kn.forEach(((i, r) => {
                const o = this.uo.get(i);
                if (r.zn) {
                    const c = si(this.co.serializer, r.zn, this.Wn(i));
                    s = s.add(i.path.$());
                    const u = Vi(c);
                    n += u - o, e.push(this.co.jn(t, i, c));
                } else if (n -= o, this.ro) {
                    // In order to track removals, we store a "sentinel delete" in the
                    // RemoteDocumentCache. This entry is represented by a NoDocument
                    // with a version of 0 and ignored by `maybeDecodeDocument()` but
                    // preserved in `getNewDocumentChanges()`.
                    const n = si(this.co.serializer, new kn(i, j.min()), this.Wn(i));
                    e.push(this.co.jn(t, i, n));
                } else e.push(this.co.Hn(t, i));
            })), s.forEach((n => {
                e.push(this.co.os.Or(t, n));
            })), e.push(this.co.updateMetadata(t, n)), ms.qn(e);
        }
        Yn(t, e) {
            // Record the size of everything we load from the cache so we can compute a delta later.
            return this.co.Xr(t, e).next((t => null === t ? (this.uo.set(e, 0), null) : (this.uo.set(e, t.size), 
            t.zn)));
        }
        Xn(t, e) {
            // Record the size of everything we load from the cache so we can compute
            // a delta later.
            return this.co.eo(t, e).next((({no: t, so: e}) => (
            // Note: `getAllFromCache` returns two maps instead of a single map from
            // keys to `DocumentSizeEntry`s. This is to allow returning the
            // `NullableMaybeDocumentMap` directly, without a conversion.
            e.forEach(((t, e) => {
                this.uo.set(t, e);
            })), t)));
        }
    }

    function Ai(t) {
        return sr.Ys(t, ki.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the remoteDocuments object store.
     */ function Ri(t) {
        return sr.Ys(t, Mi.store);
    }

    function Pi(t) {
        return t.path.W();
    }

    /**
     * Retrusn an approximate size for the given document.
     */ function Vi(t) {
        let e;
        if (t.document) e = t.document; else if (t.unknownDocument) e = t.unknownDocument; else {
            if (!t.noDocument) throw D$1();
            e = t.noDocument;
        }
        return JSON.stringify(e).length;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An in-memory implementation of IndexManager.
     */ class gi {
        constructor() {
            this.ao = new yi;
        }
        Or(t, e) {
            return this.ao.add(e), ms.resolve();
        }
        As(t, e) {
            return ms.resolve(this.ao.getEntries(e));
        }
    }

    /**
     * Internal implementation of the collection-parent index exposed by MemoryIndexManager.
     * Also used for in-memory caching by IndexedDbIndexManager and initial index population
     * in indexeddb_schema.ts
     */ class yi {
        constructor() {
            this.index = {};
        }
        // Returns false if the entry already existed.
        add(t) {
            const e = t.B(), n = t.$(), s = this.index[e] || new mt(z$1.k), i = !s.has(n);
            return this.index[e] = s.add(n), i;
        }
        has(t) {
            const e = t.B(), n = t.$(), s = this.index[e];
            return s && s.has(n);
        }
        getEntries(t) {
            return (this.index[t] || new mt(z$1.k)).W();
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Schema Version for the Web client:
     * 1.  Initial version including Mutation Queue, Query Cache, and Remote
     *     Document Cache
     * 2.  Used to ensure a targetGlobal object exists and add targetCount to it. No
     *     longer required because migration 3 unconditionally clears it.
     * 3.  Dropped and re-created Query Cache to deal with cache corruption related
     *     to limbo resolution. Addresses
     *     https://github.com/firebase/firebase-ios-sdk/issues/1548
     * 4.  Multi-Tab Support.
     * 5.  Removal of held write acks.
     * 6.  Create document global for tracking document cache size.
     * 7.  Ensure every cached document has a sentinel row with a sequence number.
     * 8.  Add collection-parent index for Collection Group queries.
     * 9.  Change RemoteDocumentChanges store to be keyed by readTime rather than
     *     an auto-incrementing ID. This is required for Index-Free queries.
     * 10. Rewrite the canonical IDs to the explicit Protobuf-based format.
     * 11. Add bundles and named_queries for bundle support.
     */
    /** Performs database creation and schema upgrades. */
    class pi {
        constructor(t) {
            this.serializer = t;
        }
        /**
         * Performs database creation and schema upgrades.
         *
         * Note that in production, this method is only ever used to upgrade the schema
         * to SCHEMA_VERSION. Different values of toVersion are only used for testing
         * and local feature development.
         */    createOrUpgrade(t, e, n, s) {
            C(n < s && n >= 0 && s <= 11);
            const i = new Ms("createOrUpgrade", e);
            n < 1 && s >= 1 && (function(t) {
                t.createObjectStore(vi.store);
            }
            /**
     * An object to be stored in the 'mutationQueues' store in IndexedDb.
     *
     * Each user gets a single queue of MutationBatches to apply to the server.
     * DbMutationQueue tracks the metadata about the queue.
     */ (t), function(t) {
                t.createObjectStore(Si.store, {
                    keyPath: Si.keyPath
                });
                t.createObjectStore(Di.store, {
                    keyPath: Di.keyPath,
                    autoIncrement: !0
                }).createIndex(Di.userMutationsIndex, Di.userMutationsKeyPath, {
                    unique: !0
                }), t.createObjectStore(Ci.store);
            }
            /**
     * Upgrade function to migrate the 'mutations' store from V1 to V3. Loads
     * and rewrites all data.
     */ (t), Bi(t), function(t) {
                t.createObjectStore(Mi.store);
            }
            /**
     * Represents the known absence of a document at a particular version.
     * Stored in IndexedDb as part of a DbRemoteDocument object.
     */ (t));
            // Migration 2 to populate the targetGlobal object no longer needed since
            // migration 3 unconditionally clears it.
                    let r = ms.resolve();
            return n < 3 && s >= 3 && (
            // Brand new clients don't need to drop and recreate--only clients that
            // potentially have corrupt data.
            0 !== n && (!function(t) {
                t.deleteObjectStore(Fi.store), t.deleteObjectStore(Oi.store), t.deleteObjectStore($i.store);
            }(t), Bi(t)), r = r.next((() => 
            /**
     * Creates the target global singleton row.
     *
     * @param txn - The version upgrade transaction for indexeddb
     */
            function(t) {
                const e = t.store($i.store), n = new $i(
                /*highestTargetId=*/ 0, 
                /*lastListenSequenceNumber=*/ 0, j.min().N(), 
                /*targetCount=*/ 0);
                return e.put($i.key, n);
            }
            /**
     * Creates indices on the RemoteDocuments store used for both multi-tab
     * and Index-Free queries.
     */ (i)))), n < 4 && s >= 4 && (0 !== n && (
            // Schema version 3 uses auto-generated keys to generate globally unique
            // mutation batch IDs (this was previously ensured internally by the
            // client). To migrate to the new schema, we have to read all mutations
            // and write them back out. We preserve the existing batch IDs to guarantee
            // consistency with other object stores. Any further mutation batch IDs will
            // be auto-generated.
            r = r.next((() => function(t, e) {
                return e.store(Di.store).ui().next((n => {
                    t.deleteObjectStore(Di.store);
                    t.createObjectStore(Di.store, {
                        keyPath: Di.keyPath,
                        autoIncrement: !0
                    }).createIndex(Di.userMutationsIndex, Di.userMutationsKeyPath, {
                        unique: !0
                    });
                    const s = e.store(Di.store), i = n.map((t => s.put(t)));
                    return ms.qn(i);
                }));
            }
            /**
     * An object to be stored in the 'documentMutations' store in IndexedDb.
     *
     * A manually maintained index of all the mutation batches that affect a given
     * document key. The rows in this table are references based on the contents of
     * DbMutationBatch.mutations.
     */ (t, i)))), r = r.next((() => {
                !function(t) {
                    t.createObjectStore(qi.store, {
                        keyPath: qi.keyPath
                    });
                }
                /**
     * A object representing a bundle loaded by the SDK.
     */ (t);
            }))), n < 5 && s >= 5 && (r = r.next((() => this.removeAcknowledgedMutations(i)))), 
            n < 6 && s >= 6 && (r = r.next((() => (function(t) {
                t.createObjectStore(ki.store);
            }
            /**
     * An object to be stored in the 'targets' store in IndexedDb.
     *
     * This is based on and should be kept in sync with the proto used in the iOS
     * client.
     *
     * Each query the client listens to against the server is tracked on disk so
     * that the query can be efficiently resumed on restart.
     */ (t), this.addDocumentGlobal(i))))), n < 7 && s >= 7 && (r = r.next((() => this.ensureSequenceNumbers(i)))), 
            n < 8 && s >= 8 && (r = r.next((() => this.createCollectionParentIndex(t, i)))), 
            n < 9 && s >= 9 && (r = r.next((() => {
                // Multi-Tab used to manage its own changelog, but this has been moved
                // to the DbRemoteDocument object store itself. Since the previous change
                // log only contained transient data, we can drop its object store.
                !function(t) {
                    t.objectStoreNames.contains("remoteDocumentChanges") && t.deleteObjectStore("remoteDocumentChanges");
                }(t), function(t) {
                    const e = t.objectStore(Mi.store);
                    e.createIndex(Mi.readTimeIndex, Mi.readTimeIndexPath, {
                        unique: !1
                    }), e.createIndex(Mi.collectionReadTimeIndex, Mi.collectionReadTimeIndexPath, {
                        unique: !1
                    });
                }
                /**
     * A record of the metadata state of each client.
     *
     * PORTING NOTE: This is used to synchronize multi-tab state and does not need
     * to be ported to iOS or Android.
     */ (e);
            }))), n < 10 && s >= 10 && (r = r.next((() => this.rewriteCanonicalIds(i)))), n < 11 && s >= 11 && (r = r.next((() => {
                !function(t) {
                    t.createObjectStore(Ui.store, {
                        keyPath: Ui.keyPath
                    });
                }
                /**
     * A object representing a named query loaded by the SDK via a bundle.
     */ (t), function(t) {
                    t.createObjectStore(Ki.store, {
                        keyPath: Ki.keyPath
                    });
                }
                // Visible for testing
                (t);
            }))), r;
        }
        addDocumentGlobal(t) {
            let e = 0;
            return t.store(Mi.store)._i(((t, n) => {
                e += Vi(n);
            })).next((() => {
                const n = new ki(e);
                return t.store(ki.store).put(ki.key, n);
            }));
        }
        removeAcknowledgedMutations(t) {
            const e = t.store(Si.store), n = t.store(Di.store);
            return e.ui().next((e => ms.forEach(e, (e => {
                const s = IDBKeyRange.bound([ e.userId, -1 ], [ e.userId, e.lastAcknowledgedBatchId ]);
                return n.ui(Di.userMutationsIndex, s).next((n => ms.forEach(n, (n => {
                    C(n.userId === e.userId);
                    const s = ui(this.serializer, n);
                    return di(t, e.userId, s).next((() => {}));
                }))));
            }))));
        }
        /**
         * Ensures that every document in the remote document cache has a corresponding sentinel row
         * with a sequence number. Missing rows are given the most recently used sequence number.
         */    ensureSequenceNumbers(t) {
            const e = t.store(Fi.store), n = t.store(Mi.store);
            return t.store($i.store).get($i.key).next((t => {
                const s = [];
                return n._i(((n, i) => {
                    const r = new z$1(n), o = function(t) {
                        return [ 0, Ys(t) ];
                    }
                    /**
     * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.
     */ (r);
                    s.push(e.get(o).next((n => n ? ms.resolve() : (n => e.put(new Fi(0, Ys(n), t.highestListenSequenceNumber)))(r))));
                })).next((() => ms.qn(s)));
            }));
        }
        createCollectionParentIndex(t, e) {
            // Create the index.
            t.createObjectStore(Li.store, {
                keyPath: Li.keyPath
            });
            const n = e.store(Li.store), s = new yi, i = t => {
                if (s.add(t)) {
                    const e = t.B(), s = t.$();
                    return n.put({
                        collectionId: e,
                        parent: Ys(s)
                    });
                }
            };
            // Helper to add an index entry iff we haven't already written it.
                    // Index existing remote documents.
            return e.store(Mi.store)._i({
                li: !0
            }, ((t, e) => {
                const n = new z$1(t);
                return i(n.$());
            })).next((() => e.store(Ci.store)._i({
                li: !0
            }, (([t, e, n], s) => {
                const r = ti(e);
                return i(r.$());
            }))));
        }
        rewriteCanonicalIds(t) {
            const e = t.store(Oi.store);
            return e._i(((t, n) => {
                const s = ai(n), i = hi(this.serializer, s);
                return e.put(i);
            }));
        }
    }

    class bi {
        constructor(t, e) {
            this.seconds = t, this.nanoseconds = e;
        }
    }

    /**
     * A singleton object to be stored in the 'owner' store in IndexedDb.
     *
     * A given database can have a single primary tab assigned at a given time. That
     * tab must validate that it is still holding the primary lease before every
     * operation that requires locked access. The primary tab should regularly
     * write an updated timestamp to this lease to prevent other tabs from
     * "stealing" the primary lease
     */ class vi {
        constructor(t, 
        /** Whether to allow shared access from multiple tabs. */
        e, n) {
            this.ownerId = t, this.allowTabSynchronization = e, this.leaseTimestampMs = n;
        }
    }

    /**
     * Name of the IndexedDb object store.
     *
     * Note that the name 'owner' is chosen to ensure backwards compatibility with
     * older clients that only supported single locked access to the persistence
     * layer.
     */ vi.store = "owner", 
    /**
     * The key string used for the single object that exists in the
     * DbPrimaryClient store.
     */
    vi.key = "owner";

    class Si {
        constructor(
        /**
         * The normalized user ID to which this queue belongs.
         */
        t, 
        /**
         * An identifier for the highest numbered batch that has been acknowledged
         * by the server. All MutationBatches in this queue with batchIds less
         * than or equal to this value are considered to have been acknowledged by
         * the server.
         *
         * NOTE: this is deprecated and no longer used by the code.
         */
        e, 
        /**
         * A stream token that was previously sent by the server.
         *
         * See StreamingWriteRequest in datastore.proto for more details about
         * usage.
         *
         * After sending this token, earlier tokens may not be used anymore so
         * only a single stream token is retained.
         *
         * NOTE: this is deprecated and no longer used by the code.
         */
        n) {
            this.userId = t, this.lastAcknowledgedBatchId = e, this.lastStreamToken = n;
        }
    }

    /** Name of the IndexedDb object store.  */ Si.store = "mutationQueues", 
    /** Keys are automatically assigned via the userId property. */
    Si.keyPath = "userId";

    /**
     * An object to be stored in the 'mutations' store in IndexedDb.
     *
     * Represents a batch of user-level mutations intended to be sent to the server
     * in a single write. Each user-level batch gets a separate DbMutationBatch
     * with a new batchId.
     */
    class Di {
        constructor(
        /**
         * The normalized user ID to which this batch belongs.
         */
        t, 
        /**
         * An identifier for this batch, allocated using an auto-generated key.
         */
        e, 
        /**
         * The local write time of the batch, stored as milliseconds since the
         * epoch.
         */
        n, 
        /**
         * A list of "mutations" that represent a partial base state from when this
         * write batch was initially created. During local application of the write
         * batch, these baseMutations are applied prior to the real writes in order
         * to override certain document fields from the remote document cache. This
         * is necessary in the case of non-idempotent writes (e.g. `increment()`
         * transforms) to make sure that the local view of the modified documents
         * doesn't flicker if the remote document cache receives the result of the
         * non-idempotent write before the write is removed from the queue.
         *
         * These mutations are never sent to the backend.
         */
        s, 
        /**
         * A list of mutations to apply. All mutations will be applied atomically.
         *
         * Mutations are serialized via toMutation().
         */
        i) {
            this.userId = t, this.batchId = e, this.localWriteTimeMs = n, this.baseMutations = s, 
            this.mutations = i;
        }
    }

    /** Name of the IndexedDb object store.  */ Di.store = "mutations", 
    /** Keys are automatically assigned via the userId, batchId properties. */
    Di.keyPath = "batchId", 
    /** The index name for lookup of mutations by user. */
    Di.userMutationsIndex = "userMutationsIndex", 
    /** The user mutations index is keyed by [userId, batchId] pairs. */
    Di.userMutationsKeyPath = [ "userId", "batchId" ];

    class Ci {
        constructor() {}
        /**
         * Creates a [userId] key for use in the DbDocumentMutations index to iterate
         * over all of a user's document mutations.
         */    static prefixForUser(t) {
            return [ t ];
        }
        /**
         * Creates a [userId, encodedPath] key for use in the DbDocumentMutations
         * index to iterate over all at document mutations for a given path or lower.
         */    static prefixForPath(t, e) {
            return [ t, Ys(e) ];
        }
        /**
         * Creates a full index key of [userId, encodedPath, batchId] for inserting
         * and deleting into the DbDocumentMutations index.
         */    static key(t, e, n) {
            return [ t, Ys(e), n ];
        }
    }

    Ci.store = "documentMutations", 
    /**
     * Because we store all the useful information for this store in the key,
     * there is no useful information to store as the value. The raw (unencoded)
     * path cannot be stored because IndexedDb doesn't store prototype
     * information.
     */
    Ci.PLACEHOLDER = new Ci;

    class Ni {
        constructor(t, e) {
            this.path = t, this.readTime = e;
        }
    }

    /**
     * Represents a document that is known to exist but whose data is unknown.
     * Stored in IndexedDb as part of a DbRemoteDocument object.
     */ class xi {
        constructor(t, e) {
            this.path = t, this.version = e;
        }
    }

    /**
     * An object to be stored in the 'remoteDocuments' store in IndexedDb.
     * It represents either:
     *
     * - A complete document.
     * - A "no document" representing a document that is known not to exist (at
     * some version).
     * - An "unknown document" representing a document that is known to exist (at
     * some version) but whose contents are unknown.
     *
     * Note: This is the persisted equivalent of a MaybeDocument and could perhaps
     * be made more general if necessary.
     */ class Mi {
        // TODO: We are currently storing full document keys almost three times
        // (once as part of the primary key, once - partly - as `parentPath` and once
        // inside the encoded documents). During our next migration, we should
        // rewrite the primary key as parentPath + document ID which would allow us
        // to drop one value.
        constructor(
        /**
         * Set to an instance of DbUnknownDocument if the data for a document is
         * not known, but it is known that a document exists at the specified
         * version (e.g. it had a successful update applied to it)
         */
        t, 
        /**
         * Set to an instance of a DbNoDocument if it is known that no document
         * exists.
         */
        e, 
        /**
         * Set to an instance of a Document if there's a cached version of the
         * document.
         */
        n, 
        /**
         * Documents that were written to the remote document store based on
         * a write acknowledgment are marked with `hasCommittedMutations`. These
         * documents are potentially inconsistent with the backend's copy and use
         * the write's commit version as their document version.
         */
        s, 
        /**
         * When the document was read from the backend. Undefined for data written
         * prior to schema version 9.
         */
        i, 
        /**
         * The path of the collection this document is part of. Undefined for data
         * written prior to schema version 9.
         */
        r) {
            this.unknownDocument = t, this.noDocument = e, this.document = n, this.hasCommittedMutations = s, 
            this.readTime = i, this.parentPath = r;
        }
    }

    Mi.store = "remoteDocuments", 
    /**
     * An index that provides access to all entries sorted by read time (which
     * corresponds to the last modification time of each row).
     *
     * This index is used to provide a changelog for Multi-Tab.
     */
    Mi.readTimeIndex = "readTimeIndex", Mi.readTimeIndexPath = "readTime", 
    /**
     * An index that provides access to documents in a collection sorted by read
     * time.
     *
     * This index is used to allow the RemoteDocumentCache to fetch newly changed
     * documents in a collection.
     */
    Mi.collectionReadTimeIndex = "collectionReadTimeIndex", Mi.collectionReadTimeIndexPath = [ "parentPath", "readTime" ];

    /**
     * Contains a single entry that has metadata about the remote document cache.
     */
    class ki {
        /**
         * @param byteSize - Approximately the total size in bytes of all the
         * documents in the document cache.
         */
        constructor(t) {
            this.byteSize = t;
        }
    }

    ki.store = "remoteDocumentGlobal", ki.key = "remoteDocumentGlobalKey";

    class Oi {
        constructor(
        /**
         * An auto-generated sequential numeric identifier for the query.
         *
         * Queries are stored using their canonicalId as the key, but these
         * canonicalIds can be quite long so we additionally assign a unique
         * queryId which can be used by referenced data structures (e.g.
         * indexes) to minimize the on-disk cost.
         */
        t, 
        /**
         * The canonical string representing this query. This is not unique.
         */
        e, 
        /**
         * The last readTime received from the Watch Service for this query.
         *
         * This is the same value as TargetChange.read_time in the protos.
         */
        n, 
        /**
         * An opaque, server-assigned token that allows watching a query to be
         * resumed after disconnecting without retransmitting all the data
         * that matches the query. The resume token essentially identifies a
         * point in time from which the server should resume sending results.
         *
         * This is related to the snapshotVersion in that the resumeToken
         * effectively also encodes that value, but the resumeToken is opaque
         * and sometimes encodes additional information.
         *
         * A consequence of this is that the resumeToken should be used when
         * asking the server to reason about where this client is in the watch
         * stream, but the client should use the snapshotVersion for its own
         * purposes.
         *
         * This is the same value as TargetChange.resume_token in the protos.
         */
        s, 
        /**
         * A sequence number representing the last time this query was
         * listened to, used for garbage collection purposes.
         *
         * Conventionally this would be a timestamp value, but device-local
         * clocks are unreliable and they must be able to create new listens
         * even while disconnected. Instead this should be a monotonically
         * increasing number that's incremented on each listen call.
         *
         * This is different from the queryId since the queryId is an
         * immutable identifier assigned to the Query on first use while
         * lastListenSequenceNumber is updated every time the query is
         * listened to.
         */
        i, 
        /**
         * Denotes the maximum snapshot version at which the associated query view
         * contained no limbo documents.  Undefined for data written prior to
         * schema version 9.
         */
        r, 
        /**
         * The query for this target.
         *
         * Because canonical ids are not unique we must store the actual query. We
         * use the proto to have an object we can persist without having to
         * duplicate translation logic to and from a `Query` object.
         */
        o) {
            this.targetId = t, this.canonicalId = e, this.readTime = n, this.resumeToken = s, 
            this.lastListenSequenceNumber = i, this.lastLimboFreeSnapshotVersion = r, this.query = o;
        }
    }

    Oi.store = "targets", 
    /** Keys are automatically assigned via the targetId property. */
    Oi.keyPath = "targetId", 
    /** The name of the queryTargets index. */
    Oi.queryTargetsIndexName = "queryTargetsIndex", 
    /**
     * The index of all canonicalIds to the targets that they match. This is not
     * a unique mapping because canonicalId does not promise a unique name for all
     * possible queries, so we append the targetId to make the mapping unique.
     */
    Oi.queryTargetsKeyPath = [ "canonicalId", "targetId" ];

    /**
     * An object representing an association between a target and a document, or a
     * sentinel row marking the last sequence number at which a document was used.
     * Each document cached must have a corresponding sentinel row before lru
     * garbage collection is enabled.
     *
     * The target associations and sentinel rows are co-located so that orphaned
     * documents and their sequence numbers can be identified efficiently via a scan
     * of this store.
     */
    class Fi {
        constructor(
        /**
         * The targetId identifying a target or 0 for a sentinel row.
         */
        t, 
        /**
         * The path to the document, as encoded in the key.
         */
        e, 
        /**
         * If this is a sentinel row, this should be the sequence number of the last
         * time the document specified by `path` was used. Otherwise, it should be
         * `undefined`.
         */
        n) {
            this.targetId = t, this.path = e, this.sequenceNumber = n;
        }
    }

    /** Name of the IndexedDb object store.  */ Fi.store = "targetDocuments", 
    /** Keys are automatically assigned via the targetId, path properties. */
    Fi.keyPath = [ "targetId", "path" ], 
    /** The index name for the reverse index. */
    Fi.documentTargetsIndex = "documentTargetsIndex", 
    /** We also need to create the reverse index for these properties. */
    Fi.documentTargetsKeyPath = [ "path", "targetId" ];

    /**
     * A record of global state tracked across all Targets, tracked separately
     * to avoid the need for extra indexes.
     *
     * This should be kept in-sync with the proto used in the iOS client.
     */
    class $i {
        constructor(
        /**
         * The highest numbered target id across all targets.
         *
         * See DbTarget.targetId.
         */
        t, 
        /**
         * The highest numbered lastListenSequenceNumber across all targets.
         *
         * See DbTarget.lastListenSequenceNumber.
         */
        e, 
        /**
         * A global snapshot version representing the last consistent snapshot we
         * received from the backend. This is monotonically increasing and any
         * snapshots received from the backend prior to this version (e.g. for
         * targets resumed with a resumeToken) should be suppressed (buffered)
         * until the backend has caught up to this snapshot version again. This
         * prevents our cache from ever going backwards in time.
         */
        n, 
        /**
         * The number of targets persisted.
         */
        s) {
            this.highestTargetId = t, this.highestListenSequenceNumber = e, this.lastRemoteSnapshotVersion = n, 
            this.targetCount = s;
        }
    }

    /**
     * The key string used for the single object that exists in the
     * DbTargetGlobal store.
     */ $i.key = "targetGlobalKey", $i.store = "targetGlobal";

    /**
     * An object representing an association between a Collection id (e.g. 'messages')
     * to a parent path (e.g. '/chats/123') that contains it as a (sub)collection.
     * This is used to efficiently find all collections to query when performing
     * a Collection Group query.
     */
    class Li {
        constructor(
        /**
         * The collectionId (e.g. 'messages')
         */
        t, 
        /**
         * The path to the parent (either a document location or an empty path for
         * a root-level collection).
         */
        e) {
            this.collectionId = t, this.parent = e;
        }
    }

    /** Name of the IndexedDb object store. */ function Bi(t) {
        t.createObjectStore(Fi.store, {
            keyPath: Fi.keyPath
        }).createIndex(Fi.documentTargetsIndex, Fi.documentTargetsKeyPath, {
            unique: !0
        });
        // NOTE: This is unique only because the TargetId is the suffix.
        t.createObjectStore(Oi.store, {
            keyPath: Oi.keyPath
        }).createIndex(Oi.queryTargetsIndexName, Oi.queryTargetsKeyPath, {
            unique: !0
        }), t.createObjectStore($i.store);
    }

    Li.store = "collectionParents", 
    /** Keys are automatically assigned via the collectionId, parent properties. */
    Li.keyPath = [ "collectionId", "parent" ];

    class qi {
        constructor(
        // Note: Previous schema versions included a field
        // "lastProcessedDocumentChangeId". Don't use anymore.
        /** The auto-generated client id assigned at client startup. */
        t, 
        /** The last time this state was updated. */
        e, 
        /** Whether the client's network connection is enabled. */
        n, 
        /** Whether this client is running in a foreground tab. */
        s) {
            this.clientId = t, this.updateTimeMs = e, this.networkEnabled = n, this.inForeground = s;
        }
    }

    /** Name of the IndexedDb object store. */ qi.store = "clientMetadata", 
    /** Keys are automatically assigned via the clientId properties. */
    qi.keyPath = "clientId";

    class Ui {
        constructor(
        /** The ID of the loaded bundle. */
        t, 
        /** The create time of the loaded bundle. */
        e, 
        /** The schema version of the loaded bundle. */
        n) {
            this.bundleId = t, this.createTime = e, this.version = n;
        }
    }

    /** Name of the IndexedDb object store. */ Ui.store = "bundles", Ui.keyPath = "bundleId";

    class Ki {
        constructor(
        /** The name of the query. */
        t, 
        /** The read time of the results saved in the bundle from the named query. */
        e, 
        /** The query saved in the bundle. */
        n) {
            this.name = t, this.readTime = e, this.bundledQuery = n;
        }
    }

    /** Name of the IndexedDb object store. */ Ki.store = "namedQueries", Ki.keyPath = "name";

    const Qi = [ ...[ ...[ ...[ ...[ Si.store, Di.store, Ci.store, Mi.store, Oi.store, vi.store, $i.store, Fi.store ], qi.store ], ki.store ], Li.store ], Ui.store, Ki.store ];

    // V2 is no longer usable (see comment at top of file)
    // Visible for testing
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Wi {
        constructor(t) {
            this.serializer = t;
        }
        ho(t, e) {
            return ji(t).get(e).next((t => {
                if (t) return {
                    id: (e = t).bundleId,
                    createTime: ci(e.createTime),
                    version: e.version
                };
                /** Encodes a DbBundle to a Bundle. */
                var e;
                /** Encodes a BundleMetadata to a DbBundle. */        }));
        }
        lo(t, e) {
            return ji(t).put({
                bundleId: (n = e).id,
                createTime: oi(Re(n.createTime)),
                version: n.version
            });
            var n;
            /** Encodes a DbNamedQuery to a NamedQuery. */    }
        _o(t, e) {
            return Gi(t).get(e).next((t => {
                if (t) return {
                    name: (e = t).name,
                    query: li(e.bundledQuery),
                    readTime: ci(e.readTime)
                };
                var e;
                /** Encodes a NamedQuery from a bundle proto to a DbNamedQuery. */        }));
        }
        fo(t, e) {
            return Gi(t).put(function(t) {
                return {
                    name: t.name,
                    readTime: oi(Re(t.readTime)),
                    bundledQuery: t.bundledQuery
                };
            }(e));
        }
    }

    /**
     * Helper to get a typed SimpleDbStore for the bundles object store.
     */ function ji(t) {
        return sr.Ys(t, Ui.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the namedQueries object store.
     */ function Gi(t) {
        return sr.Ys(t, Ki.store);
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A persisted implementation of IndexManager.
     */ class zi {
        constructor() {
            /**
             * An in-memory copy of the index entries we've already written since the SDK
             * launched. Used to avoid re-writing the same entry repeatedly.
             *
             * This is *NOT* a complete cache of what's in persistence and so can never be used to
             * satisfy reads.
             */
            this.wo = new yi;
        }
        /**
         * Adds a new entry to the collection parent index.
         *
         * Repeated calls for the same collectionPath should be avoided within a
         * transaction as IndexedDbIndexManager only caches writes once a transaction
         * has been committed.
         */    Or(t, e) {
            if (!this.wo.has(e)) {
                const n = e.B(), s = e.$();
                t.es((() => {
                    // Add the collection to the in memory cache only if the transaction was
                    // successfully committed.
                    this.wo.add(e);
                }));
                const i = {
                    collectionId: n,
                    parent: Ys(s)
                };
                return Hi(t).put(i);
            }
            return ms.resolve();
        }
        As(t, e) {
            const n = [], s = IDBKeyRange.bound([ e, "" ], [ Q$1(e), "" ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0);
            return Hi(t).ui(s).next((t => {
                for (const s of t) {
                    // This collectionId guard shouldn't be necessary (and isn't as long
                    // as we're running in a real browser), but there's a bug in
                    // indexeddbshim that breaks our range in our tests running in node:
                    // https://github.com/axemclion/IndexedDBShim/issues/334
                    if (s.collectionId !== e) break;
                    n.push(ti(s.parent));
                }
                return n;
            }));
        }
    }

    /**
     * Helper to get a typed SimpleDbStore for the collectionParents
     * document store.
     */ function Hi(t) {
        return sr.Ys(t, Li.store);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Offset to ensure non-overlapping target ids. */
    /**
     * Generates monotonically increasing target IDs for sending targets to the
     * watch stream.
     *
     * The client constructs two generators, one for the target cache, and one for
     * for the sync engine (to generate limbo documents targets). These
     * generators produce non-overlapping IDs (by using even and odd IDs
     * respectively).
     *
     * By separating the target ID space, the query cache can generate target IDs
     * that persist across client restarts, while sync engine can independently
     * generate in-memory target IDs that are transient and can be reused after a
     * restart.
     */
    class Ji {
        constructor(t) {
            this.Eo = t;
        }
        next() {
            return this.Eo += 2, this.Eo;
        }
        static To() {
            // The target cache generator must return '2' in its first call to `next()`
            // as there is no differentiation in the protocol layer between an unset
            // number and the number '0'. If we were to sent a target with target ID
            // '0', the backend would consider it unset and replace it with its own ID.
            return new Ji(0);
        }
        static Io() {
            // Sync engine assigns target IDs for limbo document detection.
            return new Ji(-1);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class Yi {
        constructor(t, e) {
            this.Dr = t, this.serializer = e;
        }
        // PORTING NOTE: We don't cache global metadata for the target cache, since
        // some of it (in particular `highestTargetId`) can be modified by secondary
        // tabs. We could perhaps be more granular (and e.g. still cache
        // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go
        // to IndexedDb whenever we need to read metadata. We can revisit if it turns
        // out to have a meaningful performance impact.
        mo(t) {
            return this.Ao(t).next((e => {
                const n = new Ji(e.highestTargetId);
                return e.highestTargetId = n.next(), this.Ro(t, e).next((() => e.highestTargetId));
            }));
        }
        Po(t) {
            return this.Ao(t).next((t => j.S(new W$1(t.lastRemoteSnapshotVersion.seconds, t.lastRemoteSnapshotVersion.nanoseconds))));
        }
        Vo(t) {
            return this.Ao(t).next((t => t.highestListenSequenceNumber));
        }
        yo(t, e, n) {
            return this.Ao(t).next((s => (s.highestListenSequenceNumber = e, n && (s.lastRemoteSnapshotVersion = n.N()), 
            e > s.highestListenSequenceNumber && (s.highestListenSequenceNumber = e), this.Ro(t, s))));
        }
        po(t, e) {
            return this.bo(t, e).next((() => this.Ao(t).next((n => (n.targetCount += 1, this.vo(e, n), 
            this.Ro(t, n))))));
        }
        So(t, e) {
            return this.bo(t, e);
        }
        Do(t, e) {
            return this.Co(t, e.targetId).next((() => Xi(t).delete(e.targetId))).next((() => this.Ao(t))).next((e => (C(e.targetCount > 0), 
            e.targetCount -= 1, this.Ro(t, e))));
        }
        /**
         * Drops any targets with sequence number less than or equal to the upper bound, excepting those
         * present in `activeTargetIds`. Document associations for the removed targets are also removed.
         * Returns the number of targets removed.
         */    mr(t, e, n) {
            let s = 0;
            const i = [];
            return Xi(t)._i(((r, o) => {
                const c = ai(o);
                c.sequenceNumber <= e && null === n.get(c.targetId) && (s++, i.push(this.Do(t, c)));
            })).next((() => ms.qn(i))).next((() => s));
        }
        /**
         * Call provided function with each `TargetData` that we have cached.
         */    Ue(t, e) {
            return Xi(t)._i(((t, n) => {
                const s = ai(n);
                e(s);
            }));
        }
        Ao(t) {
            return Zi(t).get($i.key).next((t => (C(null !== t), t)));
        }
        Ro(t, e) {
            return Zi(t).put($i.key, e);
        }
        bo(t, e) {
            return Xi(t).put(hi(this.serializer, e));
        }
        /**
         * In-place updates the provided metadata to account for values in the given
         * TargetData. Saving is done separately. Returns true if there were any
         * changes to the metadata.
         */    vo(t, e) {
            let n = !1;
            return t.targetId > e.highestTargetId && (e.highestTargetId = t.targetId, n = !0), 
            t.sequenceNumber > e.highestListenSequenceNumber && (e.highestListenSequenceNumber = t.sequenceNumber, 
            n = !0), n;
        }
        No(t) {
            return this.Ao(t).next((t => t.targetCount));
        }
        xo(t, e) {
            // Iterating by the canonicalId may yield more than one result because
            // canonicalId values are not required to be unique per target. This query
            // depends on the queryTargets index to be efficient.
            const n = rt(e), s = IDBKeyRange.bound([ n, Number.NEGATIVE_INFINITY ], [ n, Number.POSITIVE_INFINITY ]);
            let i = null;
            return Xi(t)._i({
                range: s,
                index: Oi.queryTargetsIndexName
            }, ((t, n, s) => {
                const r = ai(n);
                // After finding a potential match, check that the target is
                // actually equal to the requested target.
                            ct(e, r.target) && (i = r, s.done());
            })).next((() => i));
        }
        Mo(t, e, n) {
            // PORTING NOTE: The reverse index (documentsTargets) is maintained by
            // IndexedDb.
            const s = [], i = tr(t);
            return e.forEach((e => {
                const r = Ys(e.path);
                s.push(i.put(new Fi(n, r))), s.push(this.Dr.ko(t, n, e));
            })), ms.qn(s);
        }
        Oo(t, e, n) {
            // PORTING NOTE: The reverse index (documentsTargets) is maintained by
            // IndexedDb.
            const s = tr(t);
            return ms.forEach(e, (e => {
                const i = Ys(e.path);
                return ms.qn([ s.delete([ n, i ]), this.Dr.Fo(t, n, e) ]);
            }));
        }
        Co(t, e) {
            const n = tr(t), s = IDBKeyRange.bound([ e ], [ e + 1 ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0);
            return n.delete(s);
        }
        $o(t, e) {
            const n = IDBKeyRange.bound([ e ], [ e + 1 ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0), s = tr(t);
            let i = vt();
            return s._i({
                range: n,
                li: !0
            }, ((t, e, n) => {
                const s = ti(t[1]), r = new Y$1(s);
                i = i.add(r);
            })).next((() => i));
        }
        zr(t, e) {
            const n = Ys(e.path), s = IDBKeyRange.bound([ n ], [ Q$1(n) ], 
            /*lowerOpen=*/ !1, 
            /*upperOpen=*/ !0);
            let i = 0;
            return tr(t)._i({
                index: Fi.documentTargetsIndex,
                li: !0,
                range: s
            }, (([t, e], n, s) => {
                // Having a sentinel row for a document does not count as containing that document;
                // For the target cache, containing the document means the document is part of some
                // target.
                0 !== t && (i++, s.done());
            })).next((() => i > 0));
        }
        /**
         * Looks up a TargetData entry by target ID.
         *
         * @param targetId - The target ID of the TargetData entry to look up.
         * @returns The cached TargetData entry, or null if the cache has no entry for
         * the target.
         */
        // PORTING NOTE: Multi-tab only.
        Ze(t, e) {
            return Xi(t).get(e).next((t => t ? ai(t) : null));
        }
    }

    /**
     * Helper to get a typed SimpleDbStore for the queries object store.
     */ function Xi(t) {
        return sr.Ys(t, Oi.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the target globals object store.
     */ function Zi(t) {
        return sr.Ys(t, $i.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the document target object store.
     */ function tr(t) {
        return sr.Ys(t, Fi.store);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const er = "Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.";

    /**
     * Oldest acceptable age in milliseconds for client metadata before the client
     * is considered inactive and its associated data is garbage collected.
     */ class nr extends ys {
        constructor(t, e) {
            super(), this.Qr = t, this.Lo = e;
        }
    }

    /**
     * An IndexedDB-backed instance of Persistence. Data is stored persistently
     * across sessions.
     *
     * On Web only, the Firestore SDKs support shared access to its persistence
     * layer. This allows multiple browser tabs to read and write to IndexedDb and
     * to synchronize state even without network connectivity. Shared access is
     * currently optional and not enabled unless all clients invoke
     * `enablePersistence()` with `{synchronizeTabs:true}`.
     *
     * In multi-tab mode, if multiple clients are active at the same time, the SDK
     * will designate one client as the “primary client”. An effort is made to pick
     * a visible, network-connected and active client, and this client is
     * responsible for letting other clients know about its presence. The primary
     * client writes a unique client-generated identifier (the client ID) to
     * IndexedDb’s “owner” store every 4 seconds. If the primary client fails to
     * update this entry, another client can acquire the lease and take over as
     * primary.
     *
     * Some persistence operations in the SDK are designated as primary-client only
     * operations. This includes the acknowledgment of mutations and all updates of
     * remote documents. The effects of these operations are written to persistence
     * and then broadcast to other tabs via LocalStorage (see
     * `WebStorageSharedClientState`), which then refresh their state from
     * persistence.
     *
     * Similarly, the primary client listens to notifications sent by secondary
     * clients to discover persistence changes written by secondary clients, such as
     * the addition of new mutations and query targets.
     *
     * If multi-tab is not enabled and another tab already obtained the primary
     * lease, IndexedDbPersistence enters a failed state and all subsequent
     * operations will automatically fail.
     *
     * Additionally, there is an optimization so that when a tab is closed, the
     * primary lease is released immediately (this is especially important to make
     * sure that a refreshed tab is able to immediately re-acquire the primary
     * lease). Unfortunately, IndexedDB cannot be reliably used in window.unload
     * since it is an asynchronous API. So in addition to attempting to give up the
     * lease, the leaseholder writes its client ID to a "zombiedClient" entry in
     * LocalStorage which acts as an indicator that another tab should go ahead and
     * take the primary lease immediately regardless of the current lease timestamp.
     *
     * TODO(b/114226234): Remove `synchronizeTabs` section when multi-tab is no
     * longer optional.
     */ class sr {
        constructor(
        /**
         * Whether to synchronize the in-memory state of multiple tabs and share
         * access to local persistence.
         */
        t, e, n, s, i, r, o, c, u, 
        /**
         * If set to true, forcefully obtains database access. Existing tabs will
         * no longer be able to access IndexedDB.
         */
        a) {
            if (this.allowTabSynchronization = t, this.persistenceKey = e, this.clientId = n, 
            this.Cs = i, this.window = r, this.document = o, this.Bo = u, this.qo = a, this.Uo = null, 
            this.Ko = !1, this.isPrimary = !1, this.networkEnabled = !0, 
            /** Our window.unload handler, if registered. */
            this.Qo = null, this.inForeground = !1, 
            /** Our 'visibilitychange' listener if registered. */
            this.Wo = null, 
            /** The client metadata refresh task. */
            this.jo = null, 
            /** The last time we garbage collected the client metadata object store. */
            this.Go = Number.NEGATIVE_INFINITY, 
            /** A listener to notify on primary state changes. */
            this.zo = t => Promise.resolve(), !sr.Gs()) throw new M$1(x$1.UNIMPLEMENTED, "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");
            this.Dr = new or(this, s), this.Ho = e + "main", this.serializer = new ei(c), this.Jo = new Ds(this.Ho, 11, new pi(this.serializer)), 
            this.Yo = new Yi(this.Dr, this.serializer), this.os = new zi, this.ss = function(t, e) {
                return new Ii(t, e);
            }
            /**
     * Returns the set of documents that have changed since the specified read
     * time.
     */
            // PORTING NOTE: This is only used for multi-tab synchronization.
            (this.serializer, this.os), this.Xo = new Wi(this.serializer), this.window && this.window.localStorage ? this.Zo = this.window.localStorage : (this.Zo = null, 
            !1 === a && b("IndexedDbPersistence", "LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page."));
        }
        static Ys(t, e) {
            if (t instanceof nr) return Ds.Ys(t.Qr, e);
            throw D$1();
        }
        /**
         * Attempt to start IndexedDb persistence.
         *
         * @returns Whether persistence was enabled.
         */    start() {
            // NOTE: This is expected to fail sometimes (in the case of another tab
            // already having the persistence lock), so it's the first thing we should
            // do.
            return this.tc().then((() => {
                if (!this.isPrimary && !this.allowTabSynchronization) 
                // Fail `start()` if `synchronizeTabs` is disabled and we cannot
                // obtain the primary lease.
                throw new M$1(x$1.FAILED_PRECONDITION, er);
                return this.ec(), this.nc(), this.sc(), this.runTransaction("getHighestListenSequenceNumber", "readonly", (t => this.Yo.Vo(t)));
            })).then((t => {
                this.Uo = new vs(t, this.Bo);
            })).then((() => {
                this.Ko = !0;
            })).catch((t => (this.Jo && this.Jo.close(), Promise.reject(t))));
        }
        /**
         * Registers a listener that gets called when the primary state of the
         * instance changes. Upon registering, this listener is invoked immediately
         * with the current primary state.
         *
         * PORTING NOTE: This is only used for Web multi-tab.
         */    ic(t) {
            return this.zo = async e => {
                if (this.lr) return t(e);
            }, t(this.isPrimary);
        }
        /**
         * Registers a listener that gets called when the database receives a
         * version change event indicating that it has deleted.
         *
         * PORTING NOTE: This is only used for Web multi-tab.
         */    rc(t) {
            this.Jo.ti((async e => {
                // Check if an attempt is made to delete IndexedDB.
                null === e.newVersion && await t();
            }));
        }
        /**
         * Adjusts the current network state in the client's metadata, potentially
         * affecting the primary lease.
         *
         * PORTING NOTE: This is only used for Web multi-tab.
         */    oc(t) {
            this.networkEnabled !== t && (this.networkEnabled = t, 
            // Schedule a primary lease refresh for immediate execution. The eventual
            // lease update will be propagated via `primaryStateListener`.
            this.Cs.Ri((async () => {
                this.lr && await this.tc();
            })));
        }
        /**
         * Updates the client metadata in IndexedDb and attempts to either obtain or
         * extend the primary lease for the local client. Asynchronously notifies the
         * primary state listener if the client either newly obtained or released its
         * primary lease.
         */    tc() {
            return this.runTransaction("updateClientMetadataAndTryBecomePrimary", "readwrite", (t => rr(t).put(new qi(this.clientId, Date.now(), this.networkEnabled, this.inForeground)).next((() => {
                if (this.isPrimary) return this.cc(t).next((t => {
                    t || (this.isPrimary = !1, this.Cs.Oi((() => this.zo(!1))));
                }));
            })).next((() => this.uc(t))).next((e => this.isPrimary && !e ? this.ac(t).next((() => !1)) : !!e && this.hc(t).next((() => !0)))))).catch((t => {
                if (xs(t)) 
                // Proceed with the existing state. Any subsequent access to
                // IndexedDB will verify the lease.
                return p$1("IndexedDbPersistence", "Failed to extend owner lease: ", t), this.isPrimary;
                if (!this.allowTabSynchronization) throw t;
                return p$1("IndexedDbPersistence", "Releasing owner lease after error during lease refresh", t), 
                /* isPrimary= */ !1;
            })).then((t => {
                this.isPrimary !== t && this.Cs.Oi((() => this.zo(t))), this.isPrimary = t;
            }));
        }
        cc(t) {
            return ir(t).get(vi.key).next((t => ms.resolve(this.lc(t))));
        }
        _c(t) {
            return rr(t).delete(this.clientId);
        }
        /**
         * If the garbage collection threshold has passed, prunes the
         * RemoteDocumentChanges and the ClientMetadata store based on the last update
         * time of all clients.
         */    async fc() {
            if (this.isPrimary && !this.dc(this.Go, 18e5)) {
                this.Go = Date.now();
                const t = await this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary", (t => {
                    const e = sr.Ys(t, qi.store);
                    return e.ui().next((t => {
                        const n = this.wc(t, 18e5), s = t.filter((t => -1 === n.indexOf(t)));
                        // Delete metadata for clients that are no longer considered active.
                        return ms.forEach(s, (t => e.delete(t.clientId))).next((() => s));
                    }));
                })).catch((() => []));
                // Delete potential leftover entries that may continue to mark the
                // inactive clients as zombied in LocalStorage.
                // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for
                // the client atomically, but we can't. So we opt to delete the IndexedDb
                // entries first to avoid potentially reviving a zombied client.
                            if (this.Zo) for (const e of t) this.Zo.removeItem(this.Ec(e.clientId));
            }
        }
        /**
         * Schedules a recurring timer to update the client metadata and to either
         * extend or acquire the primary lease if the client is eligible.
         */    sc() {
            this.jo = this.Cs.Us("client_metadata_refresh" /* ClientMetadataRefresh */ , 4e3, (() => this.tc().then((() => this.fc())).then((() => this.sc()))));
        }
        /** Checks whether `client` is the local client. */    lc(t) {
            return !!t && t.ownerId === this.clientId;
        }
        /**
         * Evaluate the state of all active clients and determine whether the local
         * client is or can act as the holder of the primary lease. Returns whether
         * the client is eligible for the lease, but does not actually acquire it.
         * May return 'false' even if there is no active leaseholder and another
         * (foreground) client should become leaseholder instead.
         */    uc(t) {
            if (this.qo) return ms.resolve(!0);
            return ir(t).get(vi.key).next((e => {
                // A client is eligible for the primary lease if:
                // - its network is enabled and the client's tab is in the foreground.
                // - its network is enabled and no other client's tab is in the
                //   foreground.
                // - every clients network is disabled and the client's tab is in the
                //   foreground.
                // - every clients network is disabled and no other client's tab is in
                //   the foreground.
                // - the `forceOwningTab` setting was passed in.
                if (null !== e && this.dc(e.leaseTimestampMs, 5e3) && !this.Tc(e.ownerId)) {
                    if (this.lc(e) && this.networkEnabled) return !0;
                    if (!this.lc(e)) {
                        if (!e.allowTabSynchronization) 
                        // Fail the `canActAsPrimary` check if the current leaseholder has
                        // not opted into multi-tab synchronization. If this happens at
                        // client startup, we reject the Promise returned by
                        // `enablePersistence()` and the user can continue to use Firestore
                        // with in-memory persistence.
                        // If this fails during a lease refresh, we will instead block the
                        // AsyncQueue from executing further operations. Note that this is
                        // acceptable since mixing & matching different `synchronizeTabs`
                        // settings is not supported.
                        // TODO(b/114226234): Remove this check when `synchronizeTabs` can
                        // no longer be turned off.
                        throw new M$1(x$1.FAILED_PRECONDITION, er);
                        return !1;
                    }
                }
                return !(!this.networkEnabled || !this.inForeground) || rr(t).ui().next((t => void 0 === this.wc(t, 5e3).find((t => {
                    if (this.clientId !== t.clientId) {
                        const e = !this.networkEnabled && t.networkEnabled, n = !this.inForeground && t.inForeground, s = this.networkEnabled === t.networkEnabled;
                        if (e || n && s) return !0;
                    }
                    return !1;
                }))));
            })).next((t => (this.isPrimary !== t && p$1("IndexedDbPersistence", `Client ${t ? "is" : "is not"} eligible for a primary lease.`), 
            t)));
        }
        async Ic() {
            // The shutdown() operations are idempotent and can be called even when
            // start() aborted (e.g. because it couldn't acquire the persistence lease).
            this.Ko = !1, this.mc(), this.jo && (this.jo.cancel(), this.jo = null), this.Ac(), 
            this.Rc(), 
            // Use `SimpleDb.runTransaction` directly to avoid failing if another tab
            // has obtained the primary lease.
            await this.Jo.runTransaction("shutdown", "readwrite", [ vi.store, qi.store ], (t => {
                const e = new nr(t, vs.Ds);
                return this.ac(e).next((() => this._c(e)));
            })), this.Jo.close(), 
            // Remove the entry marking the client as zombied from LocalStorage since
            // we successfully deleted its metadata from IndexedDb.
            this.Pc();
        }
        /**
         * Returns clients that are not zombied and have an updateTime within the
         * provided threshold.
         */    wc(t, e) {
            return t.filter((t => this.dc(t.updateTimeMs, e) && !this.Tc(t.clientId)));
        }
        /**
         * Returns the IDs of the clients that are currently active. If multi-tab
         * is not supported, returns an array that only contains the local client's
         * ID.
         *
         * PORTING NOTE: This is only used for Web multi-tab.
         */    Vc() {
            return this.runTransaction("getActiveClients", "readonly", (t => rr(t).ui().next((t => this.wc(t, 18e5).map((t => t.clientId))))));
        }
        get lr() {
            return this.Ko;
        }
        gc(t) {
            return _i.Nr(t, this.serializer, this.os, this.Dr);
        }
        yc() {
            return this.Yo;
        }
        bc() {
            return this.ss;
        }
        vc() {
            return this.os;
        }
        Sc() {
            return this.Xo;
        }
        runTransaction(t, e, n) {
            p$1("IndexedDbPersistence", "Starting transaction:", t);
            const s = "readonly" === e ? "readonly" : "readwrite";
            let i;
            // Do all transactions as readwrite against all object stores, since we
            // are the only reader/writer.
                    return this.Jo.runTransaction(t, s, Qi, (s => (i = new nr(s, this.Uo ? this.Uo.next() : vs.Ds), 
            "readwrite-primary" === e ? this.cc(i).next((t => !!t || this.uc(i))).next((e => {
                if (!e) throw b(`Failed to obtain primary lease for action '${t}'.`), this.isPrimary = !1, 
                this.Cs.Oi((() => this.zo(!1))), new M$1(x$1.FAILED_PRECONDITION, gs);
                return n(i);
            })).next((t => this.hc(i).next((() => t)))) : this.Dc(i).next((() => n(i)))))).then((t => (i.ns(), 
            t)));
        }
        /**
         * Verifies that the current tab is the primary leaseholder or alternatively
         * that the leaseholder has opted into multi-tab synchronization.
         */
        // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer
        // be turned off.
        Dc(t) {
            return ir(t).get(vi.key).next((t => {
                if (null !== t && this.dc(t.leaseTimestampMs, 5e3) && !this.Tc(t.ownerId) && !this.lc(t) && !(this.qo || this.allowTabSynchronization && t.allowTabSynchronization)) throw new M$1(x$1.FAILED_PRECONDITION, er);
            }));
        }
        /**
         * Obtains or extends the new primary lease for the local client. This
         * method does not verify that the client is eligible for this lease.
         */    hc(t) {
            const e = new vi(this.clientId, this.allowTabSynchronization, Date.now());
            return ir(t).put(vi.key, e);
        }
        static Gs() {
            return Ds.Gs();
        }
        /** Checks the primary lease and removes it if we are the current primary. */    ac(t) {
            const e = ir(t);
            return e.get(vi.key).next((t => this.lc(t) ? (p$1("IndexedDbPersistence", "Releasing primary lease."), 
            e.delete(vi.key)) : ms.resolve()));
        }
        /** Verifies that `updateTimeMs` is within `maxAgeMs`. */    dc(t, e) {
            const n = Date.now();
            return !(t < n - e) && (!(t > n) || (b(`Detected an update time that is in the future: ${t} > ${n}`), 
            !1));
        }
        ec() {
            null !== this.document && "function" == typeof this.document.addEventListener && (this.Wo = () => {
                this.Cs.Ri((() => (this.inForeground = "visible" === this.document.visibilityState, 
                this.tc())));
            }, this.document.addEventListener("visibilitychange", this.Wo), this.inForeground = "visible" === this.document.visibilityState);
        }
        Ac() {
            this.Wo && (this.document.removeEventListener("visibilitychange", this.Wo), this.Wo = null);
        }
        /**
         * Attaches a window.unload handler that will synchronously write our
         * clientId to a "zombie client id" location in LocalStorage. This can be used
         * by tabs trying to acquire the primary lease to determine that the lease
         * is no longer valid even if the timestamp is recent. This is particularly
         * important for the refresh case (so the tab correctly re-acquires the
         * primary lease). LocalStorage is used for this rather than IndexedDb because
         * it is a synchronous API and so can be used reliably from  an unload
         * handler.
         */    nc() {
            var t;
            "function" == typeof (null === (t = this.window) || void 0 === t ? void 0 : t.addEventListener) && (this.Qo = () => {
                // Note: In theory, this should be scheduled on the AsyncQueue since it
                // accesses internal state. We execute this code directly during shutdown
                // to make sure it gets a chance to run.
                this.mc(), this.Cs.Ri((() => this.Ic()));
            }, this.window.addEventListener("unload", this.Qo));
        }
        Rc() {
            this.Qo && (this.window.removeEventListener("unload", this.Qo), this.Qo = null);
        }
        /**
         * Returns whether a client is "zombied" based on its LocalStorage entry.
         * Clients become zombied when their tab closes without running all of the
         * cleanup logic in `shutdown()`.
         */    Tc(t) {
            var e;
            try {
                const n = null !== (null === (e = this.Zo) || void 0 === e ? void 0 : e.getItem(this.Ec(t)));
                return p$1("IndexedDbPersistence", `Client '${t}' ${n ? "is" : "is not"} zombied in LocalStorage`), 
                n;
            } catch (t) {
                // Gracefully handle if LocalStorage isn't working.
                return b("IndexedDbPersistence", "Failed to get zombied client id.", t), !1;
            }
        }
        /**
         * Record client as zombied (a client that had its tab closed). Zombied
         * clients are ignored during primary tab selection.
         */    mc() {
            if (this.Zo) try {
                this.Zo.setItem(this.Ec(this.clientId), String(Date.now()));
            } catch (t) {
                // Gracefully handle if LocalStorage isn't available / working.
                b("Failed to set zombie client id.", t);
            }
        }
        /** Removes the zombied client entry if it exists. */    Pc() {
            if (this.Zo) try {
                this.Zo.removeItem(this.Ec(this.clientId));
            } catch (t) {
                // Ignore
            }
        }
        Ec(t) {
            return `firestore_zombie_${this.persistenceKey}_${t}`;
        }
    }

    /**
     * Helper to get a typed SimpleDbStore for the primary client object store.
     */ function ir(t) {
        return sr.Ys(t, vi.store);
    }

    /**
     * Helper to get a typed SimpleDbStore for the client metadata object store.
     */ function rr(t) {
        return sr.Ys(t, qi.store);
    }

    /** Provides LRU functionality for IndexedDB persistence. */ class or {
        constructor(t, e) {
            this.db = t, this.cr = new Hs(this, e);
        }
        Er(t) {
            const e = this.Cc(t);
            return this.db.yc().No(t).next((t => e.next((e => t + e))));
        }
        Cc(t) {
            let e = 0;
            return this.Ir(t, (t => {
                e++;
            })).next((() => e));
        }
        Ue(t, e) {
            return this.db.yc().Ue(t, e);
        }
        Ir(t, e) {
            return this.Nc(t, ((t, n) => e(n)));
        }
        ko(t, e, n) {
            return cr(t, n);
        }
        Fo(t, e, n) {
            return cr(t, n);
        }
        mr(t, e, n) {
            return this.db.yc().mr(t, e, n);
        }
        jr(t, e) {
            return cr(t, e);
        }
        /**
         * Returns true if anything would prevent this document from being garbage
         * collected, given that the document in question is not present in any
         * targets and has a sequence number less than or equal to the upper bound for
         * the collection run.
         */    xc(t, e) {
            return function(t, e) {
                let n = !1;
                return Ti(t).fi((s => fi(t, s, e).next((t => (t && (n = !0), ms.resolve(!t)))))).next((() => n));
            }(t, e);
        }
        Ar(t, e) {
            const n = this.db.bc().io(), s = [];
            let i = 0;
            return this.Nc(t, ((r, o) => {
                if (o <= e) {
                    const e = this.xc(t, r).next((e => {
                        if (!e) 
                        // Our size accounting requires us to read all documents before
                        // removing them.
                        return i++, n.Jn(t, r).next((() => (n.Hn(r), tr(t).delete([ 0, Ys(r.path) ]))));
                    }));
                    s.push(e);
                }
            })).next((() => ms.qn(s))).next((() => n.apply(t))).next((() => i));
        }
        removeTarget(t, e) {
            const n = e.dt(t.Lo);
            return this.db.yc().So(t, n);
        }
        Mc(t, e) {
            return cr(t, e);
        }
        /**
         * Call provided function for each document in the cache that is 'orphaned'. Orphaned
         * means not a part of any target, so the only entry in the target-document index for
         * that document will be the sentinel row (targetId 0), which will also have the sequence
         * number for the last time the document was accessed.
         */    Nc(t, e) {
            const n = tr(t);
            let s, i = vs.Ds;
            return n._i({
                index: Fi.documentTargetsIndex
            }, (([t, n], {path: r, sequenceNumber: o}) => {
                0 === t ? (
                // if nextToReport is valid, report it, this is a new key so the
                // last one must not be a member of any targets.
                i !== vs.Ds && e(new Y$1(ti(s)), i), 
                // set nextToReport to be this sequence number. It's the next one we
                // might report, if we don't find any targets for this document.
                // Note that the sequence number must be defined when the targetId
                // is 0.
                i = o, s = r) : 
                // set nextToReport to be invalid, we know we don't need to report
                // this one since we found a target for it.
                i = vs.Ds;
            })).next((() => {
                // Since we report sequence numbers after getting to the next key, we
                // need to check if the last key we iterated over was an orphaned
                // document and report it.
                i !== vs.Ds && e(new Y$1(ti(s)), i);
            }));
        }
        Pr(t) {
            return this.db.bc().oo(t);
        }
    }

    function cr(t, e) {
        return tr(t).put(
        /**
     * @returns A value suitable for writing a sentinel row in the target-document
     * store.
     */
        function(t, e) {
            return new Fi(0, Ys(t.path), e);
        }(e, t.Lo));
    }

    /**
     * Generates a string used as a prefix when storing data in IndexedDB and
     * LocalStorage.
     */ function ur(t, e) {
        // Use two different prefix formats:
        //   * firestore / persistenceKey / projectID . databaseID / ...
        //   * firestore / persistenceKey / projectID / ...
        // projectIDs are DNS-compatible names and cannot contain dots
        // so there's no danger of collisions.
        let n = t.projectId;
        return t.ct || (n += "." + t.database), "firestore/" + e + "/" + n + "/";
    }

    /**
     * Implements `LocalStore` interface.
     *
     * Note: some field defined in this class might have public access level, but
     * the class is not exported so they are only accessible from this module.
     * This is useful to implement optional features (like bundles) in free
     * functions, such that they are tree-shakeable.
     */
    class ar {
        constructor(
        /** Manages our in-memory or durable persistence. */
        t, e, n, s) {
            this.persistence = t, this.kc = e, this.serializer = s, 
            /**
             * Maps a targetID to data about its target.
             *
             * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
             * of `applyRemoteEvent()` idempotent.
             */
            this.Oc = new Et(U$1), 
            /** Maps a target to its targetID. */
            // TODO(wuandy): Evaluate if TargetId can be part of Target.
            this.Fc = new Is((t => rt(t)), ct), 
            /**
             * The read time of the last entry processed by `getNewDocumentChanges()`.
             *
             * PORTING NOTE: This is only used for multi-tab synchronization.
             */
            this.$c = j.min(), this.rs = t.gc(n), this.Lc = t.bc(), this.Yo = t.yc(), this.Bc = new ps(this.Lc, this.rs, this.persistence.vc()), 
            this.Xo = t.Sc(), this.kc.gr(this.Bc);
        }
        _r(t) {
            return this.persistence.runTransaction("Collect garbage", "readwrite-primary", (e => t.Rr(e, this.Oc)));
        }
    }

    function hr(
    /** Manages our in-memory or durable persistence. */
    t, e, n, s) {
        return new ar(t, e, n, s);
    }

    /**
     * Tells the LocalStore that the currently authenticated user has changed.
     *
     * In response the local store switches the mutation queue to the new user and
     * returns any resulting document changes.
     */
    // PORTING NOTE: Android and iOS only return the documents affected by the
    // change.
    async function lr(t, e) {
        const n = N$1(t);
        let s = n.rs, i = n.Bc;
        const r = await n.persistence.runTransaction("Handle user change", "readonly", (t => {
            // Swap out the mutation queue, grabbing the pending mutation batches
            // before and after.
            let r;
            return n.rs.qr(t).next((o => (r = o, s = n.persistence.gc(e), 
            // Recreate our LocalDocumentsView using the new
            // MutationQueue.
            i = new ps(n.Lc, s, n.persistence.vc()), s.qr(t)))).next((e => {
                const n = [], s = [];
                // Union the old/new changed keys.
                let o = vt();
                for (const t of r) {
                    n.push(t.batchId);
                    for (const e of t.mutations) o = o.add(e.key);
                }
                for (const t of e) {
                    s.push(t.batchId);
                    for (const e of t.mutations) o = o.add(e.key);
                }
                // Return the set of all (potentially) changed documents and the list
                // of mutation batch IDs that were affected by change.
                            return i._s(t, o).next((t => ({
                    qc: t,
                    Uc: n,
                    Kc: s
                })));
            }));
        }));
        return n.rs = s, n.Bc = i, n.kc.gr(n.Bc), r;
    }

    /* Accepts locally generated Mutations and commit them to storage. */
    /**
     * Acknowledges the given batch.
     *
     * On the happy path when a batch is acknowledged, the local store will
     *
     *  + remove the batch from the mutation queue;
     *  + apply the changes to the remote document cache;
     *  + recalculate the latency compensated view implied by those changes (there
     *    may be mutations in the queue that affect the documents but haven't been
     *    acknowledged yet); and
     *  + give the changed documents back the sync engine
     *
     * @returns The resulting (modified) documents.
     */
    function _r(t, e) {
        const n = N$1(t);
        return n.persistence.runTransaction("Acknowledge batch", "readwrite-primary", (t => {
            const s = e.batch.keys(), i = n.Lc.io({
                ro: !0
            });
            return function(t, e, n, s) {
                const i = n.batch, r = i.keys();
                let o = ms.resolve();
                return r.forEach((t => {
                    o = o.next((() => s.Jn(e, t))).next((e => {
                        let r = e;
                        const o = n.Sn.get(t);
                        C(null !== o), (!r || r.version.D(o) < 0) && (r = i.gn(t, r, n), r && 
                        // We use the commitVersion as the readTime rather than the
                        // document's updateTime since the updateTime is not advanced
                        // for updates that do not modify the underlying document.
                        s.jn(r, n.vn));
                    }));
                })), o.next((() => t.rs.Kr(e, i)));
            }
            /** Returns the local view of the documents affected by a mutation batch. */
            // PORTING NOTE: Multi-Tab only.
            (n, t, e, i).next((() => i.apply(t))).next((() => n.rs.Gr(t))).next((() => n.Bc._s(t, s)));
        }));
    }

    /**
     * Removes mutations from the MutationQueue for the specified batch;
     * LocalDocuments will be recalculated.
     *
     * @returns The resulting modified documents.
     */
    /**
     * Returns the last consistent snapshot processed (used by the RemoteStore to
     * determine whether to buffer incoming snapshots from the backend).
     */
    function fr(t) {
        const e = N$1(t);
        return e.persistence.runTransaction("Get last remote snapshot version", "readonly", (t => e.Yo.Po(t)));
    }

    /**
     * Updates the "ground-state" (remote) documents. We assume that the remote
     * event reflects any write batches that have been acknowledged or rejected
     * (i.e. we do not re-apply local mutations to updates from this event).
     *
     * LocalDocuments are re-calculated if there are remaining mutations in the
     * queue.
     */ function dr(t, e) {
        const n = N$1(t), s = e.ft;
        let i = n.Oc;
        return n.persistence.runTransaction("Apply remote event", "readwrite-primary", (t => {
            const r = n.Lc.io({
                ro: !0
            });
            // Reset newTargetDataByTargetMap in case this transaction gets re-run.
                    i = n.Oc;
            const o = [];
            e.re.forEach(((e, r) => {
                const c = i.get(r);
                if (!c) return;
                // Only update the remote keys if the target is still active. This
                // ensures that we can persist the updated target data along with
                // the updated assignment.
                            o.push(n.Yo.Oo(t, e.de, r).next((() => n.Yo.Mo(t, e._e, r))));
                const u = e.resumeToken;
                // Update the resume token if the change includes one.
                            if (u.ht() > 0) {
                    const a = c.wt(u, s).dt(t.Lo);
                    i = i.Tt(r, a), 
                    // Update the target data if there are target changes (or if
                    // sufficient time has passed since the last update).
                    /**
     * Returns true if the newTargetData should be persisted during an update of
     * an active target. TargetData should always be persisted when a target is
     * being released and should not call this function.
     *
     * While the target is active, TargetData updates can be omitted when nothing
     * about the target has changed except metadata like the resume token or
     * snapshot version. Occasionally it's worth the extra write to prevent these
     * values from getting too stale after a crash, but this doesn't have to be
     * too frequent.
     */
                    function(t, e, n) {
                        // Always persist target data if we don't already have a resume token.
                        if (C(e.resumeToken.ht() > 0), 0 === t.resumeToken.ht()) return !0;
                        // Don't allow resume token changes to be buffered indefinitely. This
                        // allows us to be reasonably up-to-date after a crash and avoids needing
                        // to loop over all active queries on shutdown. Especially in the browser
                        // we may not get time to do anything interesting while the current tab is
                        // closing.
                                            if (e.ft.C() - t.ft.C() >= 3e8) return !0;
                        // Otherwise if the only thing that has changed about a target is its resume
                        // token it's not worth persisting. Note that the RemoteStore keeps an
                        // in-memory view of the currently active targets which includes the current
                        // resume token, so stream failure or user changes will still use an
                        // up-to-date resume token regardless of what we do here.
                                            return n._e.size + n.fe.size + n.de.size > 0;
                    }
                    /**
     * Notifies local store of the changed views to locally pin documents.
     */ (c, a, e) && o.push(n.Yo.So(t, a));
                }
            }));
            let c = Pt();
            // HACK: The only reason we allow a null snapshot version is so that we
            // can synthesize remote events when we get permission denied errors while
            // trying to resolve the state of a locally cached document that is in
            // limbo.
            if (e.ce.forEach(((s, i) => {
                e.ue.has(s) && o.push(n.persistence.Dr.Mc(t, s));
            })), 
            // Each loop iteration only affects its "own" doc, so it's safe to get all the remote
            // documents in advance in a single call.
            o.push(
            /**
     * Populates document change buffer with documents from backend or a bundle.
     * Returns the document changes resulting from applying those documents.
     *
     * @param txn - Transaction to use to read existing documents from storage.
     * @param documentBuffer - Document buffer to collect the resulted changes to be
     *        applied to storage.
     * @param documents - Documents to be applied.
     * @param globalVersion - A `SnapshotVersion` representing the read time if all
     *        documents have the same read time.
     * @param documentVersions - A DocumentKey-to-SnapshotVersion map if documents
     *        have their own read time.
     *
     * Note: this function will use `documentVersions` if it is defined;
     * when it is not defined, resorts to `globalVersion`.
     */
            function(t, e, n, s, 
            // TODO(wuandy): We could add `readTime` to MaybeDocument instead to remove
            // this parameter.
            i) {
                let r = vt();
                return n.forEach((t => r = r.add(t))), e.getEntries(t, r).next((t => {
                    let r = Pt();
                    return n.forEach(((n, o) => {
                        const c = t.get(n), u = (null == i ? void 0 : i.get(n)) || s;
                        // Note: The order of the steps below is important, since we want
                        // to ensure that rejected limbo resolutions (which fabricate
                        // NoDocuments with SnapshotVersion.min()) never add documents to
                        // cache.
                        o instanceof kn && o.version.isEqual(j.min()) ? (
                        // NoDocuments with SnapshotVersion.min() are used in manufactured
                        // events. We remove these documents from cache since we lost
                        // access.
                        e.Hn(n, u), r = r.Tt(n, o)) : null == c || o.version.D(c.version) > 0 || 0 === o.version.D(c.version) && c.hasPendingWrites ? (e.jn(o, u), 
                        r = r.Tt(n, o)) : p$1("LocalStore", "Ignoring outdated watch update for ", n, ". Current version:", c.version, " Watch version:", o.version);
                    })), r;
                }));
            }(t, r, e.ce, s, void 0).next((t => {
                c = t;
            }))), !s.isEqual(j.min())) {
                const e = n.Yo.Po(t).next((e => n.Yo.yo(t, t.Lo, s)));
                o.push(e);
            }
            return ms.qn(o).next((() => r.apply(t))).next((() => n.Bc.fs(t, c)));
        })).then((t => (n.Oc = i, t)));
    }

    /**
     * Gets the mutation batch after the passed in batchId in the mutation queue
     * or null if empty.
     * @param afterBatchId - If provided, the batch to search after.
     * @returns The next mutation or null if there wasn't one.
     */
    function wr(t, e) {
        const n = N$1(t);
        return n.persistence.runTransaction("Get next mutation batch", "readonly", (t => (void 0 === e && (e = -1), 
        n.rs.Lr(t, e))));
    }

    /**
     * Reads the current value of a Document with a given key or null if not
     * found - used for testing.
     */
    /**
     * Assigns the given target an internal ID so that its results can be pinned so
     * they don't get GC'd. A target must be allocated in the local store before
     * the store can be used to manage its view.
     *
     * Allocating an already allocated `Target` will return the existing `TargetData`
     * for that `Target`.
     */
    function Er(t, e) {
        const n = N$1(t);
        return n.persistence.runTransaction("Allocate target", "readwrite", (t => {
            let s;
            return n.Yo.xo(t, e).next((i => i ? (
            // This target has been listened to previously, so reuse the
            // previous targetID.
            // TODO(mcg): freshen last accessed date?
            s = i, ms.resolve(s)) : n.Yo.mo(t).next((i => (s = new ht(e, i, 0 /* Listen */ , t.Lo), 
            n.Yo.po(t, s).next((() => s)))))));
        })).then((t => {
            // If Multi-Tab is enabled, the existing target data may be newer than
            // the in-memory data
            const s = n.Oc.get(t.targetId);
            return (null === s || t.ft.D(s.ft) > 0) && (n.Oc = n.Oc.Tt(t.targetId, t), n.Fc.set(e, t.targetId)), 
            t;
        }));
    }

    /**
     * Returns the TargetData as seen by the LocalStore, including updates that may
     * have not yet been persisted to the TargetCache.
     */
    // Visible for testing.
    /**
     * Unpins all the documents associated with the given target. If
     * `keepPersistedTargetData` is set to false and Eager GC enabled, the method
     * directly removes the associated target data from the target cache.
     *
     * Releasing a non-existing `Target` is a no-op.
     */
    // PORTING NOTE: `keepPersistedTargetData` is multi-tab only.
    async function Tr(t, e, n) {
        const s = N$1(t), i = s.Oc.get(e), r = n ? "readwrite" : "readwrite-primary";
        try {
            n || await s.persistence.runTransaction("Release target", r, (t => s.persistence.Dr.removeTarget(t, i)));
        } catch (t) {
            if (!xs(t)) throw t;
            // All `releaseTarget` does is record the final metadata state for the
            // target, but we've been recording this periodically during target
            // activity. If we lose this write this could cause a very slight
            // difference in the order of target deletion during GC, but we
            // don't define exact LRU semantics so this is acceptable.
            p$1("LocalStore", `Failed to update sequence numbers for target ${e}: ${t}`);
        }
        s.Oc = s.Oc.remove(e), s.Fc.delete(i.target);
    }

    /**
     * Runs the specified query against the local store and returns the results,
     * potentially taking advantage of query data from previous executions (such
     * as the set of remote keys).
     *
     * @param usePreviousResults - Whether results from previous executions can
     * be used to optimize this query execution.
     */ function Ir(t, e, n) {
        const s = N$1(t);
        let i = j.min(), r = vt();
        return s.persistence.runTransaction("Execute query", "readonly", (t => function(t, e, n) {
            const s = N$1(t), i = s.Fc.get(n);
            return void 0 !== i ? ms.resolve(s.Oc.get(i)) : s.Yo.xo(e, n);
        }(s, t, jn(e)).next((e => {
            if (e) return i = e.lastLimboFreeSnapshotVersion, s.Yo.$o(t, e.targetId).next((t => {
                r = t;
            }));
        })).next((() => s.kc.ws(t, e, n ? i : j.min(), n ? r : vt()))).next((t => ({
            documents: t,
            Qc: r
        })))));
    }

    // PORTING NOTE: Multi-Tab only.
    function mr(t, e) {
        const n = N$1(t), s = N$1(n.Yo), i = n.Oc.get(e);
        return i ? Promise.resolve(i.target) : n.persistence.runTransaction("Get target data", "readonly", (t => s.Ze(t, e).next((t => t ? t.target : null))));
    }

    /**
     * Returns the set of documents that have been updated since the last call.
     * If this is the first call, returns the set of changes since client
     * initialization. Further invocations will return document that have changed
     * since the prior call.
     */
    // PORTING NOTE: Multi-Tab only.
    function Ar(t) {
        const e = N$1(t);
        return e.persistence.runTransaction("Get new document changes", "readonly", (t => function(t, e, n) {
            const s = N$1(t);
            let i = Pt(), r = ii(n);
            const o = Ri(e), c = IDBKeyRange.lowerBound(r, !0);
            return o._i({
                index: Mi.readTimeIndex,
                range: c
            }, ((t, e) => {
                // Unlike `getEntry()` and others, `getNewDocumentChanges()` parses
                // the documents directly since we want to keep sentinel deletes.
                const n = ni(s.serializer, e);
                i = i.Tt(n.key, n), r = e.readTime;
            })).next((() => ({
                Wc: i,
                readTime: ri(r)
            })));
        }
        /**
     * Returns the read time of the most recently read document in the cache, or
     * SnapshotVersion.min() if not available.
     */
        // PORTING NOTE: This is only used for multi-tab synchronization.
        (e.Lc, t, e.$c))).then((({Wc: t, readTime: n}) => (e.$c = n, t)));
    }

    /**
     * Reads the newest document change from persistence and moves the internal
     * synchronization marker forward so that calls to `getNewDocumentChanges()`
     * only return changes that happened after client initialization.
     */
    // PORTING NOTE: Multi-Tab only.
    async function Rr(t) {
        const e = N$1(t);
        return e.persistence.runTransaction("Synchronize last document change read time", "readonly", (t => function(t) {
            const e = Ri(t);
            // If there are no existing entries, we return SnapshotVersion.min().
                    let n = j.min();
            return e._i({
                index: Mi.readTimeIndex,
                reverse: !0
            }, ((t, e, s) => {
                e.readTime && (n = ri(e.readTime)), s.done();
            })).next((() => n));
        }(t))).then((t => {
            e.$c = t;
        }));
    }

    /**
     * Verifies the error thrown by a LocalStore operation. If a LocalStore
     * operation fails because the primary lease has been taken by another client,
     * we ignore the error (the persistence layer will immediately call
     * `applyPrimaryLease` to propagate the primary state change). All other errors
     * are re-thrown.
     *
     * @param err - An error returned by a LocalStore operation.
     * @returns A Promise that resolves after we recovered, or the original error.
     */ async function Pr(t) {
        if (t.code !== x$1.FAILED_PRECONDITION || t.message !== gs) throw t;
        p$1("LocalStore", "Unexpectedly lost primary lease");
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A PersistentStream is an abstract base class that represents a streaming RPC
     * to the Firestore backend. It's built on top of the connections own support
     * for streaming RPCs, and adds several critical features for our clients:
     *
     *   - Exponential backoff on failure
     *   - Authentication via CredentialsProvider
     *   - Dispatching all callbacks into the shared worker queue
     *   - Closing idle streams after 60 seconds of inactivity
     *
     * Subclasses of PersistentStream implement serialization of models to and
     * from the JSON representation of the protocol buffers for a specific
     * streaming RPC.
     *
     * ## Starting and Stopping
     *
     * Streaming RPCs are stateful and need to be start()ed before messages can
     * be sent and received. The PersistentStream will call the onOpen() function
     * of the listener once the stream is ready to accept requests.
     *
     * Should a start() fail, PersistentStream will call the registered onClose()
     * listener with a FirestoreError indicating what went wrong.
     *
     * A PersistentStream can be started and stopped repeatedly.
     *
     * Generic types:
     *  SendType: The type of the outgoing message of the underlying
     *    connection stream
     *  ReceiveType: The type of the incoming message of the underlying
     *    connection stream
     *  ListenerType: The type of the listener that will be used for callbacks
     */
    class Vr {
        constructor(t, e, n, s, i, r) {
            this.Cs = t, this.jc = n, this.Gc = s, this.zc = i, this.listener = r, this.state = 0 /* Initial */ , 
            /**
             * A close count that's incremented every time the stream is closed; used by
             * getCloseGuardedDispatcher() to invalidate callbacks that happen after
             * close.
             */
            this.Hc = 0, this.Jc = null, this.stream = null, this.Si = new Ss(t, e);
        }
        /**
         * Returns true if start() has been called and no error has occurred. True
         * indicates the stream is open or in the process of opening (which
         * encompasses respecting backoff, getting auth tokens, and starting the
         * actual RPC). Use isOpen() to determine if the stream is open and ready for
         * outbound requests.
         */    Yc() {
            return 1 /* Starting */ === this.state || 2 /* Open */ === this.state || 4 /* Backoff */ === this.state;
        }
        /**
         * Returns true if the underlying RPC is open (the onOpen() listener has been
         * called) and the stream is ready for outbound requests.
         */    Xc() {
            return 2 /* Open */ === this.state;
        }
        /**
         * Starts the RPC. Only allowed if isStarted() returns false. The stream is
         * not immediately ready for use: onOpen() will be invoked when the RPC is
         * ready for outbound requests, at which point isOpen() will return true.
         *
         * When start returns, isStarted() will return true.
         */    start() {
            3 /* Error */ !== this.state ? this.auth() : this.Zc();
        }
        /**
         * Stops the RPC. This call is idempotent and allowed regardless of the
         * current isStarted() state.
         *
         * When stop returns, isStarted() and isOpen() will both return false.
         */    async stop() {
            this.Yc() && await this.close(0 /* Initial */);
        }
        /**
         * After an error the stream will usually back off on the next attempt to
         * start it. If the error warrants an immediate restart of the stream, the
         * sender can use this to indicate that the receiver should not back off.
         *
         * Each error will call the onClose() listener. That function can decide to
         * inhibit backoff if required.
         */    tu() {
            this.state = 0 /* Initial */ , this.Si.reset();
        }
        /**
         * Marks this stream as idle. If no further actions are performed on the
         * stream for one minute, the stream will automatically close itself and
         * notify the stream's onClose() handler with Status.OK. The stream will then
         * be in a !isStarted() state, requiring the caller to start the stream again
         * before further use.
         *
         * Only streams that are in state 'Open' can be marked idle, as all other
         * states imply pending network operations.
         */    eu() {
            // Starts the idle time if we are in state 'Open' and are not yet already
            // running a timer (in which case the previous idle timeout still applies).
            this.Xc() && null === this.Jc && (this.Jc = this.Cs.Us(this.jc, 6e4, (() => this.nu())));
        }
        /** Sends a message to the underlying stream. */    su(t) {
            this.iu(), this.stream.send(t);
        }
        /** Called by the idle timer when the stream should close due to inactivity. */    async nu() {
            if (this.Xc()) 
            // When timing out an idle stream there's no reason to force the stream into backoff when
            // it restarts so set the stream state to Initial instead of Error.
            return this.close(0 /* Initial */);
        }
        /** Marks the stream as active again. */    iu() {
            this.Jc && (this.Jc.cancel(), this.Jc = null);
        }
        /**
         * Closes the stream and cleans up as necessary:
         *
         * * closes the underlying GRPC stream;
         * * calls the onClose handler with the given 'error';
         * * sets internal stream state to 'finalState';
         * * adjusts the backoff timer based on the error
         *
         * A new stream can be opened by calling start().
         *
         * @param finalState - the intended state of the stream after closing.
         * @param error - the error the connection was closed with.
         */    async close(t, e) {
            // Cancel any outstanding timers (they're guaranteed not to execute).
            this.iu(), this.Si.cancel(), 
            // Invalidates any stream-related callbacks (e.g. from auth or the
            // underlying stream), guaranteeing they won't execute.
            this.Hc++, 3 /* Error */ !== t ? 
            // If this is an intentional close ensure we don't delay our next connection attempt.
            this.Si.reset() : e && e.code === x$1.RESOURCE_EXHAUSTED ? (
            // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
            b(e.toString()), b("Using maximum backoff delay to prevent overloading the backend."), 
            this.Si.Ls()) : e && e.code === x$1.UNAUTHENTICATED && 
            // "unauthenticated" error means the token was rejected. Try force refreshing it in case it
            // just expired.
            this.zc._(), 
            // Clean up the underlying stream because we are no longer interested in events.
            null !== this.stream && (this.ru(), this.stream.close(), this.stream = null), 
            // This state must be assigned before calling onClose() to allow the callback to
            // inhibit backoff or otherwise manipulate the state in its non-started state.
            this.state = t, 
            // Notify the listener that the stream closed.
            await this.listener.ou(e);
        }
        /**
         * Can be overridden to perform additional cleanup before the stream is closed.
         * Calling super.tearDown() is not required.
         */    ru() {}
        auth() {
            this.state = 1 /* Starting */;
            const t = this.cu(this.Hc), e = this.Hc;
            // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.
                    this.zc.getToken().then((t => {
                // Stream can be stopped while waiting for authentication.
                // TODO(mikelehen): We really should just use dispatchIfNotClosed
                // and let this dispatch onto the queue, but that opened a spec test can
                // of worms that I don't want to deal with in this PR.
                this.Hc === e && 
                // Normally we'd have to schedule the callback on the AsyncQueue.
                // However, the following calls are safe to be called outside the
                // AsyncQueue since they don't chain asynchronous calls
                this.uu(t);
            }), (e => {
                t((() => {
                    const t = new M$1(x$1.UNKNOWN, "Fetching auth token failed: " + e.message);
                    return this.au(t);
                }));
            }));
        }
        uu(t) {
            const e = this.cu(this.Hc);
            this.stream = this.hu(t), this.stream.lu((() => {
                e((() => (this.state = 2 /* Open */ , this.listener.lu())));
            })), this.stream.ou((t => {
                e((() => this.au(t)));
            })), this.stream.onMessage((t => {
                e((() => this.onMessage(t)));
            }));
        }
        Zc() {
            this.state = 4 /* Backoff */ , this.Si.Bs((async () => {
                this.state = 0 /* Initial */ , this.start();
            }));
        }
        // Visible for tests
        au(t) {
            // In theory the stream could close cleanly, however, in our current model
            // we never expect this to happen because if we stop a stream ourselves,
            // this callback will never be called. To prevent cases where we retry
            // without a backoff accidentally, we set the stream to error in all cases.
            return p$1("PersistentStream", "close with error: " + t), this.stream = null, this.close(3 /* Error */ , t);
        }
        /**
         * Returns a "dispatcher" function that dispatches operations onto the
         * AsyncQueue but only runs them if closeCount remains unchanged. This allows
         * us to turn auth / stream callbacks into no-ops if the stream is closed /
         * re-opened, etc.
         */    cu(t) {
            return e => {
                this.Cs.Ri((() => this.Hc === t ? e() : (p$1("PersistentStream", "stream callback skipped by getCloseGuardedDispatcher."), 
                Promise.resolve())));
            };
        }
    }

    /**
     * A PersistentStream that implements the Listen RPC.
     *
     * Once the Listen stream has called the onOpen() listener, any number of
     * listen() and unlisten() calls can be made to control what changes will be
     * sent from the server for ListenResponses.
     */ class gr extends Vr {
        constructor(t, e, n, s, i) {
            super(t, "listen_stream_connection_backoff" /* ListenStreamConnectionBackoff */ , "listen_stream_idle" /* ListenStreamIdle */ , e, n, i), 
            this.serializer = s;
        }
        hu(t) {
            return this.Gc._u("Listen", t);
        }
        onMessage(t) {
            // A successful response means the stream is healthy
            this.Si.reset();
            const e = Ne(this.serializer, t), n = function(t) {
                // We have only reached a consistent snapshot for the entire stream if there
                // is a read_time set and it applies to all targets (i.e. the list of
                // targets is empty). The backend is guaranteed to send such responses.
                if (!("targetChange" in t)) return j.min();
                const e = t.targetChange;
                return e.targetIds && e.targetIds.length ? j.min() : e.readTime ? Re(e.readTime) : j.min();
            }(t);
            return this.listener.fu(e, n);
        }
        /**
         * Registers interest in the results of the given target. If the target
         * includes a resumeToken it will be included in the request. Results that
         * affect the target will be streamed back as WatchChange messages that
         * reference the targetId.
         */    du(t) {
            const e = {};
            e.database = ve(this.serializer), e.addTarget = function(t, e) {
                let n;
                const s = e.target;
                return n = ut(s) ? {
                    documents: Oe(t, s)
                } : {
                    query: Fe(t, s)
                }, n.targetId = e.targetId, e.resumeToken.ht() > 0 ? n.resumeToken = me(t, e.resumeToken) : e.ft.D(j.min()) > 0 && (
                // TODO(wuandy): Consider removing above check because it is most likely true.
                // Right now, many tests depend on this behaviour though (leaving min() out
                // of serialization).
                n.readTime = Ie(t, e.ft.N())), n;
            }(this.serializer, t);
            const n = Le(this.serializer, t);
            n && (e.labels = n), this.su(e);
        }
        /**
         * Unregisters interest in the results of the target associated with the
         * given targetId.
         */    wu(t) {
            const e = {};
            e.database = ve(this.serializer), e.removeTarget = t, this.su(e);
        }
    }

    /**
     * A Stream that implements the Write RPC.
     *
     * The Write RPC requires the caller to maintain special streamToken
     * state in between calls, to help the server understand which responses the
     * client has processed by the time the next request is made. Every response
     * will contain a streamToken; this value must be passed to the next
     * request.
     *
     * After calling start() on this stream, the next request must be a handshake,
     * containing whatever streamToken is on hand. Once a response to this
     * request is received, all pending mutations may be submitted. When
     * submitting multiple batches of mutations at the same time, it's
     * okay to use the same streamToken for the calls to writeMutations.
     *
     * TODO(b/33271235): Use proto types
     */ class yr extends Vr {
        constructor(t, e, n, s, i) {
            super(t, "write_stream_connection_backoff" /* WriteStreamConnectionBackoff */ , "write_stream_idle" /* WriteStreamIdle */ , e, n, i), 
            this.serializer = s, this.Eu = !1;
        }
        /**
         * Tracks whether or not a handshake has been successfully exchanged and
         * the stream is ready to accept mutations.
         */    get Tu() {
            return this.Eu;
        }
        // Override of PersistentStream.start
        start() {
            this.Eu = !1, this.lastStreamToken = void 0, super.start();
        }
        ru() {
            this.Eu && this.Iu([]);
        }
        hu(t) {
            return this.Gc._u("Write", t);
        }
        onMessage(t) {
            if (
            // Always capture the last stream token.
            C(!!t.streamToken), this.lastStreamToken = t.streamToken, this.Eu) {
                // A successful first write response means the stream is healthy,
                // Note, that we could consider a successful handshake healthy, however,
                // the write itself might be causing an error we want to back off from.
                this.Si.reset();
                const e = ke(t.writeResults, t.commitTime), n = Re(t.commitTime);
                return this.listener.mu(n, e);
            }
            // The first response is always the handshake response
            return C(!t.writeResults || 0 === t.writeResults.length), this.Eu = !0, this.listener.Au();
        }
        /**
         * Sends an initial streamToken to the server, performing the handshake
         * required to make the StreamingWrite RPC work. Subsequent
         * calls should wait until onHandshakeComplete was called.
         */    Ru() {
            // TODO(dimond): Support stream resumption. We intentionally do not set the
            // stream token on the handshake, ignoring any stream token we might have.
            const t = {};
            t.database = ve(this.serializer), this.su(t);
        }
        /** Sends a group of mutations to the Firestore backend to apply. */    Iu(t) {
            const e = {
                streamToken: this.lastStreamToken,
                writes: t.map((t => xe(this.serializer, t)))
            };
            this.su(e);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Datastore and its related methods are a wrapper around the external Google
     * Cloud Datastore grpc API, which provides an interface that is more convenient
     * for the rest of the client SDK architecture to consume.
     */
    /**
     * An implementation of Datastore that exposes additional state for internal
     * consumption.
     */
    class pr extends class {} {
        constructor(t, e, n) {
            super(), this.credentials = t, this.Gc = e, this.serializer = n, this.Pu = !1;
        }
        Vu() {
            if (this.Pu) throw new M$1(x$1.FAILED_PRECONDITION, "The client has already been terminated.");
        }
        /** Gets an auth token and invokes the provided RPC. */    gu(t, e, n) {
            return this.Vu(), this.credentials.getToken().then((s => this.Gc.gu(t, e, n, s))).catch((t => {
                throw t.code === x$1.UNAUTHENTICATED && this.credentials._(), t;
            }));
        }
        /** Gets an auth token and invokes the provided RPC with streamed results. */    yu(t, e, n) {
            return this.Vu(), this.credentials.getToken().then((s => this.Gc.yu(t, e, n, s))).catch((t => {
                throw t.code === x$1.UNAUTHENTICATED && this.credentials._(), t;
            }));
        }
        terminate() {
            this.Pu = !1;
        }
    }

    // TODO(firestorexp): Make sure there is only one Datastore instance per
    // firestore-exp client.
    /**
     * A component used by the RemoteStore to track the OnlineState (that is,
     * whether or not the client as a whole should be considered to be online or
     * offline), implementing the appropriate heuristics.
     *
     * In particular, when the client is trying to connect to the backend, we
     * allow up to MAX_WATCH_STREAM_FAILURES within ONLINE_STATE_TIMEOUT_MS for
     * a connection to succeed. If we have too many failures or the timeout elapses,
     * then we set the OnlineState to Offline, and the client will behave as if
     * it is offline (get()s will return cached data, etc.).
     */
    class br {
        constructor(t, e) {
            this.di = t, this.pu = e, 
            /** The current OnlineState. */
            this.state = "Unknown" /* Unknown */ , 
            /**
             * A count of consecutive failures to open the stream. If it reaches the
             * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
             * Offline.
             */
            this.bu = 0, 
            /**
             * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
             * transition from OnlineState.Unknown to OnlineState.Offline without waiting
             * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
             */
            this.vu = null, 
            /**
             * Whether the client should log a warning message if it fails to connect to
             * the backend (initially true, cleared after a successful stream, or if we've
             * logged the message already).
             */
            this.Su = !0;
        }
        /**
         * Called by RemoteStore when a watch stream is started (including on each
         * backoff attempt).
         *
         * If this is the first attempt, it sets the OnlineState to Unknown and starts
         * the onlineStateTimer.
         */    Du() {
            0 === this.bu && (this.Cu("Unknown" /* Unknown */), this.vu = this.di.Us("online_state_timeout" /* OnlineStateTimeout */ , 1e4, (() => (this.vu = null, 
            this.Nu("Backend didn't respond within 10 seconds."), this.Cu("Offline" /* Offline */), 
            Promise.resolve()))));
        }
        /**
         * Updates our OnlineState as appropriate after the watch stream reports a
         * failure. The first failure moves us to the 'Unknown' state. We then may
         * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
         * actually transition to the 'Offline' state.
         */    xu(t) {
            "Online" /* Online */ === this.state ? this.Cu("Unknown" /* Unknown */) : (this.bu++, 
            this.bu >= 1 && (this.Mu(), this.Nu("Connection failed 1 times. Most recent error: " + t.toString()), 
            this.Cu("Offline" /* Offline */)));
        }
        /**
         * Explicitly sets the OnlineState to the specified state.
         *
         * Note that this resets our timers / failure counters, etc. used by our
         * Offline heuristics, so must not be used in place of
         * handleWatchStreamStart() and handleWatchStreamFailure().
         */    set(t) {
            this.Mu(), this.bu = 0, "Online" /* Online */ === t && (
            // We've connected to watch at least once. Don't warn the developer
            // about being offline going forward.
            this.Su = !1), this.Cu(t);
        }
        Cu(t) {
            t !== this.state && (this.state = t, this.pu(t));
        }
        Nu(t) {
            const e = `Could not reach Cloud Firestore backend. ${t}\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;
            this.Su ? (b(e), this.Su = !1) : p$1("OnlineStateTracker", e);
        }
        Mu() {
            null !== this.vu && (this.vu.cancel(), this.vu = null);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class vr {
        constructor(
        /**
         * The local store, used to fill the write pipeline with outbound mutations.
         */
        t, 
        /** The client-side proxy for interacting with the backend. */
        e, n, s, i) {
            this.ku = t, this.Ou = e, this.di = n, this.Fu = {}, 
            /**
             * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
             * LocalStore via fillWritePipeline() and have or will send to the write
             * stream.
             *
             * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
             * restart the write stream. When the stream is established the writes in the
             * pipeline will be sent in order.
             *
             * Writes remain in writePipeline until they are acknowledged by the backend
             * and thus will automatically be re-sent if the stream is interrupted /
             * restarted before they're acknowledged.
             *
             * Write responses from the backend are linked to their originating request
             * purely based on order, and so we can just shift() writes from the front of
             * the writePipeline as we receive responses.
             */
            this.$u = [], 
            /**
             * A mapping of watched targets that the client cares about tracking and the
             * user has explicitly called a 'listen' for this target.
             *
             * These targets may or may not have been sent to or acknowledged by the
             * server. On re-establishing the listen stream, these targets should be sent
             * to the server. The targets removed with unlistens are removed eagerly
             * without waiting for confirmation from the listen stream.
             */
            this.Lu = new Map, 
            /**
             * A set of reasons for why the RemoteStore may be offline. If empty, the
             * RemoteStore may start its network connections.
             */
            this.Bu = new Set, 
            /**
             * Event handlers that get called when the network is disabled or enabled.
             *
             * PORTING NOTE: These functions are used on the Web client to create the
             * underlying streams (to support tree-shakeable streams). On Android and iOS,
             * the streams are created during construction of RemoteStore.
             */
            this.qu = [], this.Uu = i, this.Uu.Ku((t => {
                n.Ri((async () => {
                    // Porting Note: Unlike iOS, `restartNetwork()` is called even when the
                    // network becomes unreachable as we don't have any other way to tear
                    // down our streams.
                    Fr(this) && (p$1("RemoteStore", "Restarting streams for network reachability change."), 
                    await async function(t) {
                        const e = N$1(t);
                        e.Bu.add(4 /* ConnectivityChange */), await Dr(e), e.Qu.set("Unknown" /* Unknown */), 
                        e.Bu.delete(4 /* ConnectivityChange */), await Sr(e);
                    }(this));
                }));
            })), this.Qu = new br(n, s);
        }
    }

    async function Sr(t) {
        if (Fr(t)) for (const e of t.qu) await e(/* enabled= */ !0);
    }

    /**
     * Temporarily disables the network. The network can be re-enabled using
     * enableNetwork().
     */ async function Dr(t) {
        for (const e of t.qu) await e(/* enabled= */ !1);
    }

    /**
     * Starts new listen for the given target. Uses resume token if provided. It
     * is a no-op if the target of given `TargetData` is already being listened to.
     */
    function Cr(t, e) {
        const n = N$1(t);
        n.Lu.has(e.targetId) || (
        // Mark this as something the client is currently listening for.
        n.Lu.set(e.targetId, e), Or(n) ? 
        // The listen will be sent in onWatchStreamOpen
        kr(n) : to(n).Xc() && xr(n, e));
    }

    /**
     * Removes the listen from server. It is a no-op if the given target id is
     * not being listened to.
     */ function Nr(t, e) {
        const n = N$1(t), s = to(n);
        n.Lu.delete(e), s.Xc() && Mr(n, e), 0 === n.Lu.size && (s.Xc() ? s.eu() : Fr(n) && 
        // Revert to OnlineState.Unknown if the watch stream is not open and we
        // have no listeners, since without any listens to send we cannot
        // confirm if the stream is healthy and upgrade to OnlineState.Online.
        n.Qu.set("Unknown" /* Unknown */));
    }

    /**
     * We need to increment the the expected number of pending responses we're due
     * from watch so we wait for the ack to process any messages from this target.
     */ function xr(t, e) {
        t.Wu.De(e.targetId), to(t).du(e);
    }

    /**
     * We need to increment the expected number of pending responses we're due
     * from watch so we wait for the removal on the server before we process any
     * messages from this target.
     */ function Mr(t, e) {
        t.Wu.De(e), to(t).wu(e);
    }

    function kr(t) {
        t.Wu = new Bt({
            Xe: e => t.Fu.Xe(e),
            Ze: e => t.Lu.get(e) || null
        }), to(t).start(), t.Qu.Du();
    }

    /**
     * Returns whether the watch stream should be started because it's necessary
     * and has not yet been started.
     */ function Or(t) {
        return Fr(t) && !to(t).Yc() && t.Lu.size > 0;
    }

    function Fr(t) {
        return 0 === N$1(t).Bu.size;
    }

    function $r(t) {
        t.Wu = void 0;
    }

    async function Lr(t) {
        t.Lu.forEach(((e, n) => {
            xr(t, e);
        }));
    }

    async function Br(t, e) {
        $r(t), 
        // If we still need the watch stream, retry the connection.
        Or(t) ? (t.Qu.xu(e), kr(t)) : 
        // No need to restart watch stream because there are no active targets.
        // The online state is set to unknown because there is no active attempt
        // at establishing a connection
        t.Qu.set("Unknown" /* Unknown */);
    }

    async function qr(t, e, n) {
        if (
        // Mark the client as online since we got a message from the server
        t.Qu.set("Online" /* Online */), e instanceof $t && 2 /* Removed */ === e.state && e.cause) 
        // There was an error on a target, don't wait for a consistent snapshot
        // to raise events
        try {
            await 
            /** Handles an error on a target */
            async function(t, e) {
                const n = e.cause;
                for (const s of e.targetIds) 
                // A watched target might have been removed already.
                t.Lu.has(s) && (await t.Fu.ju(s, n), t.Lu.delete(s), t.Wu.removeTarget(s));
            }
            /**
     * Attempts to fill our write pipeline with writes from the LocalStore.
     *
     * Called internally to bootstrap or refill the write pipeline and by
     * SyncEngine whenever there are new mutations to process.
     *
     * Starts the write stream if necessary.
     */ (t, e);
        } catch (n) {
            p$1("RemoteStore", "Failed to remove targets %s: %s ", e.targetIds.join(","), n), 
            await Ur(t, n);
        } else if (e instanceof Ot ? t.Wu.$e(e) : e instanceof Ft ? t.Wu.je(e) : t.Wu.qe(e), 
        !n.isEqual(j.min())) try {
            const e = await fr(t.ku);
            n.D(e) >= 0 && 
            // We have received a target change with a global snapshot if the snapshot
            // version is not equal to SnapshotVersion.min().
            await 
            /**
     * Takes a batch of changes from the Datastore, repackages them as a
     * RemoteEvent, and passes that on to the listener, which is typically the
     * SyncEngine.
     */
            function(t, e) {
                const n = t.Wu.He(e);
                // Update in-memory resume tokens. LocalStore will update the
                // persistent view of these when applying the completed RemoteEvent.
                            return n.re.forEach(((n, s) => {
                    if (n.resumeToken.ht() > 0) {
                        const i = t.Lu.get(s);
                        // A watched target might have been removed already.
                                            i && t.Lu.set(s, i.wt(n.resumeToken, e));
                    }
                })), 
                // Re-establish listens for the targets that have been invalidated by
                // existence filter mismatches.
                n.oe.forEach((e => {
                    const n = t.Lu.get(e);
                    if (!n) 
                    // A watched target might have been removed already.
                    return;
                    // Clear the resume token for the target, since we're in a known mismatch
                    // state.
                                    t.Lu.set(e, n.wt(at.lt, n.ft)), 
                    // Cause a hard reset by unwatching and rewatching immediately, but
                    // deliberately don't send a resume token so that we get a full update.
                    Mr(t, e);
                    // Mark the target we send as being on behalf of an existence filter
                    // mismatch, but don't actually retain that in listenTargets. This ensures
                    // that we flag the first re-listen this way without impacting future
                    // listens of this target (that might happen e.g. on reconnect).
                    const s = new ht(n.target, e, 1 /* ExistenceFilterMismatch */ , n.sequenceNumber);
                    xr(t, s);
                })), t.Fu.Gu(n);
            }(t, n);
        } catch (e) {
            p$1("RemoteStore", "Failed to raise snapshot:", e), await Ur(t, e);
        }
    }

    /**
     * Recovery logic for IndexedDB errors that takes the network offline until
     * `op` succeeds. Retries are scheduled with backoff using
     * `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is
     * validated via a generic operation.
     *
     * The returned Promise is resolved once the network is disabled and before
     * any retry attempt.
     */ async function Ur(t, e, n) {
        if (!xs(e)) throw e;
        t.Bu.add(1 /* IndexedDbFailed */), 
        // Disable network and raise offline snapshots
        await Dr(t), t.Qu.set("Offline" /* Offline */), n || (
        // Use a simple read operation to determine if IndexedDB recovered.
        // Ideally, we would expose a health check directly on SimpleDb, but
        // RemoteStore only has access to persistence through LocalStore.
        n = () => fr(t.ku)), 
        // Probe IndexedDB periodically and re-enable network
        t.di.Oi((async () => {
            p$1("RemoteStore", "Retrying IndexedDB access"), await n(), t.Bu.delete(1 /* IndexedDbFailed */), 
            await Sr(t);
        }));
    }

    /**
     * Executes `op`. If `op` fails, takes the network offline until `op`
     * succeeds. Returns after the first attempt.
     */ function Kr(t, e) {
        return e().catch((n => Ur(t, n, e)));
    }

    async function Qr(t) {
        const e = N$1(t), n = eo(e);
        let s = e.$u.length > 0 ? e.$u[e.$u.length - 1].batchId : -1;
        for (;Wr(e); ) try {
            const t = await wr(e.ku, s);
            if (null === t) {
                0 === e.$u.length && n.eu();
                break;
            }
            s = t.batchId, jr(e, t);
        } catch (t) {
            await Ur(e, t);
        }
        Gr(e) && zr(e);
    }

    /**
     * Returns true if we can add to the write pipeline (i.e. the network is
     * enabled and the write pipeline is not full).
     */ function Wr(t) {
        return Fr(t) && t.$u.length < 10;
    }

    /**
     * Queues additional writes to be sent to the write stream, sending them
     * immediately if the write stream is established.
     */ function jr(t, e) {
        t.$u.push(e);
        const n = eo(t);
        n.Xc() && n.Tu && n.Iu(e.mutations);
    }

    function Gr(t) {
        return Fr(t) && !eo(t).Yc() && t.$u.length > 0;
    }

    function zr(t) {
        eo(t).start();
    }

    async function Hr(t) {
        eo(t).Ru();
    }

    async function Jr(t) {
        const e = eo(t);
        // Send the write pipeline now that the stream is established.
            for (const n of t.$u) e.Iu(n.mutations);
    }

    async function Yr(t, e, n) {
        const s = t.$u.shift(), i = Ts.from(s, e, n);
        await Kr(t, (() => t.Fu.zu(i))), 
        // It's possible that with the completion of this mutation another
        // slot has freed up.
        await Qr(t);
    }

    async function Xr(t, e) {
        // If the write stream closed after the write handshake completes, a write
        // operation failed and we fail the pending operation.
        e && eo(t).Tu && 
        // This error affects the actual write.
        await async function(t, e) {
            // Only handle permanent errors here. If it's transient, just let the retry
            // logic kick in.
            if (n = e.code, dt(n) && n !== x$1.ABORTED) {
                // This was a permanent error, the request itself was the problem
                // so it's not going to succeed if we resend it.
                const n = t.$u.shift();
                // In this case it's also unlikely that the server itself is melting
                // down -- this was just a bad request so inhibit backoff on the next
                // restart.
                            eo(t).tu(), await Kr(t, (() => t.Fu.Hu(n.batchId, e))), 
                // It's possible that with the completion of this mutation
                // another slot has freed up.
                await Qr(t);
            }
            var n;
            /**
     * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
     *
     * @returns The Code equivalent to the given status string or undefined if
     *     there is no match.
     */    }(t, e), 
        // The write stream might have been started by refilling the write
        // pipeline for failed writes
        Gr(t) && zr(t);
    }

    /**
     * Toggles the network state when the client gains or loses its primary lease.
     */
    async function Zr(t, e) {
        const n = N$1(t);
        e ? (n.Bu.delete(2 /* IsSecondary */), await Sr(n)) : e || (n.Bu.add(2 /* IsSecondary */), 
        await Dr(n), n.Qu.set("Unknown" /* Unknown */));
    }

    /**
     * If not yet initialized, registers the WatchStream and its network state
     * callback with `remoteStoreImpl`. Returns the existing stream if one is
     * already available.
     *
     * PORTING NOTE: On iOS and Android, the WatchStream gets registered on startup.
     * This is not done on Web to allow it to be tree-shaken.
     */ function to(t) {
        return t.Ju || (
        // Create stream (but note that it is not started yet).
        t.Ju = function(t, e, n) {
            const s = N$1(t);
            return s.Vu(), new gr(e, s.Gc, s.credentials, s.serializer, n);
        }
        /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ (t.Ou, t.di, {
            lu: Lr.bind(null, t),
            ou: Br.bind(null, t),
            fu: qr.bind(null, t)
        }), t.qu.push((async e => {
            e ? (t.Ju.tu(), Or(t) ? kr(t) : t.Qu.set("Unknown" /* Unknown */)) : (await t.Ju.stop(), 
            $r(t));
        }))), t.Ju;
    }

    /**
     * If not yet initialized, registers the WriteStream and its network state
     * callback with `remoteStoreImpl`. Returns the existing stream if one is
     * already available.
     *
     * PORTING NOTE: On iOS and Android, the WriteStream gets registered on startup.
     * This is not done on Web to allow it to be tree-shaken.
     */ function eo(t) {
        return t.Yu || (
        // Create stream (but note that it is not started yet).
        t.Yu = function(t, e, n) {
            const s = N$1(t);
            return s.Vu(), new yr(e, s.Gc, s.credentials, s.serializer, n);
        }(t.Ou, t.di, {
            lu: Hr.bind(null, t),
            ou: Xr.bind(null, t),
            Au: Jr.bind(null, t),
            mu: Yr.bind(null, t)
        }), t.qu.push((async e => {
            e ? (t.Yu.tu(), 
            // This will start the write stream if necessary.
            await Qr(t)) : (await t.Yu.stop(), t.$u.length > 0 && (p$1("RemoteStore", `Stopping write stream with ${t.$u.length} pending writes`), 
            t.$u = []));
        }))), t.Yu;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Holds the listeners and the last received ViewSnapshot for a query being
     * tracked by EventManager.
     */ class no {
        constructor() {
            this.Xu = void 0, this.listeners = [];
        }
    }

    class so {
        constructor() {
            this.queries = new Is((t => Hn(t)), zn), this.onlineState = "Unknown" /* Unknown */ , 
            this.Zu = new Set;
        }
    }

    async function io(t, e) {
        const n = N$1(t), s = e.query;
        let i = !1, r = n.queries.get(s);
        if (r || (i = !0, r = new no), i) try {
            r.Xu = await n.ta(s);
        } catch (t) {
            const n = Ks(t, `Initialization of query '${Jn(e.query)}' failed`);
            return void e.onError(n);
        }
        n.queries.set(s, r), r.listeners.push(e);
        // Run global snapshot listeners if a consistent snapshot has been emitted.
        e.ea(n.onlineState);
        if (r.Xu) {
            e.na(r.Xu) && uo(n);
        }
    }

    async function ro(t, e) {
        const n = N$1(t), s = e.query;
        let i = !1;
        const r = n.queries.get(s);
        if (r) {
            const t = r.listeners.indexOf(e);
            t >= 0 && (r.listeners.splice(t, 1), i = 0 === r.listeners.length);
        }
        if (i) return n.queries.delete(s), n.sa(s);
    }

    function oo(t, e) {
        const n = N$1(t);
        let s = !1;
        for (const t of e) {
            const e = t.query, i = n.queries.get(e);
            if (i) {
                for (const e of i.listeners) e.na(t) && (s = !0);
                i.Xu = t;
            }
        }
        s && uo(n);
    }

    function co(t, e, n) {
        const s = N$1(t), i = s.queries.get(e);
        if (i) for (const t of i.listeners) t.onError(n);
        // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()
        // after an error.
            s.queries.delete(e);
    }

    // Call all global snapshot listeners that have been set.
    function uo(t) {
        t.Zu.forEach((t => {
            t.next();
        }));
    }

    /**
     * QueryListener takes a series of internal view snapshots and determines
     * when to raise the event.
     *
     * It uses an Observer to dispatch events.
     */ class ao {
        constructor(t, e, n) {
            this.query = t, this.ia = e, 
            /**
             * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
             * observer. This flag is set to true once we've actually raised an event.
             */
            this.ra = !1, this.oa = null, this.onlineState = "Unknown" /* Unknown */ , this.options = n || {};
        }
        /**
         * Applies the new ViewSnapshot to this listener, raising a user-facing event
         * if applicable (depending on what changed, whether the user has opted into
         * metadata-only changes, etc.). Returns true if a user-facing event was
         * indeed raised.
         */    na(t) {
            if (!this.options.includeMetadataChanges) {
                // Remove the metadata only changes.
                const e = [];
                for (const n of t.docChanges) 3 /* Metadata */ !== n.type && e.push(n);
                t = new xt(t.query, t.docs, t.te, e, t.ee, t.fromCache, t.ne, 
                /* excludesMetadataChanges= */ !0);
            }
            let e = !1;
            return this.ra ? this.ca(t) && (this.ia.next(t), e = !0) : this.ua(t, this.onlineState) && (this.aa(t), 
            e = !0), this.oa = t, e;
        }
        onError(t) {
            this.ia.error(t);
        }
        /** Returns whether a snapshot was raised. */    ea(t) {
            this.onlineState = t;
            let e = !1;
            return this.oa && !this.ra && this.ua(this.oa, t) && (this.aa(this.oa), e = !0), 
            e;
        }
        ua(t, e) {
            // Always raise the first event when we're synced
            if (!t.fromCache) return !0;
            // NOTE: We consider OnlineState.Unknown as online (it should become Offline
            // or Online if we wait long enough).
                    const n = "Offline" /* Offline */ !== e;
            // Don't raise the event if we're online, aren't synced yet (checked
            // above) and are waiting for a sync.
                    return (!this.options.ha || !n) && (!t.docs.q() || "Offline" /* Offline */ === e);
            // Raise data from cache if we have any documents or we are offline
            }
        ca(t) {
            // We don't need to handle includeDocumentMetadataChanges here because
            // the Metadata only changes have already been stripped out if needed.
            // At this point the only changes we will see are the ones we should
            // propagate.
            if (t.docChanges.length > 0) return !0;
            const e = this.oa && this.oa.hasPendingWrites !== t.hasPendingWrites;
            return !(!t.ne && !e) && !0 === this.options.includeMetadataChanges;
            // Generally we should have hit one of the cases above, but it's possible
            // to get here if there were only metadata docChanges and they got
            // stripped out.
            }
        aa(t) {
            t = xt.ie(t.query, t.docs, t.ee, t.fromCache), this.ra = !0, this.ia.next(t);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A collection of references to a document from some kind of numbered entity
     * (either a target ID or batch ID). As references are added to or removed from
     * the set corresponding events are emitted to a registered garbage collector.
     *
     * Each reference is represented by a DocumentReference object. Each of them
     * contains enough information to uniquely identify the reference. They are all
     * stored primarily in a set sorted by key. A document is considered garbage if
     * there's no references in that set (this can be efficiently checked thanks to
     * sorting by key).
     *
     * ReferenceSet also keeps a secondary set that contains references sorted by
     * IDs. This one is used to efficiently implement removal of all references by
     * some target ID.
     */ class ho {
        constructor() {
            // A set of outstanding references to a document sorted by key.
            this.la = new mt(lo._a), 
            // A set of outstanding references to a document sorted by target id.
            this.fa = new mt(lo.da);
        }
        /** Returns true if the reference set contains no references. */    q() {
            return this.la.q();
        }
        /** Adds a reference to the given document key for the given ID. */    ko(t, e) {
            const n = new lo(t, e);
            this.la = this.la.add(n), this.fa = this.fa.add(n);
        }
        /** Add references to the given document keys for the given ID. */    wa(t, e) {
            t.forEach((t => this.ko(t, e)));
        }
        /**
         * Removes a reference to the given document key for the given
         * ID.
         */    Fo(t, e) {
            this.Ea(new lo(t, e));
        }
        Ta(t, e) {
            t.forEach((t => this.Fo(t, e)));
        }
        /**
         * Clears all references with a given ID. Calls removeRef() for each key
         * removed.
         */    Ia(t) {
            const e = new Y$1(new z$1([])), n = new lo(e, t), s = new lo(e, t + 1), i = [];
            return this.fa.Qt([ n, s ], (t => {
                this.Ea(t), i.push(t.key);
            })), i;
        }
        ma() {
            this.la.forEach((t => this.Ea(t)));
        }
        Ea(t) {
            this.la = this.la.delete(t), this.fa = this.fa.delete(t);
        }
        Aa(t) {
            const e = new Y$1(new z$1([])), n = new lo(e, t), s = new lo(e, t + 1);
            let i = vt();
            return this.fa.Qt([ n, s ], (t => {
                i = i.add(t.key);
            })), i;
        }
        zr(t) {
            const e = new lo(t, 0), n = this.la.jt(e);
            return null !== n && t.isEqual(n.key);
        }
    }

    class lo {
        constructor(t, e) {
            this.key = t, this.Ra = e;
        }
        /** Compare by key then by ID */    static _a(t, e) {
            return Y$1.k(t.key, e.key) || U$1(t.Ra, e.Ra);
        }
        /** Compare by ID then by key */    static da(t, e) {
            return U$1(t.Ra, e.Ra) || Y$1.k(t.key, e.key);
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // The format of the LocalStorage key that stores the client state is:
    //     firestore_clients_<persistence_prefix>_<instance_key>
    /** Assembles the key for a client state in WebStorage */
    function _o(t, e) {
        return `firestore_clients_${t}_${e}`;
    }

    // The format of the WebStorage key that stores the mutation state is:
    //     firestore_mutations_<persistence_prefix>_<batch_id>
    //     (for unauthenticated users)
    // or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>

    // 'user_uid' is last to avoid needing to escape '_' characters that it might
    // contain.
    /** Assembles the key for a mutation batch in WebStorage */
    function fo(t, e, n) {
        let s = `firestore_mutations_${t}_${n}`;
        return e.t() && (s += "_" + e.uid), s;
    }

    // The format of the WebStorage key that stores a query target's metadata is:
    //     firestore_targets_<persistence_prefix>_<target_id>
    /** Assembles the key for a query state in WebStorage */
    function wo(t, e) {
        return `firestore_targets_${t}_${e}`;
    }

    // The WebStorage prefix that stores the primary tab's online state. The
    // format of the key is:
    //     firestore_online_state_<persistence_prefix>
    /**
     * Holds the state of a mutation batch, including its user ID, batch ID and
     * whether the batch is 'pending', 'acknowledged' or 'rejected'.
     */
    // Visible for testing
    class Eo {
        constructor(t, e, n, s) {
            this.user = t, this.batchId = e, this.state = n, this.error = s;
        }
        /**
         * Parses a MutationMetadata from its JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */    static Pa(t, e, n) {
            const s = JSON.parse(n);
            let i = "object" == typeof s && -1 !== [ "pending", "acknowledged", "rejected" ].indexOf(s.state) && (void 0 === s.error || "object" == typeof s.error), r = void 0;
            return i && s.error && (i = "string" == typeof s.error.message && "string" == typeof s.error.code, 
            i && (r = new M$1(s.error.code, s.error.message))), i ? new Eo(t, e, s.state, r) : (b("SharedClientState", `Failed to parse mutation state for ID '${e}': ${n}`), 
            null);
        }
        Va() {
            const t = {
                state: this.state,
                updateTimeMs: Date.now()
            };
            return this.error && (t.error = {
                code: this.error.code,
                message: this.error.message
            }), JSON.stringify(t);
        }
    }

    /**
     * Holds the state of a query target, including its target ID and whether the
     * target is 'not-current', 'current' or 'rejected'.
     */
    // Visible for testing
    class To {
        constructor(t, e, n) {
            this.targetId = t, this.state = e, this.error = n;
        }
        /**
         * Parses a QueryTargetMetadata from its JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */    static Pa(t, e) {
            const n = JSON.parse(e);
            let s = "object" == typeof n && -1 !== [ "not-current", "current", "rejected" ].indexOf(n.state) && (void 0 === n.error || "object" == typeof n.error), i = void 0;
            return s && n.error && (s = "string" == typeof n.error.message && "string" == typeof n.error.code, 
            s && (i = new M$1(n.error.code, n.error.message))), s ? new To(t, n.state, i) : (b("SharedClientState", `Failed to parse target state for ID '${t}': ${e}`), 
            null);
        }
        Va() {
            const t = {
                state: this.state,
                updateTimeMs: Date.now()
            };
            return this.error && (t.error = {
                code: this.error.code,
                message: this.error.message
            }), JSON.stringify(t);
        }
    }

    /**
     * This class represents the immutable ClientState for a client read from
     * WebStorage, containing the list of active query targets.
     */ class Io {
        constructor(t, e) {
            this.clientId = t, this.activeTargetIds = e;
        }
        /**
         * Parses a RemoteClientState from the JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */    static Pa(t, e) {
            const n = JSON.parse(e);
            let s = "object" == typeof n && n.activeTargetIds instanceof Array, i = Dt();
            for (let t = 0; s && t < n.activeTargetIds.length; ++t) s = nt(n.activeTargetIds[t]), 
            i = i.add(n.activeTargetIds[t]);
            return s ? new Io(t, i) : (b("SharedClientState", `Failed to parse client data for instance '${t}': ${e}`), 
            null);
        }
    }

    /**
     * This class represents the online state for all clients participating in
     * multi-tab. The online state is only written to by the primary client, and
     * used in secondary clients to update their query views.
     */ class mo {
        constructor(t, e) {
            this.clientId = t, this.onlineState = e;
        }
        /**
         * Parses a SharedOnlineState from its JSON representation in WebStorage.
         * Logs a warning and returns null if the format of the data is not valid.
         */    static Pa(t) {
            const e = JSON.parse(t);
            return "object" == typeof e && -1 !== [ "Unknown", "Online", "Offline" ].indexOf(e.onlineState) && "string" == typeof e.clientId ? new mo(e.clientId, e.onlineState) : (b("SharedClientState", "Failed to parse online state: " + t), 
            null);
        }
    }

    /**
     * Metadata state of the local client. Unlike `RemoteClientState`, this class is
     * mutable and keeps track of all pending mutations, which allows us to
     * update the range of pending mutation batch IDs as new mutations are added or
     * removed.
     *
     * The data in `LocalClientState` is not read from WebStorage and instead
     * updated via its instance methods. The updated state can be serialized via
     * `toWebStorageJSON()`.
     */
    // Visible for testing.
    class Ao {
        constructor() {
            this.activeTargetIds = Dt();
        }
        ga(t) {
            this.activeTargetIds = this.activeTargetIds.add(t);
        }
        ya(t) {
            this.activeTargetIds = this.activeTargetIds.delete(t);
        }
        /**
         * Converts this entry into a JSON-encoded format we can use for WebStorage.
         * Does not encode `clientId` as it is part of the key in WebStorage.
         */    Va() {
            const t = {
                activeTargetIds: this.activeTargetIds.W(),
                updateTimeMs: Date.now()
            };
            return JSON.stringify(t);
        }
    }

    /**
     * `WebStorageSharedClientState` uses WebStorage (window.localStorage) as the
     * backing store for the SharedClientState. It keeps track of all active
     * clients and supports modifications of the local client's data.
     */ class Ro {
        constructor(t, e, n, s, i) {
            this.window = t, this.Cs = e, this.persistenceKey = n, this.pa = s, this.ba = null, 
            this.pu = null, this.ps = null, this.va = this.Sa.bind(this), this.Da = new Et(U$1), 
            this.lr = !1, 
            /**
             * Captures WebStorage events that occur before `start()` is called. These
             * events are replayed once `WebStorageSharedClientState` is started.
             */
            this.Ca = [];
            // Escape the special characters mentioned here:
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
            const r = n.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
            this.storage = this.window.localStorage, this.currentUser = i, this.Na = _o(this.persistenceKey, this.pa), 
            this.xa = 
            /** Assembles the key for the current sequence number. */
            function(t) {
                return "firestore_sequence_number_" + t;
            }
            /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ (this.persistenceKey), this.Da = this.Da.Tt(this.pa, new Ao), this.Ma = new RegExp(`^firestore_clients_${r}_([^_]*)$`), 
            this.ka = new RegExp(`^firestore_mutations_${r}_(\\d+)(?:_(.*))?$`), this.Oa = new RegExp(`^firestore_targets_${r}_(\\d+)$`), 
            this.Fa = 
            /** Assembles the key for the online state of the primary tab. */
            function(t) {
                return "firestore_online_state_" + t;
            }
            // The WebStorage prefix that plays as a event to indicate the remote documents
            // might have changed due to some secondary tabs loading a bundle.
            // format of the key is:
            //     firestore_bundle_loaded_<persistenceKey>
            (this.persistenceKey), this.$a = function(t) {
                return "firestore_bundle_loaded_" + t;
            }
            // The WebStorage key prefix for the key that stores the last sequence number allocated. The key
            // looks like 'firestore_sequence_number_<persistence_prefix>'.
            (this.persistenceKey), 
            // Rather than adding the storage observer during start(), we add the
            // storage observer during initialization. This ensures that we collect
            // events before other components populate their initial state (during their
            // respective start() calls). Otherwise, we might for example miss a
            // mutation that is added after LocalStore's start() processed the existing
            // mutations but before we observe WebStorage events.
            this.window.addEventListener("storage", this.va);
        }
        /** Returns 'true' if WebStorage is available in the current environment. */    static Gs(t) {
            return !(!t || !t.localStorage);
        }
        async start() {
            // Retrieve the list of existing clients to backfill the data in
            // SharedClientState.
            const t = await this.ba.Vc();
            for (const e of t) {
                if (e === this.pa) continue;
                const t = this.getItem(_o(this.persistenceKey, e));
                if (t) {
                    const n = Io.Pa(e, t);
                    n && (this.Da = this.Da.Tt(n.clientId, n));
                }
            }
            this.La();
            // Check if there is an existing online state and call the callback handler
            // if applicable.
            const e = this.storage.getItem(this.Fa);
            if (e) {
                const t = this.Ba(e);
                t && this.qa(t);
            }
            for (const t of this.Ca) this.Sa(t);
            this.Ca = [], 
            // Register a window unload hook to remove the client metadata entry from
            // WebStorage even if `shutdown()` was not called.
            this.window.addEventListener("unload", (() => this.Ic())), this.lr = !0;
        }
        Ss(t) {
            this.setItem(this.xa, JSON.stringify(t));
        }
        Ua() {
            return this.Ka(this.Da);
        }
        Qa(t) {
            let e = !1;
            return this.Da.forEach(((n, s) => {
                s.activeTargetIds.has(t) && (e = !0);
            })), e;
        }
        Wa(t) {
            this.ja(t, "pending");
        }
        Ga(t, e, n) {
            this.ja(t, e, n), 
            // Once a final mutation result is observed by other clients, they no longer
            // access the mutation's metadata entry. Since WebStorage replays events
            // in order, it is safe to delete the entry right after updating it.
            this.za(t);
        }
        Ha(t) {
            let e = "not-current";
            // Lookup an existing query state if the target ID was already registered
            // by another tab
                    if (this.Qa(t)) {
                const n = this.storage.getItem(wo(this.persistenceKey, t));
                if (n) {
                    const s = To.Pa(t, n);
                    s && (e = s.state);
                }
            }
            return this.Ja.ga(t), this.La(), e;
        }
        Ya(t) {
            this.Ja.ya(t), this.La();
        }
        Xa(t) {
            return this.Ja.activeTargetIds.has(t);
        }
        Za(t) {
            this.removeItem(wo(this.persistenceKey, t));
        }
        th(t, e, n) {
            this.eh(t, e, n);
        }
        nh(t, e, n) {
            e.forEach((t => {
                this.za(t);
            })), this.currentUser = t, n.forEach((t => {
                this.Wa(t);
            }));
        }
        sh(t) {
            this.ih(t);
        }
        rh() {
            this.oh();
        }
        Ic() {
            this.lr && (this.window.removeEventListener("storage", this.va), this.removeItem(this.Na), 
            this.lr = !1);
        }
        getItem(t) {
            const e = this.storage.getItem(t);
            return p$1("SharedClientState", "READ", t, e), e;
        }
        setItem(t, e) {
            p$1("SharedClientState", "SET", t, e), this.storage.setItem(t, e);
        }
        removeItem(t) {
            p$1("SharedClientState", "REMOVE", t), this.storage.removeItem(t);
        }
        Sa(t) {
            // Note: The function is typed to take Event to be interface-compatible with
            // `Window.addEventListener`.
            const e = t;
            if (e.storageArea === this.storage) {
                if (p$1("SharedClientState", "EVENT", e.key, e.newValue), e.key === this.Na) return void b("Received WebStorage notification for local change. Another client might have garbage-collected our state");
                this.Cs.Oi((async () => {
                    if (this.lr) {
                        if (null !== e.key) if (this.Ma.test(e.key)) {
                            if (null == e.newValue) {
                                const t = this.uh(e.key);
                                return this.ah(t, null);
                            }
                            {
                                const t = this.hh(e.key, e.newValue);
                                if (t) return this.ah(t.clientId, t);
                            }
                        } else if (this.ka.test(e.key)) {
                            if (null !== e.newValue) {
                                const t = this.lh(e.key, e.newValue);
                                if (t) return this._h(t);
                            }
                        } else if (this.Oa.test(e.key)) {
                            if (null !== e.newValue) {
                                const t = this.fh(e.key, e.newValue);
                                if (t) return this.dh(t);
                            }
                        } else if (e.key === this.Fa) {
                            if (null !== e.newValue) {
                                const t = this.Ba(e.newValue);
                                if (t) return this.qa(t);
                            }
                        } else if (e.key === this.xa) {
                            const t = function(t) {
                                let e = vs.Ds;
                                if (null != t) try {
                                    const n = JSON.parse(t);
                                    C("number" == typeof n), e = n;
                                } catch (t) {
                                    b("SharedClientState", "Failed to read sequence number from WebStorage", t);
                                }
                                return e;
                            }
                            /**
     * `MemorySharedClientState` is a simple implementation of SharedClientState for
     * clients using memory persistence. The state in this class remains fully
     * isolated and no synchronization is performed.
     */ (e.newValue);
                            t !== vs.Ds && this.ps(t);
                        } else if (e.key === this.$a) return this.ba.wh();
                    } else this.Ca.push(e);
                }));
            }
        }
        get Ja() {
            return this.Da.get(this.pa);
        }
        La() {
            this.setItem(this.Na, this.Ja.Va());
        }
        ja(t, e, n) {
            const s = new Eo(this.currentUser, t, e, n), i = fo(this.persistenceKey, this.currentUser, t);
            this.setItem(i, s.Va());
        }
        za(t) {
            const e = fo(this.persistenceKey, this.currentUser, t);
            this.removeItem(e);
        }
        ih(t) {
            const e = {
                clientId: this.pa,
                onlineState: t
            };
            this.storage.setItem(this.Fa, JSON.stringify(e));
        }
        eh(t, e, n) {
            const s = wo(this.persistenceKey, t), i = new To(t, e, n);
            this.setItem(s, i.Va());
        }
        oh() {
            this.setItem(this.$a, "value-not-used");
        }
        /**
         * Parses a client state key in WebStorage. Returns null if the key does not
         * match the expected key format.
         */    uh(t) {
            const e = this.Ma.exec(t);
            return e ? e[1] : null;
        }
        /**
         * Parses a client state in WebStorage. Returns 'null' if the value could not
         * be parsed.
         */    hh(t, e) {
            const n = this.uh(t);
            return Io.Pa(n, e);
        }
        /**
         * Parses a mutation batch state in WebStorage. Returns 'null' if the value
         * could not be parsed.
         */    lh(t, e) {
            const n = this.ka.exec(t), s = Number(n[1]), i = void 0 !== n[2] ? n[2] : null;
            return Eo.Pa(new P$1(i), s, e);
        }
        /**
         * Parses a query target state from WebStorage. Returns 'null' if the value
         * could not be parsed.
         */    fh(t, e) {
            const n = this.Oa.exec(t), s = Number(n[1]);
            return To.Pa(s, e);
        }
        /**
         * Parses an online state from WebStorage. Returns 'null' if the value
         * could not be parsed.
         */    Ba(t) {
            return mo.Pa(t);
        }
        async _h(t) {
            if (t.user.uid === this.currentUser.uid) return this.ba.Eh(t.batchId, t.state, t.error);
            p$1("SharedClientState", "Ignoring mutation for non-active user " + t.user.uid);
        }
        dh(t) {
            return this.ba.Th(t.targetId, t.state, t.error);
        }
        ah(t, e) {
            const n = e ? this.Da.Tt(t, e) : this.Da.remove(t), s = this.Ka(this.Da), i = this.Ka(n), r = [], o = [];
            return i.forEach((t => {
                s.has(t) || r.push(t);
            })), s.forEach((t => {
                i.has(t) || o.push(t);
            })), this.ba.Ih(r, o).then((() => {
                this.Da = n;
            }));
        }
        qa(t) {
            // We check whether the client that wrote this online state is still active
            // by comparing its client ID to the list of clients kept active in
            // IndexedDb. If a client does not update their IndexedDb client state
            // within 5 seconds, it is considered inactive and we don't emit an online
            // state event.
            this.Da.get(t.clientId) && this.pu(t.onlineState);
        }
        Ka(t) {
            let e = Dt();
            return t.forEach(((t, n) => {
                e = e.Gt(n.activeTargetIds);
            })), e;
        }
    }

    class Po {
        constructor() {
            this.mh = new Ao, this.Ah = {}, this.pu = null, this.ps = null;
        }
        Wa(t) {
            // No op.
        }
        Ga(t, e, n) {
            // No op.
        }
        Ha(t) {
            return this.mh.ga(t), this.Ah[t] || "not-current";
        }
        th(t, e, n) {
            this.Ah[t] = e;
        }
        Ya(t) {
            this.mh.ya(t);
        }
        Xa(t) {
            return this.mh.activeTargetIds.has(t);
        }
        Za(t) {
            delete this.Ah[t];
        }
        Ua() {
            return this.mh.activeTargetIds;
        }
        Qa(t) {
            return this.mh.activeTargetIds.has(t);
        }
        start() {
            return this.mh = new Ao, Promise.resolve();
        }
        nh(t, e, n) {
            // No op.
        }
        sh(t) {
            // No op.
        }
        Ic() {}
        Ss(t) {}
        rh() {
            // No op.
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class Vo {
        constructor(t) {
            this.key = t;
        }
    }

    class go {
        constructor(t) {
            this.key = t;
        }
    }

    /**
     * View is responsible for computing the final merged truth of what docs are in
     * a query. It gets notified of local and remote changes to docs, and applies
     * the query filters and limits to determine the most correct possible results.
     */ class yo {
        constructor(t, 
        /** Documents included in the remote target */
        e) {
            this.query = t, this.Rh = e, this.Ph = null, 
            /**
             * A flag whether the view is current with the backend. A view is considered
             * current after it has seen the current flag from the backend and did not
             * lose consistency within the watch stream (e.g. because of an existence
             * filter mismatch).
             */
            this.le = !1, 
            /** Documents in the view but not in the remote target */
            this.Vh = vt(), 
            /** Document Keys that have local changes */
            this.ee = vt(), this.gh = Xn(t), this.yh = new Ct(this.gh);
        }
        /**
         * The set of remote documents that the server has told us belongs to the target associated with
         * this view.
         */    get ph() {
            return this.Rh;
        }
        /**
         * Iterates over a set of doc changes, applies the query limit, and computes
         * what the new results should be, what the changes were, and whether we may
         * need to go back to the local cache for more results. Does not make any
         * changes to the view.
         * @param docChanges - The doc changes to apply to this view.
         * @param previousChanges - If this is being called with a refill, then start
         *        with this set of docs and changes instead of the current view.
         * @returns a new set of docs, changes, and refill flag.
         */    bh(t, e) {
            const n = e ? e.Sh : new Nt, s = e ? e.yh : this.yh;
            let i = e ? e.ee : this.ee, r = s, o = !1;
            // Track the last doc in a (full) limit. This is necessary, because some
            // update (a delete, or an update moving a doc past the old limit) might
            // mean there is some other document in the local cache that either should
            // come (1) between the old last limit doc and the new last document, in the
            // case of updates, or (2) after the new last document, in the case of
            // deletes. So we keep this doc at the old limit to compare the updates to.
            // Note that this should never get used in a refill (when previousChanges is
            // set), because there will only be adds -- no deletes or updates.
            const c = Bn(this.query) && s.size === this.query.limit ? s.last() : null, u = qn(this.query) && s.size === this.query.limit ? s.first() : null;
            // Drop documents out to meet limit/limitToLast requirement.
            if (t.Pt(((t, e) => {
                const a = s.get(t);
                let h = e instanceof Mn ? e : null;
                h && (h = Yn(this.query, h) ? h : null);
                const l = !!a && this.ee.has(a.key), _ = !!h && (h.an || 
                // We only consider committed mutations for documents that were
                // mutated during the lifetime of the view.
                this.ee.has(h.key) && h.hasCommittedMutations);
                let f = !1;
                // Calculate change
                            if (a && h) {
                    a.data().isEqual(h.data()) ? l !== _ && (n.track({
                        type: 3 /* Metadata */ ,
                        doc: h
                    }), f = !0) : this.Dh(a, h) || (n.track({
                        type: 2 /* Modified */ ,
                        doc: h
                    }), f = !0, (c && this.gh(h, c) > 0 || u && this.gh(h, u) < 0) && (
                    // This doc moved from inside the limit to outside the limit.
                    // That means there may be some other doc in the local cache
                    // that should be included instead.
                    o = !0));
                } else !a && h ? (n.track({
                    type: 0 /* Added */ ,
                    doc: h
                }), f = !0) : a && !h && (n.track({
                    type: 1 /* Removed */ ,
                    doc: a
                }), f = !0, (c || u) && (
                // A doc was removed from a full limit query. We'll need to
                // requery from the local cache to see if we know about some other
                // doc that should be in the results.
                o = !0));
                f && (h ? (r = r.add(h), i = _ ? i.add(t) : i.delete(t)) : (r = r.delete(t), i = i.delete(t)));
            })), Bn(this.query) || qn(this.query)) for (;r.size > this.query.limit; ) {
                const t = Bn(this.query) ? r.last() : r.first();
                r = r.delete(t.key), i = i.delete(t.key), n.track({
                    type: 1 /* Removed */ ,
                    doc: t
                });
            }
            return {
                yh: r,
                Sh: n,
                vr: o,
                ee: i
            };
        }
        Dh(t, e) {
            // We suppress the initial change event for documents that were modified as
            // part of a write acknowledgment (e.g. when the value of a server transform
            // is applied) as Watch will send us the same document again.
            // By suppressing the event, we only raise two user visible events (one with
            // `hasPendingWrites` and the final state of the document) instead of three
            // (one with `hasPendingWrites`, the modified document with
            // `hasPendingWrites` and the final state of the document).
            return t.an && e.hasCommittedMutations && !e.an;
        }
        /**
         * Updates the view with the given ViewDocumentChanges and optionally updates
         * limbo docs and sync state from the provided target change.
         * @param docChanges - The set of changes to make to the view's docs.
         * @param updateLimboDocuments - Whether to update limbo documents based on
         *        this change.
         * @param targetChange - A target change to apply for computing limbo docs and
         *        sync state.
         * @returns A new ViewChange with the given docs, changes, and sync state.
         */
        // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
        Zn(t, e, n) {
            const s = this.yh;
            this.yh = t.yh, this.ee = t.ee;
            // Sort changes based on type and query comparator
            const i = t.Sh.Zt();
            i.sort(((t, e) => function(t, e) {
                const n = t => {
                    switch (t) {
                      case 0 /* Added */ :
                        return 1;

                      case 2 /* Modified */ :
                      case 3 /* Metadata */ :
                        // A metadata change is converted to a modified change at the public
                        // api layer.  Since we sort by document key and then change type,
                        // metadata and modified changes must be sorted equivalently.
                        return 2;

                      case 1 /* Removed */ :
                        return 0;

                      default:
                        return D$1();
                    }
                };
                return n(t) - n(e);
            }
            /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ (t.type, e.type) || this.gh(t.doc, e.doc))), this.Ch(n);
            const r = e ? this.Nh() : [], o = 0 === this.Vh.size && this.le ? 1 /* Synced */ : 0 /* Local */ , c = o !== this.Ph;
            if (this.Ph = o, 0 !== i.length || c) {
                return {
                    snapshot: new xt(this.query, t.yh, s, i, t.ee, 0 /* Local */ === o, c, 
                    /* excludesMetadataChanges= */ !1),
                    xh: r
                };
            }
            // no changes
            return {
                xh: r
            };
        }
        /**
         * Applies an OnlineState change to the view, potentially generating a
         * ViewChange if the view's syncState changes as a result.
         */    ea(t) {
            return this.le && "Offline" /* Offline */ === t ? (
            // If we're offline, set `current` to false and then call applyChanges()
            // to refresh our syncState and generate a ViewChange as appropriate. We
            // are guaranteed to get a new TargetChange that sets `current` back to
            // true once the client is back online.
            this.le = !1, this.Zn({
                yh: this.yh,
                Sh: new Nt,
                ee: this.ee,
                vr: !1
            }, 
            /* updateLimboDocuments= */ !1)) : {
                xh: []
            };
        }
        /**
         * Returns whether the doc for the given key should be in limbo.
         */    Mh(t) {
            // If the remote end says it's part of this query, it's not in limbo.
            return !this.Rh.has(t) && (
            // The local store doesn't think it's a result, so it shouldn't be in limbo.
            !!this.yh.has(t) && !this.yh.get(t).an);
        }
        /**
         * Updates syncedDocuments, current, and limbo docs based on the given change.
         * Returns the list of changes to which docs are in limbo.
         */    Ch(t) {
            t && (t._e.forEach((t => this.Rh = this.Rh.add(t))), t.fe.forEach((t => {})), t.de.forEach((t => this.Rh = this.Rh.delete(t))), 
            this.le = t.le);
        }
        Nh() {
            // We can only determine limbo documents when we're in-sync with the server.
            if (!this.le) return [];
            // TODO(klimt): Do this incrementally so that it's not quadratic when
            // updating many documents.
                    const t = this.Vh;
            this.Vh = vt(), this.yh.forEach((t => {
                this.Mh(t.key) && (this.Vh = this.Vh.add(t.key));
            }));
            // Diff the new limbo docs with the old limbo docs.
            const e = [];
            return t.forEach((t => {
                this.Vh.has(t) || e.push(new go(t));
            })), this.Vh.forEach((n => {
                t.has(n) || e.push(new Vo(n));
            })), e;
        }
        /**
         * Update the in-memory state of the current view with the state read from
         * persistence.
         *
         * We update the query view whenever a client's primary status changes:
         * - When a client transitions from primary to secondary, it can miss
         *   LocalStorage updates and its query views may temporarily not be
         *   synchronized with the state on disk.
         * - For secondary to primary transitions, the client needs to update the list
         *   of `syncedDocuments` since secondary clients update their query views
         *   based purely on synthesized RemoteEvents.
         *
         * @param queryResult.documents - The documents that match the query according
         * to the LocalStore.
         * @param queryResult.remoteKeys - The keys of the documents that match the
         * query according to the backend.
         *
         * @returns The ViewChange that resulted from this synchronization.
         */
        // PORTING NOTE: Multi-tab only.
        kh(t) {
            this.Rh = t.Qc, this.Vh = vt();
            const e = this.bh(t.documents);
            return this.Zn(e, /*updateLimboDocuments=*/ !0);
        }
        /**
         * Returns a view snapshot as if this query was just listened to. Contains
         * a document add for every existing document and the `fromCache` and
         * `hasPendingWrites` status of the already established view.
         */
        // PORTING NOTE: Multi-tab only.
        Oh() {
            return xt.ie(this.query, this.yh, this.ee, 0 /* Local */ === this.Ph);
        }
    }

    /**
     * QueryView contains all of the data that SyncEngine needs to keep track of for
     * a particular query.
     */
    class po {
        constructor(
        /**
         * The query itself.
         */
        t, 
        /**
         * The target number created by the client that is used in the watch
         * stream to identify this query.
         */
        e, 
        /**
         * The view is responsible for computing the final merged truth of what
         * docs are in the query. It gets notified of local and remote changes,
         * and applies the query filters and limits to determine the most correct
         * possible results.
         */
        n) {
            this.query = t, this.targetId = e, this.view = n;
        }
    }

    /** Tracks a limbo resolution. */ class bo {
        constructor(t) {
            this.key = t, 
            /**
             * Set to true once we've received a document. This is used in
             * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
             * decide whether it needs to manufacture a delete event for the target once
             * the target is CURRENT.
             */
            this.Fh = !1;
        }
    }

    /**
     * An implementation of `SyncEngine` coordinating with other parts of SDK.
     *
     * The parts of SyncEngine that act as a callback to RemoteStore need to be
     * registered individually. This is done in `syncEngineWrite()` and
     * `syncEngineListen()` (as well as `applyPrimaryState()`) as these methods
     * serve as entry points to RemoteStore's functionality.
     *
     * Note: some field defined in this class might have public access level, but
     * the class is not exported so they are only accessible from this module.
     * This is useful to implement optional features (like bundles) in free
     * functions, such that they are tree-shakeable.
     */ class vo {
        constructor(t, e, n, 
        // PORTING NOTE: Manages state synchronization in multi-tab environments.
        s, i, r) {
            this.ku = t, this.$h = e, this.Lh = n, this.Bh = s, this.currentUser = i, this.qh = r, 
            this.Uh = {}, this.Kh = new Is((t => Hn(t)), zn), this.Qh = new Map, 
            /**
             * The keys of documents that are in limbo for which we haven't yet started a
             * limbo resolution query.
             */
            this.Wh = [], 
            /**
             * Keeps track of the target ID for each document that is in limbo with an
             * active target.
             */
            this.jh = new Et(Y$1.k), 
            /**
             * Keeps track of the information about an active limbo resolution for each
             * active target ID that was started for the purpose of limbo resolution.
             */
            this.Gh = new Map, this.zh = new ho, 
            /** Stores user completion handlers, indexed by User and BatchId. */
            this.Hh = {}, 
            /** Stores user callbacks waiting for all pending writes to be acknowledged. */
            this.Jh = new Map, this.Yh = Ji.Io(), this.onlineState = "Unknown" /* Unknown */ , 
            // The primary state is set to `true` or `false` immediately after Firestore
            // startup. In the interim, a client should only be considered primary if
            // `isPrimary` is true.
            this.Xh = void 0;
        }
        get Zh() {
            return !0 === this.Xh;
        }
    }

    /**
     * Initiates the new listen, resolves promise when listen enqueued to the
     * server. All the subsequent view snapshots or errors are sent to the
     * subscribed handlers. Returns the initial snapshot.
     */
    async function So(t, e) {
        const n = ic$1(t);
        let s, i;
        const r = n.Kh.get(e);
        if (r) 
        // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
        // already exists when EventManager calls us for the first time. This
        // happens when the primary tab is already listening to this query on
        // behalf of another tab and the user of the primary also starts listening
        // to the query. EventManager will not have an assigned target ID in this
        // case and calls `listen` to obtain this ID.
        s = r.targetId, n.Bh.Ha(s), i = r.view.Oh(); else {
            const t = await Er(n.ku, jn(e)), r = n.Bh.Ha(t.targetId);
            s = t.targetId, i = await Do(n, e, s, "current" === r), n.Zh && Cr(n.$h, t);
        }
        return i;
    }

    /**
     * Registers a view for a previously unknown query and computes its initial
     * snapshot.
     */ async function Do(t, e, n, s) {
        // PORTING NOTE: On Web only, we inject the code that registers new Limbo
        // targets based on view changes. This allows us to only depend on Limbo
        // changes when user code includes queries.
        t.tl = (e, n, s) => async function(t, e, n, s) {
            let i = e.view.bh(n);
            i.vr && (
            // The query has a limit and some docs were removed, so we need
            // to re-run the query against the local store to make sure we
            // didn't lose any good docs that had been past the limit.
            i = await Ir(t.ku, e.query, 
            /* usePreviousResults= */ !1).then((({documents: t}) => e.view.bh(t, i))));
            const r = s && s.re.get(e.targetId), o = e.view.Zn(i, 
            /* updateLimboDocuments= */ t.Zh, r);
            return Ko(t, e.targetId, o.xh), o.snapshot;
        }(t, e, n, s);
        const i = await Ir(t.ku, e, 
        /* usePreviousResults= */ !0), r = new yo(e, i.Qc), o = r.bh(i.documents), c = kt.he(n, s && "Offline" /* Offline */ !== t.onlineState), u = r.Zn(o, 
        /* updateLimboDocuments= */ t.Zh, c);
        Ko(t, n, u.xh);
        const a = new po(e, n, r);
        return t.Kh.set(e, a), t.Qh.has(n) ? t.Qh.get(n).push(e) : t.Qh.set(n, [ e ]), u.snapshot;
    }

    /** Stops listening to the query. */ async function Co(t, e) {
        const n = N$1(t), s = n.Kh.get(e), i = n.Qh.get(s.targetId);
        if (i.length > 1) return n.Qh.set(s.targetId, i.filter((t => !zn(t, e)))), void n.Kh.delete(e);
        // No other queries are mapped to the target, clean up the query and the target.
            if (n.Zh) {
            // We need to remove the local query target first to allow us to verify
            // whether any other client is still interested in this target.
            n.Bh.Ya(s.targetId);
            n.Bh.Qa(s.targetId) || await Tr(n.ku, s.targetId, 
            /*keepPersistedTargetData=*/ !1).then((() => {
                n.Bh.Za(s.targetId), Nr(n.$h, s.targetId), qo(n, s.targetId);
            })).catch(Pr);
        } else qo(n, s.targetId), await Tr(n.ku, s.targetId, 
        /*keepPersistedTargetData=*/ !0);
    }

    /**
     * Initiates the write of local mutation batch which involves adding the
     * writes to the mutation queue, notifying the remote store about new
     * mutations and raising events for any changes this write caused.
     *
     * The promise returned by this call is resolved when the above steps
     * have completed, *not* when the write was acked by the backend. The
     * userCallback is resolved once the write was acked/rejected by the
     * backend (or failed locally for any other reason).
     */ async function No(t, e, n) {
        const s = rc$1(t);
        try {
            const t = await function(t, e) {
                const n = N$1(t), s = W$1.now(), i = e.reduce(((t, e) => t.add(e.key)), vt());
                let r;
                return n.persistence.runTransaction("Locally write mutations", "readwrite", (t => n.Bc._s(t, i).next((i => {
                    r = i;
                    // For non-idempotent mutations (such as `FieldValue.increment()`),
                    // we record the base state in a separate patch mutation. This is
                    // later used to guarantee consistent values and prevents flicker
                    // even if the backend sends us an update that already includes our
                    // transform.
                    const o = [];
                    for (const t of e) {
                        const e = mn(t, r.get(t.key));
                        null != e && 
                        // NOTE: The base state should only be applied if there's some
                        // existing document to override, so use a Precondition of
                        // exists=true
                        o.push(new Vn(t.key, e, Nn(e.proto.mapValue), dn.exists(!0)));
                    }
                    return n.rs.kr(t, s, o, e);
                })))).then((t => {
                    const e = t.bn(r);
                    return {
                        batchId: t.batchId,
                        Kn: e
                    };
                }));
            }(s.ku, e);
            s.Bh.Wa(t.batchId), function(t, e, n) {
                let s = t.Hh[t.currentUser.i()];
                s || (s = new Et(U$1));
                s = s.Tt(e, n), t.Hh[t.currentUser.i()] = s;
            }
            /**
     * Resolves or rejects the user callback for the given batch and then discards
     * it.
     */ (s, t.batchId, n), await jo(s, t.Kn), await Qr(s.$h);
        } catch (t) {
            // If we can't persist the mutation, we reject the user callback and
            // don't send the mutation. The user can then retry the write.
            const e = Ks(t, "Failed to persist write");
            n.reject(e);
        }
    }

    /**
     * Applies one remote event to the sync engine, notifying any views of the
     * changes, and releasing any pending mutation batches that would become
     * visible because of the snapshot version the remote event contains.
     */ async function xo(t, e) {
        const n = N$1(t);
        try {
            const t = await dr(n.ku, e);
            // Update `receivedDocument` as appropriate for any limbo targets.
                    e.re.forEach(((t, e) => {
                const s = n.Gh.get(e);
                s && (
                // Since this is a limbo resolution lookup, it's for a single document
                // and it could be added, modified, or removed, but not a combination.
                C(t._e.size + t.fe.size + t.de.size <= 1), t._e.size > 0 ? s.Fh = !0 : t.fe.size > 0 ? C(s.Fh) : t.de.size > 0 && (C(s.Fh), 
                s.Fh = !1));
            })), await jo(n, t, e);
        } catch (t) {
            await Pr(t);
        }
    }

    /**
     * Applies an OnlineState change to the sync engine and notifies any views of
     * the change.
     */ function Mo(t, e, n) {
        const s = N$1(t);
        // If we are the secondary client, we explicitly ignore the remote store's
        // online state (the local client may go offline, even though the primary
        // tab remains online) and only apply the primary tab's online state from
        // SharedClientState.
            if (s.Zh && 0 /* RemoteStore */ === n || !s.Zh && 1 /* SharedClientState */ === n) {
            const t = [];
            s.Kh.forEach(((n, s) => {
                const i = s.view.ea(e);
                i.snapshot && t.push(i.snapshot);
            })), function(t, e) {
                const n = N$1(t);
                n.onlineState = e;
                let s = !1;
                n.queries.forEach(((t, n) => {
                    for (const t of n.listeners) 
                    // Run global snapshot listeners if a consistent snapshot has been emitted.
                    t.ea(e) && (s = !0);
                })), s && uo(n);
            }(s.Lh, e), t.length && s.Uh.fu(t), s.onlineState = e, s.Zh && s.Bh.sh(e);
        }
    }

    /**
     * Rejects the listen for the given targetID. This can be triggered by the
     * backend for any active target.
     *
     * @param syncEngine - The sync engine implementation.
     * @param targetId - The targetID corresponds to one previously initiated by the
     * user as part of TargetData passed to listen() on RemoteStore.
     * @param err - A description of the condition that has forced the rejection.
     * Nearly always this will be an indication that the user is no longer
     * authorized to see the data matching the target.
     */ async function ko(t, e, n) {
        const s = N$1(t);
        // PORTING NOTE: Multi-tab only.
            s.Bh.th(e, "rejected", n);
        const i = s.Gh.get(e), r = i && i.key;
        if (r) {
            // TODO(klimt): We really only should do the following on permission
            // denied errors, but we don't have the cause code here.
            // It's a limbo doc. Create a synthetic event saying it was deleted.
            // This is kind of a hack. Ideally, we would have a method in the local
            // store to purge a document. However, it would be tricky to keep all of
            // the local store's invariants with another method.
            let t = new Et(Y$1.k);
            t = t.Tt(r, new kn(r, j.min()));
            const n = vt().add(r), i = new Mt(j.min(), 
            /* targetChanges= */ new Map, 
            /* targetMismatches= */ new mt(U$1), t, n);
            await xo(s, i), 
            // Since this query failed, we won't want to manually unlisten to it.
            // We only remove it from bookkeeping after we successfully applied the
            // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to
            // this query when the RemoteStore restarts the Watch stream, which should
            // re-trigger the target failure.
            s.jh = s.jh.remove(r), s.Gh.delete(e), Wo(s);
        } else await Tr(s.ku, e, 
        /* keepPersistedTargetData */ !1).then((() => qo(s, e, n))).catch(Pr);
    }

    async function Oo(t, e) {
        const n = N$1(t), s = e.batch.batchId;
        try {
            const t = await _r(n.ku, e);
            // The local store may or may not be able to apply the write result and
            // raise events immediately (depending on whether the watcher is caught
            // up), so we raise user callbacks first so that they consistently happen
            // before listen events.
                    Bo(n, s, /*error=*/ null), Lo(n, s), n.Bh.Ga(s, "acknowledged"), await jo(n, t);
        } catch (t) {
            await Pr(t);
        }
    }

    async function Fo(t, e, n) {
        const s = N$1(t);
        try {
            const t = await function(t, e) {
                const n = N$1(t);
                return n.persistence.runTransaction("Reject batch", "readwrite-primary", (t => {
                    let s;
                    return n.rs.Fr(t, e).next((e => (C(null !== e), s = e.keys(), n.rs.Kr(t, e)))).next((() => n.rs.Gr(t))).next((() => n.Bc._s(t, s)));
                }));
            }
            /**
     * Returns the largest (latest) batch id in mutation queue that is pending
     * server response.
     *
     * Returns `BATCHID_UNKNOWN` if the queue is empty.
     */ (s.ku, e);
            // The local store may or may not be able to apply the write result and
            // raise events immediately (depending on whether the watcher is caught up),
            // so we raise user callbacks first so that they consistently happen before
            // listen events.
                    Bo(s, e, n), Lo(s, e), s.Bh.Ga(e, "rejected", n), await jo(s, t);
        } catch (n) {
            await Pr(n);
        }
    }

    /**
     * Registers a user callback that resolves when all pending mutations at the moment of calling
     * are acknowledged .
     */ async function $o(t, e) {
        const n = N$1(t);
        Fr(n.$h) || p$1("SyncEngine", "The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled.");
        try {
            const t = await function(t) {
                const e = N$1(t);
                return e.persistence.runTransaction("Get highest unacknowledged batch id", "readonly", (t => e.rs.Br(t)));
            }(n.ku);
            if (-1 === t) 
            // Trigger the callback right away if there is no pending writes at the moment.
            return void e.resolve();
            const s = n.Jh.get(t) || [];
            s.push(e), n.Jh.set(t, s);
        } catch (t) {
            const n = Ks(t, "Initialization of waitForPendingWrites() operation failed");
            e.reject(n);
        }
    }

    /**
     * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,
     * if there are any.
     */ function Lo(t, e) {
        (t.Jh.get(e) || []).forEach((t => {
            t.resolve();
        })), t.Jh.delete(e);
    }

    /** Reject all outstanding callbacks waiting for pending writes to complete. */ function Bo(t, e, n) {
        const s = N$1(t);
        let i = s.Hh[s.currentUser.i()];
        // NOTE: Mutations restored from persistence won't have callbacks, so it's
        // okay for there to be no callback for this ID.
            if (i) {
            const t = i.get(e);
            t && (n ? t.reject(n) : t.resolve(), i = i.remove(e)), s.Hh[s.currentUser.i()] = i;
        }
    }

    function qo(t, e, n = null) {
        t.Bh.Ya(e);
        for (const s of t.Qh.get(e)) t.Kh.delete(s), n && t.Uh.el(s, n);
        if (t.Qh.delete(e), t.Zh) {
            t.zh.Ia(e).forEach((e => {
                t.zh.zr(e) || 
                // We removed the last reference for this key
                Uo(t, e);
            }));
        }
    }

    function Uo(t, e) {
        // It's possible that the target already got removed because the query failed. In that case,
        // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.
        const n = t.jh.get(e);
        null !== n && (Nr(t.$h, n), t.jh = t.jh.remove(e), t.Gh.delete(n), Wo(t));
    }

    function Ko(t, e, n) {
        for (const s of n) if (s instanceof Vo) t.zh.ko(s.key, e), Qo(t, s); else if (s instanceof go) {
            p$1("SyncEngine", "Document no longer in limbo: " + s.key), t.zh.Fo(s.key, e);
            t.zh.zr(s.key) || 
            // We removed the last reference for this key
            Uo(t, s.key);
        } else D$1();
    }

    function Qo(t, e) {
        const n = e.key;
        t.jh.get(n) || (p$1("SyncEngine", "New document in limbo: " + n), t.Wh.push(n), Wo(t));
    }

    /**
     * Starts listens for documents in limbo that are enqueued for resolution,
     * subject to a maximum number of concurrent resolutions.
     *
     * Without bounding the number of concurrent resolutions, the server can fail
     * with "resource exhausted" errors which can lead to pathological client
     * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.
     */ function Wo(t) {
        for (;t.Wh.length > 0 && t.jh.size < t.qh; ) {
            const e = t.Wh.shift(), n = t.Yh.next();
            t.Gh.set(n, new bo(e)), t.jh = t.jh.Tt(e, n), Cr(t.$h, new ht(jn(Ln(e.path)), n, 2 /* LimboResolution */ , vs.Ds));
        }
    }

    async function jo(t, e, n) {
        const s = N$1(t), i = [], r = [], o = [];
        s.Kh.q() || (s.Kh.forEach(((t, c) => {
            o.push(s.tl(c, e, n).then((t => {
                if (t) {
                    s.Zh && s.Bh.th(c.targetId, t.fromCache ? "not-current" : "current"), i.push(t);
                    const e = bs.ys(c.targetId, t);
                    r.push(e);
                }
            })));
        })), await Promise.all(o), s.Uh.fu(i), await async function(t, e) {
            const n = N$1(t);
            try {
                await n.persistence.runTransaction("notifyLocalViewChanges", "readwrite", (t => ms.forEach(e, (e => ms.forEach(e.Vs, (s => n.persistence.Dr.ko(t, e.targetId, s))).next((() => ms.forEach(e.gs, (s => n.persistence.Dr.Fo(t, e.targetId, s)))))))));
            } catch (t) {
                if (!xs(t)) throw t;
                // If `notifyLocalViewChanges` fails, we did not advance the sequence
                // number for the documents that were included in this transaction.
                // This might trigger them to be deleted earlier than they otherwise
                // would have, but it should not invalidate the integrity of the data.
                p$1("LocalStore", "Failed to update sequence numbers: " + t);
            }
            for (const t of e) {
                const e = t.targetId;
                if (!t.fromCache) {
                    const t = n.Oc.get(e), s = t.ft, i = t.Et(s);
                    // Advance the last limbo free snapshot version
                                    n.Oc = n.Oc.Tt(e, i);
                }
            }
        }(s.ku, r));
    }

    async function Go(t, e) {
        const n = N$1(t);
        if (!n.currentUser.isEqual(e)) {
            p$1("SyncEngine", "User change. New user:", e.i());
            const t = await lr(n.ku, e);
            n.currentUser = e, 
            // Fails tasks waiting for pending writes requested by previous user.
            function(t, e) {
                t.Jh.forEach((t => {
                    t.forEach((t => {
                        t.reject(new M$1(x$1.CANCELLED, e));
                    }));
                })), t.Jh.clear();
            }(n, "'waitForPendingWrites' promise is rejected due to a user change."), 
            // TODO(b/114226417): Consider calling this only in the primary tab.
            n.Bh.nh(e, t.Uc, t.Kc), await jo(n, t.qc);
        }
    }

    function zo(t, e) {
        const n = N$1(t), s = n.Gh.get(e);
        if (s && s.Fh) return vt().add(s.key);
        {
            let t = vt();
            const s = n.Qh.get(e);
            if (!s) return t;
            for (const e of s) {
                const s = n.Kh.get(e);
                t = t.Gt(s.view.ph);
            }
            return t;
        }
    }

    /**
     * Reconcile the list of synced documents in an existing view with those
     * from persistence.
     */ async function Ho(t, e) {
        const n = N$1(t), s = await Ir(n.ku, e.query, 
        /* usePreviousResults= */ !0), i = e.view.kh(s);
        return n.Zh && Ko(n, e.targetId, i.xh), i;
    }

    /**
     * Retrieves newly changed documents from remote document cache and raises
     * snapshots if needed.
     */
    // PORTING NOTE: Multi-Tab only.
    async function Jo(t) {
        const e = N$1(t);
        return Ar(e.ku).then((t => jo(e, t)));
    }

    /** Applies a mutation state to an existing batch.  */
    // PORTING NOTE: Multi-Tab only.
    async function Yo(t, e, n, s) {
        const i = N$1(t), r = await function(t, e) {
            const n = N$1(t), s = N$1(n.rs);
            return n.persistence.runTransaction("Lookup mutation documents", "readonly", (t => s.$r(t, e).next((e => e ? n.Bc._s(t, e) : ms.resolve(null)))));
        }
        // PORTING NOTE: Multi-Tab only.
        (i.ku, e);
        null !== r ? ("pending" === n ? 
        // If we are the primary client, we need to send this write to the
        // backend. Secondary clients will ignore these writes since their remote
        // connection is disabled.
        await Qr(i.$h) : "acknowledged" === n || "rejected" === n ? (
        // NOTE: Both these methods are no-ops for batches that originated from
        // other clients.
        Bo(i, e, s || null), Lo(i, e), function(t, e) {
            N$1(N$1(t).rs).Wr(e);
        }
        // PORTING NOTE: Multi-Tab only.
        (i.ku, e)) : D$1(), await jo(i, r)) : 
        // A throttled tab may not have seen the mutation before it was completed
        // and removed from the mutation queue, in which case we won't have cached
        // the affected documents. In this case we can safely ignore the update
        // since that means we didn't apply the mutation locally at all (if we
        // had, we would have cached the affected documents), and so we will just
        // see any resulting document changes via normal remote document updates
        // as applicable.
        p$1("SyncEngine", "Cannot apply mutation batch with id: " + e);
    }

    /** Applies a query target change from a different tab. */
    // PORTING NOTE: Multi-Tab only.
    async function Xo(t, e) {
        const n = N$1(t);
        if (ic$1(n), rc$1(n), !0 === e && !0 !== n.Xh) {
            // Secondary tabs only maintain Views for their local listeners and the
            // Views internal state may not be 100% populated (in particular
            // secondary tabs don't track syncedDocuments, the set of documents the
            // server considers to be in the target). So when a secondary becomes
            // primary, we need to need to make sure that all views for all targets
            // match the state on disk.
            const t = n.Bh.Ua(), e = await Zo(n, t.W());
            n.Xh = !0, await Zr(n.$h, !0);
            for (const t of e) Cr(n.$h, t);
        } else if (!1 === e && !1 !== n.Xh) {
            const t = [];
            let e = Promise.resolve();
            n.Qh.forEach(((s, i) => {
                n.Bh.Xa(i) ? t.push(i) : e = e.then((() => (qo(n, i), Tr(n.ku, i, 
                /*keepPersistedTargetData=*/ !0)))), Nr(n.$h, i);
            })), await e, await Zo(n, t), 
            // PORTING NOTE: Multi-Tab only.
            function(t) {
                const e = N$1(t);
                e.Gh.forEach(((t, n) => {
                    Nr(e.$h, n);
                })), e.zh.ma(), e.Gh = new Map, e.jh = new Et(Y$1.k);
            }
            /**
     * Reconcile the query views of the provided query targets with the state from
     * persistence. Raises snapshots for any changes that affect the local
     * client and returns the updated state of all target's query data.
     *
     * @param syncEngine - The sync engine implementation
     * @param targets - the list of targets with views that need to be recomputed
     * @param transitionToPrimary - `true` iff the tab transitions from a secondary
     * tab to a primary tab
     */
            // PORTING NOTE: Multi-Tab only.
            (n), n.Xh = !1, await Zr(n.$h, !1);
        }
    }

    async function Zo(t, e, n) {
        const s = N$1(t), i = [], r = [];
        for (const t of e) {
            let e;
            const n = s.Qh.get(t);
            if (n && 0 !== n.length) {
                // For queries that have a local View, we fetch their current state
                // from LocalStore (as the resume token and the snapshot version
                // might have changed) and reconcile their views with the persisted
                // state (the list of syncedDocuments may have gotten out of sync).
                e = await Er(s.ku, jn(n[0]));
                for (const t of n) {
                    const e = s.Kh.get(t), n = await Ho(s, e);
                    n.snapshot && r.push(n.snapshot);
                }
            } else {
                // For queries that never executed on this client, we need to
                // allocate the target in LocalStore and initialize a new View.
                const n = await mr(s.ku, t);
                e = await Er(s.ku, n), await Do(s, tc(n), t, 
                /*current=*/ !1);
            }
            i.push(e);
        }
        return s.Uh.fu(r), i;
    }

    /**
     * Creates a `Query` object from the specified `Target`. There is no way to
     * obtain the original `Query`, so we synthesize a `Query` from the `Target`
     * object.
     *
     * The synthesized result might be different from the original `Query`, but
     * since the synthesized `Query` should return the same results as the
     * original one (only the presentation of results might differ), the potential
     * difference will not cause issues.
     */
    // PORTING NOTE: Multi-Tab only.
    function tc(t) {
        return $n(t.path, t.collectionGroup, t.orderBy, t.filters, t.limit, "F" /* First */ , t.startAt, t.endAt);
    }

    /** Returns the IDs of the clients that are currently active. */
    // PORTING NOTE: Multi-Tab only.
    function ec$1(t) {
        const e = N$1(t);
        return N$1(N$1(e.ku).persistence).Vc();
    }

    /** Applies a query target change from a different tab. */
    // PORTING NOTE: Multi-Tab only.
    async function nc$1(t, e, n, s) {
        const i = N$1(t);
        if (i.Xh) 
        // If we receive a target state notification via WebStorage, we are
        // either already secondary or another tab has taken the primary lease.
        p$1("SyncEngine", "Ignoring unexpected query state notification."); else if (i.Qh.has(e)) switch (n) {
          case "current":
          case "not-current":
            {
                const t = await Ar(i.ku), s = Mt.ae(e, "current" === n);
                await jo(i, t, s);
                break;
            }

          case "rejected":
            await Tr(i.ku, e, 
            /* keepPersistedTargetData */ !0), qo(i, e, s);
            break;

          default:
            D$1();
        }
    }

    /** Adds or removes Watch targets for queries from different tabs. */ async function sc$1(t, e, n) {
        const s = ic$1(t);
        if (s.Xh) {
            for (const t of e) {
                if (s.Qh.has(t)) {
                    // A target might have been added in a previous attempt
                    p$1("SyncEngine", "Adding an already active target " + t);
                    continue;
                }
                const e = await mr(s.ku, t), n = await Er(s.ku, e);
                await Do(s, tc(e), n.targetId, 
                /*current=*/ !1), Cr(s.$h, n);
            }
            for (const t of n) 
            // Check that the target is still active since the target might have been
            // removed if it has been rejected by the backend.
            s.Qh.has(t) && 
            // Release queries that are still active.
            await Tr(s.ku, t, 
            /* keepPersistedTargetData */ !1).then((() => {
                Nr(s.$h, t), qo(s, t);
            })).catch(Pr);
        }
    }

    function ic$1(t) {
        const e = N$1(t);
        return e.$h.Fu.Gu = xo.bind(null, e), e.$h.Fu.Xe = zo.bind(null, e), e.$h.Fu.ju = ko.bind(null, e), 
        e.Uh.fu = oo.bind(null, e.Lh), e.Uh.el = co.bind(null, e.Lh), e;
    }

    function rc$1(t) {
        const e = N$1(t);
        return e.$h.Fu.zu = Oo.bind(null, e), e.$h.Fu.Hu = Fo.bind(null, e), e;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class oc$1 {
        constructor(t, e) {
            this.os = t, this.Dr = e, 
            /**
             * The set of all mutations that have been sent but not yet been applied to
             * the backend.
             */
            this.rs = [], 
            /** Next value to use when assigning sequential IDs to each mutation batch. */
            this.nl = 1, 
            /** An ordered mapping between documents and the mutations batch IDs. */
            this.sl = new mt(lo._a);
        }
        Mr(t) {
            return ms.resolve(0 === this.rs.length);
        }
        kr(t, e, n, s) {
            const i = this.nl;
            if (this.nl++, this.rs.length > 0) {
                this.rs[this.rs.length - 1];
            }
            const r = new Es(i, e, n, s);
            this.rs.push(r);
            // Track references by document key and index collection parents.
            for (const e of s) this.sl = this.sl.add(new lo(e.key, i)), this.os.Or(t, e.key.path.$());
            return ms.resolve(r);
        }
        Fr(t, e) {
            return ms.resolve(this.il(e));
        }
        Lr(t, e) {
            const n = e + 1, s = this.rl(n), i = s < 0 ? 0 : s;
            // The requested batchId may still be out of range so normalize it to the
            // start of the queue.
                    return ms.resolve(this.rs.length > i ? this.rs[i] : null);
        }
        Br() {
            return ms.resolve(0 === this.rs.length ? -1 : this.nl - 1);
        }
        qr(t) {
            return ms.resolve(this.rs.slice());
        }
        us(t, e) {
            const n = new lo(e, 0), s = new lo(e, Number.POSITIVE_INFINITY), i = [];
            return this.sl.Qt([ n, s ], (t => {
                const e = this.il(t.Ra);
                i.push(e);
            })), ms.resolve(i);
        }
        ds(t, e) {
            let n = new mt(U$1);
            return e.forEach((t => {
                const e = new lo(t, 0), s = new lo(t, Number.POSITIVE_INFINITY);
                this.sl.Qt([ e, s ], (t => {
                    n = n.add(t.Ra);
                }));
            })), ms.resolve(this.ol(n));
        }
        Rs(t, e) {
            // Use the query path as a prefix for testing if a document matches the
            // query.
            const n = e.path, s = n.length + 1;
            // Construct a document reference for actually scanning the index. Unlike
            // the prefix the document key in this reference must have an even number of
            // segments. The empty segment can be used a suffix of the query path
            // because it precedes all other segments in an ordered traversal.
            let i = n;
            Y$1.st(i) || (i = i.child(""));
            const r = new lo(new Y$1(i), 0);
            // Find unique batchIDs referenced by all documents potentially matching the
            // query.
                    let o = new mt(U$1);
            return this.sl.Wt((t => {
                const e = t.key.path;
                return !!n.U(e) && (
                // Rows with document keys more than one segment longer than the query
                // path can't be matches. For example, a query on 'rooms' can't match
                // the document /rooms/abc/messages/xyx.
                // TODO(mcg): we'll need a different scanner when we implement
                // ancestor queries.
                e.length === s && (o = o.add(t.Ra)), !0);
            }), r), ms.resolve(this.ol(o));
        }
        ol(t) {
            // Construct an array of matching batches, sorted by batchID to ensure that
            // multiple mutations affecting the same document key are applied in order.
            const e = [];
            return t.forEach((t => {
                const n = this.il(t);
                null !== n && e.push(n);
            })), e;
        }
        Kr(t, e) {
            C(0 === this.cl(e.batchId, "removed")), this.rs.shift();
            let n = this.sl;
            return ms.forEach(e.mutations, (s => {
                const i = new lo(s.key, e.batchId);
                return n = n.delete(i), this.Dr.jr(t, s.key);
            })).next((() => {
                this.sl = n;
            }));
        }
        Wr(t) {
            // No-op since the memory mutation queue does not maintain a separate cache.
        }
        zr(t, e) {
            const n = new lo(e, 0), s = this.sl.jt(n);
            return ms.resolve(e.isEqual(s && s.key));
        }
        Gr(t) {
            return this.rs.length, ms.resolve();
        }
        /**
         * Finds the index of the given batchId in the mutation queue and asserts that
         * the resulting index is within the bounds of the queue.
         *
         * @param batchId - The batchId to search for
         * @param action - A description of what the caller is doing, phrased in passive
         * form (e.g. "acknowledged" in a routine that acknowledges batches).
         */    cl(t, e) {
            return this.rl(t);
        }
        /**
         * Finds the index of the given batchId in the mutation queue. This operation
         * is O(1).
         *
         * @returns The computed index of the batch with the given batchId, based on
         * the state of the queue. Note this index can be negative if the requested
         * batchId has already been remvoed from the queue or past the end of the
         * queue if the batchId is larger than the last added batch.
         */    rl(t) {
            if (0 === this.rs.length) 
            // As an index this is past the end of the queue
            return 0;
            // Examine the front of the queue to figure out the difference between the
            // batchId and indexes in the array. Note that since the queue is ordered
            // by batchId, if the first batch has a larger batchId then the requested
            // batchId doesn't exist in the queue.
                    return t - this.rs[0].batchId;
        }
        /**
         * A version of lookupMutationBatch that doesn't return a promise, this makes
         * other functions that uses this code easier to read and more efficent.
         */    il(t) {
            const e = this.rl(t);
            if (e < 0 || e >= this.rs.length) return null;
            return this.rs[e];
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The memory-only RemoteDocumentCache for IndexedDb. To construct, invoke
     * `newMemoryRemoteDocumentCache()`.
     */
    class cc$1 {
        /**
         * @param sizer - Used to assess the size of a document. For eager GC, this is
         * expected to just return 0 to avoid unnecessarily doing the work of
         * calculating the size.
         */
        constructor(t, e) {
            this.os = t, this.ul = e, 
            /** Underlying cache of documents and their read times. */
            this.docs = new Et(Y$1.k), 
            /** Size of all cached documents. */
            this.size = 0;
        }
        /**
         * Adds the supplied entry to the cache and updates the cache size as appropriate.
         *
         * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()`.
         */    jn(t, e, n) {
            const s = e.key, i = this.docs.get(s), r = i ? i.size : 0, o = this.ul(e);
            return this.docs = this.docs.Tt(s, {
                zn: e,
                size: o,
                readTime: n
            }), this.size += o - r, this.os.Or(t, s.path.$());
        }
        /**
         * Removes the specified entry from the cache and updates the cache size as appropriate.
         *
         * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
         * returned by `newChangeBuffer()`.
         */    Hn(t) {
            const e = this.docs.get(t);
            e && (this.docs = this.docs.remove(t), this.size -= e.size);
        }
        Jn(t, e) {
            const n = this.docs.get(e);
            return ms.resolve(n ? n.zn : null);
        }
        getEntries(t, e) {
            let n = Vt();
            return e.forEach((t => {
                const e = this.docs.get(t);
                n = n.Tt(t, e ? e.zn : null);
            })), ms.resolve(n);
        }
        ws(t, e, n) {
            let s = yt();
            // Documents are ordered by key, so we can use a prefix scan to narrow down
            // the documents we need to match the query against.
                    const i = new Y$1(e.path.child("")), r = this.docs.yt(i);
            for (;r.Nt(); ) {
                const {key: t, value: {zn: i, readTime: o}} = r.Ct();
                if (!e.path.U(t.path)) break;
                o.D(n) <= 0 || i instanceof Mn && Yn(e, i) && (s = s.Tt(i.key, i));
            }
            return ms.resolve(s);
        }
        al(t, e) {
            return ms.forEach(this.docs, (t => e(t)));
        }
        io(t) {
            // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps
            // a separate changelog and does not need special handling for removals.
            return new uc$1(this);
        }
        oo(t) {
            return ms.resolve(this.size);
        }
    }

    /**
     * Creates a new memory-only RemoteDocumentCache.
     *
     * @param indexManager - A class that manages collection group indices.
     * @param sizer - Used to assess the size of a document. For eager GC, this is
     * expected to just return 0 to avoid unnecessarily doing the work of
     * calculating the size.
     */
    /**
     * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.
     */
    class uc$1 extends As {
        constructor(t) {
            super(), this.co = t;
        }
        Zn(t) {
            const e = [];
            return this.Kn.forEach(((n, s) => {
                s && s.zn ? e.push(this.co.jn(t, s.zn, this.Wn(n))) : this.co.Hn(n);
            })), ms.qn(e);
        }
        Yn(t, e) {
            return this.co.Jn(t, e);
        }
        Xn(t, e) {
            return this.co.getEntries(t, e);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class ac$1 {
        constructor(t) {
            this.persistence = t, 
            /**
             * Maps a target to the data about that target
             */
            this.hl = new Is((t => rt(t)), ct), 
            /** The last received snapshot version. */
            this.lastRemoteSnapshotVersion = j.min(), 
            /** The highest numbered target ID encountered. */
            this.highestTargetId = 0, 
            /** The highest sequence number encountered. */
            this.ll = 0, 
            /**
             * A ordered bidirectional mapping between documents and the remote target
             * IDs.
             */
            this._l = new ho, this.targetCount = 0, this.fl = Ji.To();
        }
        Ue(t, e) {
            return this.hl.forEach(((t, n) => e(n))), ms.resolve();
        }
        Po(t) {
            return ms.resolve(this.lastRemoteSnapshotVersion);
        }
        Vo(t) {
            return ms.resolve(this.ll);
        }
        mo(t) {
            return this.highestTargetId = this.fl.next(), ms.resolve(this.highestTargetId);
        }
        yo(t, e, n) {
            return n && (this.lastRemoteSnapshotVersion = n), e > this.ll && (this.ll = e), 
            ms.resolve();
        }
        bo(t) {
            this.hl.set(t.target, t);
            const e = t.targetId;
            e > this.highestTargetId && (this.fl = new Ji(e), this.highestTargetId = e), t.sequenceNumber > this.ll && (this.ll = t.sequenceNumber);
        }
        po(t, e) {
            return this.bo(e), this.targetCount += 1, ms.resolve();
        }
        So(t, e) {
            return this.bo(e), ms.resolve();
        }
        Do(t, e) {
            return this.hl.delete(e.target), this._l.Ia(e.targetId), this.targetCount -= 1, 
            ms.resolve();
        }
        mr(t, e, n) {
            let s = 0;
            const i = [];
            return this.hl.forEach(((r, o) => {
                o.sequenceNumber <= e && null === n.get(o.targetId) && (this.hl.delete(r), i.push(this.Co(t, o.targetId)), 
                s++);
            })), ms.qn(i).next((() => s));
        }
        No(t) {
            return ms.resolve(this.targetCount);
        }
        xo(t, e) {
            const n = this.hl.get(e) || null;
            return ms.resolve(n);
        }
        Mo(t, e, n) {
            return this._l.wa(e, n), ms.resolve();
        }
        Oo(t, e, n) {
            this._l.Ta(e, n);
            const s = this.persistence.Dr, i = [];
            return s && e.forEach((e => {
                i.push(s.jr(t, e));
            })), ms.qn(i);
        }
        Co(t, e) {
            return this._l.Ia(e), ms.resolve();
        }
        $o(t, e) {
            const n = this._l.Aa(e);
            return ms.resolve(n);
        }
        zr(t, e) {
            return ms.resolve(this._l.zr(e));
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class hc$1 {
        constructor(t) {
            this.serializer = t, this.dl = new Map, this.wl = new Map;
        }
        ho(t, e) {
            return ms.resolve(this.dl.get(e));
        }
        lo(t, e) {
            /** Encodes a BundleMetadata proto object to a Bundle model object. */
            var n;
            return this.dl.set(e.id, {
                id: (n = e).id,
                version: n.version,
                createTime: Re(n.createTime)
            }), ms.resolve();
        }
        _o(t, e) {
            return ms.resolve(this.wl.get(e));
        }
        fo(t, e) {
            var n;
            return this.wl.set(e.name, {
                name: (n = e).name,
                query: li(n.bundledQuery),
                readTime: Re(n.readTime)
            }), ms.resolve();
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A memory-backed instance of Persistence. Data is stored only in RAM and
     * not persisted across sessions.
     */
    class lc$1 {
        /**
         * The constructor accepts a factory for creating a reference delegate. This
         * allows both the delegate and this instance to have strong references to
         * each other without having nullable fields that would then need to be
         * checked or asserted on every access.
         */
        constructor(t, e) {
            this.El = {}, this.Uo = new vs(0), this.Ko = !1, this.Ko = !0, this.Dr = t(this), 
            this.Yo = new ac$1(this);
            this.os = new gi, this.ss = function(t, e) {
                return new cc$1(t, e);
            }(this.os, (t => this.Dr.Tl(t))), this.serializer = new ei(e), this.Xo = new hc$1(this.serializer);
        }
        start() {
            return Promise.resolve();
        }
        Ic() {
            // No durable state to ensure is closed on shutdown.
            return this.Ko = !1, Promise.resolve();
        }
        get lr() {
            return this.Ko;
        }
        rc() {
            // No op.
        }
        oc() {
            // No op.
        }
        vc() {
            return this.os;
        }
        gc(t) {
            let e = this.El[t.i()];
            return e || (e = new oc$1(this.os, this.Dr), this.El[t.i()] = e), e;
        }
        yc() {
            return this.Yo;
        }
        bc() {
            return this.ss;
        }
        Sc() {
            return this.Xo;
        }
        runTransaction(t, e, n) {
            p$1("MemoryPersistence", "Starting transaction:", t);
            const s = new _c(this.Uo.next());
            return this.Dr.Il(), n(s).next((t => this.Dr.ml(s).next((() => t)))).Ln().then((t => (s.ns(), 
            t)));
        }
        Al(t, e) {
            return ms.Un(Object.values(this.El).map((n => () => n.zr(t, e))));
        }
    }

    /**
     * Memory persistence is not actually transactional, but future implementations
     * may have transaction-scoped state.
     */ class _c extends ys {
        constructor(t) {
            super(), this.Lo = t;
        }
    }

    class fc$1 {
        constructor(t) {
            this.persistence = t, 
            /** Tracks all documents that are active in Query views. */
            this.Rl = new ho, 
            /** The list of documents that are potentially GCed after each transaction. */
            this.Pl = null;
        }
        static Vl(t) {
            return new fc$1(t);
        }
        get gl() {
            if (this.Pl) return this.Pl;
            throw D$1();
        }
        ko(t, e, n) {
            return this.Rl.ko(n, e), this.gl.delete(n.toString()), ms.resolve();
        }
        Fo(t, e, n) {
            return this.Rl.Fo(n, e), this.gl.add(n.toString()), ms.resolve();
        }
        jr(t, e) {
            return this.gl.add(e.toString()), ms.resolve();
        }
        removeTarget(t, e) {
            this.Rl.Ia(e.targetId).forEach((t => this.gl.add(t.toString())));
            const n = this.persistence.yc();
            return n.$o(t, e.targetId).next((t => {
                t.forEach((t => this.gl.add(t.toString())));
            })).next((() => n.Do(t, e)));
        }
        Il() {
            this.Pl = new Set;
        }
        ml(t) {
            // Remove newly orphaned documents.
            const e = this.persistence.bc().io();
            return ms.forEach(this.gl, (n => {
                const s = Y$1.tt(n);
                return this.yl(t, s).next((t => {
                    t || e.Hn(s);
                }));
            })).next((() => (this.Pl = null, e.apply(t))));
        }
        Mc(t, e) {
            return this.yl(t, e).next((t => {
                t ? this.gl.delete(e.toString()) : this.gl.add(e.toString());
            }));
        }
        Tl(t) {
            // For eager GC, we don't care about the document size, there are no size thresholds.
            return 0;
        }
        yl(t, e) {
            return ms.Un([ () => ms.resolve(this.Rl.zr(e)), () => this.persistence.yc().zr(t, e), () => this.persistence.Al(t, e) ]);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provides a simple helper class that implements the Stream interface to
     * bridge to other implementations that are streams but do not implement the
     * interface. The stream callbacks are invoked with the callOn... methods.
     */ class dc$1 {
        constructor(t) {
            this.pl = t.pl, this.bl = t.bl;
        }
        lu(t) {
            this.vl = t;
        }
        ou(t) {
            this.Sl = t;
        }
        onMessage(t) {
            this.Dl = t;
        }
        close() {
            this.bl();
        }
        send(t) {
            this.pl(t);
        }
        Cl() {
            this.vl();
        }
        Nl(t) {
            this.Sl(t);
        }
        xl(t) {
            this.Dl(t);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const wc$1 = {
        BatchGetDocuments: "batchGet",
        Commit: "commit",
        RunQuery: "runQuery"
    };

    /**
     * Maps RPC names to the corresponding REST endpoint name.
     *
     * We use array notation to avoid mangling.
     */ class Ec$1 extends 
    /**
     * Base class for all Rest-based connections to the backend (WebChannel and
     * HTTP).
     */
    class {
        constructor(t) {
            this.Ml = t, this.rt = t.rt;
            const e = t.ssl ? "https" : "http";
            this.kl = e + "://" + t.host, this.Ol = "projects/" + this.rt.projectId + "/databases/" + this.rt.database + "/documents";
        }
        gu(t, e, n, s) {
            const i = this.Fl(t, e);
            p$1("RestConnection", "Sending: ", i, n);
            const r = {};
            return this.$l(r, s), this.Ll(t, i, r, n).then((t => (p$1("RestConnection", "Received: ", t), 
            t)), (e => {
                throw v$1("RestConnection", t + " failed with error: ", e, "url: ", i, "request:", n), 
                e;
            }));
        }
        yu(t, e, n, s) {
            // The REST API automatically aggregates all of the streamed results, so we
            // can just use the normal invoke() method.
            return this.gu(t, e, n, s);
        }
        /**
         * Modifies the headers for a request, adding any authorization token if
         * present and any additional headers for the request.
         */    $l(t, e) {
            if (t["X-Goog-Api-Client"] = "gl-js/ fire/8.1.1", 
            // Content-Type: text/plain will avoid preflight requests which might
            // mess with CORS and redirects by proxies. If we add custom headers
            // we will need to change this code to potentially use the $httpOverwrite
            // parameter supported by ESF to avoid triggering preflight requests.
            t["Content-Type"] = "text/plain", e) for (const n in e.h) e.h.hasOwnProperty(n) && (t[n] = e.h[n]);
        }
        Fl(t, e) {
            const n = wc$1[t];
            return `${this.kl}/v1/${e}:${n}`;
        }
    }
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ {
        constructor(t) {
            super(t), this.forceLongPolling = t.forceLongPolling, this.ot = t.ot;
        }
        Ll(t, e, n, s) {
            return new Promise(((i, r) => {
                const o = new XhrIo;
                o.listenOnce(EventType.COMPLETE, (() => {
                    try {
                        switch (o.getLastErrorCode()) {
                          case ErrorCode.NO_ERROR:
                            const e = o.getResponseJson();
                            p$1("Connection", "XHR received:", JSON.stringify(e)), i(e);
                            break;

                          case ErrorCode.TIMEOUT:
                            p$1("Connection", 'RPC "' + t + '" timed out'), r(new M$1(x$1.DEADLINE_EXCEEDED, "Request time out"));
                            break;

                          case ErrorCode.HTTP_ERROR:
                            const n = o.getStatus();
                            if (p$1("Connection", 'RPC "' + t + '" failed with status:', n, "response text:", o.getResponseText()), 
                            n > 0) {
                                const t = o.getResponseJson().error;
                                if (t && t.status && t.message) {
                                    const e = function(t) {
                                        const e = t.toLowerCase().replace(/_/g, "-");
                                        return Object.values(x$1).indexOf(e) >= 0 ? e : x$1.UNKNOWN;
                                    }(t.status);
                                    r(new M$1(e, t.message));
                                } else r(new M$1(x$1.UNKNOWN, "Server responded with status " + o.getStatus()));
                            } else 
                            // If we received an HTTP_ERROR but there's no status code,
                            // it's most probably a connection issue
                            r(new M$1(x$1.UNAVAILABLE, "Connection failed."));
                            break;

                          default:
                            D$1();
                        }
                    } finally {
                        p$1("Connection", 'RPC "' + t + '" completed.');
                    }
                }));
                const c = JSON.stringify(s);
                o.send(e, "POST", c, n, 15);
            }));
        }
        _u(t, e) {
            const n = [ this.kl, "/", "google.firestore.v1.Firestore", "/", t, "/channel" ], s = createWebChannelTransport(), i = getStatEventTarget(), r = {
                // Required for backend stickiness, routing behavior is based on this
                // parameter.
                httpSessionIdParam: "gsessionid",
                initMessageHeaders: {},
                messageUrlParams: {
                    // This param is used to improve routing and project isolation by the
                    // backend and must be included in every request.
                    database: `projects/${this.rt.projectId}/databases/${this.rt.database}`
                },
                sendRawJson: !0,
                supportsCrossDomainXhr: !0,
                internalChannelParams: {
                    // Override the default timeout (randomized between 10-20 seconds) since
                    // a large write batch on a slow internet connection may take a long
                    // time to send to the backend. Rather than have WebChannel impose a
                    // tight timeout which could lead to infinite timeouts and retries, we
                    // set it very large (5-10 minutes) and rely on the browser's builtin
                    // timeouts to kick in if the request isn't working.
                    forwardChannelRequestTimeoutMs: 6e5
                },
                forceLongPolling: this.forceLongPolling,
                detectBufferingProxy: this.ot
            };
            this.$l(r.initMessageHeaders, e), 
            // Sending the custom headers we just added to request.initMessageHeaders
            // (Authorization, etc.) will trigger the browser to make a CORS preflight
            // request because the XHR will no longer meet the criteria for a "simple"
            // CORS request:
            // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
            // Therefore to avoid the CORS preflight request (an extra network
            // roundtrip), we use the httpHeadersOverwriteParam option to specify that
            // the headers should instead be encoded into a special "$httpHeaders" query
            // parameter, which is recognized by the webchannel backend. This is
            // formally defined here:
            // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32
            // TODO(b/145624756): There is a backend bug where $httpHeaders isn't respected if the request
            // doesn't have an Origin header. So we have to exclude a few browser environments that are
            // known to (sometimes) not include an Origin. See
            // https://github.com/firebase/firebase-js-sdk/issues/1491.
            isMobileCordova() || isReactNative() || isElectron() || isIE() || isUWP() || isBrowserExtension() || (r.httpHeadersOverwriteParam = "$httpHeaders");
            const o = n.join("");
            p$1("Connection", "Creating WebChannel: " + o, r);
            const c = s.createWebChannel(o, r);
            // WebChannel supports sending the first message with the handshake - saving
            // a network round trip. However, it will have to call send in the same
            // JS event loop as open. In order to enforce this, we delay actually
            // opening the WebChannel until send is called. Whether we have called
            // open is tracked with this variable.
                    let d = !1, w = !1;
            // A flag to determine whether the stream was closed (by us or through an
            // error/close event) to avoid delivering multiple close events or sending
            // on a closed stream
                    const E = new dc$1({
                pl: t => {
                    w ? p$1("Connection", "Not sending because WebChannel is closed:", t) : (d || (p$1("Connection", "Opening WebChannel transport."), 
                    c.open(), d = !0), p$1("Connection", "WebChannel sending:", t), c.send(t));
                },
                bl: () => c.close()
            }), P = (t, e, n) => {
                // TODO(dimond): closure typing seems broken because WebChannel does
                // not implement goog.events.Listenable
                t.listen(e, (t => {
                    try {
                        n(t);
                    } catch (t) {
                        setTimeout((() => {
                            throw t;
                        }), 0);
                    }
                }));
            };
            // Closure events are guarded and exceptions are swallowed, so catch any
            // exception and rethrow using a setTimeout so they become visible again.
            // Note that eventually this function could go away if we are confident
            // enough the code is exception free.
                    return P(c, WebChannel.EventType.OPEN, (() => {
                w || p$1("Connection", "WebChannel transport opened.");
            })), P(c, WebChannel.EventType.CLOSE, (() => {
                w || (w = !0, p$1("Connection", "WebChannel transport closed"), E.Nl());
            })), P(c, WebChannel.EventType.ERROR, (t => {
                w || (w = !0, v$1("Connection", "WebChannel transport errored:", t), E.Nl(new M$1(x$1.UNAVAILABLE, "The operation could not be completed")));
            })), P(c, WebChannel.EventType.MESSAGE, (t => {
                var e;
                if (!w) {
                    const n = t.data[0];
                    C(!!n);
                    // TODO(b/35143891): There is a bug in One Platform that caused errors
                    // (and only errors) to be wrapped in an extra array. To be forward
                    // compatible with the bug we need to check either condition. The latter
                    // can be removed once the fix has been rolled out.
                    // Use any because msgData.error is not typed.
                    const s = n, i = s.error || (null === (e = s[0]) || void 0 === e ? void 0 : e.error);
                    if (i) {
                        p$1("Connection", "WebChannel received error:", i);
                        // error.status will be a string like 'OK' or 'NOT_FOUND'.
                        const t = i.status;
                        let e = function(t) {
                            // lookup by string
                            // eslint-disable-next-line @typescript-eslint/no-explicit-any
                            const e = _t[t];
                            if (void 0 !== e) return wt(e);
                        }(t), n = i.message;
                        void 0 === e && (e = x$1.INTERNAL, n = "Unknown error status: " + t + " with message " + i.message), 
                        // Mark closed so no further events are propagated
                        w = !0, E.Nl(new M$1(e, n)), c.close();
                    } else p$1("Connection", "WebChannel received:", n), E.xl(n);
                }
            })), P(i, Event.STAT_EVENT, (t => {
                t.stat === Stat.PROXY ? p$1("Connection", "Detected buffering proxy") : t.stat === Stat.NOPROXY && p$1("Connection", "Detected no buffering proxy");
            })), setTimeout((() => {
                // Technically we could/should wait for the WebChannel opened event,
                // but because we want to send the first message with the WebChannel
                // handshake we pretend the channel opened here (asynchronously), and
                // then delay the actual open until the first message is sent.
                E.Cl();
            }), 0), E;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // References to `window` are guarded by BrowserConnectivityMonitor.isAvailable()
    /* eslint-disable no-restricted-globals */
    /**
     * Browser implementation of ConnectivityMonitor.
     */
    class Tc$1 {
        constructor() {
            this.Bl = () => this.ql(), this.Ul = () => this.Kl(), this.Ql = [], this.Wl();
        }
        Ku(t) {
            this.Ql.push(t);
        }
        Ic() {
            window.removeEventListener("online", this.Bl), window.removeEventListener("offline", this.Ul);
        }
        Wl() {
            window.addEventListener("online", this.Bl), window.addEventListener("offline", this.Ul);
        }
        ql() {
            p$1("ConnectivityMonitor", "Network connectivity changed: AVAILABLE");
            for (const t of this.Ql) t(0 /* AVAILABLE */);
        }
        Kl() {
            p$1("ConnectivityMonitor", "Network connectivity changed: UNAVAILABLE");
            for (const t of this.Ql) t(1 /* UNAVAILABLE */);
        }
        // TODO(chenbrian): Consider passing in window either into this component or
        // here for testing via FakeWindow.
        /** Checks that all used attributes of window are available. */
        static Gs() {
            return "undefined" != typeof window && void 0 !== window.addEventListener && void 0 !== window.removeEventListener;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class Ic$1 {
        Ku(t) {
            // No-op.
        }
        Ic() {
            // No-op.
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Initializes the WebChannelConnection for the browser. */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provides all components needed for Firestore with in-memory persistence.
     * Uses EagerGC garbage collection.
     */
    class mc$1 {
        constructor() {
            this.synchronizeTabs = !1;
        }
        async initialize(t) {
            this.serializer = Ps(t.Ml.rt), this.Bh = this.jl(t), this.persistence = this.Gl(t), 
            await this.persistence.start(), this.zl = this.Hl(t), this.ku = this.Jl(t);
        }
        Hl(t) {
            return null;
        }
        Jl(t) {
            return hr(this.persistence, new Js, t.Yl, this.serializer);
        }
        Gl(t) {
            return new lc$1(fc$1.Vl, this.serializer);
        }
        jl(t) {
            return new Po;
        }
        async terminate() {
            this.zl && this.zl.stop(), await this.Bh.Ic(), await this.persistence.Ic();
        }
    }

    /**
     * Provides all components needed for Firestore with IndexedDB persistence.
     */ class Ac$1 extends mc$1 {
        constructor(t, e, n) {
            super(), this.Xl = t, this.cacheSizeBytes = e, this.forceOwnership = n, this.synchronizeTabs = !1;
        }
        async initialize(t) {
            await super.initialize(t), await Rr(this.ku), await this.Xl.initialize(this, t), 
            // Enqueue writes from a previous session
            await rc$1(this.Xl.ba), await Qr(this.Xl.$h);
        }
        Jl(t) {
            return hr(this.persistence, new Js, t.Yl, this.serializer);
        }
        Hl(t) {
            const e = this.persistence.Dr.cr;
            return new zs(e, t.di);
        }
        Gl(t) {
            const e = ur(t.Ml.rt, t.Ml.persistenceKey), n = void 0 !== this.cacheSizeBytes ? Gs.er(this.cacheSizeBytes) : Gs.ir;
            return new sr(this.synchronizeTabs, e, t.clientId, n, t.di, Ls(), Bs(), this.serializer, this.Bh, !!this.forceOwnership);
        }
        jl(t) {
            return new Po;
        }
    }

    /**
     * Provides all components needed for Firestore with multi-tab IndexedDB
     * persistence.
     *
     * In the legacy client, this provider is used to provide both multi-tab and
     * non-multi-tab persistence since we cannot tell at build time whether
     * `synchronizeTabs` will be enabled.
     */ class Rc$1 extends Ac$1 {
        constructor(t, e) {
            super(t, e, /* forceOwnership= */ !1), this.Xl = t, this.cacheSizeBytes = e, this.synchronizeTabs = !0;
        }
        async initialize(t) {
            await super.initialize(t);
            const e = this.Xl.ba;
            this.Bh instanceof Ro && (this.Bh.ba = {
                Eh: Yo.bind(null, e),
                Th: nc$1.bind(null, e),
                Ih: sc$1.bind(null, e),
                Vc: ec$1.bind(null, e),
                wh: Jo.bind(null, e)
            }, await this.Bh.start()), 
            // NOTE: This will immediately call the listener, so we make sure to
            // set it after localStore / remoteStore are started.
            await this.persistence.ic((async t => {
                await Xo(this.Xl.ba, t), this.zl && (t && !this.zl.lr ? this.zl.start(this.ku) : t || this.zl.stop());
            }));
        }
        jl(t) {
            const e = Ls();
            if (!Ro.Gs(e)) throw new M$1(x$1.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
            const n = ur(t.Ml.rt, t.Ml.persistenceKey);
            return new Ro(e, t.di, n, t.clientId, t.Yl);
        }
    }

    /**
     * Initializes and wires the components that are needed to interface with the
     * network.
     */ class Pc$1 {
        async initialize(t, e) {
            this.ku || (this.ku = t.ku, this.Bh = t.Bh, this.Ou = this.Zl(e), this.$h = this.t_(e), 
            this.Lh = this.e_(e), this.ba = this.n_(e, 
            /* startAsPrimary=*/ !t.synchronizeTabs), this.Bh.pu = t => Mo(this.ba, t, 1 /* SharedClientState */), 
            this.$h.Fu.s_ = Go.bind(null, this.ba), await Zr(this.$h, this.ba.Zh));
        }
        e_(t) {
            return new so;
        }
        Zl(t) {
            const e = Ps(t.Ml.rt), n = (s = t.Ml, new Ec$1(s));
            var s;
            /** Return the Platform-specific connectivity monitor. */        return function(t, e, n) {
                return new pr(t, e, n);
            }(t.credentials, n, e);
        }
        t_(t) {
            return e = this.ku, n = this.Ou, s = t.di, i = t => Mo(this.ba, t, 0 /* RemoteStore */), 
            r = Tc$1.Gs() ? new Tc$1 : new Ic$1, new vr(e, n, s, i, r);
            var e, n, s, i, r;
            /** Re-enables the network. Idempotent. */    }
        n_(t, e) {
            return function(t, e, n, 
            // PORTING NOTE: Manages state synchronization in multi-tab environments.
            s, i, r, o) {
                const c = new vo(t, e, n, s, i, r);
                return o && (c.Xh = !0), c;
            }(this.ku, this.$h, this.Lh, this.Bh, t.Yl, t.qh, e);
        }
        terminate() {
            return async function(t) {
                const e = N$1(t);
                p$1("RemoteStore", "RemoteStore shutting down."), e.Bu.add(5 /* Shutdown */), await Dr(e), 
                e.Uu.Ic(), 
                // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
                // triggering spurious listener events with cached data, etc.
                e.Qu.set("Unknown" /* Unknown */);
            }(this.$h);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /*
     * A wrapper implementation of Observer<T> that will dispatch events
     * asynchronously. To allow immediate silencing, a mute call is added which
     * causes events scheduled to no longer be raised.
     */ class Vc$1 {
        constructor(t) {
            this.observer = t, 
            /**
             * When set to true, will not raise future events. Necessary to deal with
             * async detachment of listener.
             */
            this.muted = !1;
        }
        next(t) {
            this.observer.next && this.i_(this.observer.next, t);
        }
        error(t) {
            this.observer.error ? this.i_(this.observer.error, t) : console.error("Uncaught Error in snapshot listener:", t);
        }
        r_() {
            this.muted = !0;
        }
        i_(t, e) {
            this.muted || setTimeout((() => {
                this.muted || t(e);
            }), 0);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function gc$1(t, e, n) {
        if (!n) throw new M$1(x$1.INVALID_ARGUMENT, `Function ${t}() cannot be called with an empty ${e}.`);
    }

    /**
     * Validates that two boolean options are not set at the same time.
     */
    /**
     * Validates that `path` refers to a document (indicated by the fact it contains
     * an even numbers of segments).
     */
    function yc$1(t) {
        if (!Y$1.st(t)) throw new M$1(x$1.INVALID_ARGUMENT, `Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`);
    }

    /**
     * Validates that `path` refers to a collection (indicated by the fact it
     * contains an odd numbers of segments).
     */ function pc$1(t) {
        if (Y$1.st(t)) throw new M$1(x$1.INVALID_ARGUMENT, `Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`);
    }

    /**
     * Returns true if it's a non-null object without a custom prototype
     * (i.e. excludes Array, Date, etc.).
     */
    /** Returns a string describing the type / value of the provided input. */
    function bc$1(t) {
        if (void 0 === t) return "undefined";
        if (null === t) return "null";
        if ("string" == typeof t) return t.length > 20 && (t = t.substring(0, 20) + "..."), 
        JSON.stringify(t);
        if ("number" == typeof t || "boolean" == typeof t) return "" + t;
        if ("object" == typeof t) {
            if (t instanceof Array) return "an array";
            {
                const e = 
                /** Hacky method to try to get the constructor name for an object. */
                function(t) {
                    if (t.constructor) {
                        const e = /function\s+([^\s(]+)\s*\(/.exec(t.constructor.toString());
                        if (e && e.length > 1) return e[1];
                    }
                    return null;
                }
                /**
     * Casts `obj` to `T`, optionally unwrapping Compat types to expose the
     * underlying instance. Throws if  `obj` is not an instance of `T`.
     *
     * This cast is used in the Lite and Full SDK to verify instance types for
     * arguments passed to the public API.
     */ (t);
                return e ? `a custom ${e} object` : "an object";
            }
        }
        return "function" == typeof t ? "a function" : D$1();
    }

    function vc$1(t, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    e) {
        if ("_delegate" in t && (
        // Unwrap Compat types
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        t = t.o_), !(t instanceof e)) {
            if (e.name === t.constructor.name) throw new M$1(x$1.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
            {
                const n = bc$1(t);
                throw new M$1(x$1.INVALID_ARGUMENT, `Expected type '${e.name}', but it was: ${n}`);
            }
        }
        return t;
    }

    function Sc$1(t, e) {
        if (e <= 0) throw new M$1(x$1.INVALID_ARGUMENT, `Function ${t}() requires a positive number, but it was: ${e}.`);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Sentinel values that can be used when writing document fields with `set()`
     * or `update()`.
     */ class Dc$1 {
        /**
         * @param _methodName - The public API endpoint that returns this class.
         */
        constructor(t) {
            this._methodName = t;
        }
    }

    /**
     * Returns a sentinel for use with {@link updateDoc} or
     * {@link setDoc} with `{merge: true}` to mark a field for deletion.
     */ function Cc$1() {
        return new Oc$1("deleteField");
    }

    /**
     * Returns a sentinel used with {@link setDoc} or {@link updateDoc} to
     * include a server-generated timestamp in the written data.
     */ function Nc$1() {
        return new $c$1("serverTimestamp");
    }

    /**
     * Returns a special value that can be used with {@link setDoc} or {@link
     * updateDoc} that tells the server to union the given elements with any array
     * value that already exists on the server. Each specified element that doesn't
     * already exist in the array will be added to the end. If the field being
     * modified is not already an array it will be overwritten with an array
     * containing exactly the specified elements.
     *
     * @param elements - The elements to union into the array.
     * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
     * `updateDoc()`.
     */ function xc(...t) {
        // NOTE: We don't actually parse the data until it's used in set() or
        // update() since we'd need the Firestore instance to do this.
        return new Lc$1("arrayUnion", t);
    }

    /**
     * Returns a special value that can be used with {@link (setDoc:1)} or {@link
     * updateDoc} that tells the server to remove the given elements from any
     * array value that already exists on the server. All instances of each element
     * specified will be removed from the array. If the field being modified is not
     * already an array it will be overwritten with an empty array.
     *
     * @param elements - The elements to remove from the array.
     * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
     * `updateDoc()`
     */ function Mc$1(...t) {
        // NOTE: We don't actually parse the data until it's used in set() or
        // update() since we'd need the Firestore instance to do this.
        return new Bc$1("arrayRemove", t);
    }

    /**
     * Returns a special value that can be used with {@link setDoc} or {@link
     * updateDoc} that tells the server to increment the field's current value by
     * the given value.
     *
     * If either the operand or the current field value uses floating point
     * precision, all arithmetic follows IEEE 754 semantics. If both values are
     * integers, values outside of JavaScript's safe number range
     * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to
     * precision loss. Furthermore, once processed by the Firestore backend, all
     * integer operations are capped between -2^63 and 2^63-1.
     *
     * If the current field value is not of type `number`, or if the field does not
     * yet exist, the transformation sets the field to the given value.
     *
     * @param n - The value to increment by.
     * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
     * `updateDoc()`
     */ function kc$1(t) {
        return new qc$1("increment", t);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class Oc$1 extends Dc$1 {
        c_(t) {
            if (2 /* MergeSet */ !== t.u_) throw 1 /* Update */ === t.u_ ? t.a_(this._methodName + "() can only appear at the top level of your update data") : t.a_(this._methodName + "() cannot be used with set() unless you pass {merge:true}");
            // No transform to add for a delete, but we need to add it to our
            // fieldMask so it gets deleted.
            return t.en.push(t.path), null;
        }
        isEqual(t) {
            return t instanceof Oc$1;
        }
    }

    /**
     * Creates a child context for parsing SerializableFieldValues.
     *
     * This is different than calling `ParseContext.contextWith` because it keeps
     * the fieldTransforms and fieldMask separate.
     *
     * The created context has its `dataSource` set to `UserDataSource.Argument`.
     * Although these values are used with writes, any elements in these FieldValues
     * are not considered writes since they cannot contain any FieldValue sentinels,
     * etc.
     *
     * @param fieldValue - The sentinel FieldValue for which to create a child
     *     context.
     * @param context - The parent context.
     * @param arrayElement - Whether or not the FieldValue has an array.
     */ function Fc$1(t, e, n) {
        return new ha$1({
            u_: 3 /* Argument */ ,
            h_: e.settings.h_,
            methodName: t._methodName,
            l_: n
        }, e.rt, e.serializer, e.ignoreUndefinedProperties);
    }

    class $c$1 extends Dc$1 {
        c_(t) {
            return new ln(t.path, new en);
        }
        isEqual(t) {
            return t instanceof $c$1;
        }
    }

    class Lc$1 extends Dc$1 {
        constructor(t, e) {
            super(t), this.__ = e;
        }
        c_(t) {
            const e = Fc$1(this, t, 
            /*array=*/ !0), n = this.__.map((t => Ea$1(t, e))), s = new nn(n);
            return new ln(t.path, s);
        }
        isEqual(t) {
            // TODO(mrschmidt): Implement isEquals
            return this === t;
        }
    }

    class Bc$1 extends Dc$1 {
        constructor(t, e) {
            super(t), this.__ = e;
        }
        c_(t) {
            const e = Fc$1(this, t, 
            /*array=*/ !0), n = this.__.map((t => Ea$1(t, e))), s = new rn(n);
            return new ln(t.path, s);
        }
        isEqual(t) {
            // TODO(mrschmidt): Implement isEquals
            return this === t;
        }
    }

    class qc$1 extends Dc$1 {
        constructor(t, e) {
            super(t), this.f_ = e;
        }
        c_(t) {
            const e = new cn(t.serializer, Te(t.serializer, this.f_));
            return new ln(t.path, e);
        }
        isEqual(t) {
            // TODO(mrschmidt): Implement isEquals
            return this === t;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An immutable object representing a geographic location in Firestore. The
     * location is represented as latitude/longitude pair.
     *
     * Latitude values are in the range of [-90, 90].
     * Longitude values are in the range of [-180, 180].
     */ class Uc$1 {
        /**
         * Creates a new immutable `GeoPoint` object with the provided latitude and
         * longitude values.
         * @param latitude - The latitude as number between -90 and 90.
         * @param longitude - The longitude as number between -180 and 180.
         */
        constructor(t, e) {
            if (!isFinite(t) || t < -90 || t > 90) throw new M$1(x$1.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + t);
            if (!isFinite(e) || e < -180 || e > 180) throw new M$1(x$1.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + e);
            this.d_ = t, this.w_ = e;
        }
        /**
         * The latitude of this `GeoPoint` instance.
         */    get latitude() {
            return this.d_;
        }
        /**
         * The longitude of this `GeoPoint` instance.
         */    get longitude() {
            return this.w_;
        }
        /**
         * Returns true if this `GeoPoint` is equal to the provided one.
         *
         * @param other - The `GeoPoint` to compare against.
         * @returns true if this `GeoPoint` is equal to the provided one.
         */    isEqual(t) {
            return this.d_ === t.d_ && this.w_ === t.w_;
        }
        toJSON() {
            return {
                latitude: this.d_,
                longitude: this.w_
            };
        }
        /**
         * Actually private to JS consumers of our API, so this function is prefixed
         * with an underscore.
         */    v(t) {
            return U$1(this.d_, t.d_) || U$1(this.w_, t.w_);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An immutable object representing an array of bytes.
     */ class Kc$1 {
        /** @hideconstructor */
        constructor(t) {
            this.E_ = t;
        }
        /**
         * Creates a new `Bytes` object from the given Base64 string, converting it to
         * bytes.
         *
         * @param base64 - The Base64 string used to create the `Bytes` object.
         */    static fromBase64String(t) {
            try {
                return new Kc$1(at.fromBase64String(t));
            } catch (t) {
                throw new M$1(x$1.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + t);
            }
        }
        /**
         * Creates a new `Bytes` object from the given Uint8Array.
         *
         * @param array - The Uint8Array used to create the `Bytes` object.
         */    static fromUint8Array(t) {
            return new Kc$1(at.fromUint8Array(t));
        }
        /**
         * Returns the underlying bytes as a Base64-encoded string.
         *
         * @returns The Base64-encoded string created from the `Bytes` object.
         */    toBase64() {
            return this.E_.toBase64();
        }
        /**
         * Returns the underlying bytes in a new `Uint8Array`.
         *
         * @returns The Uint8Array created from the `Bytes` object.
         */    toUint8Array() {
            return this.E_.toUint8Array();
        }
        /**
         * Returns a string representation of the `Bytes` object.
         *
         * @returns A string representation of the `Bytes` object.
         */    toString() {
            return "Bytes(base64: " + this.toBase64() + ")";
        }
        /**
         * Returns true if this `Bytes` object is equal to the provided one.
         *
         * @param other - The `Bytes` object to compare against.
         * @returns true if this `Bytes` object is equal to the provided one.
         */    isEqual(t) {
            return this.E_.isEqual(t.E_);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A class implemented by all API types of the legacy Firestore API which
     * contains a reference to the API type in the firestore-exp API. All internal
     * code unwraps these references, which allows us to only use firestore-exp
     * types in the SDK.
     */ class Qc$1 {
        constructor(t) {
            this.o_ = t;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const Wc$1 = new Map;

    // The components module manages the lifetime of dependencies of the Firestore
    // client. Dependencies can be lazily constructed and only one exists per
    // Firestore instance.
    /**
     * An instance map that ensures only one Datastore exists per Firestore
     * instance.
     */
    /**
     * A concrete type describing all the values that can be applied via a
     * user-supplied firestore.Settings object. This is a separate type so that
     * defaults can be supplied and the value can be checked for equality.
     */
    class jc$1 {
        constructor(t) {
            var e;
            if (void 0 === t.host) {
                if (void 0 !== t.ssl) throw new M$1(x$1.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
                this.host = "firestore.googleapis.com", this.ssl = true;
            } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;
            if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, 
            void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040; else {
                if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new M$1(x$1.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
                this.cacheSizeBytes = t.cacheSizeBytes;
            }
            this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, 
            function(t, e, n, s) {
                if (!0 === e && !0 === s) throw new M$1(x$1.INVALID_ARGUMENT, `${t} and ${n} cannot be used together.`);
            }("experimentalForceLongPolling", t.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", t.experimentalAutoDetectLongPolling);
        }
        isEqual(t) {
            return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties;
        }
    }

    /**
     * The Cloud Firestore service interface.
     *
     * Do not call this constructor directly. Instead, use {@link getFirestore}.
     */ class Gc$1 {
        /** @hideconstructor */
        constructor(t, e) {
            this.T_ = "(lite)", this.I_ = new jc$1({}), this.m_ = !1, t instanceof Z$1 ? (this.A_ = t, 
            this.R_ = new O$1) : (this.P_ = t, this.A_ = function(t) {
                if (!Object.prototype.hasOwnProperty.apply(t.options, [ "projectId" ])) throw new M$1(x$1.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
                return new Z$1(t.options.projectId);
            }(t), this.R_ = new F$1(e));
        }
        /**
         * The {@link FirebaseApp} associated with this `Firestore` service
         * instance.
         */    get app() {
            if (!this.P_) throw new M$1(x$1.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
            return this.P_;
        }
        get V_() {
            return this.m_;
        }
        get g_() {
            return void 0 !== this.y_;
        }
        p_(t) {
            if (this.m_) throw new M$1(x$1.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
            this.I_ = new jc$1(t), void 0 !== t.credentials && (this.R_ = function(t) {
                if (!t) return new O$1;
                switch (t.type) {
                  case "gapi":
                    const e = t.client;
                    // Make sure this really is a Gapi client.
                                    return C(!("object" != typeof e || null === e || !e.auth || !e.auth.getAuthHeaderValueForFirstParty)), 
                    new L$1(e, t.sessionIndex || "0");

                  case "provider":
                    return t.client;

                  default:
                    throw new M$1(x$1.INVALID_ARGUMENT, "makeCredentialsProvider failed due to invalid credential type");
                }
            }(t.credentials));
        }
        b_() {
            return this.I_;
        }
        v_() {
            return this.m_ = !0, this.I_;
        }
        _delete() {
            return this.y_ || (this.y_ = this.S_()), this.y_;
        }
        /**
         * Terminates all components used by this client. Subclasses can override
         * this method to clean up their own dependencies, but must also call this
         * method.
         *
         * Only ever called once.
         */    S_() {
            /**
     * Removes all components associated with the provided instance. Must be called
     * when the `Firestore` instance is terminated.
     */
            return function(t) {
                const e = Wc$1.get(t);
                e && (p$1("ComponentProvider", "Removing Datastore"), Wc$1.delete(t), e.terminate());
            }
            /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
            // settings() defaults:
            (this), Promise.resolve();
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A `FieldPath` refers to a field in a document. The path may consist of a
     * single field name (referring to a top-level field in the document), or a
     * list of field names (referring to a nested field in the document).
     *
     * Create a `FieldPath` by providing field names. If more than one field
     * name is provided, the path will point to a nested field in a document.
     */
    class zc$1 {
        /**
         * Creates a FieldPath from the provided field names. If more than one field
         * name is provided, the path will point to a nested field in a document.
         *
         * @param fieldNames - A list of field names.
         */
        constructor(...t) {
            for (let e = 0; e < t.length; ++e) if (0 === t[e].length) throw new M$1(x$1.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
            this.D_ = new J$1(t);
        }
        /**
         * Returns true if this `FieldPath` is equal to the provided one.
         *
         * @param other - The `FieldPath` to compare against.
         * @returns true if this `FieldPath` is equal to the provided one.
         */    isEqual(t) {
            return this.D_.isEqual(t.D_);
        }
    }

    /**
     * Returns a special sentinel `FieldPath` to refer to the ID of a document.
     * It can be used in queries to sort or filter by the document ID.
     */ function Hc$1() {
        return new zc$1("__name__");
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A `DocumentSnapshot` contains data read from a document in your Firestore
     * database. The data can be extracted with `.data()` or `.get(<field>)` to
     * get a specific field.
     *
     * For a `DocumentSnapshot` that points to a non-existing document, any data
     * access will return 'undefined'. You can use the `exists()` method to
     * explicitly verify a document's existence.
     */ class Jc$1 extends bu {
        /** @hideconstructor protected */
        constructor(t, e, n, s, i, r) {
            super(t, e, n, s, r), this.C_ = t, this.N_ = t, this.metadata = i;
        }
        /**
         * Property of the `DocumentSnapshot` that signals whether or not the data
         * exists. True if the document exists.
         */    exists() {
            return super.exists();
        }
        /**
         * Retrieves all fields in the document as an `Object`. Returns `undefined` if
         * the document doesn't exist.
         *
         * By default, `FieldValue.serverTimestamp()` values that have not yet been
         * set to their final value will be returned as `null`. You can override
         * this by passing an options object.
         *
         * @param options - An options object to configure how data is retrieved from
         * the snapshot (for example the desired behavior for server timestamps that
         * have not yet been set to their final value).
         * @returns An `Object` containing all fields in the document or `undefined` if
         * the document doesn't exist.
         */    data(t = {}) {
            if (this.x_) {
                if (this.M_) {
                    // We only want to use the converter and create a new DocumentSnapshot
                    // if a converter has been provided.
                    const e = new Yc$1(this.C_, this.k_, this.O_, this.x_, this.metadata, 
                    /* converter= */ null);
                    return this.M_.fromFirestore(e, t);
                }
                return this.k_.F_(this.x_.En(), t.serverTimestamps);
            }
        }
        /**
         * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
         * document or field doesn't exist.
         *
         * By default, a `FieldValue.serverTimestamp()` that has not yet been set to
         * its final value will be returned as `null`. You can override this by
         * passing an options object.
         *
         * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
         * field.
         * @param options - An options object to configure how the field is retrieved
         * from the snapshot (for example the desired behavior for server timestamps
         * that have not yet been set to their final value).
         * @returns The data at the specified field location or undefined if no such
         * field exists in the document.
         */
        // We are using `any` here to avoid an explicit cast by our users.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        get(t, e = {}) {
            if (this.x_) {
                const n = this.x_.data().field(Su("DocumentSnapshot.get", t));
                if (null !== n) return this.k_.F_(n, e.serverTimestamps);
            }
        }
    }

    /**
     * A `QueryDocumentSnapshot` contains data read from a document in your
     * Firestore database as part of a query. The document is guaranteed to exist
     * and its data can be extracted with `.data()` or `.get(<field>)` to get a
     * specific field.
     *
     * A `QueryDocumentSnapshot` offers the same API surface as a
     * `DocumentSnapshot`. Since query results contain only existing documents, the
     * `exists` property will always be true and `data()` will never return
     * 'undefined'.
     */ class Yc$1 extends Jc$1 {
        /**
         * Retrieves all fields in the document as an `Object`.
         *
         * By default, `FieldValue.serverTimestamp()` values that have not yet been
         * set to their final value will be returned as `null`. You can override
         * this by passing an options object.
         *
         * @override
         * @param options - An options object to configure how data is retrieved from
         * the snapshot (for example the desired behavior for server timestamps that
         * have not yet been set to their final value).
         * @returns An `Object` containing all fields in the document.
         */
        data(t = {}) {
            return super.data(t);
        }
    }

    /**
     * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects
     * representing the results of a query. The documents can be accessed as an
     * array via the `docs` property or enumerated using the `forEach` method. The
     * number of documents can be determined via the `empty` and `size`
     * properties.
     */ class Xc$1 {
        /** @hideconstructor */
        constructor(t, e, n, s) {
            this.C_ = t, this.k_ = e, this.L_ = s, this.metadata = new gu(s.hasPendingWrites, s.fromCache), 
            this.query = n;
        }
        /** An array of all the documents in the `QuerySnapshot`. */    get docs() {
            const t = [];
            return this.forEach((e => t.push(e))), t;
        }
        /** The number of documents in the `QuerySnapshot`. */    get size() {
            return this.L_.docs.size;
        }
        /** True if there are no documents in the `QuerySnapshot`. */    get empty() {
            return 0 === this.size;
        }
        /**
         * Enumerates all of the documents in the `QuerySnapshot`.
         *
         * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
         * each document in the snapshot.
         * @param thisArg - The `this` binding for the callback.
         */    forEach(t, e) {
            this.L_.docs.forEach((n => {
                t.call(e, new Yc$1(this.C_, this.k_, n.key, n, new gu(this.L_.ee.has(n.key), this.L_.fromCache), this.query.M_));
            }));
        }
        /**
         * Returns an array of the documents changes since the last snapshot. If this
         * is the first snapshot, all documents will be in the list as 'added'
         * changes.
         *
         * @param options - `SnapshotListenOptions` that control whether metadata-only
         * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger
         * snapshot events.
         */    docChanges(t = {}) {
            const e = !!t.includeMetadataChanges;
            if (e && this.L_.se) throw new M$1(x$1.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
            return this.B_ && this.q_ === e || (this.B_ = 
            /** Calculates the array of DocumentChanges for a given ViewSnapshot. */
            function(t, e) {
                if (t.L_.te.q()) {
                    // Special case the first snapshot because index calculation is easy and
                    // fast
                    let e, n = 0;
                    return t.L_.docChanges.map((s => {
                        const i = new Yc$1(t.C_, t.k_, s.doc.key, s.doc, new gu(t.L_.ee.has(s.doc.key), t.L_.fromCache), t.query.M_);
                        return e = s.doc, {
                            type: "added",
                            doc: i,
                            oldIndex: -1,
                            newIndex: n++
                        };
                    }));
                }
                {
                    // A DocumentSet that is updated incrementally as changes are applied to use
                    // to lookup the index of a document.
                    let n = t.L_.te;
                    return t.L_.docChanges.filter((t => e || 3 /* Metadata */ !== t.type)).map((e => {
                        const s = new Yc$1(t.C_, t.k_, e.doc.key, e.doc, new gu(t.L_.ee.has(e.doc.key), t.L_.fromCache), t.query.M_);
                        let i = -1, r = -1;
                        return 0 /* Added */ !== e.type && (i = n.indexOf(e.doc.key), n = n.delete(e.doc.key)), 
                        1 /* Removed */ !== e.type && (n = n.add(e.doc), r = n.indexOf(e.doc.key)), {
                            type: Zc$1(e.type),
                            doc: s,
                            oldIndex: i,
                            newIndex: r
                        };
                    }));
                }
            }(this, e), this.q_ = e), this.B_;
        }
    }

    function Zc$1(t) {
        switch (t) {
          case 0 /* Added */ :
            return "added";

          case 2 /* Modified */ :
          case 3 /* Metadata */ :
            return "modified";

          case 1 /* Removed */ :
            return "removed";

          default:
            return D$1();
        }
    }

    // TODO(firestoreexp): Add tests for snapshotEqual with different snapshot
    // metadata
    /**
     * Returns true if the provided snapshots are equal.
     *
     * @param left - A snapshot to compare.
     * @param right - A snapshot to compare.
     * @returns true if the snapshots are equal.
     */ function tu(t, e) {
        return t instanceof Jc$1 && e instanceof Jc$1 ? t.C_ === e.C_ && t.O_.isEqual(e.O_) && (null === t.x_ ? null === e.x_ : t.x_.isEqual(e.x_)) && t.M_ === e.M_ : t instanceof Xc$1 && e instanceof Xc$1 && (t.C_ === e.C_ && ia(t.query, e.query) && t.metadata.isEqual(e.metadata) && t.L_.isEqual(e.L_));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Reads the document referred to by this `DocumentReference`.
     *
     * Note: `getDoc()` attempts to provide up-to-date data when possible by waiting
     * for data from the server, but it may return cached data or fail if you are
     * offline and the server cannot be reached. To specify this behavior, invoke
     * {@link getDocFromCache} or {@link getDocFromServer}.
     *
     * @param reference - The reference of the document to fetch.
     * @returns A Promise resolved with a `DocumentSnapshot` containing the
     * current document contents.
     */ function eu(t) {
        t = vc$1(t, Du);
        const e = vc$1(t.firestore, qa$1);
        return La$1(Pu(e), t.O_).then((n => wu(e, t, n)));
    }

    class nu extends pu {
        constructor(t) {
            super(), this.firestore = t;
        }
        U_(t) {
            return new Kc$1(t);
        }
        K_(t) {
            const e = this.Q_(t, this.firestore.A_);
            return new Du(this.firestore, /* converter= */ null, e);
        }
    }

    /**
     * Reads the document referred to by this `DocumentReference` from cache.
     * Returns an error if the document is not currently cached.
     *
     * @returns A Promise resolved with a `DocumentSnapshot` containing the
     * current document contents.
     */ function su(t) {
        t = vc$1(t, Du);
        const e = vc$1(t.firestore, qa$1), n = Pu(e), s = new nu(e);
        return function(t, e) {
            const n = new Rs;
            return t.di.Ri((async () => async function(t, e, n) {
                try {
                    const s = await function(t, e) {
                        const n = N$1(t);
                        return n.persistence.runTransaction("read document", "readonly", (t => n.Bc.cs(t, e)));
                    }(t, e);
                    s instanceof Mn ? n.resolve(s) : s instanceof kn ? n.resolve(null) : n.reject(new M$1(x$1.UNAVAILABLE, "Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)"));
                } catch (t) {
                    const s = Ks(t, `Failed to get document '${e} from cache`);
                    n.reject(s);
                }
            }
            /**
     * Retrieves a latency-compensated document from the backend via a
     * SnapshotListener.
     */ (await xa(t), e, n))), n.promise;
        }(n, t.O_).then((n => new Jc$1(e, s, t.O_, n, new gu(n instanceof Mn && n.an, 
        /* fromCache= */ !0), t.M_)));
    }

    /**
     * Reads the document referred to by this `DocumentReference` from the server.
     * Returns an error if the network is not available.
     *
     * @returns A Promise resolved with a `DocumentSnapshot` containing the
     * current document contents.
     */ function iu(t) {
        t = vc$1(t, Du);
        const e = vc$1(t.firestore, qa$1);
        return La$1(Pu(e), t.O_, {
            source: "server"
        }).then((n => wu(e, t, n)));
    }

    /**
     * Executes the query and returns the results as a `QuerySnapshot`.
     *
     * Note: `getDocs()` attempts to provide up-to-date data when possible by
     * waiting for data from the server, but it may return cached data or fail if
     * you are offline and the server cannot be reached. To specify this behavior,
     * invoke {@link getDocsFromCache} or {@link getDocsFromServer}.
     *
     * @returns A Promise that will be resolved with the results of the query.
     */ function ru(t) {
        t = vc$1(t, Cu);
        const e = vc$1(t.firestore, qa$1), n = Pu(e), s = new nu(e);
        return Yu(t.W_), Ba$1(n, t.W_).then((n => new Xc$1(e, s, t, n)));
    }

    /**
     * Executes the query and returns the results as a `QuerySnapshot` from cache.
     * Returns an error if the document is not currently cached.
     *
     * @returns A Promise that will be resolved with the results of the query.
     */ function ou(t) {
        t = vc$1(t, Cu);
        const e = vc$1(t.firestore, qa$1), n = Pu(e), s = new nu(e);
        return function(t, e) {
            const n = new Rs;
            return t.di.Ri((async () => async function(t, e, n) {
                try {
                    const s = await Ir(t, e, 
                    /* usePreviousResults= */ !0), i = new yo(e, s.Qc), r = i.bh(s.documents), o = i.Zn(r, 
                    /* updateLimboDocuments= */ !1);
                    n.resolve(o.snapshot);
                } catch (t) {
                    const s = Ks(t, `Failed to execute query '${e} against cache`);
                    n.reject(s);
                }
            }
            /**
     * Retrieves a latency-compensated query snapshot from the backend via a
     * SnapshotListener.
     */ (await xa(t), e, n))), n.promise;
        }(n, t.W_).then((n => new Xc$1(e, s, t, n)));
    }

    /**
     * Executes the query and returns the results as a `QuerySnapshot` from the
     * server. Returns an error if the network is not available.
     *
     * @returns A Promise that will be resolved with the results of the query.
     */ function cu(t) {
        t = vc$1(t, Cu);
        const e = vc$1(t.firestore, qa$1), n = Pu(e), s = new nu(e);
        return Ba$1(n, t.W_, {
            source: "server"
        }).then((n => new Xc$1(e, s, t, n)));
    }

    function uu(t, e, n) {
        t = vc$1(t, Du);
        const s = vc$1(t.firestore, qa$1), i = yu(t.M_, e, n);
        return du(s, _a$1(ra$1(s), "setDoc", t.O_, i, null !== t.M_, n).j_(t.O_, dn.on()));
    }

    function au(t, e, n, ...s) {
        t = vc$1(t, Du);
        const i = vc$1(t.firestore, qa$1), r = ra$1(i);
        let o;
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
        e instanceof Qc$1 && (e = e.o_), o = "string" == typeof e || e instanceof zc$1 ? da$1(r, "updateDoc", t.O_, e, n, s) : fa$1(r, "updateDoc", t.O_, e);
        return du(i, o.j_(t.O_, dn.exists(!0)));
    }

    /**
     * Deletes the document referred to by the specified `DocumentReference`.
     *
     * @param reference - A reference to the document to delete.
     * @returns A Promise resolved once the document has been successfully
     * deleted from the backend (note that it won't resolve while you're offline).
     */ function hu(t) {
        return du(vc$1(t.firestore, qa$1), [ new vn(t.O_, dn.on()) ]);
    }

    /**
     * Add a new document to specified `CollectionReference` with the given data,
     * assigning it a document ID automatically.
     *
     * @param reference - A reference to the collection to add this document to.
     * @param data - An Object containing the data for the new document.
     * @returns A Promise resolved with a `DocumentReference` pointing to the
     * newly created document after it has been written to the backend (Note that it
     * won't resolve while you're offline).
     */ function lu(t, e) {
        const n = vc$1(t.firestore, qa$1), s = ea$1(t), i = yu(t.M_, e);
        return du(n, _a$1(ra$1(t.firestore), "addDoc", s.O_, i, null !== t.M_, {}).j_(s.O_, dn.exists(!1))).then((() => s));
    }

    function _u(t, ...e) {
        var n, s, i;
        t instanceof Qc$1 && (t = t.o_);
        let r = {
            includeMetadataChanges: !1
        }, o = 0;
        "object" != typeof e[o] || Vs(e[o]) || (r = e[o], o++);
        const c = {
            includeMetadataChanges: r.includeMetadataChanges
        };
        if (Vs(e[o])) {
            const t = e[o];
            e[o] = null === (n = t.next) || void 0 === n ? void 0 : n.bind(t), e[o + 1] = null === (s = t.error) || void 0 === s ? void 0 : s.bind(t), 
            e[o + 2] = null === (i = t.complete) || void 0 === i ? void 0 : i.bind(t);
        }
        let u, a, h;
        if (t instanceof Du) a = vc$1(t.firestore, qa$1), h = Ln(t.O_.path), u = {
            next: n => {
                e[o] && e[o](wu(a, t, n));
            },
            error: e[o + 1],
            complete: e[o + 2]
        }; else {
            const n = vc$1(t, Cu);
            a = vc$1(n.firestore, qa$1), h = n.W_;
            const s = new nu(a);
            u = {
                next: t => {
                    e[o] && e[o](new Xc$1(a, s, n, t));
                },
                error: e[o + 1],
                complete: e[o + 2]
            }, Yu(t.W_);
        }
        return function(t, e, n, s) {
            const i = new Vc$1(s), r = new ao(e, i, n);
            return t.di.Ri((async () => io(await Oa$1(t), r))), () => {
                i.r_(), t.di.Ri((async () => ro(await Oa$1(t), r)));
            };
        }(Pu(a), h, c, u);
    }

    function fu(t, e) {
        return function(t, e) {
            const n = new Vc$1(e);
            return t.di.Ri((async () => function(t, e) {
                N$1(t).Zu.add(e), 
                // Immediately fire an initial event, indicating all existing listeners
                // are in-sync.
                e.next();
            }(await Oa$1(t), n))), () => {
                n.r_(), t.di.Ri((async () => function(t, e) {
                    N$1(t).Zu.delete(e);
                }(await Oa$1(t), n)));
            };
        }
        /**
     * Takes an updateFunction in which a set of reads and writes can be performed
     * atomically. In the updateFunction, the client can read and write values
     * using the supplied transaction object. After the updateFunction, all
     * changes will be committed. If a retryable error occurs (ex: some other
     * client has changed any of the data referenced), then the updateFunction
     * will be called again after a backoff. If the updateFunction still fails
     * after all retries, then the transaction will be rejected.
     *
     * The transaction object passed to the updateFunction contains methods for
     * accessing documents and collections. Unlike other datastore access, data
     * accessed with the transaction will not reflect local changes that have not
     * been committed. For this reason, it is required that all reads are
     * performed before any writes. Transactions must be performed while online.
     */ (Pu(t = vc$1(t, qa$1)), Vs(e) ? e : {
            next: e
        });
    }

    /** Locally writes `mutations` on the async queue. */ function du(t, e) {
        return function(t, e) {
            const n = new Rs;
            return t.di.Ri((async () => No(await ka$1(t), e, n))), n.promise;
        }(Pu(t), e);
    }

    /**
     * Converts a ViewSnapshot that contains the single document specified by `ref`
     * to a DocumentSnapshot.
     */ function wu(t, e, n) {
        const s = n.docs.get(e.O_), i = new nu(t);
        return new Jc$1(t, i, e.O_, s, new gu(n.hasPendingWrites, n.fromCache), e.M_);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A write batch, used to perform multiple writes as a single atomic unit.
     *
     * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It
     * provides methods for adding writes to the write batch. None of the writes
     * will be committed (or visible locally) until {@link WriteBatch#commit} is
     * called.
     */ class Eu {
        /** @hideconstructor */
        constructor(t, e) {
            this.C_ = t, this.G_ = e, this.z_ = [], this.H_ = !1, this.J_ = ra$1(t);
        }
        set(t, e, n) {
            this.Y_();
            const s = Tu(t, this.C_), i = yu(s.M_, e, n), r = _a$1(this.J_, "WriteBatch.set", s.O_, i, null !== s.M_, n);
            return this.z_ = this.z_.concat(r.j_(s.O_, dn.on())), this;
        }
        update(t, e, n, ...s) {
            this.Y_();
            const i = Tu(t, this.C_);
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    let r;
            return e instanceof Qc$1 && (e = e.o_), r = "string" == typeof e || e instanceof zc$1 ? da$1(this.J_, "WriteBatch.update", i.O_, e, n, s) : fa$1(this.J_, "WriteBatch.update", i.O_, e), 
            this.z_ = this.z_.concat(r.j_(i.O_, dn.exists(!0))), this;
        }
        /**
         * Deletes the document referred to by the provided {@link DocumentReference}.
         *
         * @param documentRef - A reference to the document to be deleted.
         * @returns This `WriteBatch` instance. Used for chaining method calls.
         */    delete(t) {
            this.Y_();
            const e = Tu(t, this.C_);
            return this.z_ = this.z_.concat(new vn(e.O_, dn.on())), this;
        }
        /**
         * Commits all of the writes in this write batch as a single atomic unit.
         *
         * The result of these writes will only be reflected in document reads that
         * occur after the returned Promise resolves. If the client is offline, the
         * write fails. If you would like to see local modifications or buffer writes
         * until the client is online, use the full Firestore SDK.
         *
         * @returns A Promise resolved once all of the writes in the batch have been
         * successfully written to the backend as an atomic unit (note that it won't
         * resolve while you're offline).
         */    commit() {
            return this.Y_(), this.H_ = !0, this.z_.length > 0 ? this.G_(this.z_) : Promise.resolve();
        }
        Y_() {
            if (this.H_) throw new M$1(x$1.FAILED_PRECONDITION, "A write batch can no longer be used after commit() has been called.");
        }
    }

    function Tu(t, e) {
        if (t instanceof Qc$1 && (t = t.o_), t.firestore !== e) throw new M$1(x$1.INVALID_ARGUMENT, "Provided document reference is from a different Firestore instance.");
        return t;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Creates a write batch, used for performing multiple writes as a single
     * atomic operation. The maximum number of writes allowed in a single WriteBatch
     * is 500.
     *
     * Unlike transactions, write batches are persisted offline and therefore are
     * preferable when you don't need to condition your writes on read data.
     *
     * @returns A `WriteBatch` that can be used to atomically execute multiple
     * writes.
     */ function Iu(t) {
        return Pu(t = vc$1(t, qa$1)), new Eu(t, (e => du(t, e)));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the
    // legacy SDK.
    /**
     * A reference to a transaction.
     *
     * The `Transaction` object passed to a transaction's `updateFunction` provides
     * the methods to read and write data within the transaction context. See
     * {@link runTransaction}.
     */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A reference to a transaction.
     *
     * The `Transaction` object passed to a transaction's `updateFunction` provides
     * the methods to read and write data within the transaction context. See
     * {@link runTransaction}.
     */
    class mu extends class {
        /** @hideconstructor */
        constructor(t, e) {
            this.C_ = t, this.X_ = e, this.J_ = ra$1(t);
        }
        /**
         * Reads the document referenced by the provided {@link DocumentReference}.
         *
         * @param documentRef - A reference to the document to be read.
         * @returns A `DocumentSnapshot` with the read data.
         */    get(t) {
            const e = Tu(t, this.C_), n = new na$1(this.C_);
            return this.X_.Z_([ e.O_ ]).then((t => {
                if (!t || 1 !== t.length) return D$1();
                const s = t[0];
                if (s instanceof kn) return new bu(this.C_, n, e.O_, null, e.M_);
                if (s instanceof Mn) return new bu(this.C_, n, s.key, s, e.M_);
                throw D$1();
            }));
        }
        set(t, e, n) {
            const s = Tu(t, this.C_), i = yu(s.M_, e, n), r = _a$1(this.J_, "Transaction.set", s.O_, i, null !== s.M_, n);
            return this.X_.set(s.O_, r), this;
        }
        update(t, e, n, ...s) {
            const i = Tu(t, this.C_);
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    let r;
            return e instanceof Qc$1 && (e = e.o_), r = "string" == typeof e || e instanceof zc$1 ? da$1(this.J_, "Transaction.update", i.O_, e, n, s) : fa$1(this.J_, "Transaction.update", i.O_, e), 
            this.X_.update(i.O_, r), this;
        }
        /**
         * Deletes the document referred to by the provided {@link DocumentReference}.
         *
         * @param documentRef - A reference to the document to be deleted.
         * @returns This `Transaction` instance. Used for chaining method calls.
         */    delete(t) {
            const e = Tu(t, this.C_);
            return this.X_.delete(e.O_), this;
        }
    } {
        // This class implements the same logic as the Transaction API in the Lite SDK
        // but is subclassed in order to return its own DocumentSnapshot types.
        /** @hideconstructor */
        constructor(t, e) {
            super(t, e), this.C_ = t;
        }
        /**
         * Reads the document referenced by the provided {@link DocumentReference}.
         *
         * @param documentRef - A reference to the document to be read.
         * @returns A `DocumentSnapshot` with the read data.
         */    get(t) {
            const e = Tu(t, this.C_), n = new nu(this.C_);
            return super.get(t).then((t => new Jc$1(this.C_, n, e.O_, t.x_, new gu(
            /* hasPendingWrites= */ !1, 
            /* fromCache= */ !1), e.M_)));
        }
    }

    /**
     * Executes the given `updateFunction` and then attempts to commit the changes
     * applied within the transaction. If any document read within the transaction
     * has changed, Cloud Firestore retries the `updateFunction`. If it fails to
     * commit after 5 attempts, the transaction fails.
     *
     * The maximum number of writes allowed in a single transaction is 500.
     *
     * @param firestore - A reference to the Firestore database to run this
     * transaction against.
     * @param updateFunction - The function to execute within the transaction
     * context.
     * @returns If the transaction completed successfully or was explicitly aborted
     * (the `updateFunction` returned a failed promise), the promise returned by the
     * `updateFunction `is returned here. Otherwise, if the transaction failed, a
     * rejected promise with the corresponding failure error is returned.
     */ function Au(t, e) {
        return function(t, e) {
            const n = new Rs;
            return t.di.Ri((async () => {
                const s = await function(t) {
                    return Ca$1(t).then((t => t.Ou));
                }(t);
                new pa$1(t.di, s, e, n).run();
            })), n.promise;
        }(Pu(t), (n => e(new mu(t, n))));
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Constant used to indicate the LRU garbage collection should be disabled.
     * Set this value as the `cacheSizeBytes` on the settings passed to the
     * `Firestore` instance.
     */ const Ru = -1;

    function Pu(t) {
        return t.tf || Vu(t), t.tf.ef(), t.tf;
    }

    function Vu(t) {
        const e = t.v_(), n = function(t, e, n) {
            return new X$1(t, e, n.host, n.ssl, n.experimentalForceLongPolling, n.experimentalAutoDetectLongPolling);
        }(t.A_, t.T_, e);
        t.tf = new ba$1(t.R_, t.nf, n);
    }

    /**
     * Metadata about a snapshot, describing the state of the snapshot.
     */ class gu {
        /** @hideconstructor */
        constructor(t, e) {
            this.hasPendingWrites = t, this.fromCache = e;
        }
        /**
         * Returns true if this `SnapshotMetadata` is equal to the provided one.
         *
         * @param other - The `SnapshotMetadata` to compare against.
         * @returns true if this `SnapshotMetadata` is equal to the provided one.
         */    isEqual(t) {
            return this.hasPendingWrites === t.hasPendingWrites && this.fromCache === t.fromCache;
        }
    }

    /**
     * Converts custom model object of type T into DocumentData by applying the
     * converter if it exists.
     *
     * This function is used when converting user objects to DocumentData
     * because we want to provide the user with a more specific error message if
     * their set() or fails due to invalid data originating from a toFirestore()
     * call.
     */ function yu(t, e, n) {
        let s;
        // Cast to `any` in order to satisfy the union type constraint on
        // toFirestore().
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return s = t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e, 
        s;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Converts Firestore's internal types to the JavaScript types that we expose
     * to the user.
     */ class pu {
        F_(t, e = "none") {
            switch (Jt(t)) {
              case 0 /* NullValue */ :
                return null;

              case 1 /* BooleanValue */ :
                return t.booleanValue;

              case 2 /* NumberValue */ :
                return ie(t.integerValue || t.doubleValue);

              case 3 /* TimestampValue */ :
                return this.sf(t.timestampValue);

              case 4 /* ServerTimestampValue */ :
                return this.rf(t, e);

              case 5 /* StringValue */ :
                return t.stringValue;

              case 6 /* BlobValue */ :
                return this.U_(re(t.bytesValue));

              case 7 /* RefValue */ :
                return this.K_(t.referenceValue);

              case 8 /* GeoPointValue */ :
                return this.cf(t.geoPointValue);

              case 9 /* ArrayValue */ :
                return this.uf(t.arrayValue, e);

              case 10 /* ObjectValue */ :
                return this.af(t.mapValue, e);

              default:
                throw D$1();
            }
        }
        af(t, e) {
            const n = {};
            return Qt(t.fields || {}, ((t, s) => {
                n[t] = this.F_(s, e);
            })), n;
        }
        cf(t) {
            return new Uc$1(ie(t.latitude), ie(t.longitude));
        }
        uf(t, e) {
            return (t.values || []).map((t => this.F_(t, e)));
        }
        rf(t, e) {
            switch (e) {
              case "previous":
                const n = Gt(t);
                return null == n ? null : this.F_(n, e);

              case "estimate":
                return this.sf(zt(t));

              default:
                return null;
            }
        }
        sf(t) {
            const e = se(t);
            return new W$1(e.seconds, e.nanos);
        }
        Q_(t, e) {
            const n = z$1.G(t);
            C(Je(n));
            const s = new Z$1(n.get(1), n.get(3)), i = new Y$1(n.F(5));
            return s.isEqual(e) || 
            // TODO(b/64130202): Somehow support foreign references.
            b(`Document ${i} contains a document reference within a different database (${s.projectId}/${s.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`), 
            i;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A `DocumentSnapshot` contains data read from a document in your Firestore
     * database. The data can be extracted with `.data()` or `.get(<field>)` to
     * get a specific field.
     *
     * For a `DocumentSnapshot` that points to a non-existing document, any data
     * access will return 'undefined'. You can use the `exists()` method to
     * explicitly verify a document's existence.
     */ class bu {
        // Note: This class is stripped down version of the DocumentSnapshot in
        // the legacy SDK. The changes are:
        // - No support for SnapshotMetadata.
        // - No support for SnapshotOptions.
        /** @hideconstructor protected */
        constructor(t, e, n, s, i) {
            this.C_ = t, this.k_ = e, this.O_ = n, this.x_ = s, this.M_ = i;
        }
        /** Property of the `DocumentSnapshot` that provides the document's ID. */    get id() {
            return this.O_.path.B();
        }
        /**
         * The `DocumentReference` for the document included in the `DocumentSnapshot`.
         */    get ref() {
            return new Du(this.C_, this.M_, this.O_);
        }
        /**
         * Signals whether or not the document at the snapshot's location exists.
         *
         * @returns true if the document exists.
         */    exists() {
            return null !== this.x_;
        }
        /**
         * Retrieves all fields in the document as an `Object`. Returns `undefined` if
         * the document doesn't exist.
         *
         * @returns An `Object` containing all fields in the document or `undefined`
         * if the document doesn't exist.
         */    data() {
            if (this.x_) {
                if (this.M_) {
                    // We only want to use the converter and create a new DocumentSnapshot
                    // if a converter has been provided.
                    const t = new vu(this.C_, this.k_, this.O_, this.x_, 
                    /* converter= */ null);
                    return this.M_.fromFirestore(t);
                }
                return this.k_.F_(this.x_.En());
            }
        }
        /**
         * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
         * document or field doesn't exist.
         *
         * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
         * field.
         * @returns The data at the specified field location or undefined if no such
         * field exists in the document.
         */
        // We are using `any` here to avoid an explicit cast by our users.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        get(t) {
            if (this.x_) {
                const e = this.x_.data().field(Su("DocumentSnapshot.get", t));
                if (null !== e) return this.k_.F_(e);
            }
        }
    }

    /**
     * A `QueryDocumentSnapshot` contains data read from a document in your
     * Firestore database as part of a query. The document is guaranteed to exist
     * and its data can be extracted with `.data()` or `.get(<field>)` to get a
     * specific field.
     *
     * A `QueryDocumentSnapshot` offers the same API surface as a
     * `DocumentSnapshot`. Since query results contain only existing documents, the
     * `exists` property will always be true and `data()` will never return
     * 'undefined'.
     */ class vu extends bu {
        /**
         * Retrieves all fields in the document as an `Object`.
         *
         * @override
         * @returns An `Object` containing all fields in the document.
         */
        data() {
            return super.data();
        }
    }

    /**
     * Helper that calls fromDotSeparatedString() but wraps any error thrown.
     */ function Su(t, e) {
        return "string" == typeof e ? Pa$1(t, e) : e instanceof Qc$1 ? e.o_.D_ : e.D_;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A `DocumentReference` refers to a document location in a Firestore database
     * and can be used to write, read, or listen to the location. The document at
     * the referenced location may or may not exist.
     */ class Du {
        /** @hideconstructor */
        constructor(t, e, n) {
            this.M_ = e, this.O_ = n, 
            /** The type of this Firestore reference. */
            this.type = "document", this.firestore = t;
        }
        get hf() {
            return this.O_.path;
        }
        /**
         * The document's identifier within its collection.
         */    get id() {
            return this.O_.path.B();
        }
        /**
         * A string representing the path of the referenced document (relative
         * to the root of the database).
         */    get path() {
            return this.O_.path.j();
        }
        /**
         * The collection this `DocumentReference` belongs to.
         */    get parent() {
            return new Xu(this.firestore, this.M_, this.O_.path.$());
        }
        /**
         * Applies a custom data converter to this `DocumentReference`, allowing you
         * to use your own custom model objects with Firestore. When you call {@link
         * setDoc}, {@link getDoc}, etc. with the returned `DocumentReference`
         * instance, the provided converter will convert between Firestore data and
         * your custom type `U`.
         *
         * @param converter - Converts objects to and from Firestore.
         * @returns A `DocumentReference<U>` that uses the provided converter.
         */    withConverter(t) {
            return new Du(this.firestore, t, this.O_);
        }
    }

    /**
     * A `Query` refers to a Query which you can read or listen to. You can also
     * construct refined `Query` objects by adding filters and ordering.
     */ class Cu {
        // This is the lite version of the Query class in the main SDK.
        /** @hideconstructor protected */
        constructor(t, e, n) {
            this.M_ = e, this.W_ = n, 
            /** The type of this Firestore reference. */
            this.type = "query", this.firestore = t;
        }
        /**
         * Applies a custom data converter to this query, allowing you to use your own
         * custom model objects with Firestore. When you call {@link getDocs} with
         * the returned query, the provided converter will convert between Firestore
         * data and your custom type `U`.
         *
         * @param converter - Converts objects to and from Firestore.
         * @returns A `Query<U>` that uses the provided converter.
         */    withConverter(t) {
            return new Cu(this.firestore, t, this.W_);
        }
    }

    /**
     * A `QueryConstraint` is used to narrow the set of documents returned by a
     * Firestore query. `QueryConstraint`s are created by invoking {@link where},
     * {@link orderBy}, {@link startAt}, {@link startAfter}, {@link
     * endBefore}, {@link endAt}, {@link limit} or {@link limitToLast} and
     * can then be passed to {@link query} to create a new query instance that
     * also contains this `QueryConstraint`.
     */ class Nu {}

    /**
     * Creates a new immutable instance of `query` that is extended to also include
     * additional query constraints.
     *
     * @param query - The query instance to use as a base for the new constraints.
     * @param queryConstraints - The list of `QueryConstraint`s to apply.
     * @throws if any of the provided query constraints cannot be combined with the
     * existing or new constraints.
     */ function xu(t, ...e) {
        for (const n of e) t = n.lf(t);
        return t;
    }

    class Mu extends Nu {
        constructor(t, e, n) {
            super(), this._f = t, this.ff = e, this.df = n, this.type = "where";
        }
        lf(t) {
            const e = ra$1(t.firestore), n = function(t, e, n, s, i, r, o) {
                let c;
                if (i.Y()) {
                    if ("array-contains" /* ARRAY_CONTAINS */ === r || "array-contains-any" /* ARRAY_CONTAINS_ANY */ === r) throw new M$1(x$1.INVALID_ARGUMENT, `Invalid Query. You can't perform '${r}' queries on FieldPath.documentId().`);
                    if ("in" /* IN */ === r || "not-in" /* NOT_IN */ === r) {
                        Hu(o, r);
                        const e = [];
                        for (const n of o) e.push(zu(s, t, n));
                        c = {
                            arrayValue: {
                                values: e
                            }
                        };
                    } else c = zu(s, t, o);
                } else "in" /* IN */ !== r && "not-in" /* NOT_IN */ !== r && "array-contains-any" /* ARRAY_CONTAINS_ANY */ !== r || Hu(o, r), 
                c = wa$1(n, e, o, 
                /* allowArrays= */ "in" /* IN */ === r || "not-in" /* NOT_IN */ === r);
                const u = Zn.create(i, r, c);
                return function(t, e) {
                    if (e.An()) {
                        const n = Kn(t);
                        if (null !== n && !n.isEqual(e.field)) throw new M$1(x$1.INVALID_ARGUMENT, `Invalid query. All where filters with an inequality (<, <=, >, or >=) must be on the same field. But you have inequality filters on '${n.toString()}' and '${e.field.toString()}'`);
                        const s = Un(t);
                        null !== s && Ju(t, e.field, s);
                    }
                    const n = function(t, e) {
                        for (const n of t.filters) if (e.indexOf(n.op) >= 0) return n.op;
                        return null;
                    }
                    /**
     * Creates a new Query for a collection group query that matches all documents
     * within the provided collection group.
     */ (t, 
                    /**
     * Given an operator, returns the set of operators that cannot be used with it.
     *
     * Operators in a query must adhere to the following set of rules:
     * 1. Only one array operator is allowed.
     * 2. Only one disjunctive operator is allowed.
     * 3. NOT_EQUAL cannot be used with another NOT_EQUAL operator.
     * 4. NOT_IN cannot be used with array, disjunctive, or NOT_EQUAL operators.
     *
     * Array operators: ARRAY_CONTAINS, ARRAY_CONTAINS_ANY
     * Disjunctive operators: IN, ARRAY_CONTAINS_ANY, NOT_IN
     */
                    function(t) {
                        switch (t) {
                          case "!=" /* NOT_EQUAL */ :
                            return [ "!=" /* NOT_EQUAL */ , "not-in" /* NOT_IN */ ];

                          case "array-contains" /* ARRAY_CONTAINS */ :
                            return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "not-in" /* NOT_IN */ ];

                          case "in" /* IN */ :
                            return [ "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ ];

                          case "array-contains-any" /* ARRAY_CONTAINS_ANY */ :
                            return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ ];

                          case "not-in" /* NOT_IN */ :
                            return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ , "!=" /* NOT_EQUAL */ ];

                          default:
                            return [];
                        }
                    }(e.op));
                    if (null !== n) 
                    // Special case when it's a duplicate op to give a slightly clearer error message.
                    throw n === e.op ? new M$1(x$1.INVALID_ARGUMENT, `Invalid query. You cannot use more than one '${e.op.toString()}' filter.`) : new M$1(x$1.INVALID_ARGUMENT, `Invalid query. You cannot use '${e.op.toString()}' filters with '${n.toString()}' filters.`);
                }(t, u), u;
            }(t.W_, "where", e, t.firestore.A_, this._f, this.ff, this.df);
            return new Cu(t.firestore, t.M_, function(t, e) {
                const n = t.filters.concat([ e ]);
                return new Fn(t.path, t.collectionGroup, t.Tn.slice(), n, t.limit, t.limitType, t.startAt, t.endAt);
            }(t.W_, n));
        }
    }

    /**
     * Creates a `QueryConstraint` that enforces that documents must contain the
     * specified field and that the value should satisfy the relation constraint
     * provided.
     *
     * @param fieldPath - The path to compare
     * @param opStr - The operation string (e.g "&lt;", "&lt;=", "==", "&lt;",
     *   "&lt;=", "!=").
     * @param value - The value for comparison
     * @returns The created `Query`.
     */ function ku(t, e, n) {
        const s = e, i = Su("where", t);
        return new Mu(i, s, n);
    }

    class Ou extends Nu {
        constructor(t, e) {
            super(), this._f = t, this.wf = e, this.type = "orderBy";
        }
        lf(t) {
            const e = function(t, e, n) {
                if (null !== t.startAt) throw new M$1(x$1.INVALID_ARGUMENT, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
                if (null !== t.endAt) throw new M$1(x$1.INVALID_ARGUMENT, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
                const s = new fs(e, n);
                return function(t, e) {
                    if (null === Un(t)) {
                        // This is the first order by. It must match any inequality.
                        const n = Kn(t);
                        null !== n && Ju(t, n, e.field);
                    }
                }(t, s), s;
            }
            /**
     * Create a Bound from a query and a document.
     *
     * Note that the Bound will always include the key of the document
     * and so only the provided document will compare equal to the returned
     * position.
     *
     * Will throw if the document does not contain all fields of the order by
     * of the query or if any of the fields in the order by are an uncommitted
     * server timestamp.
     */ (t.W_, this._f, this.wf);
            return new Cu(t.firestore, t.M_, function(t, e) {
                // TODO(dimond): validate that orderBy does not list the same key twice.
                const n = t.Tn.concat([ e ]);
                return new Fn(t.path, t.collectionGroup, n, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
            }(t.W_, e));
        }
    }

    /**
     * Creates a `QueryConstraint` that sorts the query result by the
     * specified field, optionally in descending order instead of ascending.
     *
     * @param fieldPath - The field to sort by.
     * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If
     * not specified, order will be ascending.
     * @returns The created `Query`.
     */ function Fu(t, e = "asc") {
        const n = e, s = Su("orderBy", t);
        return new Ou(s, n);
    }

    class $u extends Nu {
        constructor(t, e, n) {
            super(), this.type = t, this.Ef = e, this.Tf = n;
        }
        lf(t) {
            return new Cu(t.firestore, t.M_, Gn(t.W_, this.Ef, this.Tf));
        }
    }

    /**
     * Creates a `QueryConstraint` that only returns the first matching documents.
     *
     * @param limit - The maximum number of items to return.
     * @returns The created `Query`.
     */ function Lu(t) {
        return Sc$1("limit", t), new $u("limit", t, "F" /* First */);
    }

    /**
     * Creates a `QueryConstraint` that only returns the last matching documents.
     *
     * You must specify at least one `orderBy` clause for `limitToLast` queries,
     * otherwise an exception will be thrown during execution.
     *
     * @param limit - The maximum number of items to return.
     * @returns The created `Query`.
     */ function Bu(t) {
        return Sc$1("limitToLast", t), new $u("limitToLast", t, "L" /* Last */);
    }

    class qu extends Nu {
        constructor(t, e, n) {
            super(), this.type = t, this.If = e, this.mf = n;
        }
        lf(t) {
            const e = Gu(t, this.type, this.If, this.mf);
            return new Cu(t.firestore, t.M_, function(t, e) {
                return new Fn(t.path, t.collectionGroup, t.Tn.slice(), t.filters.slice(), t.limit, t.limitType, e, t.endAt);
            }(t.W_, e));
        }
    }

    function Uu(...t) {
        return new qu("startAt", t, /*before=*/ !0);
    }

    function Ku(...t) {
        return new qu("startAfter", t, 
        /*before=*/ !1);
    }

    class Qu extends Nu {
        constructor(t, e, n) {
            super(), this.type = t, this.If = e, this.mf = n;
        }
        lf(t) {
            const e = Gu(t, this.type, this.If, this.mf);
            return new Cu(t.firestore, t.M_, function(t, e) {
                return new Fn(t.path, t.collectionGroup, t.Tn.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, e);
            }(t.W_, e));
        }
    }

    function Wu(...t) {
        return new Qu("endBefore", t, /*before=*/ !0);
    }

    function ju(...t) {
        return new Qu("endAt", t, /*before=*/ !1);
    }

    /** Helper function to create a bound from a document or fields */ function Gu(t, e, n, s) {
        if (n[0] instanceof Qc$1 && (n[0] = n[0].o_), n[0] instanceof bu) return function(t, e, n, s, i) {
            if (!s) throw new M$1(x$1.NOT_FOUND, "Can't use a DocumentSnapshot that doesn't exist for " + n + "().");
            const r = [];
            // Because people expect to continue/end a query at the exact document
            // provided, we need to use the implicit sort order rather than the explicit
            // sort order, because it's guaranteed to contain the document key. That way
            // the position becomes unambiguous and the query continues/ends exactly at
            // the provided document. Without the key (by using the explicit sort
            // orders), multiple documents could match the position, yielding duplicate
            // results.
                    for (const n of Wn(t)) if (n.field.Y()) r.push(oe(e, s.key)); else {
                const t = s.field(n.field);
                if (jt(t)) throw new M$1(x$1.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field "' + n.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
                if (null === t) {
                    const t = n.field.j();
                    throw new M$1(x$1.INVALID_ARGUMENT, `Invalid query. You are trying to start or end a query using a document for which the field '${t}' (used as the orderBy) does not exist.`);
                }
                r.push(t);
            }
            return new as(r, i);
        }
        /**
     * Converts a list of field values to a Bound for the given query.
     */ (t.W_, t.firestore.A_, e, n[0].x_, s);
        {
            const i = ra$1(t.firestore);
            return function(t, e, n, s, i, r) {
                // Use explicit order by's because it has to match the query the user made
                const o = t.Tn;
                if (i.length > o.length) throw new M$1(x$1.INVALID_ARGUMENT, `Too many arguments provided to ${s}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);
                const c = [];
                for (let r = 0; r < i.length; r++) {
                    const u = i[r];
                    if (o[r].field.Y()) {
                        if ("string" != typeof u) throw new M$1(x$1.INVALID_ARGUMENT, `Invalid query. Expected a string for document ID in ${s}(), but got a ${typeof u}`);
                        if (!Qn(t) && -1 !== u.indexOf("/")) throw new M$1(x$1.INVALID_ARGUMENT, `Invalid query. When querying a collection and ordering by FieldPath.documentId(), the value passed to ${s}() must be a plain document ID, but '${u}' contains a slash.`);
                        const n = t.path.child(z$1.G(u));
                        if (!Y$1.st(n)) throw new M$1(x$1.INVALID_ARGUMENT, `Invalid query. When querying a collection group and ordering by FieldPath.documentId(), the value passed to ${s}() must result in a valid document path, but '${n}' is not because it contains an odd number of segments.`);
                        const i = new Y$1(n);
                        c.push(oe(e, i));
                    } else {
                        const t = wa$1(n, s, u);
                        c.push(t);
                    }
                }
                return new as(c, r);
            }
            /**
     * Parses the given documentIdValue into a ReferenceValue, throwing
     * appropriate errors if the value is anything other than a DocumentReference
     * or String, or if the string is malformed.
     */ (t.W_, t.firestore.A_, i, e, n, s);
        }
    }

    function zu(t, e, n) {
        if (n instanceof Qc$1 && (n = n.o_), "string" == typeof n) {
            if ("" === n) throw new M$1(x$1.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");
            if (!Qn(e) && -1 !== n.indexOf("/")) throw new M$1(x$1.INVALID_ARGUMENT, `Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but '${n}' contains a '/' character.`);
            const s = e.path.child(z$1.G(n));
            if (!Y$1.st(s)) throw new M$1(x$1.INVALID_ARGUMENT, `Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, but '${s}' is not because it has an odd number of segments (${s.length}).`);
            return oe(t, new Y$1(s));
        }
        if (n instanceof Du) return oe(t, n.O_);
        throw new M$1(x$1.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: " + bc$1(n) + ".");
    }

    /**
     * Validates that the value passed into a disjunctive filter satisfies all
     * array requirements.
     */ function Hu(t, e) {
        if (!Array.isArray(t) || 0 === t.length) throw new M$1(x$1.INVALID_ARGUMENT, `Invalid Query. A non-empty array is required for '${e.toString()}' filters.`);
        if (t.length > 10) throw new M$1(x$1.INVALID_ARGUMENT, `Invalid Query. '${e.toString()}' filters support a maximum of 10 elements in the value array.`);
    }

    function Ju(t, e, n) {
        if (!n.isEqual(e)) throw new M$1(x$1.INVALID_ARGUMENT, `Invalid query. You have a where filter with an inequality (<, <=, >, or >=) on field '${e.toString()}' and so you must also use '${e.toString()}' as your first argument to orderBy(), but your first orderBy() is on field '${n.toString()}' instead.`);
    }

    function Yu(t) {
        if (qn(t) && 0 === t.Tn.length) throw new M$1(x$1.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
    }

    /**
     * A `CollectionReference` object can be used for adding documents, getting
     * document references, and querying for documents (using {@link query}).
     */ class Xu extends Cu {
        /** @hideconstructor */
        constructor(t, e, n) {
            super(t, e, Ln(n)), this.firestore = t, this.hf = n, this.type = "collection";
        }
        /** The collection's identifier. */    get id() {
            return this.W_.path.B();
        }
        /**
         * A string representing the path of the referenced collection (relative
         * to the root of the database).
         */    get path() {
            return this.W_.path.j();
        }
        /**
         * A reference to the containing `DocumentReference` if this is a
         * subcollection. If this isn't a subcollection, the reference is null.
         */    get parent() {
            const t = this.hf.$();
            return t.q() ? null : new Du(this.firestore, 
            /* converter= */ null, new Y$1(t));
        }
        /**
         * Applies a custom data converter to this CollectionReference, allowing you
         * to use your own custom model objects with Firestore. When you call {@link
         * addDoc} with the returned `CollectionReference` instance, the provided
         * converter will convert between Firestore data and your custom type `U`.
         *
         * @param converter - Converts objects to and from Firestore.
         * @returns A `CollectionReference<U>` that uses the provided converter.
         */    withConverter(t) {
            return new Xu(this.firestore, t, this.hf);
        }
    }

    function Zu(t, e, ...n) {
        if (t instanceof Qc$1 && (t = t.o_), gc$1("collection", "path", e), t instanceof Gc$1) {
            const s = z$1.G(e, ...n);
            return pc$1(s), new Xu(t, /* converter= */ null, s);
        }
        {
            if (!(t instanceof Du || t instanceof Xu)) throw new M$1(x$1.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
            const s = z$1.G(t.path, ...n).child(z$1.G(e));
            return pc$1(s), new Xu(t.firestore, 
            /* converter= */ null, s);
        }
    }

    // TODO(firestorelite): Consider using ErrorFactory -
    // https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106
    /**
     * Creates and returns a new `Query` instance that includes all documents in the
     * database that are contained in a collection or subcollection with the
     * given `collectionId`.
     *
     * @param firestore - A reference to the root Firestore instance.
     * @param collectionId - Identifies the collections to query over. Every
     * collection or subcollection with this ID as the last segment of its path
     * will be included. Cannot contain a slash.
     * @returns The created `Query`.
     */ function ta$1(t, e) {
        if (t = vc$1(t, Gc$1), gc$1("collectionGroup", "collection id", e), e.indexOf("/") >= 0) throw new M$1(x$1.INVALID_ARGUMENT, `Invalid collection ID '${e}' passed to function collectionGroup(). Collection IDs must not contain '/'.`);
        return new Cu(t, 
        /* converter= */ null, function(t) {
            return new Fn(z$1.H(), t);
        }(e));
    }

    function ea$1(t, e, ...n) {
        if (t instanceof Qc$1 && (t = t.o_), 
        // We allow omission of 'pathString' but explicitly prohibit passing in both
        // 'undefined' and 'null'.
        1 === arguments.length && (e = q$1.p()), gc$1("doc", "path", e), t instanceof Gc$1) {
            const s = z$1.G(e, ...n);
            return yc$1(s), new Du(t, 
            /* converter= */ null, new Y$1(s));
        }
        {
            if (!(t instanceof Du || t instanceof Xu)) throw new M$1(x$1.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
            const s = t.hf.child(z$1.G(e, ...n));
            return yc$1(s), new Du(t.firestore, t instanceof Xu ? t.M_ : null, new Y$1(s));
        }
    }

    class na$1 extends pu {
        constructor(t) {
            super(), this.firestore = t;
        }
        U_(t) {
            return new Kc$1(t);
        }
        K_(t) {
            const e = this.Q_(t, this.firestore.A_);
            return new Du(this.firestore, /* converter= */ null, e);
        }
    }

    /**
     * Returns true if the provided references are equal.
     *
     * @param left - A reference to compare.
     * @param right - A reference to compare.
     * @returns true if the references point to the same location in the same
     * Firestore database.
     */ function sa$1(t, e) {
        return t instanceof Qc$1 && (t = t.o_), e instanceof Qc$1 && (e = e.o_), (t instanceof Du || t instanceof Xu) && (e instanceof Du || e instanceof Xu) && (t.firestore === e.firestore && t.path === e.path && t.M_ === e.M_);
    }

    /**
     * Returns true if the provided queries point to the same collection and apply
     * the same constraints.
     *
     * @param left - A `Query` to compare.
     * @param right - A `Query` to compare.
     * @returns true if the references point to the same location in the same
     * Firestore database.
     */ function ia(t, e) {
        return t instanceof Qc$1 && (t = t.o_), e instanceof Qc$1 && (e = e.o_), t instanceof Cu && e instanceof Cu && (t.firestore === e.firestore && zn(t.W_, e.W_) && t.M_ === e.M_);
    }

    function ra$1(t) {
        const e = t.v_(), n = Ps(t.A_);
        return new la(t.A_, !!e.ignoreUndefinedProperties, n);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const oa$1 = /^__.*__$/;

    /** The result of parsing document data (e.g. for a setData call). */ class ca$1 {
        constructor(t, e, n) {
            this.data = t, this.en = e, this.fieldTransforms = n;
        }
        j_(t, e) {
            const n = [];
            return null !== this.en ? n.push(new Vn(t, this.data, this.en, e)) : n.push(new Pn(t, this.data, e)), 
            this.fieldTransforms.length > 0 && n.push(new yn(t, this.fieldTransforms)), n;
        }
    }

    /** The result of parsing "update" data (i.e. for an updateData call). */ class ua$1 {
        constructor(t, e, n) {
            this.data = t, this.en = e, this.fieldTransforms = n;
        }
        j_(t, e) {
            const n = [ new Vn(t, this.data, this.en, e) ];
            return this.fieldTransforms.length > 0 && n.push(new yn(t, this.fieldTransforms)), 
            n;
        }
    }

    function aa$1(t) {
        switch (t) {
          case 0 /* Set */ :
     // fall through
                  case 2 /* MergeSet */ :
     // fall through
                  case 1 /* Update */ :
            return !0;

          case 3 /* Argument */ :
          case 4 /* ArrayArgument */ :
            return !1;

          default:
            throw D$1();
        }
    }

    /** A "context" object passed around while parsing user data. */ class ha$1 {
        /**
         * Initializes a ParseContext with the given source and path.
         *
         * @param settings - The settings for the parser.
         * @param databaseId - The database ID of the Firestore instance.
         * @param serializer - The serializer to use to generate the Value proto.
         * @param ignoreUndefinedProperties - Whether to ignore undefined properties
         * rather than throw.
         * @param fieldTransforms - A mutable list of field transforms encountered
         * while parsing the data.
         * @param fieldMask - A mutable list of field paths encountered while parsing
         * the data.
         *
         * TODO(b/34871131): We don't support array paths right now, so path can be
         * null to indicate the context represents any location within an array (in
         * which case certain features will not work and errors will be somewhat
         * compromised).
         */
        constructor(t, e, n, s, i, r) {
            this.settings = t, this.rt = e, this.serializer = n, this.ignoreUndefinedProperties = s, 
            // Minor hack: If fieldTransforms is undefined, we assume this is an
            // external call and we need to validate the entire path.
            void 0 === i && this.Af(), this.fieldTransforms = i || [], this.en = r || [];
        }
        get path() {
            return this.settings.path;
        }
        get u_() {
            return this.settings.u_;
        }
        /** Returns a new context with the specified settings overwritten. */    Rf(t) {
            return new ha$1(Object.assign(Object.assign({}, this.settings), t), this.rt, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.en);
        }
        Pf(t) {
            var e;
            const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), s = this.Rf({
                path: n,
                l_: !1
            });
            return s.Vf(t), s;
        }
        gf(t) {
            var e;
            const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), s = this.Rf({
                path: n,
                l_: !1
            });
            return s.Af(), s;
        }
        yf(t) {
            // TODO(b/34871131): We don't support array paths right now; so make path
            // undefined.
            return this.Rf({
                path: void 0,
                l_: !0
            });
        }
        a_(t) {
            return Va$1(t, this.settings.methodName, this.settings.pf || !1, this.path, this.settings.h_);
        }
        /** Returns 'true' if 'fieldPath' was traversed when creating this context. */    contains(t) {
            return void 0 !== this.en.find((e => t.U(e))) || void 0 !== this.fieldTransforms.find((e => t.U(e.field)));
        }
        Af() {
            // TODO(b/34871131): Remove null check once we have proper paths for fields
            // within arrays.
            if (this.path) for (let t = 0; t < this.path.length; t++) this.Vf(this.path.get(t));
        }
        Vf(t) {
            if (0 === t.length) throw this.a_("Document fields must not be empty");
            if (aa$1(this.u_) && oa$1.test(t)) throw this.a_('Document fields cannot begin and end with "__"');
        }
    }

    /**
     * Helper for parsing raw user input (provided via the API) into internal model
     * classes.
     */ class la {
        constructor(t, e, n) {
            this.rt = t, this.ignoreUndefinedProperties = e, this.serializer = n || Ps(t);
        }
        /** Creates a new top-level parse context. */    bf(t, e, n, s = !1) {
            return new ha$1({
                u_: t,
                methodName: e,
                h_: n,
                path: J$1.H(),
                l_: !1,
                pf: s
            }, this.rt, this.serializer, this.ignoreUndefinedProperties);
        }
    }

    /** Parse document data from a set() call. */ function _a$1(t, e, n, s, i, r = {}) {
        const o = t.bf(r.merge || r.mergeFields ? 2 /* MergeSet */ : 0 /* Set */ , e, n, i);
        ma$1("Data must be an object, but it was:", o, s);
        const c = Ta$1(s, o);
        let u, a;
        if (r.merge) u = new hn(o.en), a = o.fieldTransforms; else if (r.mergeFields) {
            const t = [];
            for (const s of r.mergeFields) {
                const i = Aa$1(e, s, n);
                if (!o.contains(i)) throw new M$1(x$1.INVALID_ARGUMENT, `Field '${i}' is specified in your field mask but missing from your input data.`);
                ga(t, i) || t.push(i);
            }
            u = new hn(t), a = o.fieldTransforms.filter((t => u.un(t.field)));
        } else u = null, a = o.fieldTransforms;
        return new ca$1(new Dn(c), u, a);
    }

    /** Parse update data from an update() call. */ function fa$1(t, e, n, s) {
        const i = t.bf(1 /* Update */ , e, n);
        ma$1("Data must be an object, but it was:", i, s);
        const r = [], o = new Cn;
        Qt(s, ((t, s) => {
            const c = Pa$1(e, t, n);
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    s instanceof Qc$1 && (s = s.o_);
            const u = i.gf(c);
            if (s instanceof Oc$1) 
            // Add it to the field mask, but don't add anything to updateData.
            r.push(c); else {
                const t = Ea$1(s, u);
                null != t && (r.push(c), o.set(c, t));
            }
        }));
        const c = new hn(r);
        return new ua$1(o.hn(), c, i.fieldTransforms);
    }

    /** Parse update data from a list of field/value arguments. */ function da$1(t, e, n, s, i, r) {
        const o = t.bf(1 /* Update */ , e, n), c = [ Aa$1(e, s, n) ], u = [ i ];
        if (r.length % 2 != 0) throw new M$1(x$1.INVALID_ARGUMENT, `Function ${e}() needs to be called with an even number of arguments that alternate between field names and values.`);
        for (let t = 0; t < r.length; t += 2) c.push(Aa$1(e, r[t])), u.push(r[t + 1]);
        const a = [], h = new Cn;
        // We iterate in reverse order to pick the last value for a field if the
        // user specified the field multiple times.
        for (let t = c.length - 1; t >= 0; --t) if (!ga(a, c[t])) {
            const e = c[t];
            let n = u[t];
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    n instanceof Qc$1 && (n = n.o_);
            const s = o.gf(e);
            if (n instanceof Oc$1) 
            // Add it to the field mask, but don't add anything to updateData.
            a.push(e); else {
                const t = Ea$1(n, s);
                null != t && (a.push(e), h.set(e, t));
            }
        }
        const l = new hn(a);
        return new ua$1(h.hn(), l, o.fieldTransforms);
    }

    /**
     * Parse a "query value" (e.g. value in a where filter or a value in a cursor
     * bound).
     *
     * @param allowArrays - Whether the query value is an array that may directly
     * contain additional arrays (e.g. the operand of an `in` query).
     */ function wa$1(t, e, n, s = !1) {
        return Ea$1(n, t.bf(s ? 4 /* ArrayArgument */ : 3 /* Argument */ , e));
    }

    /**
     * Parses user data to Protobuf Values.
     *
     * @param input - Data to be parsed.
     * @param context - A context object representing the current path being parsed,
     * the source of the data being parsed, etc.
     * @returns The parsed value, or null if the value was a FieldValue sentinel
     * that should not be included in the resulting parsed data.
     */ function Ea$1(t, e) {
        if (
        // Unwrap the API type from the Compat SDK. This will return the API type
        // from firestore-exp.
        t instanceof Qc$1 && (t = t.o_), Ia$1(t)) return ma$1("Unsupported field value:", e, t), 
        Ta$1(t, e);
        if (t instanceof Dc$1) 
        // FieldValues usually parse into transforms (except FieldValue.delete())
        // in which case we do not want to include this field in our parsed data
        // (as doing so will overwrite the field directly prior to the transform
        // trying to transform it). So we don't add this location to
        // context.fieldMask and we return null as our parsing result.
        /**
     * "Parses" the provided FieldValueImpl, adding any necessary transforms to
     * context.fieldTransforms.
     */
        return function(t, e) {
            // Sentinels are only supported with writes, and not within arrays.
            if (!aa$1(e.u_)) throw e.a_(t._methodName + "() can only be used with update() and set()");
            if (!e.path) throw e.a_(t._methodName + "() is not currently supported inside arrays");
            const n = t.c_(e);
            n && e.fieldTransforms.push(n);
        }
        /**
     * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)
     *
     * @returns The parsed value
     */ (t, e), null;
        if (
        // If context.path is null we are inside an array and we don't support
        // field mask paths more granular than the top-level array.
        e.path && e.en.push(e.path), t instanceof Array) {
            // TODO(b/34871131): Include the path containing the array in the error
            // message.
            // In the case of IN queries, the parsed data is an array (representing
            // the set of values to be included for the IN query) that may directly
            // contain additional arrays (each representing an individual field
            // value), so we disable this validation.
            if (e.settings.l_ && 4 /* ArrayArgument */ !== e.u_) throw e.a_("Nested arrays are not supported");
            return function(t, e) {
                const n = [];
                let s = 0;
                for (const i of t) {
                    let t = Ea$1(i, e.yf(s));
                    null == t && (
                    // Just include nulls in the array for fields being replaced with a
                    // sentinel.
                    t = {
                        nullValue: "NULL_VALUE"
                    }), n.push(t), s++;
                }
                return {
                    arrayValue: {
                        values: n
                    }
                };
            }(t, e);
        }
        return function(t, e) {
            t instanceof Qc$1 && (t = t.o_);
            if (null === t) return {
                nullValue: "NULL_VALUE"
            };
            if ("number" == typeof t) return Te(e.serializer, t);
            if ("boolean" == typeof t) return {
                booleanValue: t
            };
            if ("string" == typeof t) return {
                stringValue: t
            };
            if (t instanceof Date) {
                const n = W$1.fromDate(t);
                return {
                    timestampValue: Ie(e.serializer, n)
                };
            }
            if (t instanceof W$1) {
                // Firestore backend truncates precision down to microseconds. To ensure
                // offline mode works the same with regards to truncation, perform the
                // truncation immediately without waiting for the backend to do that.
                const n = new W$1(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));
                return {
                    timestampValue: Ie(e.serializer, n)
                };
            }
            if (t instanceof Uc$1) return {
                geoPointValue: {
                    latitude: t.latitude,
                    longitude: t.longitude
                }
            };
            if (t instanceof Kc$1) return {
                bytesValue: me(e.serializer, t.E_)
            };
            if (t instanceof Du) {
                const n = e.rt, s = t.firestore.A_;
                if (!s.isEqual(n)) throw e.a_(`Document reference is for database ${s.projectId}/${s.database} but should be for database ${n.projectId}/${n.database}`);
                return {
                    referenceValue: Pe(t.firestore.A_ || e.rt, t.O_.path)
                };
            }
            if (void 0 === t && e.ignoreUndefinedProperties) return null;
            throw e.a_("Unsupported field value: " + bc$1(t));
        }
        /**
     * Checks whether an object looks like a JSON object that should be converted
     * into a struct. Normal class/prototype instances are considered to look like
     * JSON objects since they should be converted to a struct value. Arrays, Dates,
     * GeoPoints, etc. are not considered to look like JSON objects since they map
     * to specific FieldValue types other than ObjectValue.
     */ (t, e);
    }

    function Ta$1(t, e) {
        const n = {};
        return Wt(t) ? 
        // If we encounter an empty object, we explicitly add it to the update
        // mask to ensure that the server creates a map entry.
        e.path && e.path.length > 0 && e.en.push(e.path) : Qt(t, ((t, s) => {
            const i = Ea$1(s, e.Pf(t));
            null != i && (n[t] = i);
        })), {
            mapValue: {
                fields: n
            }
        };
    }

    function Ia$1(t) {
        return !("object" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof W$1 || t instanceof Uc$1 || t instanceof Kc$1 || t instanceof Du || t instanceof Dc$1);
    }

    function ma$1(t, e, n) {
        if (!Ia$1(n) || !function(t) {
            return "object" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));
        }(n)) {
            const s = bc$1(n);
            throw "an object" === s ? e.a_(t + " a custom object") : e.a_(t + " " + s);
        }
    }

    /**
     * Helper that calls fromDotSeparatedString() but wraps any error thrown.
     */ function Aa$1(t, e, n) {
        if (
        // If required, replace the FieldPath Compat class with with the firestore-exp
        // FieldPath.
        e instanceof Qc$1 && (e = e.o_), e instanceof zc$1) return e.D_;
        if ("string" == typeof e) return Pa$1(t, e);
        throw Va$1("Field path arguments must be of type string or FieldPath.", t, 
        /* hasConverter= */ !1, 
        /* path= */ void 0, n);
    }

    /**
     * Matches any characters in a field path string that are reserved.
     */ const Ra$1 = new RegExp("[~\\*/\\[\\]]");

    /**
     * Wraps fromDotSeparatedString with an error message about the method that
     * was thrown.
     * @param methodName - The publicly visible method name
     * @param path - The dot-separated string form of a field path which will be
     * split on dots.
     * @param targetDoc - The document against which the field path will be
     * evaluated.
     */ function Pa$1(t, e, n) {
        if (e.search(Ra$1) >= 0) throw Va$1(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`, t, 
        /* hasConverter= */ !1, 
        /* path= */ void 0, n);
        try {
            return new zc$1(...e.split(".")).D_;
        } catch (s) {
            throw Va$1(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`, t, 
            /* hasConverter= */ !1, 
            /* path= */ void 0, n);
        }
    }

    function Va$1(t, e, n, s, i) {
        const r = s && !s.q(), o = void 0 !== i;
        let c = `Function ${e}() called with invalid data`;
        n && (c += " (via `toFirestore()`)"), c += ". ";
        let u = "";
        return (r || o) && (u += " (found", r && (u += " in field " + s), o && (u += " in document " + i), 
        u += ")"), new M$1(x$1.INVALID_ARGUMENT, c + t + u);
    }

    /** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */ function ga(t, e) {
        return t.some((t => t.isEqual(e)));
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Internal transaction object responsible for accumulating the mutations to
     * perform and the base versions for any documents read.
     */ class ya {
        constructor(t) {
            this.Ou = t, 
            // The version of each document that was read during this transaction.
            this.vf = new Map, this.mutations = [], this.Sf = !1, 
            /**
             * A deferred usage error that occurred previously in this transaction that
             * will cause the transaction to fail once it actually commits.
             */
            this.Df = null, 
            /**
             * Set of documents that have been written in the transaction.
             *
             * When there's more than one write to the same key in a transaction, any
             * writes after the first are handled differently.
             */
            this.Cf = new Set;
        }
        async Z_(t) {
            if (this.Nf(), this.mutations.length > 0) throw new M$1(x$1.INVALID_ARGUMENT, "Firestore transactions require all reads to be executed before all writes.");
            const e = await async function(t, e) {
                const n = N$1(t), s = ve(n.serializer) + "/documents", i = {
                    documents: e.map((t => ge(n.serializer, t)))
                }, r = await n.yu("BatchGetDocuments", s, i), o = new Map;
                r.forEach((t => {
                    const e = Ce(n.serializer, t);
                    o.set(e.key.toString(), e);
                }));
                const c = [];
                return e.forEach((t => {
                    const e = o.get(t.toString());
                    C(!!e), c.push(e);
                })), c;
            }(this.Ou, t);
            return e.forEach((t => {
                t instanceof kn || t instanceof Mn ? this.xf(t) : D$1();
            })), e;
        }
        set(t, e) {
            this.write(e.j_(t, this.rn(t))), this.Cf.add(t.toString());
        }
        update(t, e) {
            try {
                this.write(e.j_(t, this.Mf(t)));
            } catch (t) {
                this.Df = t;
            }
            this.Cf.add(t.toString());
        }
        delete(t) {
            this.write([ new vn(t, this.rn(t)) ]), this.Cf.add(t.toString());
        }
        async commit() {
            if (this.Nf(), this.Df) throw this.Df;
            const t = this.vf;
            // For each mutation, note that the doc was written.
                    this.mutations.forEach((e => {
                t.delete(e.key.toString());
            })), 
            // For each document that was read but not written to, we want to perform
            // a `verify` operation.
            t.forEach(((t, e) => {
                const n = Y$1.tt(e);
                this.mutations.push(new Sn(n, this.rn(n)));
            })), await async function(t, e) {
                const n = N$1(t), s = ve(n.serializer) + "/documents", i = {
                    writes: e.map((t => xe(n.serializer, t)))
                };
                await n.gu("Commit", s, i);
            }(this.Ou, this.mutations), this.Sf = !0;
        }
        xf(t) {
            let e;
            if (t instanceof Mn) e = t.version; else {
                if (!(t instanceof kn)) throw D$1();
                // For deleted docs, we must use baseVersion 0 when we overwrite them.
                e = j.min();
            }
            const n = this.vf.get(t.key.toString());
            if (n) {
                if (!e.isEqual(n)) 
                // This transaction will fail no matter what.
                throw new M$1(x$1.ABORTED, "Document version changed between two reads.");
            } else this.vf.set(t.key.toString(), e);
        }
        /**
         * Returns the version of this document when it was read in this transaction,
         * as a precondition, or no precondition if it was not read.
         */    rn(t) {
            const e = this.vf.get(t.toString());
            return !this.Cf.has(t.toString()) && e ? dn.updateTime(e) : dn.on();
        }
        /**
         * Returns the precondition for a document if the operation is an update.
         */    Mf(t) {
            const e = this.vf.get(t.toString());
            // The first time a document is written, we want to take into account the
            // read time and existence
                    if (!this.Cf.has(t.toString()) && e) {
                if (e.isEqual(j.min())) 
                // The document doesn't exist, so fail the transaction.
                // This has to be validated locally because you can't send a
                // precondition that a document does not exist without changing the
                // semantics of the backend write to be an insert. This is the reverse
                // of what we want, since we want to assert that the document doesn't
                // exist but then send the update and have it fail. Since we can't
                // express that to the backend, we have to validate locally.
                // Note: this can change once we can send separate verify writes in the
                // transaction.
                throw new M$1(x$1.INVALID_ARGUMENT, "Can't update a document that doesn't exist.");
                // Document exists, base precondition on document update time.
                            return dn.updateTime(e);
            }
            // Document was not read, so we just use the preconditions for a blind
            // update.
            return dn.exists(!0);
        }
        write(t) {
            this.Nf(), this.mutations = this.mutations.concat(t);
        }
        Nf() {}
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * TransactionRunner encapsulates the logic needed to run and retry transactions
     * with backoff.
     */
    class pa$1 {
        constructor(t, e, n, s) {
            this.di = t, this.Ou = e, this.updateFunction = n, this.Ti = s, this.kf = 5, this.Si = new Ss(this.di, "transaction_retry" /* TransactionRetry */);
        }
        /** Runs the transaction and sets the result on deferred. */    run() {
            this.Of();
        }
        Of() {
            this.Si.Bs((async () => {
                const t = new ya(this.Ou), e = this.Ff(t);
                e && e.then((e => {
                    this.di.Ri((() => t.commit().then((() => {
                        this.Ti.resolve(e);
                    })).catch((t => {
                        this.$f(t);
                    }))));
                })).catch((t => {
                    this.$f(t);
                }));
            }));
        }
        Ff(t) {
            try {
                const e = this.updateFunction(t);
                return !tt(e) && e.catch && e.then ? e : (this.Ti.reject(Error("Transaction callback must return a Promise")), 
                null);
            } catch (t) {
                // Do not retry errors thrown by user provided updateFunction.
                return this.Ti.reject(t), null;
            }
        }
        $f(t) {
            this.kf > 0 && this.Lf(t) ? (this.kf -= 1, this.di.Ri((() => (this.Of(), Promise.resolve())))) : this.Ti.reject(t);
        }
        Lf(t) {
            if ("FirebaseError" === t.name) {
                // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and
                // non-matching document versions with ABORTED. These errors should be retried.
                const e = t.code;
                return "aborted" === e || "failed-precondition" === e || !dt(e);
            }
            return !1;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * FirestoreClient is a top-level class that constructs and owns all of the
     * pieces of the client SDK architecture. It is responsible for creating the
     * async queue that is shared by all of the other components in the system.
     */
    class ba$1 {
        constructor(t, 
        /**
         * Asynchronous queue responsible for all of our internal processing. When
         * we get incoming work from the user (via public API) or the network
         * (incoming GRPC messages), we should always schedule onto this queue.
         * This ensures all of our work is properly serialized (e.g. we don't
         * start processing a new operation while the previous one is waiting for
         * an async I/O to complete).
         */
        e, n) {
            this.credentials = t, this.di = e, this.Ml = n, this.user = P$1.UNAUTHENTICATED, this.clientId = q$1.p(), 
            this.Bf = () => {}, this.A = new Rs, this.credentials.T((t => {
                p$1("FirestoreClient", "Received user=", t.uid), this.user.isEqual(t) || (this.user = t, 
                this.Bf(t)), this.A.resolve();
            }));
        }
        async getConfiguration() {
            return await this.A.promise, {
                di: this.di,
                Ml: this.Ml,
                clientId: this.clientId,
                credentials: this.credentials,
                Yl: this.user,
                qh: 100
            };
        }
        qf(t) {
            this.Bf = t, 
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.A.promise.then((() => this.Bf(this.user)));
        }
        /**
         * Checks that the client has not been terminated. Ensures that other methods on
         * this class cannot be called after the client is terminated.
         */    ef() {
            if (this.di.Ci) throw new M$1(x$1.FAILED_PRECONDITION, "The client has already been terminated.");
        }
        terminate() {
            this.di.ki();
            const t = new Rs;
            return this.di.Ni((async () => {
                try {
                    this.Uf && await this.Uf.terminate(), this.Kf && await this.Kf.terminate(), 
                    // `removeChangeListener` must be called after shutting down the
                    // RemoteStore as it will prevent the RemoteStore from retrieving
                    // auth tokens.
                    this.credentials.I(), t.resolve();
                } catch (e) {
                    const n = Ks(e, "Failed to shutdown persistence");
                    t.reject(n);
                }
            })), t.promise;
        }
    }

    async function va$1(t, e) {
        t.di.Li(), p$1("FirestoreClient", "Initializing OfflineComponentProvider");
        const n = await t.getConfiguration();
        await e.initialize(n), t.qf((n => t.di.Oi((async () => {
            await lr(e.ku, n);
        })))), 
        // When a user calls clearPersistence() in one client, all other clients
        // need to be terminated to allow the delete to succeed.
        e.persistence.rc((() => t.terminate())), t.Kf = e;
    }

    async function Sa$1(t, e) {
        t.di.Li();
        const n = await Da$1(t);
        p$1("FirestoreClient", "Initializing OnlineComponentProvider");
        const s = await t.getConfiguration();
        await e.initialize(n, s), 
        // The CredentialChangeListener of the online component provider takes
        // precedence over the offline component provider.
        t.qf((n => t.di.Oi((() => async function(t, e) {
            const n = N$1(t);
            n.di.Li(), p$1("RemoteStore", "RemoteStore received new credentials");
            const s = Fr(n);
            // Tear down and re-create our network streams. This will ensure we get a
            // fresh auth token for the new user and re-fill the write pipeline with
            // new mutations from the LocalStore (since mutations are per-user).
                    n.Bu.add(3 /* CredentialChange */), await Dr(n), s && 
            // Don't set the network status to Unknown if we are offline.
            n.Qu.set("Unknown" /* Unknown */), await n.Fu.s_(e), n.Bu.delete(3 /* CredentialChange */), 
            await Sr(n);
        }(e.$h, n))))), t.Uf = e;
    }

    async function Da$1(t) {
        return t.Kf || (p$1("FirestoreClient", "Using default OfflineComponentProvider"), 
        await va$1(t, new mc$1)), t.Kf;
    }

    async function Ca$1(t) {
        return t.Uf || (p$1("FirestoreClient", "Using default OnlineComponentProvider"), await Sa$1(t, new Pc$1)), 
        t.Uf;
    }

    function Na$1(t) {
        return Da$1(t).then((t => t.persistence));
    }

    function xa(t) {
        return Da$1(t).then((t => t.ku));
    }

    function Ma$1(t) {
        return Ca$1(t).then((t => t.$h));
    }

    function ka$1(t) {
        return Ca$1(t).then((t => t.ba));
    }

    async function Oa$1(t) {
        const e = await Ca$1(t), n = e.Lh;
        return n.ta = So.bind(null, e.ba), n.sa = Co.bind(null, e.ba), n;
    }

    /** Enables the network connection and re-enqueues all pending operations. */ function Fa$1(t) {
        return t.di.enqueue((async () => {
            const e = await Na$1(t), n = await Ma$1(t);
            return e.oc(!0), function(t) {
                const e = N$1(t);
                return e.Bu.delete(0 /* UserDisabled */), Sr(e);
            }(n);
        }));
    }

    /** Disables the network connection. Pending operations will not complete. */ function $a$1(t) {
        return t.di.enqueue((async () => {
            const e = await Na$1(t), n = await Ma$1(t);
            return e.oc(!1), async function(t) {
                const e = N$1(t);
                e.Bu.add(0 /* UserDisabled */), await Dr(e), 
                // Set the OnlineState to Offline so get()s return from cache, etc.
                e.Qu.set("Offline" /* Offline */);
            }(n);
        }));
    }

    /**
     * Returns a Promise that resolves when all writes that were pending at the time
     * this method was called received server acknowledgement. An acknowledgement
     * can be either acceptance or rejection.
     */ function La$1(t, e, n = {}) {
        const s = new Rs;
        return t.di.Ri((async () => function(t, e, n, s, i) {
            const r = new Vc$1({
                next: r => {
                    // Remove query first before passing event to user to avoid
                    // user actions affecting the now stale query.
                    e.Ri((() => ro(t, o)));
                    const c = r.docs.has(n);
                    !c && r.fromCache ? 
                    // TODO(dimond): If we're online and the document doesn't
                    // exist then we resolve with a doc.exists set to false. If
                    // we're offline however, we reject the Promise in this
                    // case. Two options: 1) Cache the negative response from
                    // the server so we can deliver that even when you're
                    // offline 2) Actually reject the Promise in the online case
                    // if the document doesn't exist.
                    i.reject(new M$1(x$1.UNAVAILABLE, "Failed to get document because the client is offline.")) : c && r.fromCache && s && "server" === s.source ? i.reject(new M$1(x$1.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : i.resolve(r);
                },
                error: t => i.reject(t)
            }), o = new ao(Ln(n.path), r, {
                includeMetadataChanges: !0,
                ha: !0
            });
            return io(t, o);
        }(await Oa$1(t), t.di, e, n, s))), s.promise;
    }

    function Ba$1(t, e, n = {}) {
        const s = new Rs;
        return t.di.Ri((async () => function(t, e, n, s, i) {
            const r = new Vc$1({
                next: n => {
                    // Remove query first before passing event to user to avoid
                    // user actions affecting the now stale query.
                    e.Ri((() => ro(t, o))), n.fromCache && "server" === s.source ? i.reject(new M$1(x$1.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')) : i.resolve(n);
                },
                error: t => i.reject(t)
            }), o = new ao(n, r, {
                includeMetadataChanges: !0,
                ha: !0
            });
            return io(t, o);
        }
        /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
        /** DOMException error code constants. */ (await Oa$1(t), t.di, e, n, s))), s.promise;
    }

    /**
     * The Cloud Firestore service interface.
     *
     * Do not call this constructor directly. Instead, use {@link getFirestore}.
     */
    class qa$1 extends Gc$1 {
        /** @hideconstructor */
        constructor(t, e) {
            super(t, e), this.nf = new Us, this.T_ = "name" in t ? t.name : "[DEFAULT]";
        }
        S_() {
            return this.tf || 
            // The client must be initialized to ensure that all subsequent API
            // usage throws an exception.
            Vu(this), this.tf.terminate();
        }
    }

    /**
     * Initializes a new instance of Cloud Firestore with the provided settings.
     * Can only be called before any other function, including
     * {@link getFirestore}. If the custom settings are empty, this function is
     * equivalent to calling {@link getFirestore}.
     *
     * @param app - The {@link FirebaseApp} with which the `Firestore` instance will
     * be associated.
     * @param settings - A settings object to configure the `Firestore` instance.
     * @returns A newly initialized `Firestore` instance.
     */ function Ua$1(e, n) {
        const s = app._getProvider(e, "firestore-exp").getImmediate();
        if (void 0 !== n.cacheSizeBytes && -1 !== n.cacheSizeBytes && n.cacheSizeBytes < 1048576) throw new M$1(x$1.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
        return s.p_(n), s;
    }

    /**
     * Returns the existing instance of Firestore that is associated with the
     * provided {@link FirebaseApp}. If no instance exists, initializes a new
     * instance with default settings.
     *
     * @param app - The {@link FirebaseApp} instance that the returned Firestore
     * instance is associated with.
     * @returns The `Firestore` instance of the provided app.
     */ function Ka$1(e) {
        return app._getProvider(e, "firestore-exp").getImmediate();
    }

    /**
     * Attempts to enable persistent storage, if possible.
     *
     * Must be called before any other functions (other than
     * {@link initializeFirestore}, {@link getFirestore} or
     * {@link clearIndexedDbPersistence}.
     *
     * If this fails, `enableIndexedDbPersistence()` will reject the promise it
     * returns. Note that even after this failure, the `Firestore` instance will
     * remain usable, however offline persistence will be disabled.
     *
     * There are several reasons why this can fail, which can be identified by
     * the `code` on the error.
     *
     *   * failed-precondition: The app is already open in another browser tab.
     *   * unimplemented: The browser is incompatible with the offline
     *     persistence implementation.
     *
     * @param firestore - The `Firestore` instance to enable persistence for.
     * @param persistenceSettings - Optional settings object to configure
     * persistence.
     * @returns A promise that represents successfully enabling persistent storage.
     */ function Qa$1(t, e) {
        Xa$1(t = vc$1(t, qa$1));
        const n = Pu(t), s = t.v_(), i = new Pc$1;
        return ja$1(n, i, new Ac$1(i, s.cacheSizeBytes, null == e ? void 0 : e.forceOwnership));
    }

    /**
     * Attempts to enable multi-tab persistent storage, if possible. If enabled
     * across all tabs, all operations share access to local persistence, including
     * shared execution of queries and latency-compensated local document updates
     * across all connected instances.
     *
     * If this fails, `enableMultiTabIndexedDbPersistence()` will reject the promise
     * it returns. Note that even after this failure, the `Firestore` instance will
     * remain usable, however offline persistence will be disabled.
     *
     * There are several reasons why this can fail, which can be identified by
     * the `code` on the error.
     *
     *   * failed-precondition: The app is already open in another browser tab and
     *     multi-tab is not enabled.
     *   * unimplemented: The browser is incompatible with the offline
     *     persistence implementation.
     *
     * @param firestore - The `Firestore` instance to enable persistence for.
     * @returns A promise that represents successfully enabling persistent
     * storage.
     */ function Wa$1(t) {
        Xa$1(t = vc$1(t, qa$1));
        const e = Pu(t), n = t.v_(), s = new Pc$1;
        return ja$1(e, s, new Rc$1(s, n.cacheSizeBytes));
    }

    /**
     * Registers both the `OfflineComponentProvider` and `OnlineComponentProvider`.
     * If the operation fails with a recoverable error (see
     * `canRecoverFromIndexedDbError()` below), the returned Promise is rejected
     * but the client remains usable.
     */ function ja$1(t, e, n) {
        const s = new Rs;
        return t.di.enqueue((async () => {
            try {
                await va$1(t, n), await Sa$1(t, e), s.resolve();
            } catch (t) {
                if (!
                /**
     * Decides whether the provided error allows us to gracefully disable
     * persistence (as opposed to crashing the client).
     */
                function(t) {
                    if ("FirebaseError" === t.name) return t.code === x$1.FAILED_PRECONDITION || t.code === x$1.UNIMPLEMENTED;
                    if ("undefined" != typeof DOMException && t instanceof DOMException) 
                    // There are a few known circumstances where we can open IndexedDb but
                    // trying to read/write will fail (e.g. quota exceeded). For
                    // well-understood cases, we attempt to detect these and then gracefully
                    // fall back to memory persistence.
                    // NOTE: Rather than continue to add to this list, we could decide to
                    // always fall back, with the risk that we might accidentally hide errors
                    // representing actual SDK bugs.
                    // When the browser is out of quota we could get either quota exceeded
                    // or an aborted error depending on whether the error happened during
                    // schema migration.
                    return 22 === t.code || 20 === t.code || 
                    // Firefox Private Browsing mode disables IndexedDb and returns
                    // INVALID_STATE for any usage.
                    11 === t.code;
                    return !0;
                }
                /**
     * Clears the persistent storage. This includes pending writes and cached
     * documents.
     *
     * Must be called while the `Firestore` instance is not started (after the app is
     * terminated or when the app is first initialized). On startup, this function
     * must be called before other functions (other than {@link
     * initializeFirestore} or {@link getFirestore})). If the `Firestore`
     * instance is still running, the promise will be rejected with the error code
     * of `failed-precondition`.
     *
     * Note: `clearIndexedDbPersistence()` is primarily intended to help write
     * reliable tests that use Cloud Firestore. It uses an efficient mechanism for
     * dropping existing data but does not attempt to securely overwrite or
     * otherwise make cached data unrecoverable. For applications that are sensitive
     * to the disclosure of cached data in between user sessions, we strongly
     * recommend not enabling persistence at all.
     *
     * @param firestore - The `Firestore` instance to clear persistence for.
     * @returns A promise that is resolved when the persistent storage is
     * cleared. Otherwise, the promise is rejected with an error.
     */ (t)) throw t;
                console.warn("Error enabling offline persistence. Falling back to persistence disabled: " + t), 
                s.reject(t);
            }
        })).then((() => s.promise));
    }

    function Ga$1(t) {
        if (t.V_ && !t.g_) throw new M$1(x$1.FAILED_PRECONDITION, "Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");
        const e = new Rs;
        return t.nf.Ni((async () => {
            try {
                await async function(t) {
                    if (!Ds.Gs()) return Promise.resolve();
                    const e = t + "main";
                    await Ds.delete(e);
                }
                /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ (ur(t.A_, t.T_)), e.resolve();
            } catch (t) {
                e.reject(t);
            }
        })), e.promise;
    }

    /**
     * Waits until all currently pending writes for the active user have been
     * acknowledged by the backend.
     *
     * The returned Promise resolves immediately if there are no outstanding writes.
     * Otherwise, the Promise waits for all previously issued writes (including
     * those written in a previous app session), but it does not wait for writes
     * that were added after the function is called. If you want to wait for
     * additional writes, call `waitForPendingWrites()` again.
     *
     * Any outstanding `waitForPendingWrites()` Promises are rejected during user
     * changes.
     *
     * @returns A Promise which resolves when all currently pending writes have been
     * acknowledged by the backend.
     */ function za$1(t) {
        return function(t) {
            const e = new Rs;
            return t.di.Ri((async () => $o(await ka$1(t), e))), e.promise;
        }(Pu(t = vc$1(t, qa$1)));
    }

    /**
     * Re-enables use of the network for this Firestore instance after a prior
     * call to {@link disableNetwork}.
     *
     * @returns A promise that is resolved once the network has been enabled.
     */ function Ha$1(t) {
        return Fa$1(Pu(t = vc$1(t, qa$1)));
    }

    /**
     * Disables network usage for this instance. It can be re-enabled via {@link
     * enableNetwork}. While the network is disabled, any snapshot listeners,
     * `getDoc()` or `getDocs()` calls will return results from cache, and any write
     * operations will be queued until the network is restored.
     *
     * @returns A promise that is resolved once the network has been disabled.
     */ function Ja$1(t) {
        return $a$1(Pu(t = vc$1(t, qa$1)));
    }

    /**
     * Terminates the provided Firestore instance.
     *
     * After calling `terminate()` only the `clearIndexedDbPersistence()` function
     * may be used. Any other function will throw a `FirestoreError`.
     *
     * To restart after termination, create a new instance of FirebaseFirestore with
     * {@link getFirestore}.
     *
     * Termination does not cancel any pending writes, and any promises that are
     * awaiting a response from the server will not be resolved. If you have
     * persistence enabled, the next time you start this instance, it will resume
     * sending these writes to the server.
     *
     * Note: Under normal circumstances, calling `terminate()` is not required. This
     * function is useful only when you want to force this instance to release all
     * of its resources or in combination with `clearIndexedDbPersistence()` to
     * ensure that all local state is destroyed between test runs.
     *
     * @returns A promise that is resolved when the instance has been successfully
     * terminated.
     */ function Ya$1(t) {
        return app._removeServiceInstance(t.app, "firestore-exp"), t._delete();
    }

    function Xa$1(t) {
        if (t.V_ || t.g_) throw new M$1(x$1.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.");
    }

    app._registerComponent(new Component("firestore-exp", (t => ((t, e) => new qa$1(t, e))(t.getProvider("app-exp").getImmediate(), t.getProvider("auth-internal"))), "PUBLIC" /* PUBLIC */)), 
    app.registerVersion("firestore-exp", "0.0.900", "node");

    exports.Bytes = Kc$1;
    exports.CACHE_SIZE_UNLIMITED = Ru;
    exports.CollectionReference = Xu;
    exports.DocumentReference = Du;
    exports.DocumentSnapshot = Jc$1;
    exports.FieldPath = zc$1;
    exports.FieldValue = Dc$1;
    exports.FirebaseFirestore = qa$1;
    exports.FirestoreError = M$1;
    exports.GeoPoint = Uc$1;
    exports.Query = Cu;
    exports.QueryConstraint = Nu;
    exports.QueryDocumentSnapshot = Yc$1;
    exports.QuerySnapshot = Xc$1;
    exports.SnapshotMetadata = gu;
    exports.Timestamp = W$1;
    exports.Transaction = mu;
    exports.WriteBatch = Eu;
    exports.addDoc = lu;
    exports.arrayRemove = Mc$1;
    exports.arrayUnion = xc;
    exports.clearIndexedDbPersistence = Ga$1;
    exports.collection = Zu;
    exports.collectionGroup = ta$1;
    exports.deleteDoc = hu;
    exports.deleteField = Cc$1;
    exports.disableNetwork = Ja$1;
    exports.doc = ea$1;
    exports.documentId = Hc$1;
    exports.enableIndexedDbPersistence = Qa$1;
    exports.enableMultiTabIndexedDbPersistence = Wa$1;
    exports.enableNetwork = Ha$1;
    exports.endAt = ju;
    exports.endBefore = Wu;
    exports.getDoc = eu;
    exports.getDocFromCache = su;
    exports.getDocFromServer = iu;
    exports.getDocs = ru;
    exports.getDocsFromCache = ou;
    exports.getDocsFromServer = cu;
    exports.getFirestore = Ka$1;
    exports.increment = kc$1;
    exports.initializeFirestore = Ua$1;
    exports.limit = Lu;
    exports.limitToLast = Bu;
    exports.onSnapshot = _u;
    exports.onSnapshotsInSync = fu;
    exports.orderBy = Fu;
    exports.query = xu;
    exports.queryEqual = ia;
    exports.refEqual = sa$1;
    exports.runTransaction = Au;
    exports.serverTimestamp = Nc$1;
    exports.setDoc = uu;
    exports.setLogLevel = y$1;
    exports.snapshotEqual = tu;
    exports.startAfter = Ku;
    exports.startAt = Uu;
    exports.terminate = Ya$1;
    exports.updateDoc = au;
    exports.waitForPendingWrites = za$1;
    exports.where = ku;
    exports.writeBatch = Iu;

    Object.defineProperty(exports, '__esModule', { value: true });


              }).apply(this, arguments);
            } catch(err) {
                console.error(err);
                throw new Error(
                  'Cannot instantiate firebase-firestore.js - ' +
                  'be sure to load firebase-app.js first.'
                );
              }

})));


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@firebase/app')) :
    typeof define === 'function' && define.amd ? define(['exports', '@firebase/app'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.firebase = global.firebase || {}, global.firebase['firestore-lite'] = global.firebase['firestore-lite'] || {}), global.firebase.app));
}(this, (function (exports, app) { 'use strict';

    try {
                (function() {

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ERROR_NAME = 'FirebaseError';
    // Based on code from:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
    var FirebaseError = /** @class */ (function (_super) {
        __extends(FirebaseError, _super);
        function FirebaseError(code, message, customData) {
            var _this = _super.call(this, message) || this;
            _this.code = code;
            _this.customData = customData;
            _this.name = ERROR_NAME;
            // Fix For ES5
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(_this, FirebaseError.prototype);
            // Maintains proper stack trace for where our error was thrown.
            // Only available on V8.
            if (Error.captureStackTrace) {
                Error.captureStackTrace(_this, ErrorFactory.prototype.create);
            }
            return _this;
        }
        return FirebaseError;
    }(Error));
    var ErrorFactory = /** @class */ (function () {
        function ErrorFactory(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
        }
        ErrorFactory.prototype.create = function (code) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            var customData = data[0] || {};
            var fullCode = this.service + "/" + code;
            var template = this.errors[code];
            var message = template ? replaceTemplate(template, customData) : 'Error';
            // Service Name: Error message (service/code).
            var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
            var error = new FirebaseError(fullCode, fullMessage, customData);
            return error;
        };
        return ErrorFactory;
    }());
    function replaceTemplate(template, data) {
        return template.replace(PATTERN, function (_, key) {
            var value = data[key];
            return value != null ? String(value) : "<" + key + "?>";
        });
    }
    var PATTERN = /\{\$([^}]+)}/g;

    /**
     * Component for service name T, e.g. `auth`, `auth-internal`
     */
    var Component = /** @class */ (function () {
        /**
         *
         * @param name The public service name, e.g. app, auth, firestore, database
         * @param instanceFactory Service factory responsible for creating the public interface
         * @param type whether the service provided by the component is public or private
         */
        function Component(name, instanceFactory, type) {
            this.name = name;
            this.instanceFactory = instanceFactory;
            this.type = type;
            this.multipleInstances = false;
            /**
             * Properties to be added to the service namespace
             */
            this.serviceProps = {};
            this.instantiationMode = "LAZY" /* LAZY */;
        }
        Component.prototype.setInstantiationMode = function (mode) {
            this.instantiationMode = mode;
            return this;
        };
        Component.prototype.setMultipleInstances = function (multipleInstances) {
            this.multipleInstances = multipleInstances;
            return this;
        };
        Component.prototype.setServiceProps = function (props) {
            this.serviceProps = props;
            return this;
        };
        return Component;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a;
    /**
     * The JS SDK supports 5 log levels and also allows a user the ability to
     * silence the logs altogether.
     *
     * The order is a follows:
     * DEBUG < VERBOSE < INFO < WARN < ERROR
     *
     * All of the log types above the current log level will be captured (i.e. if
     * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
     * `VERBOSE` logs will not)
     */
    var LogLevel;
    (function (LogLevel) {
        LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
        LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
        LogLevel[LogLevel["INFO"] = 2] = "INFO";
        LogLevel[LogLevel["WARN"] = 3] = "WARN";
        LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
        LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(LogLevel || (LogLevel = {}));
    var levelStringToEnum = {
        'debug': LogLevel.DEBUG,
        'verbose': LogLevel.VERBOSE,
        'info': LogLevel.INFO,
        'warn': LogLevel.WARN,
        'error': LogLevel.ERROR,
        'silent': LogLevel.SILENT
    };
    /**
     * The default log level
     */
    var defaultLogLevel = LogLevel.INFO;
    /**
     * By default, `console.debug` is not displayed in the developer console (in
     * chrome). To avoid forcing users to have to opt-in to these logs twice
     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
     * logs to the `console.log` function.
     */
    var ConsoleMethod = (_a = {},
        _a[LogLevel.DEBUG] = 'log',
        _a[LogLevel.VERBOSE] = 'log',
        _a[LogLevel.INFO] = 'info',
        _a[LogLevel.WARN] = 'warn',
        _a[LogLevel.ERROR] = 'error',
        _a);
    /**
     * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
     * messages on to their corresponding console counterparts (if the log method
     * is supported by the current log level)
     */
    var defaultLogHandler = function (instance, logType) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (logType < instance.logLevel) {
            return;
        }
        var now = new Date().toISOString();
        var method = ConsoleMethod[logType];
        if (method) {
            console[method].apply(console, __spreadArrays(["[" + now + "]  " + instance.name + ":"], args));
        }
        else {
            throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
        }
    };
    var Logger = /** @class */ (function () {
        /**
         * Gives you an instance of a Logger to capture messages according to
         * Firebase's logging scheme.
         *
         * @param name The name that the logs will be associated with
         */
        function Logger(name) {
            this.name = name;
            /**
             * The log level of the given Logger instance.
             */
            this._logLevel = defaultLogLevel;
            /**
             * The main (internal) log handler for the Logger instance.
             * Can be set to a new function in internal package code but not by user.
             */
            this._logHandler = defaultLogHandler;
            /**
             * The optional, additional, user-defined log handler for the Logger instance.
             */
            this._userLogHandler = null;
        }
        Object.defineProperty(Logger.prototype, "logLevel", {
            get: function () {
                return this._logLevel;
            },
            set: function (val) {
                if (!(val in LogLevel)) {
                    throw new TypeError("Invalid value \"" + val + "\" assigned to `logLevel`");
                }
                this._logLevel = val;
            },
            enumerable: false,
            configurable: true
        });
        // Workaround for setter/getter having to be the same type.
        Logger.prototype.setLogLevel = function (val) {
            this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
        };
        Object.defineProperty(Logger.prototype, "logHandler", {
            get: function () {
                return this._logHandler;
            },
            set: function (val) {
                if (typeof val !== 'function') {
                    throw new TypeError('Value assigned to `logHandler` must be a function');
                }
                this._logHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Logger.prototype, "userLogHandler", {
            get: function () {
                return this._userLogHandler;
            },
            set: function (val) {
                this._userLogHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * The functions below are all based on the `console` interface
         */
        Logger.prototype.debug = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));
        };
        Logger.prototype.log = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));
        };
        Logger.prototype.info = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));
        };
        Logger.prototype.warn = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));
        };
        Logger.prototype.error = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));
        };
        return Logger;
    }());

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const u = "ok", c = "cancelled", a = "unknown", h = "invalid-argument", l = "deadline-exceeded", f = "not-found", d = "already-exists", _ = "permission-denied", w = "unauthenticated", m = "resource-exhausted", p = "failed-precondition", y = "aborted", E = "out-of-range", I = "unimplemented", T = "internal", A = "unavailable", P = "data-loss";

    /** An error returned by a Firestore operation. */ class R extends Error {
        /** @hideconstructor */
        constructor(t, n) {
            super(n), this.code = t, this.message = n, this.name = "FirebaseError", 
            // HACK: We write a toString property directly because Error is not a real
            // class and so inheritance does not work correctly. We could alternatively
            // do the same "back-door inheritance" trick that FirebaseError does.
            this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class V {
        /**
         * Constructs a DatabaseInfo using the provided host, databaseId and
         * persistenceKey.
         *
         * @param databaseId - The database to use.
         * @param persistenceKey - A unique identifier for this Firestore's local
         * storage (used in conjunction with the databaseId).
         * @param host - The Firestore backend host to connect to.
         * @param ssl - Whether to use SSL when connecting.
         * @param forceLongPolling - Whether to use the forceLongPolling option
         * when using WebChannel as the network transport.
         * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
         * option when using WebChannel as the network transport.
         */
        constructor(t, n, e, s, r, i) {
            this.t = t, this.persistenceKey = n, this.host = e, this.ssl = s, this.forceLongPolling = r, 
            this.i = i;
        }
    }

    /** The default database name for a project. */
    /** Represents the database ID a Firestore client is associated with. */
    class g {
        constructor(t, n) {
            this.projectId = t, this.database = n || "(default)";
        }
        get o() {
            return "(default)" === this.database;
        }
        isEqual(t) {
            return t instanceof g && t.projectId === this.projectId && t.database === this.database;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Simple wrapper around a nullable UID. Mostly exists to make code more
     * readable.
     */ class v {
        constructor(t) {
            this.uid = t;
        }
        u() {
            return null != this.uid;
        }
        /**
         * Returns a key representing this user, suitable for inclusion in a
         * dictionary.
         */    h() {
            return this.u() ? "uid:" + this.uid : "anonymous-user";
        }
        isEqual(t) {
            return t.uid === this.uid;
        }
    }

    /** A user with a null UID. */ v.UNAUTHENTICATED = new v(null), 
    // TODO(mikelehen): Look into getting a proper uid-equivalent for
    // non-FirebaseAuth providers.
    v.l = new v("google-credentials-uid"), v._ = new v("first-party-uid");

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    const b = new Logger("@firebase/firestore");

    /**
     * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).
     *
     * @param logLevel - The verbosity you set for activity and error logging. Can
     *   be any of the following values:
     *
     *   <ul>
     *     <li>`debug` for the most verbose logging level, primarily for
     *     debugging.</li>
     *     <li>`error` to log errors only.</li>
     *     <li><code>`silent` to turn off logging.</li>
     *   </ul>
     */ function N(t) {
        b.setLogLevel(t);
    }

    function D(t, ...n) {
        if (b.logLevel <= LogLevel.DEBUG) {
            const e = n.map($);
            b.debug("Firestore (8.1.1): " + t, ...e);
        }
    }

    function F(t, ...n) {
        if (b.logLevel <= LogLevel.ERROR) {
            const e = n.map($);
            b.error("Firestore (8.1.1): " + t, ...e);
        }
    }

    /**
     * Converts an additional log parameter to a string representation.
     */
    function $(t) {
        if ("string" == typeof t) return t;
        try {
            return n = t, JSON.stringify(n);
        } catch (n) {
            // Converting to JSON failed, just log the object directly
            return t;
        }
        /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
        /** Formats an object as a JSON string, suitable for logging. */
        var n;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Unconditionally fails, throwing an Error with the given message.
     * Messages are stripped in production builds.
     *
     * Returns `never` and can be used in expressions:
     * @example
     * let futureVar = fail('not implemented yet');
     */ function S(t = "Unexpected state") {
        // Log the failure in addition to throw an exception, just in case the
        // exception is swallowed.
        const n = "FIRESTORE (8.1.1) INTERNAL ASSERTION FAILED: " + t;
        // NOTE: We don't use FirestoreError here because these are internal failures
        // that cannot be handled by the user. (Also it would create a circular
        // dependency between the error and assert modules which doesn't work.)
        throw F(n), new Error(n);
    }

    /**
     * Fails if the given assertion condition is false, throwing an Error with the
     * given message if it did.
     *
     * Messages are stripped in production builds.
     */ function x(t, n) {
        t || S();
    }

    /**
     * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an
     * instance of `T` before casting.
     */ function q(t, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    n) {
        return t;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class O {
        constructor(t, n) {
            this.user = n, this.type = "OAuth", this.m = {}, 
            // Set the headers using Object Literal notation to avoid minification
            this.m.Authorization = "Bearer " + t;
        }
    }

    /** A CredentialsProvider that always yields an empty token. */ class C {
        constructor() {
            /**
             * Stores the listener registered with setChangeListener()
             * This isn't actually necessary since the UID never changes, but we use this
             * to verify the listen contract is adhered to in tests.
             */
            this.p = null;
        }
        getToken() {
            return Promise.resolve(null);
        }
        I() {}
        T(t) {
            this.p = t, 
            // Fire with initial user.
            t(v.UNAUTHENTICATED);
        }
        A() {
            this.p = null;
        }
    }

    class L {
        constructor(t) {
            /**
             * The auth token listener registered with FirebaseApp, retained here so we
             * can unregister it.
             */
            this.P = null, 
            /** Tracks the current User. */
            this.currentUser = v.UNAUTHENTICATED, this.R = !1, 
            /**
             * Counter used to detect if the token changed while a getToken request was
             * outstanding.
             */
            this.V = 0, 
            /** The listener registered with setChangeListener(). */
            this.p = null, this.forceRefresh = !1, this.P = () => {
                this.V++, this.currentUser = this.g(), this.R = !0, this.p && this.p(this.currentUser);
            }, this.V = 0, this.auth = t.getImmediate({
                optional: !0
            }), this.auth ? this.auth.addAuthTokenListener(this.P) : (
            // if auth is not available, invoke tokenListener once with null token
            this.P(null), t.get().then((t => {
                this.auth = t, this.P && 
                // tokenListener can be removed by removeChangeListener()
                this.auth.addAuthTokenListener(this.P);
            }), (() => {})));
        }
        getToken() {
            // Take note of the current value of the tokenCounter so that this method
            // can fail (with an ABORTED error) if there is a token change while the
            // request is outstanding.
            const t = this.V, n = this.forceRefresh;
            return this.forceRefresh = !1, this.auth ? this.auth.getToken(n).then((n => 
            // Cancel the request since the token changed while the request was
            // outstanding so the response is potentially for a previous user (which
            // user, we can't be sure).
            this.V !== t ? (D("FirebaseCredentialsProvider", "getToken aborted due to token change."), 
            this.getToken()) : n ? (x("string" == typeof n.accessToken), new O(n.accessToken, this.currentUser)) : null)) : Promise.resolve(null);
        }
        I() {
            this.forceRefresh = !0;
        }
        T(t) {
            this.p = t, 
            // Fire the initial event
            this.R && t(this.currentUser);
        }
        A() {
            this.auth && this.auth.removeAuthTokenListener(this.P), this.P = null, this.p = null;
        }
        // Auth.getUid() can return null even with a user logged in. It is because
        // getUid() is synchronous, but the auth code populating Uid is asynchronous.
        // This method should only be called in the AuthTokenListener callback
        // to guarantee to get the actual user.
        g() {
            const t = this.auth && this.auth.getUid();
            return x(null === t || "string" == typeof t), new v(t);
        }
    }

    /*
     * FirstPartyToken provides a fresh token each time its value
     * is requested, because if the token is too old, requests will be rejected.
     * Technically this may no longer be necessary since the SDK should gracefully
     * recover from unauthenticated errors (see b/33147818 for context), but it's
     * safer to keep the implementation as-is.
     */ class U {
        constructor(t, n) {
            this.v = t, this.N = n, this.type = "FirstParty", this.user = v._;
        }
        get m() {
            const t = {
                "X-Goog-AuthUser": this.N
            }, n = this.v.auth.getAuthHeaderValueForFirstParty([]);
            // Use array notation to prevent minification
                    return n && (t.Authorization = n), t;
        }
    }

    /*
     * Provides user credentials required for the Firestore JavaScript SDK
     * to authenticate the user, using technique that is only available
     * to applications hosted by Google.
     */ class M {
        constructor(t, n) {
            this.v = t, this.N = n;
        }
        getToken() {
            return Promise.resolve(new U(this.v, this.N));
        }
        T(t) {
            // Fire with initial uid.
            t(v._);
        }
        A() {}
        I() {}
    }

    /**
     * Builds a CredentialsProvider depending on the type of
     * the credentials passed in.
     */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Generates `nBytes` of random bytes.
     *
     * If `nBytes < 0` , an error will be thrown.
     */
    function j(t) {
        // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.
        const n = 
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        "undefined" != typeof self && (self.crypto || self.msCrypto), e = new Uint8Array(t);
        if (n && "function" == typeof n.getRandomValues) n.getRandomValues(e); else 
        // Falls back to Math.random
        for (let n = 0; n < t; n++) e[n] = Math.floor(256 * Math.random());
        return e;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class B {
        static D() {
            // Alphanumeric characters
            const t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", n = Math.floor(256 / t.length) * t.length;
            // The largest byte value that is a multiple of `char.length`.
                    let e = "";
            for (;e.length < 20; ) {
                const s = j(40);
                for (let r = 0; r < s.length; ++r) 
                // Only accept values that are [0, maxMultiple), this ensures they can
                // be evenly mapped to indices of `chars` via a modulo operation.
                e.length < 20 && s[r] < n && (e += t.charAt(s[r] % t.length));
            }
            return e;
        }
    }

    function k(t, n) {
        return t < n ? -1 : t > n ? 1 : 0;
    }

    /** Helper to compare arrays using isEqual(). */ function Q(t, n, e) {
        return t.length === n.length && t.every(((t, s) => e(t, n[s])));
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // The earlist date supported by Firestore timestamps (0001-01-01T00:00:00Z).
    /**
     * A `Timestamp` represents a point in time independent of any time zone or
     * calendar, represented as seconds and fractions of seconds at nanosecond
     * resolution in UTC Epoch time.
     *
     * It is encoded using the Proleptic Gregorian Calendar which extends the
     * Gregorian calendar backwards to year one. It is encoded assuming all minutes
     * are 60 seconds long, i.e. leap seconds are "smeared" so that no leap second
     * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to
     * 9999-12-31T23:59:59.999999999Z.
     *
     * @see https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto
     */
    class W {
        /**
         * Creates a new timestamp.
         *
         * @param seconds - The number of seconds of UTC time since Unix epoch
         *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
         *     9999-12-31T23:59:59Z inclusive.
         * @param nanoseconds - The non-negative fractions of a second at nanosecond
         *     resolution. Negative second values with fractions must still have
         *     non-negative nanoseconds values that count forward in time. Must be
         *     from 0 to 999,999,999 inclusive.
         */
        constructor(t, n) {
            if (this.seconds = t, this.nanoseconds = n, n < 0) throw new R(h, "Timestamp nanoseconds out of range: " + n);
            if (n >= 1e9) throw new R(h, "Timestamp nanoseconds out of range: " + n);
            if (t < -62135596800) throw new R(h, "Timestamp seconds out of range: " + t);
            // This will break in the year 10,000.
                    if (t >= 253402300800) throw new R(h, "Timestamp seconds out of range: " + t);
        }
        /**
         * Creates a new timestamp with the current date, with millisecond precision.
         *
         * @returns a new timestamp representing the current date.
         */    static now() {
            return W.fromMillis(Date.now());
        }
        /**
         * Creates a new timestamp from the given date.
         *
         * @param date - The date to initialize the `Timestamp` from.
         * @returns A new `Timestamp` representing the same point in time as the given
         *     date.
         */    static fromDate(t) {
            return W.fromMillis(t.getTime());
        }
        /**
         * Creates a new timestamp from the given number of milliseconds.
         *
         * @param milliseconds - Number of milliseconds since Unix epoch
         *     1970-01-01T00:00:00Z.
         * @returns A new `Timestamp` representing the same point in time as the given
         *     number of milliseconds.
         */    static fromMillis(t) {
            const n = Math.floor(t / 1e3);
            return new W(n, 1e6 * (t - 1e3 * n));
        }
        /**
         * Converts a `Timestamp` to a JavaScript `Date` object. This conversion causes
         * a loss of precision since `Date` objects only support millisecond precision.
         *
         * @returns JavaScript `Date` object representing the same point in time as
         *     this `Timestamp`, with millisecond precision.
         */    toDate() {
            return new Date(this.toMillis());
        }
        /**
         * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
         * epoch). This operation causes a loss of precision.
         *
         * @returns The point in time corresponding to this timestamp, represented as
         *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
         */    toMillis() {
            return 1e3 * this.seconds + this.nanoseconds / 1e6;
        }
        F(t) {
            return this.seconds === t.seconds ? k(this.nanoseconds, t.nanoseconds) : k(this.seconds, t.seconds);
        }
        /**
         * Returns true if this `Timestamp` is equal to the provided one.
         *
         * @param other - The `Timestamp` to compare against.
         * @returns true if this `Timestamp` is equal to the provided one.
         */    isEqual(t) {
            return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;
        }
        toString() {
            return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
        }
        toJSON() {
            return {
                seconds: this.seconds,
                nanoseconds: this.nanoseconds
            };
        }
        /**
         * Converts this object to a primitive string, which allows Timestamp objects to be compared
         * using the `>`, `<=`, `>=` and `>` operators.
         */    valueOf() {
            // This method returns a string of the form <seconds>.<nanoseconds> where <seconds> is
            // translated to have a non-negative value and both <seconds> and <nanoseconds> are left-padded
            // with zeroes to be a consistent length. Strings with this format then have a lexiographical
            // ordering that matches the expected ordering. The <seconds> translation is done to avoid
            // having a leading negative sign (i.e. a leading '-' character) in its string representation,
            // which would affect its lexiographical ordering.
            const t = this.seconds - -62135596800;
            // Note: Up to 12 decimal digits are required to represent all valid 'seconds' values.
                    return String(t).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A version of a document in Firestore. This corresponds to the version
     * timestamp, such as update_time or read_time.
     */ class z {
        constructor(t) {
            this.timestamp = t;
        }
        static $(t) {
            return new z(t);
        }
        static min() {
            return new z(new W(0, 0));
        }
        S(t) {
            return this.timestamp.F(t.timestamp);
        }
        isEqual(t) {
            return this.timestamp.isEqual(t.timestamp);
        }
        /** Returns a number representation of the version for use in spec tests. */    q() {
            // Convert to microseconds.
            return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
        }
        toString() {
            return "SnapshotVersion(" + this.timestamp.toString() + ")";
        }
        O() {
            return this.timestamp;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Path represents an ordered sequence of string segments.
     */
    class G {
        constructor(t, n, e) {
            void 0 === n ? n = 0 : n > t.length && S(), void 0 === e ? e = t.length - n : e > t.length - n && S(), 
            this.segments = t, this.offset = n, this.C = e;
        }
        get length() {
            return this.C;
        }
        isEqual(t) {
            return 0 === G.L(this, t);
        }
        child(t) {
            const n = this.segments.slice(this.offset, this.limit());
            return t instanceof G ? t.forEach((t => {
                n.push(t);
            })) : n.push(t), this.U(n);
        }
        /** The index of one past the last segment of the path. */    limit() {
            return this.offset + this.length;
        }
        M(t) {
            return t = void 0 === t ? 1 : t, this.U(this.segments, this.offset + t, this.length - t);
        }
        j() {
            return this.U(this.segments, this.offset, this.length - 1);
        }
        B() {
            return this.segments[this.offset];
        }
        k() {
            return this.get(this.length - 1);
        }
        get(t) {
            return this.segments[this.offset + t];
        }
        W() {
            return 0 === this.length;
        }
        G(t) {
            if (t.length < this.length) return !1;
            for (let n = 0; n < this.length; n++) if (this.get(n) !== t.get(n)) return !1;
            return !0;
        }
        Y(t) {
            if (this.length + 1 !== t.length) return !1;
            for (let n = 0; n < this.length; n++) if (this.get(n) !== t.get(n)) return !1;
            return !0;
        }
        forEach(t) {
            for (let n = this.offset, e = this.limit(); n < e; n++) t(this.segments[n]);
        }
        H() {
            return this.segments.slice(this.offset, this.limit());
        }
        static L(t, n) {
            const e = Math.min(t.length, n.length);
            for (let s = 0; s < e; s++) {
                const e = t.get(s), r = n.get(s);
                if (e < r) return -1;
                if (e > r) return 1;
            }
            return t.length < n.length ? -1 : t.length > n.length ? 1 : 0;
        }
    }

    /**
     * A slash-separated path for navigating resources (documents and collections)
     * within Firestore.
     */ class Y extends G {
        U(t, n, e) {
            return new Y(t, n, e);
        }
        K() {
            // NOTE: The client is ignorant of any path segments containing escape
            // sequences (e.g. __id123__) and just passes them through raw (they exist
            // for legacy reasons and should not be used frequently).
            return this.H().join("/");
        }
        toString() {
            return this.K();
        }
        /**
         * Creates a resource path from the given slash-delimited string. If multiple
         * arguments are provided, all components are combined. Leading and trailing
         * slashes from all components are ignored.
         */    static J(...t) {
            // NOTE: The client is ignorant of any path segments containing escape
            // sequences (e.g. __id123__) and just passes them through raw (they exist
            // for legacy reasons and should not be used frequently).
            const n = [];
            for (const e of t) {
                if (e.indexOf("//") >= 0) throw new R(h, `Invalid segment (${e}). Paths must not contain // in them.`);
                // Strip leading and traling slashed.
                            n.push(...e.split("/").filter((t => t.length > 0)));
            }
            return new Y(n);
        }
        static Z() {
            return new Y([]);
        }
    }

    const H = /^[_a-zA-Z][_a-zA-Z0-9]*$/;

    /** A dot-separated path for navigating sub-objects within a document. */ class K extends G {
        U(t, n, e) {
            return new K(t, n, e);
        }
        /**
         * Returns true if the string could be used as a segment in a field path
         * without escaping.
         */    static X(t) {
            return H.test(t);
        }
        K() {
            return this.H().map((t => (t = t.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), K.X(t) || (t = "`" + t + "`"), 
            t))).join(".");
        }
        toString() {
            return this.K();
        }
        /**
         * Returns true if this field references the key of a document.
         */    tt() {
            return 1 === this.length && "__name__" === this.get(0);
        }
        /**
         * The field designating the key of a document.
         */    static nt() {
            return new K([ "__name__" ]);
        }
        /**
         * Parses a field string from the given server-formatted string.
         *
         * - Splitting the empty string is not allowed (for now at least).
         * - Empty segments within the string (e.g. if there are two consecutive
         *   separators) are not allowed.
         *
         * TODO(b/37244157): we should make this more strict. Right now, it allows
         * non-identifier path components, even if they aren't escaped.
         */    static et(t) {
            const n = [];
            let e = "", s = 0;
            const r = () => {
                if (0 === e.length) throw new R(h, `Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);
                n.push(e), e = "";
            };
            let i = !1;
            for (;s < t.length; ) {
                const n = t[s];
                if ("\\" === n) {
                    if (s + 1 === t.length) throw new R(h, "Path has trailing escape character: " + t);
                    const n = t[s + 1];
                    if ("\\" !== n && "." !== n && "`" !== n) throw new R(h, "Path has invalid escape sequence: " + t);
                    e += n, s += 2;
                } else "`" === n ? (i = !i, s++) : "." !== n || i ? (e += n, s++) : (r(), s++);
            }
            if (r(), i) throw new R(h, "Unterminated ` in path: " + t);
            return new K(n);
        }
        static Z() {
            return new K([]);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class J {
        constructor(t) {
            this.path = t;
        }
        static st(t) {
            return new J(Y.J(t));
        }
        static rt(t) {
            return new J(Y.J(t).M(5));
        }
        /** Returns true if the document is in the specified collectionId. */    it(t) {
            return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;
        }
        isEqual(t) {
            return null !== t && 0 === Y.L(this.path, t.path);
        }
        toString() {
            return this.path.toString();
        }
        static L(t, n) {
            return Y.L(t.path, n.path);
        }
        static ot(t) {
            return t.length % 2 == 0;
        }
        /**
         * Creates and returns a new document key with the given segments.
         *
         * @param segments - The segments of the path to the document
         * @returns A new instance of DocumentKey
         */    static ut(t) {
            return new J(new Y(t.slice()));
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ function Z(t) {
        let n = 0;
        for (const e in t) Object.prototype.hasOwnProperty.call(t, e) && n++;
        return n;
    }

    function X(t, n) {
        for (const e in t) Object.prototype.hasOwnProperty.call(t, e) && n(e, t[e]);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Immutable class that represents a "proto" byte string.
     *
     * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when
     * sent on the wire. This class abstracts away this differentiation by holding
     * the proto byte string in a common class that must be converted into a string
     * before being sent as a proto.
     */
    class tt {
        constructor(t) {
            this.ct = t;
        }
        static fromBase64String(t) {
            const n = atob(t);
            return new tt(n);
        }
        static fromUint8Array(t) {
            const n = 
            /**
     * Helper function to convert an Uint8array to a binary string.
     */
            function(t) {
                let n = "";
                for (let e = 0; e < t.length; ++e) n += String.fromCharCode(t[e]);
                return n;
            }
            /**
     * Helper function to convert a binary string to an Uint8Array.
     */ (t);
            return new tt(n);
        }
        toBase64() {
            return t = this.ct, btoa(t);
            /** Converts a binary string to a Base64 encoded string. */
            var t;
        }
        toUint8Array() {
            return function(t) {
                const n = new Uint8Array(t.length);
                for (let e = 0; e < t.length; e++) n[e] = t.charCodeAt(e);
                return n;
            }
            /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
            /**
     * Returns whether a variable is either undefined or null.
     */ (this.ct);
        }
        at() {
            return 2 * this.ct.length;
        }
        S(t) {
            return k(this.ct, t.ct);
        }
        isEqual(t) {
            return this.ct === t.ct;
        }
    }

    function nt(t) {
        return null == t;
    }

    /** Returns whether the value represents -0. */ function et(t) {
        // Detect if the value is -0.0. Based on polyfill from
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
        return 0 === t && 1 / t == -1 / 0;
    }

    /**
     * Returns whether a value is an integer and in the safe integer range
     * @param value - The value to test for being an integer and in the safe range
     */ tt.ht = new tt("");

    function st(t) {
        var n, e;
        return "server_timestamp" === (null === (e = ((null === (n = null == t ? void 0 : t.mapValue) || void 0 === n ? void 0 : n.fields) || {}).__type__) || void 0 === e ? void 0 : e.stringValue);
    }

    /**
     * Returns the value of the field before this ServerTimestamp was set.
     *
     * Preserving the previous values allows the user to display the last resoled
     * value until the backend responds with the timestamp.
     */ function rt(t) {
        const n = t.mapValue.fields.__previous_value__;
        return st(n) ? rt(n) : n;
    }

    /**
     * Returns the local time at which this timestamp was first set.
     */ function it(t) {
        const n = ft(t.mapValue.fields.__local_write_time__.timestampValue);
        return new W(n.seconds, n.nanos);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // A RegExp matching ISO 8601 UTC timestamps with optional fraction.
    const ot = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);

    /** Extracts the backend's type order for the provided value. */ function ut(t) {
        return "nullValue" in t ? 0 /* NullValue */ : "booleanValue" in t ? 1 /* BooleanValue */ : "integerValue" in t || "doubleValue" in t ? 2 /* NumberValue */ : "timestampValue" in t ? 3 /* TimestampValue */ : "stringValue" in t ? 5 /* StringValue */ : "bytesValue" in t ? 6 /* BlobValue */ : "referenceValue" in t ? 7 /* RefValue */ : "geoPointValue" in t ? 8 /* GeoPointValue */ : "arrayValue" in t ? 9 /* ArrayValue */ : "mapValue" in t ? st(t) ? 4 /* ServerTimestampValue */ : 10 /* ObjectValue */ : S();
    }

    /** Tests `left` and `right` for equality based on the backend semantics. */ function ct(t, n) {
        const e = ut(t);
        if (e !== ut(n)) return !1;
        switch (e) {
          case 0 /* NullValue */ :
            return !0;

          case 1 /* BooleanValue */ :
            return t.booleanValue === n.booleanValue;

          case 4 /* ServerTimestampValue */ :
            return it(t).isEqual(it(n));

          case 3 /* TimestampValue */ :
            return function(t, n) {
                if ("string" == typeof t.timestampValue && "string" == typeof n.timestampValue && t.timestampValue.length === n.timestampValue.length) 
                // Use string equality for ISO 8601 timestamps
                return t.timestampValue === n.timestampValue;
                const e = ft(t.timestampValue), s = ft(n.timestampValue);
                return e.seconds === s.seconds && e.nanos === s.nanos;
            }(t, n);

          case 5 /* StringValue */ :
            return t.stringValue === n.stringValue;

          case 6 /* BlobValue */ :
            return function(t, n) {
                return _t(t.bytesValue).isEqual(_t(n.bytesValue));
            }(t, n);

          case 7 /* RefValue */ :
            return t.referenceValue === n.referenceValue;

          case 8 /* GeoPointValue */ :
            return function(t, n) {
                return dt(t.geoPointValue.latitude) === dt(n.geoPointValue.latitude) && dt(t.geoPointValue.longitude) === dt(n.geoPointValue.longitude);
            }(t, n);

          case 2 /* NumberValue */ :
            return function(t, n) {
                if ("integerValue" in t && "integerValue" in n) return dt(t.integerValue) === dt(n.integerValue);
                if ("doubleValue" in t && "doubleValue" in n) {
                    const e = dt(t.doubleValue), s = dt(n.doubleValue);
                    return e === s ? et(e) === et(s) : isNaN(e) && isNaN(s);
                }
                return !1;
            }(t, n);

          case 9 /* ArrayValue */ :
            return Q(t.arrayValue.values || [], n.arrayValue.values || [], ct);

          case 10 /* ObjectValue */ :
            return function(t, n) {
                const e = t.mapValue.fields || {}, s = n.mapValue.fields || {};
                if (Z(e) !== Z(s)) return !1;
                for (const t in e) if (e.hasOwnProperty(t) && (void 0 === s[t] || !ct(e[t], s[t]))) return !1;
                return !0;
            }
            /** Returns true if the ArrayValue contains the specified element. */ (t, n);

          default:
            return S();
        }
    }

    function at(t, n) {
        return void 0 !== (t.values || []).find((t => ct(t, n)));
    }

    function ht(t, n) {
        const e = ut(t), s = ut(n);
        if (e !== s) return k(e, s);
        switch (e) {
          case 0 /* NullValue */ :
            return 0;

          case 1 /* BooleanValue */ :
            return k(t.booleanValue, n.booleanValue);

          case 2 /* NumberValue */ :
            return function(t, n) {
                const e = dt(t.integerValue || t.doubleValue), s = dt(n.integerValue || n.doubleValue);
                return e < s ? -1 : e > s ? 1 : e === s ? 0 : 
                // one or both are NaN.
                isNaN(e) ? isNaN(s) ? 0 : -1 : 1;
            }(t, n);

          case 3 /* TimestampValue */ :
            return lt(t.timestampValue, n.timestampValue);

          case 4 /* ServerTimestampValue */ :
            return lt(it(t), it(n));

          case 5 /* StringValue */ :
            return k(t.stringValue, n.stringValue);

          case 6 /* BlobValue */ :
            return function(t, n) {
                const e = _t(t), s = _t(n);
                return e.S(s);
            }(t.bytesValue, n.bytesValue);

          case 7 /* RefValue */ :
            return function(t, n) {
                const e = t.split("/"), s = n.split("/");
                for (let t = 0; t < e.length && t < s.length; t++) {
                    const n = k(e[t], s[t]);
                    if (0 !== n) return n;
                }
                return k(e.length, s.length);
            }(t.referenceValue, n.referenceValue);

          case 8 /* GeoPointValue */ :
            return function(t, n) {
                const e = k(dt(t.latitude), dt(n.latitude));
                if (0 !== e) return e;
                return k(dt(t.longitude), dt(n.longitude));
            }(t.geoPointValue, n.geoPointValue);

          case 9 /* ArrayValue */ :
            return function(t, n) {
                const e = t.values || [], s = n.values || [];
                for (let t = 0; t < e.length && t < s.length; ++t) {
                    const n = ht(e[t], s[t]);
                    if (n) return n;
                }
                return k(e.length, s.length);
            }(t.arrayValue, n.arrayValue);

          case 10 /* ObjectValue */ :
            return function(t, n) {
                const e = t.fields || {}, s = Object.keys(e), r = n.fields || {}, i = Object.keys(r);
                // Even though MapValues are likely sorted correctly based on their insertion
                // order (e.g. when received from the backend), local modifications can bring
                // elements out of order. We need to re-sort the elements to ensure that
                // canonical IDs are independent of insertion order.
                s.sort(), i.sort();
                for (let t = 0; t < s.length && t < i.length; ++t) {
                    const n = k(s[t], i[t]);
                    if (0 !== n) return n;
                    const o = ht(e[s[t]], r[i[t]]);
                    if (0 !== o) return o;
                }
                return k(s.length, i.length);
            }
            /**
     * Converts the possible Proto values for a timestamp value into a "seconds and
     * nanos" representation.
     */ (t.mapValue, n.mapValue);

          default:
            throw S();
        }
    }

    function lt(t, n) {
        if ("string" == typeof t && "string" == typeof n && t.length === n.length) return k(t, n);
        const e = ft(t), s = ft(n), r = k(e.seconds, s.seconds);
        return 0 !== r ? r : k(e.nanos, s.nanos);
    }

    function ft(t) {
        // The json interface (for the browser) will return an iso timestamp string,
        // while the proto js library (for node) will return a
        // google.protobuf.Timestamp instance.
        if (x(!!t), "string" == typeof t) {
            // The date string can have higher precision (nanos) than the Date class
            // (millis), so we do some custom parsing here.
            // Parse the nanos right out of the string.
            let n = 0;
            const e = ot.exec(t);
            if (x(!!e), e[1]) {
                // Pad the fraction out to 9 digits (nanos).
                let t = e[1];
                t = (t + "000000000").substr(0, 9), n = Number(t);
            }
            // Parse the date to get the seconds.
                    const s = new Date(t);
            return {
                seconds: Math.floor(s.getTime() / 1e3),
                nanos: n
            };
        }
        return {
            seconds: dt(t.seconds),
            nanos: dt(t.nanos)
        };
    }

    /**
     * Converts the possible Proto types for numbers into a JavaScript number.
     * Returns 0 if the value is not numeric.
     */ function dt(t) {
        // TODO(bjornick): Handle int64 greater than 53 bits.
        return "number" == typeof t ? t : "string" == typeof t ? Number(t) : 0;
    }

    /** Converts the possible Proto types for Blobs into a ByteString. */ function _t(t) {
        return "string" == typeof t ? tt.fromBase64String(t) : tt.fromUint8Array(t);
    }

    /** Returns a reference value for the provided database and key. */ function wt(t, n) {
        return {
            referenceValue: `projects/${t.projectId}/databases/${t.database}/documents/${n.path.K()}`
        };
    }

    /** Returns true if `value` is an ArrayValue. */ function mt(t) {
        return !!t && "arrayValue" in t;
    }

    /** Returns true if `value` is a NullValue. */ function pt(t) {
        return !!t && "nullValue" in t;
    }

    /** Returns true if `value` is NaN. */ function yt(t) {
        return !!t && "doubleValue" in t && isNaN(Number(t.doubleValue));
    }

    /** Returns true if `value` is a MapValue. */ function Et(t) {
        return !!t && "mapValue" in t;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Visible for testing
    class It {
        constructor(t, n = null, e = [], s = [], r = null, i = null, o = null) {
            this.path = t, this.collectionGroup = n, this.orderBy = e, this.filters = s, this.limit = r, 
            this.startAt = i, this.endAt = o, this.lt = null;
        }
    }

    /**
     * Initializes a Target with a path and optional additional query constraints.
     * Path must currently be empty if this is a collection group query.
     *
     * NOTE: you should always construct `Target` from `Query.toTarget` instead of
     * using this factory method, because `Query` provides an implicit `orderBy`
     * property.
     */ function Tt(t, n = null, e = [], s = [], r = null, i = null, o = null) {
        return new It(t, n, e, s, r, i, o);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Query encapsulates all the query attributes we support in the SDK. It can
     * be run against the LocalStore, as well as be converted to a `Target` to
     * query the RemoteStore results.
     *
     * Visible for testing.
     */
    class At {
        /**
         * Initializes a Query with a path and optional additional query constraints.
         * Path must currently be empty if this is a collection group query.
         */
        constructor(t, n = null, e = [], s = [], r = null, i = "F" /* First */ , o = null, u = null) {
            this.path = t, this.collectionGroup = n, this.ft = e, this.filters = s, this.limit = r, 
            this.limitType = i, this.startAt = o, this.endAt = u, this.dt = null, 
            // The corresponding `Target` of this `Query` instance.
            this._t = null, this.startAt, this.endAt;
        }
    }

    /** Creates a new Query for a query that matches all documents at `path` */ function Pt(t) {
        return !nt(t.limit) && "L" /* Last */ === t.limitType;
    }

    function Rt(t) {
        return t.ft.length > 0 ? t.ft[0].field : null;
    }

    function Vt(t) {
        for (const n of t.filters) if (n.wt()) return n.field;
        return null;
    }

    /**
     * Checks if any of the provided Operators are included in the query and
     * returns the first one that is, or null if none are.
     */
    /**
     * Returns whether the query matches a collection group rather than a specific
     * collection.
     */
    function gt(t) {
        return null !== t.collectionGroup;
    }

    /**
     * Returns the implicit order by constraint that is used to execute the Query,
     * which can be different from the order by constraints the user provided (e.g.
     * the SDK and backend always orders by `__name__`).
     */ function vt(t) {
        const n = q(t);
        if (null === n.dt) {
            n.dt = [];
            const t = Vt(n), e = Rt(n);
            if (null !== t && null === e) 
            // In order to implicitly add key ordering, we must also add the
            // inequality filter field for it to be a valid query.
            // Note that the default inequality field and key ordering is ascending.
            t.tt() || n.dt.push(new jt(t)), n.dt.push(new jt(K.nt(), "asc" /* ASCENDING */)); else {
                let t = !1;
                for (const e of n.ft) n.dt.push(e), e.field.tt() && (t = !0);
                if (!t) {
                    // The order of the implicit key ordering always matches the last
                    // explicit order by
                    const t = n.ft.length > 0 ? n.ft[n.ft.length - 1].dir : "asc" /* ASCENDING */;
                    n.dt.push(new jt(K.nt(), t));
                }
            }
        }
        return n.dt;
    }

    /**
     * Converts this `Query` instance to it's corresponding `Target` representation.
     */ function bt(t) {
        const n = q(t);
        if (!n._t) if ("F" /* First */ === n.limitType) n._t = Tt(n.path, n.collectionGroup, vt(n), n.filters, n.limit, n.startAt, n.endAt); else {
            // Flip the orderBy directions since we want the last results
            const t = [];
            for (const e of vt(n)) {
                const n = "desc" /* DESCENDING */ === e.dir ? "asc" /* ASCENDING */ : "desc" /* DESCENDING */;
                t.push(new jt(e.field, n));
            }
            // We need to swap the cursors to match the now-flipped query ordering.
                    const e = n.endAt ? new Ut(n.endAt.position, !n.endAt.before) : null, s = n.startAt ? new Ut(n.startAt.position, !n.startAt.before) : null;
            // Now return as a LimitType.First query.
            n._t = Tt(n.path, n.collectionGroup, t, n.filters, n.limit, e, s);
        }
        return n._t;
    }

    function Nt(t, n) {
        return function(t, n) {
            if (t.limit !== n.limit) return !1;
            if (t.orderBy.length !== n.orderBy.length) return !1;
            for (let e = 0; e < t.orderBy.length; e++) if (!Bt(t.orderBy[e], n.orderBy[e])) return !1;
            if (t.filters.length !== n.filters.length) return !1;
            for (let r = 0; r < t.filters.length; r++) if (e = t.filters[r], s = n.filters[r], 
            e.op !== s.op || !e.field.isEqual(s.field) || !ct(e.value, s.value)) return !1;
            var e, s;
            /** Filter that matches on key fields (i.e. '__name__'). */        return t.collectionGroup === n.collectionGroup && !!t.path.isEqual(n.path) && !!Mt(t.startAt, n.startAt) && Mt(t.endAt, n.endAt);
        }(bt(t), bt(n)) && t.limitType === n.limitType;
    }

    class Dt extends class {} {
        constructor(t, n, e) {
            super(), this.field = t, this.op = n, this.value = e;
        }
        /**
         * Creates a filter based on the provided arguments.
         */    static create(t, n, e) {
            return t.tt() ? "in" /* IN */ === n || "not-in" /* NOT_IN */ === n ? this.yt(t, n, e) : new Ft(t, n, e) : "array-contains" /* ARRAY_CONTAINS */ === n ? new qt(t, e) : "in" /* IN */ === n ? new Ot(t, e) : "not-in" /* NOT_IN */ === n ? new Ct(t, e) : "array-contains-any" /* ARRAY_CONTAINS_ANY */ === n ? new Lt(t, e) : new Dt(t, n, e);
        }
        static yt(t, n, e) {
            return "in" /* IN */ === n ? new $t(t, e) : new St(t, e);
        }
        matches(t) {
            const n = t.field(this.field);
            // Types do not have to match in NOT_EQUAL filters.
                    return "!=" /* NOT_EQUAL */ === this.op ? null !== n && this.Et(ht(n, this.value)) : null !== n && ut(this.value) === ut(n) && this.Et(ht(n, this.value));
            // Only compare types with matching backend order (such as double and int).
            }
        Et(t) {
            switch (this.op) {
              case "<" /* LESS_THAN */ :
                return t < 0;

              case "<=" /* LESS_THAN_OR_EQUAL */ :
                return t <= 0;

              case "==" /* EQUAL */ :
                return 0 === t;

              case "!=" /* NOT_EQUAL */ :
                return 0 !== t;

              case ">" /* GREATER_THAN */ :
                return t > 0;

              case ">=" /* GREATER_THAN_OR_EQUAL */ :
                return t >= 0;

              default:
                return S();
            }
        }
        wt() {
            return [ "<" /* LESS_THAN */ , "<=" /* LESS_THAN_OR_EQUAL */ , ">" /* GREATER_THAN */ , ">=" /* GREATER_THAN_OR_EQUAL */ , "!=" /* NOT_EQUAL */ , "not-in" /* NOT_IN */ ].indexOf(this.op) >= 0;
        }
    }

    class Ft extends Dt {
        constructor(t, n, e) {
            super(t, n, e), this.key = J.rt(e.referenceValue);
        }
        matches(t) {
            const n = J.L(t.key, this.key);
            return this.Et(n);
        }
    }

    /** Filter that matches on key fields within an array. */ class $t extends Dt {
        constructor(t, n) {
            super(t, "in" /* IN */ , n), this.keys = xt("in" /* IN */ , n);
        }
        matches(t) {
            return this.keys.some((n => n.isEqual(t.key)));
        }
    }

    /** Filter that matches on key fields not present within an array. */ class St extends Dt {
        constructor(t, n) {
            super(t, "not-in" /* NOT_IN */ , n), this.keys = xt("not-in" /* NOT_IN */ , n);
        }
        matches(t) {
            return !this.keys.some((n => n.isEqual(t.key)));
        }
    }

    function xt(t, n) {
        var e;
        return ((null === (e = n.arrayValue) || void 0 === e ? void 0 : e.values) || []).map((t => J.rt(t.referenceValue)));
    }

    /** A Filter that implements the array-contains operator. */ class qt extends Dt {
        constructor(t, n) {
            super(t, "array-contains" /* ARRAY_CONTAINS */ , n);
        }
        matches(t) {
            const n = t.field(this.field);
            return mt(n) && at(n.arrayValue, this.value);
        }
    }

    /** A Filter that implements the IN operator. */ class Ot extends Dt {
        constructor(t, n) {
            super(t, "in" /* IN */ , n);
        }
        matches(t) {
            const n = t.field(this.field);
            return null !== n && at(this.value.arrayValue, n);
        }
    }

    /** A Filter that implements the not-in operator. */ class Ct extends Dt {
        constructor(t, n) {
            super(t, "not-in" /* NOT_IN */ , n);
        }
        matches(t) {
            if (at(this.value.arrayValue, {
                nullValue: "NULL_VALUE"
            })) return !1;
            const n = t.field(this.field);
            return null !== n && !at(this.value.arrayValue, n);
        }
    }

    /** A Filter that implements the array-contains-any operator. */ class Lt extends Dt {
        constructor(t, n) {
            super(t, "array-contains-any" /* ARRAY_CONTAINS_ANY */ , n);
        }
        matches(t) {
            const n = t.field(this.field);
            return !(!mt(n) || !n.arrayValue.values) && n.arrayValue.values.some((t => at(this.value.arrayValue, t)));
        }
    }

    /**
     * Represents a bound of a query.
     *
     * The bound is specified with the given components representing a position and
     * whether it's just before or just after the position (relative to whatever the
     * query order is).
     *
     * The position represents a logical index position for a query. It's a prefix
     * of values for the (potentially implicit) order by clauses of a query.
     *
     * Bound provides a function to determine whether a document comes before or
     * after a bound. This is influenced by whether the position is just before or
     * just after the provided values.
     */ class Ut {
        constructor(t, n) {
            this.position = t, this.before = n;
        }
    }

    function Mt(t, n) {
        if (null === t) return null === n;
        if (null === n) return !1;
        if (t.before !== n.before || t.position.length !== n.position.length) return !1;
        for (let e = 0; e < t.position.length; e++) {
            if (!ct(t.position[e], n.position[e])) return !1;
        }
        return !0;
    }

    /**
     * An ordering on a field, in some Direction. Direction defaults to ASCENDING.
     */ class jt {
        constructor(t, n = "asc" /* ASCENDING */) {
            this.field = t, this.dir = n;
        }
    }

    function Bt(t, n) {
        return t.dir === n.dir && t.field.isEqual(n.field);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Error Codes describing the different ways GRPC can fail. These are copied
     * directly from GRPC's sources here:
     *
     * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
     *
     * Important! The names of these identifiers matter because the string forms
     * are used for reverse lookups from the webchannel stream. Do NOT change the
     * names of these identifiers or change this into a const enum.
     */ var kt, Qt;

    /**
     * Converts an HTTP Status Code to the equivalent error code.
     *
     * @param status - An HTTP Status Code, like 200, 404, 503, etc.
     * @returns The equivalent Code. Unknown status codes are mapped to
     *     Code.UNKNOWN.
     */
    function Wt(t) {
        if (void 0 === t) return F("RPC_ERROR", "HTTP error has no status"), a;
        // The canonical error codes for Google APIs [1] specify mapping onto HTTP
        // status codes but the mapping is not bijective. In each case of ambiguity
        // this function chooses a primary error.
        
        // [1]
        // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
            switch (t) {
          case 200:
            // OK
            return u;

          case 400:
            // Bad Request
            return p;

            // Other possibilities based on the forward mapping
            // return Code.INVALID_ARGUMENT;
            // return Code.OUT_OF_RANGE;
                  case 401:
            // Unauthorized
            return w;

          case 403:
            // Forbidden
            return _;

          case 404:
            // Not Found
            return f;

          case 409:
            // Conflict
            return y;

            // Other possibilities:
            // return Code.ALREADY_EXISTS;
                  case 416:
            // Range Not Satisfiable
            return E;

          case 429:
            // Too Many Requests
            return m;

          case 499:
            // Client Closed Request
            return c;

          case 500:
            // Internal Server Error
            return a;

            // Other possibilities:
            // return Code.INTERNAL;
            // return Code.DATA_LOSS;
                  case 501:
            // Unimplemented
            return I;

          case 503:
            // Service Unavailable
            return A;

          case 504:
            // Gateway Timeout
            return l;

          default:
            return t >= 200 && t < 300 ? u : t >= 400 && t < 500 ? p : t >= 500 && t < 600 ? T : a;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ (Qt = kt || (kt = {}))[Qt.OK = 0] = "OK", Qt[Qt.CANCELLED = 1] = "CANCELLED", 
    Qt[Qt.UNKNOWN = 2] = "UNKNOWN", Qt[Qt.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", 
    Qt[Qt.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", Qt[Qt.NOT_FOUND = 5] = "NOT_FOUND", 
    Qt[Qt.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", Qt[Qt.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", 
    Qt[Qt.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", Qt[Qt.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", 
    Qt[Qt.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", Qt[Qt.ABORTED = 10] = "ABORTED", 
    Qt[Qt.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", Qt[Qt.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", 
    Qt[Qt.INTERNAL = 13] = "INTERNAL", Qt[Qt.UNAVAILABLE = 14] = "UNAVAILABLE", Qt[Qt.DATA_LOSS = 15] = "DATA_LOSS";

    const zt = (() => {
        const t = {
            asc: "ASCENDING",
            desc: "DESCENDING"
        };
        return t;
    })(), Gt = (() => {
        const t = {
            "<": "LESS_THAN",
            "<=": "LESS_THAN_OR_EQUAL",
            ">": "GREATER_THAN",
            ">=": "GREATER_THAN_OR_EQUAL",
            "==": "EQUAL",
            "!=": "NOT_EQUAL",
            "array-contains": "ARRAY_CONTAINS",
            in: "IN",
            "not-in": "NOT_IN",
            "array-contains-any": "ARRAY_CONTAINS_ANY"
        };
        return t;
    })();

    /**
     * This class generates JsonObject values for the Datastore API suitable for
     * sending to either GRPC stub methods or via the JSON/HTTP REST API.
     *
     * The serializer supports both Protobuf.js and Proto3 JSON formats. By
     * setting `useProto3Json` to true, the serializer will use the Proto3 JSON
     * format.
     *
     * For a description of the Proto3 JSON format check
     * https://developers.google.com/protocol-buffers/docs/proto3#json
     *
     * TODO(klimt): We can remove the databaseId argument if we keep the full
     * resource name in documents.
     */
    class Yt {
        constructor(t, n) {
            this.t = t, this.It = n;
        }
    }

    /**
     * Returns a value for a number (or null) that's appropriate to put into
     * a google.protobuf.Int32Value proto.
     * DO NOT USE THIS FOR ANYTHING ELSE.
     * This method cheats. It's typed as returning "number" because that's what
     * our generated proto interfaces say Int32Value must be. But GRPC actually
     * expects a { value: <number> } struct.
     */
    /**
     * Returns a value for a number that's appropriate to put into a proto.
     * The return value is an IntegerValue if it can safely represent the value,
     * otherwise a DoubleValue is returned.
     */
    function Ht(t, n) {
        return function(t) {
            return "number" == typeof t && Number.isInteger(t) && !et(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;
        }
        /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
        /**
     * Represents a locally-applied ServerTimestamp.
     *
     * Server Timestamps are backed by MapValues that contain an internal field
     * `__type__` with a value of `server_timestamp`. The previous value and local
     * write time are stored in its `__previous_value__` and `__local_write_time__`
     * fields respectively.
     *
     * Notes:
     * - ServerTimestampValue instances are created as the result of applying a
     *   TransformMutation (see TransformMutation.applyTo()). They can only exist in
     *   the local view of a document. Therefore they do not need to be parsed or
     *   serialized.
     * - When evaluated locally (e.g. for snapshot.data()), they by default
     *   evaluate to `null`. This behavior can be configured by passing custom
     *   FieldValueOptions to value().
     * - With respect to other ServerTimestampValues, they sort by their
     *   localWriteTime.
     */ (n) ? 
        /**
     * Returns an IntegerValue for `value`.
     */
        function(t) {
            return {
                integerValue: "" + t
            };
        }
        /**
     * Returns an DoubleValue for `value` that is encoded based the serializer's
     * `useProto3Json` setting.
     */ (n) : function(t, n) {
            if (t.It) {
                if (isNaN(n)) return {
                    doubleValue: "NaN"
                };
                if (n === 1 / 0) return {
                    doubleValue: "Infinity"
                };
                if (n === -1 / 0) return {
                    doubleValue: "-Infinity"
                };
            }
            return {
                doubleValue: et(n) ? "-0" : n
            };
        }(t, n);
    }

    /**
     * Returns a value for a Date that's appropriate to put into a proto.
     */ function Kt(t, n) {
        if (t.It) {
            return `${new Date(1e3 * n.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "")}.${("000000000" + n.nanoseconds).slice(-9)}Z`;
        }
        return {
            seconds: "" + n.seconds,
            nanos: n.nanoseconds
        };
    }

    /**
     * Returns a value for bytes that's appropriate to put in a proto.
     *
     * Visible for testing.
     */
    function Jt(t, n) {
        return t.It ? n.toBase64() : n.toUint8Array();
    }

    function Zt(t, n) {
        return Kt(t, n.O());
    }

    function Xt(t) {
        return x(!!t), z.$(function(t) {
            const n = ft(t);
            return new W(n.seconds, n.nanos);
        }(t));
    }

    function tn(t, n) {
        return function(t) {
            return new Y([ "projects", t.projectId, "databases", t.database ]);
        }(t).child("documents").child(n).K();
    }

    function nn(t, n) {
        return tn(t.t, n.path);
    }

    function en(t, n) {
        const e = function(t) {
            const n = Y.J(t);
            return x(wn(n)), n;
        }(n);
        if (e.get(1) !== t.t.projectId) throw new R(h, "Tried to deserialize key from different project: " + e.get(1) + " vs " + t.t.projectId);
        if (e.get(3) !== t.t.database) throw new R(h, "Tried to deserialize key from different database: " + e.get(3) + " vs " + t.t.database);
        return new J((x((s = e).length > 4 && "documents" === s.get(4)), s.M(5)));
        var s;
        /** Creates a Document proto from key and fields (but no create/update time) */}

    function sn(t, n) {
        return tn(t.t, n);
    }

    function rn(t) {
        return new Y([ "projects", t.t.projectId, "databases", t.t.database ]).K();
    }

    function on(t, n, e) {
        return {
            name: nn(t, n),
            fields: e.proto.mapValue.fields
        };
    }

    function un(t, n) {
        return "found" in n ? function(t, n) {
            x(!!n.found), n.found.name, n.found.updateTime;
            const e = en(t, n.found.name), s = Xt(n.found.updateTime), r = new Dn({
                mapValue: {
                    fields: n.found.fields
                }
            });
            return new Sn(e, s, r, {});
        }(t, n) : "missing" in n ? function(t, n) {
            x(!!n.missing), x(!!n.readTime);
            const e = en(t, n.missing), s = Xt(n.readTime);
            return new xn(e, s);
        }(t, n) : S();
    }

    function cn(t, n) {
        let e;
        if (n instanceof Vn) e = {
            update: on(t, n.key, n.value)
        }; else if (n instanceof bn) e = {
            delete: nn(t, n.key)
        }; else if (n instanceof gn) e = {
            update: on(t, n.key, n.data),
            updateMask: _n(n.Tt)
        }; else if (n instanceof vn) e = {
            transform: {
                document: nn(t, n.key),
                fieldTransforms: n.fieldTransforms.map((t => function(t, n) {
                    const e = n.transform;
                    if (e instanceof pn) return {
                        fieldPath: n.field.K(),
                        setToServerValue: "REQUEST_TIME"
                    };
                    if (e instanceof yn) return {
                        fieldPath: n.field.K(),
                        appendMissingElements: {
                            values: e.elements
                        }
                    };
                    if (e instanceof En) return {
                        fieldPath: n.field.K(),
                        removeAllFromArray: {
                            values: e.elements
                        }
                    };
                    if (e instanceof In) return {
                        fieldPath: n.field.K(),
                        increment: e.At
                    };
                    throw S();
                }(0, t)))
            }
        }; else {
            if (!(n instanceof Nn)) return S();
            e = {
                verify: nn(t, n.key)
            };
        }
        return n.Rt.Pt || (e.currentDocument = function(t, n) {
            return void 0 !== n.updateTime ? {
                updateTime: Zt(t, n.updateTime)
            } : void 0 !== n.exists ? {
                exists: n.exists
            } : S();
        }(t, n.Rt)), e;
    }

    function an(t, n) {
        // Dissect the path into parent, collectionId, and optional key filter.
        const e = {
            structuredQuery: {}
        }, s = n.path;
        null !== n.collectionGroup ? (e.parent = sn(t, s), e.structuredQuery.from = [ {
            collectionId: n.collectionGroup,
            allDescendants: !0
        } ]) : (e.parent = sn(t, s.j()), e.structuredQuery.from = [ {
            collectionId: s.k()
        } ]);
        const r = function(t) {
            if (0 === t.length) return;
            const n = t.map((t => 
            // visible for testing
            function(t) {
                if ("==" /* EQUAL */ === t.op) {
                    if (yt(t.value)) return {
                        unaryFilter: {
                            field: dn(t.field),
                            op: "IS_NAN"
                        }
                    };
                    if (pt(t.value)) return {
                        unaryFilter: {
                            field: dn(t.field),
                            op: "IS_NULL"
                        }
                    };
                } else if ("!=" /* NOT_EQUAL */ === t.op) {
                    if (yt(t.value)) return {
                        unaryFilter: {
                            field: dn(t.field),
                            op: "IS_NOT_NAN"
                        }
                    };
                    if (pt(t.value)) return {
                        unaryFilter: {
                            field: dn(t.field),
                            op: "IS_NOT_NULL"
                        }
                    };
                }
                return {
                    fieldFilter: {
                        field: dn(t.field),
                        op: fn(t.op),
                        value: t.value
                    }
                };
            }(t)));
            if (1 === n.length) return n[0];
            return {
                compositeFilter: {
                    op: "AND",
                    filters: n
                }
            };
        }(n.filters);
        r && (e.structuredQuery.where = r);
        const i = function(t) {
            if (0 === t.length) return;
            return t.map((t => 
            // visible for testing
            function(t) {
                return {
                    field: dn(t.field),
                    direction: ln(t.dir)
                };
            }(t)));
        }(n.orderBy);
        i && (e.structuredQuery.orderBy = i);
        const o = function(t, n) {
            return t.It || nt(n) ? n : {
                value: n
            };
        }(t, n.limit);
        return null !== o && (e.structuredQuery.limit = o), n.startAt && (e.structuredQuery.startAt = hn(n.startAt)), 
        n.endAt && (e.structuredQuery.endAt = hn(n.endAt)), e;
    }

    function hn(t) {
        return {
            before: t.before,
            values: t.position
        };
    }

    // visible for testing
    function ln(t) {
        return zt[t];
    }

    // visible for testing
    function fn(t) {
        return Gt[t];
    }

    function dn(t) {
        return {
            fieldPath: t.K()
        };
    }

    function _n(t) {
        const n = [];
        return t.fields.forEach((t => n.push(t.K()))), {
            fieldPaths: n
        };
    }

    function wn(t) {
        // Resource names have at least 4 components (project ID, database ID)
        return t.length >= 4 && "projects" === t.get(0) && "databases" === t.get(2);
    }

    /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Represents a transform within a TransformMutation. */ class mn {
        constructor() {
            // Make sure that the structural type of `TransformOperation` is unique.
            // See https://github.com/microsoft/TypeScript/issues/5451
            this.Vt = void 0;
        }
    }

    /** Transforms a value into a server-generated timestamp. */ class pn extends mn {}

    /** Transforms an array value via a union operation. */ class yn extends mn {
        constructor(t) {
            super(), this.elements = t;
        }
    }

    /** Transforms an array value via a remove operation. */ class En extends mn {
        constructor(t) {
            super(), this.elements = t;
        }
    }

    /**
     * Implements the backend semantics for locally computed NUMERIC_ADD (increment)
     * transforms. Converts all field values to integers or doubles, but unlike the
     * backend does not cap integer values at 2^63. Instead, JavaScript number
     * arithmetic is used and precision loss can occur for values greater than 2^53.
     */ class In extends mn {
        constructor(t, n) {
            super(), this.serializer = t, this.At = n;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Provides a set of fields that can be used to partially patch a document.
     * FieldMask is used in conjunction with ObjectValue.
     * Examples:
     *   foo - Overwrites foo entirely with the provided value. If foo is not
     *         present in the companion ObjectValue, the field is deleted.
     *   foo.bar - Overwrites only the field bar of the object foo.
     *             If foo is not an object, foo is replaced with an object
     *             containing foo
     */ class Tn {
        constructor(t) {
            this.fields = t, 
            // TODO(dimond): validation of FieldMask
            // Sort the field mask to support `FieldMask.isEqual()` and assert below.
            t.sort(K.L);
        }
        /**
         * Verifies that `fieldPath` is included by at least one field in this field
         * mask.
         *
         * This is an O(n) operation, where `n` is the size of the field mask.
         */    gt(t) {
            for (const n of this.fields) if (n.G(t)) return !0;
            return !1;
        }
        isEqual(t) {
            return Q(this.fields, t.fields, ((t, n) => t.isEqual(n)));
        }
    }

    /** A field path and the TransformOperation to perform upon it. */ class An {
        constructor(t, n) {
            this.field = t, this.transform = n;
        }
    }

    /**
     * Encodes a precondition for a mutation. This follows the model that the
     * backend accepts with the special case of an explicit "empty" precondition
     * (meaning no precondition).
     */ class Pn {
        constructor(t, n) {
            this.updateTime = t, this.exists = n;
        }
        /** Creates a new empty Precondition. */    static vt() {
            return new Pn;
        }
        /** Creates a new Precondition with an exists flag. */    static exists(t) {
            return new Pn(void 0, t);
        }
        /** Creates a new Precondition based on a version a document exists at. */    static updateTime(t) {
            return new Pn(t);
        }
        /** Returns whether this Precondition is empty. */    get Pt() {
            return void 0 === this.updateTime && void 0 === this.exists;
        }
        isEqual(t) {
            return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);
        }
    }

    /**
     * A mutation describes a self-contained change to a document. Mutations can
     * create, replace, delete, and update subsets of documents.
     *
     * Mutations not only act on the value of the document but also its version.
     *
     * For local mutations (mutations that haven't been committed yet), we preserve
     * the existing version for Set, Patch, and Transform mutations. For Delete
     * mutations, we reset the version to 0.
     *
     * Here's the expected transition table.
     *
     * MUTATION           APPLIED TO            RESULTS IN
     *
     * SetMutation        Document(v3)          Document(v3)
     * SetMutation        NoDocument(v3)        Document(v0)
     * SetMutation        null                  Document(v0)
     * PatchMutation      Document(v3)          Document(v3)
     * PatchMutation      NoDocument(v3)        NoDocument(v3)
     * PatchMutation      null                  null
     * TransformMutation  Document(v3)          Document(v3)
     * TransformMutation  NoDocument(v3)        NoDocument(v3)
     * TransformMutation  null                  null
     * DeleteMutation     Document(v3)          NoDocument(v0)
     * DeleteMutation     NoDocument(v3)        NoDocument(v0)
     * DeleteMutation     null                  NoDocument(v0)
     *
     * For acknowledged mutations, we use the updateTime of the WriteResponse as
     * the resulting version for Set, Patch, and Transform mutations. As deletes
     * have no explicit update time, we use the commitTime of the WriteResponse for
     * Delete mutations.
     *
     * If a mutation is acknowledged by the backend but fails the precondition check
     * locally, we return an `UnknownDocument` and rely on Watch to send us the
     * updated version.
     *
     * Note that TransformMutations don't create Documents (in the case of being
     * applied to a NoDocument), even though they would on the backend. This is
     * because the client always combines the TransformMutation with a SetMutation
     * or PatchMutation and we only want to apply the transform if the prior
     * mutation resulted in a Document (always true for a SetMutation, but not
     * necessarily for a PatchMutation).
     *
     * ## Subclassing Notes
     *
     * Subclasses of Mutation need to implement applyToRemoteDocument() and
     * applyToLocalView() to implement the actual behavior of applying the mutation
     * to some source document.
     */ class Rn {}

    /**
     * A mutation that creates or replaces the document at the given key with the
     * object value contents.
     */ class Vn extends Rn {
        constructor(t, n, e) {
            super(), this.key = t, this.value = n, this.Rt = e, this.type = 0 /* Set */;
        }
    }

    /**
     * A mutation that modifies fields of the document at the given key with the
     * given values. The values are applied through a field mask:
     *
     *  * When a field is in both the mask and the values, the corresponding field
     *    is updated.
     *  * When a field is in neither the mask nor the values, the corresponding
     *    field is unmodified.
     *  * When a field is in the mask but not in the values, the corresponding field
     *    is deleted.
     *  * When a field is not in the mask but is in the values, the values map is
     *    ignored.
     */ class gn extends Rn {
        constructor(t, n, e, s) {
            super(), this.key = t, this.data = n, this.Tt = e, this.Rt = s, this.type = 1 /* Patch */;
        }
    }

    /**
     * A mutation that modifies specific fields of the document with transform
     * operations. Currently the only supported transform is a server timestamp, but
     * IP Address, increment(n), etc. could be supported in the future.
     *
     * It is somewhat similar to a PatchMutation in that it patches specific fields
     * and has no effect when applied to a null or NoDocument (see comment on
     * Mutation for rationale).
     */ class vn extends Rn {
        constructor(t, n) {
            super(), this.key = t, this.fieldTransforms = n, this.type = 2 /* Transform */ , 
            // NOTE: We set a precondition of exists: true as a safety-check, since we
            // always combine TransformMutations with a SetMutation or PatchMutation which
            // (if successful) should end up with an existing document.
            this.Rt = Pn.exists(!0);
        }
    }

    /** A mutation that deletes the document at the given key. */ class bn extends Rn {
        constructor(t, n) {
            super(), this.key = t, this.Rt = n, this.type = 3 /* Delete */;
        }
    }

    /**
     * A mutation that verifies the existence of the document at the given key with
     * the provided precondition.
     *
     * The `verify` operation is only used in Transactions, and this class serves
     * primarily to facilitate serialization into protos.
     */ class Nn extends Rn {
        constructor(t, n) {
            super(), this.key = t, this.Rt = n, this.type = 4 /* Verify */;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An ObjectValue represents a MapValue in the Firestore Proto and offers the
     * ability to add and remove fields (via the ObjectValueBuilder).
     */ class Dn {
        constructor(t) {
            this.proto = t;
        }
        static empty() {
            return new Dn({
                mapValue: {}
            });
        }
        /**
         * Returns the value at the given path or null.
         *
         * @param path - the path to search
         * @returns The value at the path or if there it doesn't exist.
         */    field(t) {
            if (t.W()) return this.proto;
            {
                let n = this.proto;
                for (let e = 0; e < t.length - 1; ++e) {
                    if (!n.mapValue.fields) return null;
                    if (n = n.mapValue.fields[t.get(e)], !Et(n)) return null;
                }
                return n = (n.mapValue.fields || {})[t.k()], n || null;
            }
        }
        isEqual(t) {
            return ct(this.proto, t.proto);
        }
    }

    /**
     * An ObjectValueBuilder provides APIs to set and delete fields from an
     * ObjectValue.
     */ class Fn {
        /**
         * @param baseObject - The object to mutate.
         */
        constructor(t = Dn.empty()) {
            this.bt = t, 
            /** A map that contains the accumulated changes in this builder. */
            this.Nt = new Map;
        }
        /**
         * Sets the field to the provided value.
         *
         * @param path - The field path to set.
         * @param value - The value to set.
         * @returns The current Builder instance.
         */    set(t, n) {
            return this.Dt(t, n), this;
        }
        /**
         * Removes the field at the specified path. If there is no field at the
         * specified path, nothing is changed.
         *
         * @param path - The field path to remove.
         * @returns The current Builder instance.
         */    delete(t) {
            return this.Dt(t, null), this;
        }
        /**
         * Adds `value` to the overlay map at `path`. Creates nested map entries if
         * needed.
         */    Dt(t, n) {
            let e = this.Nt;
            for (let n = 0; n < t.length - 1; ++n) {
                const s = t.get(n);
                let r = e.get(s);
                r instanceof Map ? 
                // Re-use a previously created map
                e = r : r && 10 /* ObjectValue */ === ut(r) ? (
                // Convert the existing Protobuf MapValue into a map
                r = new Map(Object.entries(r.mapValue.fields || {})), e.set(s, r), e = r) : (
                // Create an empty map to represent the current nesting level
                r = new Map, e.set(s, r), e = r);
            }
            e.set(t.k(), n);
        }
        /** Returns an ObjectValue with all mutations applied. */    Ft() {
            const t = this.$t(K.Z(), this.Nt);
            return null != t ? new Dn(t) : this.bt;
        }
        /**
         * Applies any overlays from `currentOverlays` that exist at `currentPath`
         * and returns the merged data at `currentPath` (or null if there were no
         * changes).
         *
         * @param currentPath - The path at the current nesting level. Can be set to
         * FieldValue.emptyPath() to represent the root.
         * @param currentOverlays - The overlays at the current nesting level in the
         * same format as `overlayMap`.
         * @returns The merged data at `currentPath` or null if no modifications
         * were applied.
         */    $t(t, n) {
            let e = !1;
            const s = this.bt.field(t), r = Et(s) ? // If there is already data at the current path, base our
            Object.assign({}, s.mapValue.fields) : {};
            return n.forEach(((n, s) => {
                if (n instanceof Map) {
                    const i = this.$t(t.child(s), n);
                    null != i && (r[s] = i, e = !0);
                } else null !== n ? (r[s] = n, e = !0) : r.hasOwnProperty(s) && (delete r[s], e = !0);
            })), e ? {
                mapValue: {
                    fields: r
                }
            } : null;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The result of a lookup for a given path may be an existing document or a
     * marker that this document does not exist at a given version.
     */ class $n {
        constructor(t, n) {
            this.key = t, this.version = n;
        }
    }

    /**
     * Represents a document in Firestore with a key, version, data and whether the
     * data has local mutations applied to it.
     */ class Sn extends $n {
        constructor(t, n, e, s) {
            super(t, n), this.St = e, this.xt = !!s.xt, this.hasCommittedMutations = !!s.hasCommittedMutations;
        }
        field(t) {
            return this.St.field(t);
        }
        data() {
            return this.St;
        }
        qt() {
            return this.St.proto;
        }
        isEqual(t) {
            return t instanceof Sn && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.xt === t.xt && this.hasCommittedMutations === t.hasCommittedMutations && this.St.isEqual(t.St);
        }
        toString() {
            return `Document(${this.key}, ${this.version}, ${this.St.toString()}, {hasLocalMutations: ${this.xt}}), {hasCommittedMutations: ${this.hasCommittedMutations}})`;
        }
        get hasPendingWrites() {
            return this.xt || this.hasCommittedMutations;
        }
    }

    /**
     * A class representing a deleted document.
     * Version is set to 0 if we don't point to any specific time, otherwise it
     * denotes time we know it didn't exist at.
     */ class xn extends $n {
        constructor(t, n, e) {
            super(t, n), this.hasCommittedMutations = !(!e || !e.hasCommittedMutations);
        }
        toString() {
            return `NoDocument(${this.key}, ${this.version})`;
        }
        get hasPendingWrites() {
            return this.hasCommittedMutations;
        }
        isEqual(t) {
            return t instanceof xn && t.hasCommittedMutations === this.hasCommittedMutations && t.version.isEqual(this.version) && t.key.isEqual(this.key);
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class qn {
        constructor() {
            this.promise = new Promise(((t, n) => {
                this.resolve = t, this.reject = n;
            }));
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A helper for running delayed tasks following an exponential backoff curve
     * between attempts.
     *
     * Each delay is made up of a "base" delay which follows the exponential
     * backoff curve, and a +/- 50% "jitter" that is calculated and added to the
     * base delay. This prevents clients from accidentally synchronizing their
     * delays causing spikes of load to the backend.
     */
    class On {
        constructor(
        /**
         * The AsyncQueue to run backoff operations on.
         */
        t, 
        /**
         * The ID to use when scheduling backoff operations on the AsyncQueue.
         */
        n, 
        /**
         * The initial delay (used as the base delay on the first retry attempt).
         * Note that jitter will still be applied, so the actual delay could be as
         * little as 0.5*initialDelayMs.
         */
        e = 1e3
        /**
         * The multiplier to use to determine the extended base delay after each
         * attempt.
         */ , s = 1.5
        /**
         * The maximum base delay after which no further backoff is performed.
         * Note that jitter will still be applied, so the actual delay could be as
         * much as 1.5*maxDelayMs.
         */ , r = 6e4) {
            this.Ot = t, this.Ct = n, this.Lt = e, this.Ut = s, this.Mt = r, this.jt = 0, this.Bt = null, 
            /** The last backoff attempt, as epoch milliseconds. */
            this.kt = Date.now(), this.reset();
        }
        /**
         * Resets the backoff delay.
         *
         * The very next backoffAndWait() will have no delay. If it is called again
         * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
         * subsequent ones will increase according to the backoffFactor.
         */    reset() {
            this.jt = 0;
        }
        /**
         * Resets the backoff delay to the maximum delay (e.g. for use after a
         * RESOURCE_EXHAUSTED error).
         */    Qt() {
            this.jt = this.Mt;
        }
        /**
         * Returns a promise that resolves after currentDelayMs, and increases the
         * delay for any subsequent attempts. If there was a pending backoff operation
         * already, it will be canceled.
         */    Wt(t) {
            // Cancel any pending backoff operation.
            this.cancel();
            // First schedule using the current base (which may be 0 and should be
            // honored as such).
            const n = Math.floor(this.jt + this.zt()), e = Math.max(0, Date.now() - this.kt), s = Math.max(0, n - e);
            // Guard against lastAttemptTime being in the future due to a clock change.
                    s > 0 && D("ExponentialBackoff", `Backing off for ${s} ms (base delay: ${this.jt} ms, delay with jitter: ${n} ms, last attempt: ${e} ms ago)`), 
            this.Bt = this.Ot.Gt(this.Ct, s, (() => (this.kt = Date.now(), t()))), 
            // Apply backoff factor to determine next delay and ensure it is within
            // bounds.
            this.jt *= this.Ut, this.jt < this.Lt && (this.jt = this.Lt), this.jt > this.Mt && (this.jt = this.Mt);
        }
        Yt() {
            null !== this.Bt && (this.Bt.Ht(), this.Bt = null);
        }
        cancel() {
            null !== this.Bt && (this.Bt.cancel(), this.Bt = null);
        }
        /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */    zt() {
            return (Math.random() - .5) * this.jt;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Verifies whether `e` is an IndexedDbTransactionError. */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** The Platform's 'document' implementation or null if not available. */
    function Cn() {
        // `document` is not always available, e.g. in ReactNative and WebWorkers.
        // eslint-disable-next-line no-restricted-globals
        return "undefined" != typeof document ? document : null;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Represents an operation scheduled to be run in the future on an AsyncQueue.
     *
     * It is created via DelayedOperation.createAndSchedule().
     *
     * Supports cancellation (via cancel()) and early execution (via skipDelay()).
     *
     * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type
     * in newer versions of TypeScript defines `finally`, which is not available in
     * IE.
     */
    class Ln {
        constructor(t, n, e, s, r) {
            this.Kt = t, this.Ct = n, this.Jt = e, this.op = s, this.Zt = r, this.Xt = new qn, 
            this.then = this.Xt.promise.then.bind(this.Xt.promise), 
            // It's normal for the deferred promise to be canceled (due to cancellation)
            // and so we attach a dummy catch callback to avoid
            // 'UnhandledPromiseRejectionWarning' log spam.
            this.Xt.promise.catch((t => {}));
        }
        /**
         * Creates and returns a DelayedOperation that has been scheduled to be
         * executed on the provided asyncQueue after the provided delayMs.
         *
         * @param asyncQueue - The queue to schedule the operation on.
         * @param id - A Timer ID identifying the type of operation this is.
         * @param delayMs - The delay (ms) before the operation should be scheduled.
         * @param op - The operation to run.
         * @param removalCallback - A callback to be called synchronously once the
         *   operation is executed or canceled, notifying the AsyncQueue to remove it
         *   from its delayedOperations list.
         *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
         *   the DelayedOperation class public.
         */    static tn(t, n, e, s, r) {
            const i = Date.now() + e, o = new Ln(t, n, i, s, r);
            return o.start(e), o;
        }
        /**
         * Starts the timer. This is called immediately after construction by
         * createAndSchedule().
         */    start(t) {
            this.nn = setTimeout((() => this.en()), t);
        }
        /**
         * Queues the operation to run immediately (if it hasn't already been run or
         * canceled).
         */    Ht() {
            return this.en();
        }
        /**
         * Cancels the operation if it hasn't already been executed or canceled. The
         * promise will be rejected.
         *
         * As long as the operation has not yet been run, calling cancel() provides a
         * guarantee that the operation will not be run.
         */    cancel(t) {
            null !== this.nn && (this.clearTimeout(), this.Xt.reject(new R(c, "Operation cancelled" + (t ? ": " + t : ""))));
        }
        en() {
            this.Kt.sn((() => null !== this.nn ? (this.clearTimeout(), this.op().then((t => this.Xt.resolve(t)))) : Promise.resolve()));
        }
        clearTimeout() {
            null !== this.nn && (this.Zt(this), clearTimeout(this.nn), this.nn = null);
        }
    }

    class Un {
        constructor() {
            // The last promise in the queue.
            this.rn = Promise.resolve(), 
            // A list of retryable operations. Retryable operations are run in order and
            // retried with backoff.
            this.on = [], 
            // Is this AsyncQueue being shut down? Once it is set to true, it will not
            // be changed again.
            this.un = !1, 
            // Operations scheduled to be queued in the future. Operations are
            // automatically removed after they are run or canceled.
            this.cn = [], 
            // visible for testing
            this.an = null, 
            // Flag set while there's an outstanding AsyncQueue operation, used for
            // assertion sanity-checks.
            this.hn = !1, 
            // List of TimerIds to fast-forward delays for.
            this.ln = [], 
            // Backoff timer used to schedule retries for retryable operations
            this.fn = new On(this, "async_queue_retry" /* AsyncQueueRetry */), 
            // Visibility handler that triggers an immediate retry of all retryable
            // operations. Meant to speed up recovery when we regain file system access
            // after page comes into foreground.
            this.dn = () => {
                const t = Cn();
                t && D("AsyncQueue", "Visibility state changed to " + t.visibilityState), this.fn.Yt();
            };
            const t = Cn();
            t && "function" == typeof t.addEventListener && t.addEventListener("visibilitychange", this.dn);
        }
        // Is this AsyncQueue being shut down? If true, this instance will not enqueue
        // any new operations, Promises from enqueue requests will not resolve.
        get _n() {
            return this.un;
        }
        /**
         * Adds a new operation to the queue without waiting for it to complete (i.e.
         * we ignore the Promise result).
         */    sn(t) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.enqueue(t);
        }
        /**
         * Regardless if the queue has initialized shutdown, adds a new operation to the
         * queue without waiting for it to complete (i.e. we ignore the Promise result).
         */    wn(t) {
            this.mn(), 
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.pn(t);
        }
        /**
         * Initialize the shutdown of this queue. Once this method is called, the
         * only possible way to request running an operation is through
         * `enqueueEvenWhileRestricted()`.
         */    yn() {
            if (!this.un) {
                this.un = !0;
                const t = Cn();
                t && "function" == typeof t.removeEventListener && t.removeEventListener("visibilitychange", this.dn);
            }
        }
        /**
         * Adds a new operation to the queue. Returns a promise that will be resolved
         * when the promise returned by the new operation is (with its value).
         */    enqueue(t) {
            return this.mn(), this.un ? new Promise((t => {})) : this.pn(t);
        }
        /**
         * Enqueue a retryable operation.
         *
         * A retryable operation is rescheduled with backoff if it fails with a
         * IndexedDbTransactionError (the error type used by SimpleDb). All
         * retryable operations are executed in order and only run if all prior
         * operations were retried successfully.
         */    En(t) {
            this.sn((() => (this.on.push(t), this.In())));
        }
        /**
         * Runs the next operation from the retryable queue. If the operation fails,
         * reschedules with backoff.
         */    async In() {
            if (0 !== this.on.length) {
                try {
                    await this.on[0](), this.on.shift(), this.fn.reset();
                } catch (t) {
                    if (!function(t) {
                        // Use name equality, as instanceof checks on errors don't work with errors
                        // that wrap other errors.
                        return "IndexedDbTransactionError" === t.name;
                    }(t)) throw t;
     // Failure will be handled by AsyncQueue
                                    D("AsyncQueue", "Operation failed with retryable error: " + t);
                }
                this.on.length > 0 && 
                // If there are additional operations, we re-schedule `retryNextOp()`.
                // This is necessary to run retryable operations that failed during
                // their initial attempt since we don't know whether they are already
                // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
                // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
                // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
                // call scheduled here.
                // Since `backoffAndRun()` cancels an existing backoff and schedules a
                // new backoff on every call, there is only ever a single additional
                // operation in the queue.
                this.fn.Wt((() => this.In()));
            }
        }
        pn(t) {
            const n = this.rn.then((() => (this.hn = !0, t().catch((t => {
                this.an = t, this.hn = !1;
                // Re-throw the error so that this.tail becomes a rejected Promise and
                // all further attempts to chain (via .then) will just short-circuit
                // and return the rejected Promise.
                throw F("INTERNAL UNHANDLED ERROR: ", 
                /**
     * Chrome includes Error.message in Error.stack. Other browsers do not.
     * This returns expected output of message + stack when available.
     * @param error - Error or FirestoreError
     */
                function(t) {
                    let n = t.message || "";
                    t.stack && (n = t.stack.includes(t.message) ? t.stack : t.message + "\n" + t.stack);
                    return n;
                }
                /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
                /**
     * Datastore and its related methods are a wrapper around the external Google
     * Cloud Datastore grpc API, which provides an interface that is more convenient
     * for the rest of the client SDK architecture to consume.
     */ (t)), t;
            })).then((t => (this.hn = !1, t))))));
            return this.rn = n, n;
        }
        /**
         * Schedules an operation to be queued on the AsyncQueue once the specified
         * `delayMs` has elapsed. The returned DelayedOperation can be used to cancel
         * or fast-forward the operation prior to its running.
         */    Gt(t, n, e) {
            this.mn(), 
            // Fast-forward delays for timerIds that have been overriden.
            this.ln.indexOf(t) > -1 && (n = 0);
            const s = Ln.tn(this, t, n, e, (t => this.Tn(t)));
            return this.cn.push(s), s;
        }
        mn() {
            this.an && S();
        }
        /**
         * Verifies there's an operation currently in-progress on the AsyncQueue.
         * Unfortunately we can't verify that the running code is in the promise chain
         * of that operation, so this isn't a foolproof check, but it should be enough
         * to catch some bugs.
         */    An() {}
        /**
         * Waits until all currently queued tasks are finished executing. Delayed
         * operations are not run.
         */    async Pn() {
            // Operations in the queue prior to draining may have enqueued additional
            // operations. Keep draining the queue until the tail is no longer advanced,
            // which indicates that no more new operations were enqueued and that all
            // operations were executed.
            let t;
            do {
                t = this.rn, await t;
            } while (t !== this.rn);
        }
        /**
         * For Tests: Determine if a delayed operation with a particular TimerId
         * exists.
         */    Rn(t) {
            for (const n of this.cn) if (n.Ct === t) return !0;
            return !1;
        }
        /**
         * For Tests: Runs some or all delayed operations early.
         *
         * @param lastTimerId - Delayed operations up to and including this TimerId
         * will be drained. Pass TimerId.All to run all delayed operations.
         * @returns a Promise that resolves once all operations have been run.
         */    Vn(t) {
            // Note that draining may generate more delayed ops, so we do that first.
            return this.Pn().then((() => {
                // Run ops in the same order they'd run if they ran naturally.
                this.cn.sort(((t, n) => t.Jt - n.Jt));
                for (const n of this.cn) if (n.Ht(), "all" /* All */ !== t && n.Ct === t) break;
                return this.Pn();
            }));
        }
        /**
         * For Tests: Skip all subsequent delays for a timer id.
         */    gn(t) {
            this.ln.push(t);
        }
        /** Called once a DelayedOperation is run or canceled. */    Tn(t) {
            // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
            const n = this.cn.indexOf(t);
            this.cn.splice(n, 1);
        }
    }

    /**
     * An implementation of Datastore that exposes additional state for internal
     * consumption.
     */
    class Mn extends class {} {
        constructor(t, n, e) {
            super(), this.credentials = t, this.vn = n, this.serializer = e, this.bn = !1;
        }
        Nn() {
            if (this.bn) throw new R(p, "The client has already been terminated.");
        }
        /** Gets an auth token and invokes the provided RPC. */    Dn(t, n, e) {
            return this.Nn(), this.credentials.getToken().then((s => this.vn.Dn(t, n, e, s))).catch((t => {
                throw t.code === w && this.credentials.I(), t;
            }));
        }
        /** Gets an auth token and invokes the provided RPC with streamed results. */    Fn(t, n, e) {
            return this.Nn(), this.credentials.getToken().then((s => this.vn.Fn(t, n, e, s))).catch((t => {
                throw t.code === w && this.credentials.I(), t;
            }));
        }
        terminate() {
            this.bn = !1;
        }
    }

    // TODO(firestorexp): Make sure there is only one Datastore instance per
    // firestore-exp client.
    async function jn(t, n) {
        const e = q(t), s = rn(e.serializer) + "/documents", r = {
            writes: n.map((t => cn(e.serializer, t)))
        };
        await e.Dn("Commit", s, r);
    }

    async function Bn(t, n) {
        const e = q(t), s = rn(e.serializer) + "/documents", r = {
            documents: n.map((t => nn(e.serializer, t)))
        }, i = await e.Fn("BatchGetDocuments", s, r), o = new Map;
        i.forEach((t => {
            const n = un(e.serializer, t);
            o.set(n.key.toString(), n);
        }));
        const u = [];
        return n.forEach((t => {
            const n = o.get(t.toString());
            x(!!n), u.push(n);
        })), u;
    }

    async function kn(t, n) {
        const e = q(t), s = an(e.serializer, bt(n));
        return (await e.Fn("RunQuery", s.parent, {
            structuredQuery: s.structuredQuery
        })).filter((t => !!t.document)).map((t => function(t, n, e) {
            const s = en(t, n.name), r = Xt(n.updateTime), i = new Dn({
                mapValue: {
                    fields: n.fields
                }
            });
            return new Sn(s, r, i, {
                hasCommittedMutations: !!e
            });
        }(e.serializer, t.document, void 0)));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const Qn = {
        BatchGetDocuments: "batchGet",
        Commit: "commit",
        RunQuery: "runQuery"
    };

    /**
     * Maps RPC names to the corresponding REST endpoint name.
     *
     * We use array notation to avoid mangling.
     */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A Rest-based connection that relies on the native HTTP stack
     * (e.g. `fetch` or a polyfill).
     */
    class Wn extends 
    /**
     * Base class for all Rest-based connections to the backend (WebChannel and
     * HTTP).
     */
    class {
        constructor(t) {
            this.$n = t, this.t = t.t;
            const n = t.ssl ? "https" : "http";
            this.Sn = n + "://" + t.host, this.xn = "projects/" + this.t.projectId + "/databases/" + this.t.database + "/documents";
        }
        Dn(t, n, e, s) {
            const r = this.qn(t, n);
            D("RestConnection", "Sending: ", r, e);
            const i = {};
            return this.On(i, s), this.Cn(t, r, i, e).then((t => (D("RestConnection", "Received: ", t), 
            t)), (n => {
                throw function(t, ...n) {
                    if (b.logLevel <= LogLevel.WARN) {
                        const e = n.map($);
                        b.warn("Firestore (8.1.1): " + t, ...e);
                    }
                }("RestConnection", t + " failed with error: ", n, "url: ", r, "request:", e), n;
            }));
        }
        Fn(t, n, e, s) {
            // The REST API automatically aggregates all of the streamed results, so we
            // can just use the normal invoke() method.
            return this.Dn(t, n, e, s);
        }
        /**
         * Modifies the headers for a request, adding any authorization token if
         * present and any additional headers for the request.
         */    On(t, n) {
            if (t["X-Goog-Api-Client"] = "gl-js/ fire/8.1.1", 
            // Content-Type: text/plain will avoid preflight requests which might
            // mess with CORS and redirects by proxies. If we add custom headers
            // we will need to change this code to potentially use the $httpOverwrite
            // parameter supported by ESF to avoid triggering preflight requests.
            t["Content-Type"] = "text/plain", n) for (const e in n.m) n.m.hasOwnProperty(e) && (t[e] = n.m[e]);
        }
        qn(t, n) {
            const e = Qn[t];
            return `${this.Sn}/v1/${n}:${e}`;
        }
    } {
        /**
         * @param databaseInfo - The connection info.
         * @param fetchImpl - `fetch` or a Polyfill that implements the fetch API.
         */
        constructor(t, n) {
            super(t), this.Ln = n;
        }
        Un(t, n) {
            throw new Error("Not supported by FetchConnection");
        }
        async Cn(t, n, e, s) {
            const r = JSON.stringify(s);
            let i;
            try {
                i = await this.Ln(n, {
                    method: "POST",
                    headers: e,
                    body: r
                });
            } catch (t) {
                throw new R(Wt(t.status), "Request failed with error: " + t.statusText);
            }
            if (!i.ok) throw new R(Wt(i.status), "Request failed with error: " + i.statusText);
            return i.json();
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Initializes the HTTP connection for the REST API. */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function zn(t) {
        return new Yt(t, /* useProto3Json= */ !0);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const Gn = new Map;

    // The components module manages the lifetime of dependencies of the Firestore
    // client. Dependencies can be lazily constructed and only one exists per
    // Firestore instance.
    /**
     * An instance map that ensures only one Datastore exists per Firestore
     * instance.
     */
    /**
     * Returns an initialized and started Datastore for the given Firestore
     * instance. Callers must invoke removeComponents() when the Firestore
     * instance is terminated.
     */
    function Yn(t) {
        if (t.Mn) throw new R(p, "The client has already been terminated.");
        if (!Gn.has(t)) {
            D("ComponentProvider", "Initializing Datastore");
            const r = function(t) {
                return new Wn(t, fetch.bind(null));
            }((n = t.jn, e = t.Bn, s = t.kn(), new V(n, e, s.host, s.ssl, s.experimentalForceLongPolling, s.experimentalAutoDetectLongPolling))), i = zn(t.jn), o = function(t, n, e) {
                return new Mn(t, n, e);
            }(t.Qn, r, i);
            Gn.set(t, o);
        }
        var n, e, s;
        return Gn.get(t);
    }

    /**
     * Removes all components associated with the provided instance. Must be called
     * when the `Firestore` instance is terminated.
     */
    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function Hn(t, n, e) {
        if (!e) throw new R(h, `Function ${t}() cannot be called with an empty ${n}.`);
    }

    /**
     * Validates that two boolean options are not set at the same time.
     */
    /**
     * Validates that `path` refers to a document (indicated by the fact it contains
     * an even numbers of segments).
     */
    function Kn(t) {
        if (!J.ot(t)) throw new R(h, `Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`);
    }

    /**
     * Validates that `path` refers to a collection (indicated by the fact it
     * contains an odd numbers of segments).
     */ function Jn(t) {
        if (J.ot(t)) throw new R(h, `Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`);
    }

    /**
     * Returns true if it's a non-null object without a custom prototype
     * (i.e. excludes Array, Date, etc.).
     */
    /** Returns a string describing the type / value of the provided input. */
    function Zn(t) {
        if (void 0 === t) return "undefined";
        if (null === t) return "null";
        if ("string" == typeof t) return t.length > 20 && (t = t.substring(0, 20) + "..."), 
        JSON.stringify(t);
        if ("number" == typeof t || "boolean" == typeof t) return "" + t;
        if ("object" == typeof t) {
            if (t instanceof Array) return "an array";
            {
                const n = 
                /** Hacky method to try to get the constructor name for an object. */
                function(t) {
                    if (t.constructor) {
                        const n = /function\s+([^\s(]+)\s*\(/.exec(t.constructor.toString());
                        if (n && n.length > 1) return n[1];
                    }
                    return null;
                }
                /**
     * Casts `obj` to `T`, optionally unwrapping Compat types to expose the
     * underlying instance. Throws if  `obj` is not an instance of `T`.
     *
     * This cast is used in the Lite and Full SDK to verify instance types for
     * arguments passed to the public API.
     */ (t);
                return n ? `a custom ${n} object` : "an object";
            }
        }
        return "function" == typeof t ? "a function" : S();
    }

    function Xn(t, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    n) {
        if ("_delegate" in t && (
        // Unwrap Compat types
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        t = t.Wn), !(t instanceof n)) {
            if (n.name === t.constructor.name) throw new R(h, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
            {
                const e = Zn(t);
                throw new R(h, `Expected type '${n.name}', but it was: ${e}`);
            }
        }
        return t;
    }

    function te(t, n) {
        if (n <= 0) throw new R(h, `Function ${t}() requires a positive number, but it was: ${n}.`);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // settings() defaults:
    /**
     * A concrete type describing all the values that can be applied via a
     * user-supplied firestore.Settings object. This is a separate type so that
     * defaults can be supplied and the value can be checked for equality.
     */
    class ne {
        constructor(t) {
            var n;
            if (void 0 === t.host) {
                if (void 0 !== t.ssl) throw new R(h, "Can't provide ssl option if host option is not set");
                this.host = "firestore.googleapis.com", this.ssl = true;
            } else this.host = t.host, this.ssl = null === (n = t.ssl) || void 0 === n || n;
            if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, 
            void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040; else {
                if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new R(h, "cacheSizeBytes must be at least 1048576");
                this.cacheSizeBytes = t.cacheSizeBytes;
            }
            this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, 
            function(t, n, e, s) {
                if (!0 === n && !0 === s) throw new R(h, `${t} and ${e} cannot be used together.`);
            }("experimentalForceLongPolling", t.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", t.experimentalAutoDetectLongPolling);
        }
        isEqual(t) {
            return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties;
        }
    }

    /**
     * The Cloud Firestore service interface.
     *
     * Do not call this constructor directly. Instead, use {@link getFirestore}.
     */ class ee {
        /** @hideconstructor */
        constructor(t, n) {
            this.Bn = "(lite)", this.zn = new ne({}), this.Gn = !1, t instanceof g ? (this.jn = t, 
            this.Qn = new C) : (this.Yn = t, this.jn = function(t) {
                if (!Object.prototype.hasOwnProperty.apply(t.options, [ "projectId" ])) throw new R(h, '"projectId" not provided in firebase.initializeApp.');
                return new g(t.options.projectId);
            }
            /**
     * Initializes a new instance of Cloud Firestore with the provided settings.
     * Can only be called before any other functions, including
     * {@link getFirestore}. If the custom settings are empty, this function is
     * equivalent to calling {@link getFirestore}.
     *
     * @param app - The {@link FirebaseApp} with which the `Firestore` instance will
     * be associated.
     * @param settings - A settings object to configure the `Firestore` instance.
     * @returns A newly initialized Firestore instance.
     */ (t), this.Qn = new L(n));
        }
        /**
         * The {@link FirebaseApp} associated with this `Firestore` service
         * instance.
         */    get app() {
            if (!this.Yn) throw new R(p, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
            return this.Yn;
        }
        get Hn() {
            return this.Gn;
        }
        get Mn() {
            return void 0 !== this.Kn;
        }
        Jn(t) {
            if (this.Gn) throw new R(p, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
            this.zn = new ne(t), void 0 !== t.credentials && (this.Qn = function(t) {
                if (!t) return new C;
                switch (t.type) {
                  case "gapi":
                    const n = t.client;
                    // Make sure this really is a Gapi client.
                                    return x(!("object" != typeof n || null === n || !n.auth || !n.auth.getAuthHeaderValueForFirstParty)), 
                    new M(n, t.sessionIndex || "0");

                  case "provider":
                    return t.client;

                  default:
                    throw new R(h, "makeCredentialsProvider failed due to invalid credential type");
                }
            }(t.credentials));
        }
        Zn() {
            return this.zn;
        }
        kn() {
            return this.Gn = !0, this.zn;
        }
        _delete() {
            return this.Kn || (this.Kn = this.Xn()), this.Kn;
        }
        /**
         * Terminates all components used by this client. Subclasses can override
         * this method to clean up their own dependencies, but must also call this
         * method.
         *
         * Only ever called once.
         */    Xn() {
            return function(t) {
                const n = Gn.get(t);
                n && (D("ComponentProvider", "Removing Datastore"), Gn.delete(t), n.terminate());
            }
            /**
     * @license
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ (this), Promise.resolve();
        }
    }

    function se(n, e) {
        const s = app._getProvider(n, "firestore/lite").getImmediate();
        return s.Jn(e), s;
    }

    /**
     * Returns the existing instance of Firestore that is associated with the
     * provided {@link FirebaseApp}. If no instance exists, initializes a new
     * instance with default settings.
     *
     * @param app - The {@link FirebaseApp} instance that the returned Firestore
     * instance is associated with.
     * @returns The `Firestore` instance of the provided app.
     */ function re(n) {
        return app._getProvider(n, "firestore/lite").getImmediate();
    }

    /**
     * Terminates the provided Firestore instance.
     *
     * After calling `terminate()` only the `clearIndexedDbPersistence()` functions
     * may be used. Any other function will throw a `FirestoreError`. Termination
     * does not cancel any pending writes, and any promises that are awaiting a
     * response from the server will not be resolved.
     *
     * To restart after termination, create a new instance of FirebaseFirestore with
     * {@link getFirestore}.
     *
     * Note: Under normal circumstances, calling `terminate()` is not required. This
     * function is useful only when you want to force this instance to release all of
     * its resources or in combination with {@link clearIndexedDbPersistence} to
     * ensure that all local state is destroyed between test runs.
     *
     * @returns A promise that is resolved when the instance has been successfully
     * terminated.
     */ function ie(t) {
        return t = Xn(t, ee), app._removeServiceInstance(t.app, "firestore/lite"), t._delete();
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Sentinel values that can be used when writing document fields with `set()`
     * or `update()`.
     */
    class oe {
        /**
         * @param _methodName - The public API endpoint that returns this class.
         */
        constructor(t) {
            this._methodName = t;
        }
    }

    /**
     * Returns a sentinel for use with {@link updateDoc} or
     * {@link setDoc} with `{merge: true}` to mark a field for deletion.
     */ function ue() {
        return new fe("deleteField");
    }

    /**
     * Returns a sentinel used with {@link setDoc} or {@link updateDoc} to
     * include a server-generated timestamp in the written data.
     */ function ce() {
        return new _e("serverTimestamp");
    }

    /**
     * Returns a special value that can be used with {@link setDoc} or {@link
     * updateDoc} that tells the server to union the given elements with any array
     * value that already exists on the server. Each specified element that doesn't
     * already exist in the array will be added to the end. If the field being
     * modified is not already an array it will be overwritten with an array
     * containing exactly the specified elements.
     *
     * @param elements - The elements to union into the array.
     * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
     * `updateDoc()`.
     */ function ae(...t) {
        // NOTE: We don't actually parse the data until it's used in set() or
        // update() since we'd need the Firestore instance to do this.
        return new we("arrayUnion", t);
    }

    /**
     * Returns a special value that can be used with {@link (setDoc:1)} or {@link
     * updateDoc} that tells the server to remove the given elements from any
     * array value that already exists on the server. All instances of each element
     * specified will be removed from the array. If the field being modified is not
     * already an array it will be overwritten with an empty array.
     *
     * @param elements - The elements to remove from the array.
     * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
     * `updateDoc()`
     */ function he(...t) {
        // NOTE: We don't actually parse the data until it's used in set() or
        // update() since we'd need the Firestore instance to do this.
        return new me("arrayRemove", t);
    }

    /**
     * Returns a special value that can be used with {@link setDoc} or {@link
     * updateDoc} that tells the server to increment the field's current value by
     * the given value.
     *
     * If either the operand or the current field value uses floating point
     * precision, all arithmetic follows IEEE 754 semantics. If both values are
     * integers, values outside of JavaScript's safe number range
     * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to
     * precision loss. Furthermore, once processed by the Firestore backend, all
     * integer operations are capped between -2^63 and 2^63-1.
     *
     * If the current field value is not of type `number`, or if the field does not
     * yet exist, the transformation sets the field to the given value.
     *
     * @param n - The value to increment by.
     * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
     * `updateDoc()`
     */ function le(t) {
        return new pe("increment", t);
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ class fe extends oe {
        te(t) {
            if (2 /* MergeSet */ !== t.ne) throw 1 /* Update */ === t.ne ? t.ee(this._methodName + "() can only appear at the top level of your update data") : t.ee(this._methodName + "() cannot be used with set() unless you pass {merge:true}");
            // No transform to add for a delete, but we need to add it to our
            // fieldMask so it gets deleted.
            return t.Tt.push(t.path), null;
        }
        isEqual(t) {
            return t instanceof fe;
        }
    }

    /**
     * Creates a child context for parsing SerializableFieldValues.
     *
     * This is different than calling `ParseContext.contextWith` because it keeps
     * the fieldTransforms and fieldMask separate.
     *
     * The created context has its `dataSource` set to `UserDataSource.Argument`.
     * Although these values are used with writes, any elements in these FieldValues
     * are not considered writes since they cannot contain any FieldValue sentinels,
     * etc.
     *
     * @param fieldValue - The sentinel FieldValue for which to create a child
     *     context.
     * @param context - The parent context.
     * @param arrayElement - Whether or not the FieldValue has an array.
     */ function de(t, n, e) {
        return new ve({
            ne: 3 /* Argument */ ,
            se: n.settings.se,
            methodName: t._methodName,
            re: e
        }, n.t, n.serializer, n.ignoreUndefinedProperties);
    }

    class _e extends oe {
        te(t) {
            return new An(t.path, new pn);
        }
        isEqual(t) {
            return t instanceof _e;
        }
    }

    class we extends oe {
        constructor(t, n) {
            super(t), this.ie = n;
        }
        te(t) {
            const n = de(this, t, 
            /*array=*/ !0), e = this.ie.map((t => Se(t, n))), s = new yn(e);
            return new An(t.path, s);
        }
        isEqual(t) {
            // TODO(mrschmidt): Implement isEquals
            return this === t;
        }
    }

    class me extends oe {
        constructor(t, n) {
            super(t), this.ie = n;
        }
        te(t) {
            const n = de(this, t, 
            /*array=*/ !0), e = this.ie.map((t => Se(t, n))), s = new En(e);
            return new An(t.path, s);
        }
        isEqual(t) {
            // TODO(mrschmidt): Implement isEquals
            return this === t;
        }
    }

    class pe extends oe {
        constructor(t, n) {
            super(t), this.oe = n;
        }
        te(t) {
            const n = new In(t.serializer, Ht(t.serializer, this.oe));
            return new An(t.path, n);
        }
        isEqual(t) {
            // TODO(mrschmidt): Implement isEquals
            return this === t;
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An immutable object representing a geographic location in Firestore. The
     * location is represented as latitude/longitude pair.
     *
     * Latitude values are in the range of [-90, 90].
     * Longitude values are in the range of [-180, 180].
     */ class ye {
        /**
         * Creates a new immutable `GeoPoint` object with the provided latitude and
         * longitude values.
         * @param latitude - The latitude as number between -90 and 90.
         * @param longitude - The longitude as number between -180 and 180.
         */
        constructor(t, n) {
            if (!isFinite(t) || t < -90 || t > 90) throw new R(h, "Latitude must be a number between -90 and 90, but was: " + t);
            if (!isFinite(n) || n < -180 || n > 180) throw new R(h, "Longitude must be a number between -180 and 180, but was: " + n);
            this.ue = t, this.ce = n;
        }
        /**
         * The latitude of this `GeoPoint` instance.
         */    get latitude() {
            return this.ue;
        }
        /**
         * The longitude of this `GeoPoint` instance.
         */    get longitude() {
            return this.ce;
        }
        /**
         * Returns true if this `GeoPoint` is equal to the provided one.
         *
         * @param other - The `GeoPoint` to compare against.
         * @returns true if this `GeoPoint` is equal to the provided one.
         */    isEqual(t) {
            return this.ue === t.ue && this.ce === t.ce;
        }
        toJSON() {
            return {
                latitude: this.ue,
                longitude: this.ce
            };
        }
        /**
         * Actually private to JS consumers of our API, so this function is prefixed
         * with an underscore.
         */    F(t) {
            return k(this.ue, t.ue) || k(this.ce, t.ce);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * An immutable object representing an array of bytes.
     */ class Ee {
        /** @hideconstructor */
        constructor(t) {
            this.ae = t;
        }
        /**
         * Creates a new `Bytes` object from the given Base64 string, converting it to
         * bytes.
         *
         * @param base64 - The Base64 string used to create the `Bytes` object.
         */    static fromBase64String(t) {
            try {
                return new Ee(tt.fromBase64String(t));
            } catch (t) {
                throw new R(h, "Failed to construct data from Base64 string: " + t);
            }
        }
        /**
         * Creates a new `Bytes` object from the given Uint8Array.
         *
         * @param array - The Uint8Array used to create the `Bytes` object.
         */    static fromUint8Array(t) {
            return new Ee(tt.fromUint8Array(t));
        }
        /**
         * Returns the underlying bytes as a Base64-encoded string.
         *
         * @returns The Base64-encoded string created from the `Bytes` object.
         */    toBase64() {
            return this.ae.toBase64();
        }
        /**
         * Returns the underlying bytes in a new `Uint8Array`.
         *
         * @returns The Uint8Array created from the `Bytes` object.
         */    toUint8Array() {
            return this.ae.toUint8Array();
        }
        /**
         * Returns a string representation of the `Bytes` object.
         *
         * @returns A string representation of the `Bytes` object.
         */    toString() {
            return "Bytes(base64: " + this.toBase64() + ")";
        }
        /**
         * Returns true if this `Bytes` object is equal to the provided one.
         *
         * @param other - The `Bytes` object to compare against.
         * @returns true if this `Bytes` object is equal to the provided one.
         */    isEqual(t) {
            return this.ae.isEqual(t.ae);
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A class implemented by all API types of the legacy Firestore API which
     * contains a reference to the API type in the firestore-exp API. All internal
     * code unwraps these references, which allows us to only use firestore-exp
     * types in the SDK.
     */ class Ie {
        constructor(t) {
            this.Wn = t;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A `FieldPath` refers to a field in a document. The path may consist of a
     * single field name (referring to a top-level field in the document), or a
     * list of field names (referring to a nested field in the document).
     *
     * Create a `FieldPath` by providing field names. If more than one field
     * name is provided, the path will point to a nested field in a document.
     */ class Te {
        /**
         * Creates a FieldPath from the provided field names. If more than one field
         * name is provided, the path will point to a nested field in a document.
         *
         * @param fieldNames - A list of field names.
         */
        constructor(...t) {
            for (let n = 0; n < t.length; ++n) if (0 === t[n].length) throw new R(h, "Invalid field name at argument $(i + 1). Field names must not be empty.");
            this.he = new K(t);
        }
        /**
         * Returns true if this `FieldPath` is equal to the provided one.
         *
         * @param other - The `FieldPath` to compare against.
         * @returns true if this `FieldPath` is equal to the provided one.
         */    isEqual(t) {
            return this.he.isEqual(t.he);
        }
    }

    /**
     * Returns a special sentinel `FieldPath` to refer to the ID of a document.
     * It can be used in queries to sort or filter by the document ID.
     */ function Ae() {
        return new Te("__name__");
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ const Pe = /^__.*__$/;

    /** The result of parsing document data (e.g. for a setData call). */ class Re {
        constructor(t, n, e) {
            this.data = t, this.Tt = n, this.fieldTransforms = e;
        }
        le(t, n) {
            const e = [];
            return null !== this.Tt ? e.push(new gn(t, this.data, this.Tt, n)) : e.push(new Vn(t, this.data, n)), 
            this.fieldTransforms.length > 0 && e.push(new vn(t, this.fieldTransforms)), e;
        }
    }

    /** The result of parsing "update" data (i.e. for an updateData call). */ class Ve {
        constructor(t, n, e) {
            this.data = t, this.Tt = n, this.fieldTransforms = e;
        }
        le(t, n) {
            const e = [ new gn(t, this.data, this.Tt, n) ];
            return this.fieldTransforms.length > 0 && e.push(new vn(t, this.fieldTransforms)), 
            e;
        }
    }

    function ge(t) {
        switch (t) {
          case 0 /* Set */ :
     // fall through
                  case 2 /* MergeSet */ :
     // fall through
                  case 1 /* Update */ :
            return !0;

          case 3 /* Argument */ :
          case 4 /* ArrayArgument */ :
            return !1;

          default:
            throw S();
        }
    }

    /** A "context" object passed around while parsing user data. */ class ve {
        /**
         * Initializes a ParseContext with the given source and path.
         *
         * @param settings - The settings for the parser.
         * @param databaseId - The database ID of the Firestore instance.
         * @param serializer - The serializer to use to generate the Value proto.
         * @param ignoreUndefinedProperties - Whether to ignore undefined properties
         * rather than throw.
         * @param fieldTransforms - A mutable list of field transforms encountered
         * while parsing the data.
         * @param fieldMask - A mutable list of field paths encountered while parsing
         * the data.
         *
         * TODO(b/34871131): We don't support array paths right now, so path can be
         * null to indicate the context represents any location within an array (in
         * which case certain features will not work and errors will be somewhat
         * compromised).
         */
        constructor(t, n, e, s, r, i) {
            this.settings = t, this.t = n, this.serializer = e, this.ignoreUndefinedProperties = s, 
            // Minor hack: If fieldTransforms is undefined, we assume this is an
            // external call and we need to validate the entire path.
            void 0 === r && this.fe(), this.fieldTransforms = r || [], this.Tt = i || [];
        }
        get path() {
            return this.settings.path;
        }
        get ne() {
            return this.settings.ne;
        }
        /** Returns a new context with the specified settings overwritten. */    de(t) {
            return new ve(Object.assign(Object.assign({}, this.settings), t), this.t, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.Tt);
        }
        _e(t) {
            var n;
            const e = null === (n = this.path) || void 0 === n ? void 0 : n.child(t), s = this.de({
                path: e,
                re: !1
            });
            return s.we(t), s;
        }
        me(t) {
            var n;
            const e = null === (n = this.path) || void 0 === n ? void 0 : n.child(t), s = this.de({
                path: e,
                re: !1
            });
            return s.fe(), s;
        }
        pe(t) {
            // TODO(b/34871131): We don't support array paths right now; so make path
            // undefined.
            return this.de({
                path: void 0,
                re: !0
            });
        }
        ee(t) {
            return Me(t, this.settings.methodName, this.settings.ye || !1, this.path, this.settings.se);
        }
        /** Returns 'true' if 'fieldPath' was traversed when creating this context. */    contains(t) {
            return void 0 !== this.Tt.find((n => t.G(n))) || void 0 !== this.fieldTransforms.find((n => t.G(n.field)));
        }
        fe() {
            // TODO(b/34871131): Remove null check once we have proper paths for fields
            // within arrays.
            if (this.path) for (let t = 0; t < this.path.length; t++) this.we(this.path.get(t));
        }
        we(t) {
            if (0 === t.length) throw this.ee("Document fields must not be empty");
            if (ge(this.ne) && Pe.test(t)) throw this.ee('Document fields cannot begin and end with "__"');
        }
    }

    /**
     * Helper for parsing raw user input (provided via the API) into internal model
     * classes.
     */ class be {
        constructor(t, n, e) {
            this.t = t, this.ignoreUndefinedProperties = n, this.serializer = e || zn(t);
        }
        /** Creates a new top-level parse context. */    Ee(t, n, e, s = !1) {
            return new ve({
                ne: t,
                methodName: n,
                se: e,
                path: K.Z(),
                re: !1,
                ye: s
            }, this.t, this.serializer, this.ignoreUndefinedProperties);
        }
    }

    /** Parse document data from a set() call. */ function Ne(t, n, e, s, r, i = {}) {
        const o = t.Ee(i.merge || i.mergeFields ? 2 /* MergeSet */ : 0 /* Set */ , n, e, r);
        Oe("Data must be an object, but it was:", o, s);
        const u = xe(s, o);
        let c, a;
        if (i.merge) c = new Tn(o.Tt), a = o.fieldTransforms; else if (i.mergeFields) {
            const t = [];
            for (const s of i.mergeFields) {
                const r = Ce(n, s, e);
                if (!o.contains(r)) throw new R(h, `Field '${r}' is specified in your field mask but missing from your input data.`);
                je(t, r) || t.push(r);
            }
            c = new Tn(t), a = o.fieldTransforms.filter((t => c.gt(t.field)));
        } else c = null, a = o.fieldTransforms;
        return new Re(new Dn(u), c, a);
    }

    /** Parse update data from an update() call. */ function De(t, n, e, s) {
        const r = t.Ee(1 /* Update */ , n, e);
        Oe("Data must be an object, but it was:", r, s);
        const i = [], o = new Fn;
        X(s, ((t, s) => {
            const u = Ue(n, t, e);
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    s instanceof Ie && (s = s.Wn);
            const c = r.me(u);
            if (s instanceof fe) 
            // Add it to the field mask, but don't add anything to updateData.
            i.push(u); else {
                const t = Se(s, c);
                null != t && (i.push(u), o.set(u, t));
            }
        }));
        const u = new Tn(i);
        return new Ve(o.Ft(), u, r.fieldTransforms);
    }

    /** Parse update data from a list of field/value arguments. */ function Fe(t, n, e, s, r, i) {
        const o = t.Ee(1 /* Update */ , n, e), u = [ Ce(n, s, e) ], c = [ r ];
        if (i.length % 2 != 0) throw new R(h, `Function ${n}() needs to be called with an even number of arguments that alternate between field names and values.`);
        for (let t = 0; t < i.length; t += 2) u.push(Ce(n, i[t])), c.push(i[t + 1]);
        const a = [], l = new Fn;
        // We iterate in reverse order to pick the last value for a field if the
        // user specified the field multiple times.
        for (let t = u.length - 1; t >= 0; --t) if (!je(a, u[t])) {
            const n = u[t];
            let e = c[t];
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    e instanceof Ie && (e = e.Wn);
            const s = o.me(n);
            if (e instanceof fe) 
            // Add it to the field mask, but don't add anything to updateData.
            a.push(n); else {
                const t = Se(e, s);
                null != t && (a.push(n), l.set(n, t));
            }
        }
        const f = new Tn(a);
        return new Ve(l.Ft(), f, o.fieldTransforms);
    }

    /**
     * Parse a "query value" (e.g. value in a where filter or a value in a cursor
     * bound).
     *
     * @param allowArrays - Whether the query value is an array that may directly
     * contain additional arrays (e.g. the operand of an `in` query).
     */ function $e(t, n, e, s = !1) {
        return Se(e, t.Ee(s ? 4 /* ArrayArgument */ : 3 /* Argument */ , n));
    }

    /**
     * Parses user data to Protobuf Values.
     *
     * @param input - Data to be parsed.
     * @param context - A context object representing the current path being parsed,
     * the source of the data being parsed, etc.
     * @returns The parsed value, or null if the value was a FieldValue sentinel
     * that should not be included in the resulting parsed data.
     */ function Se(t, n) {
        if (
        // Unwrap the API type from the Compat SDK. This will return the API type
        // from firestore-exp.
        t instanceof Ie && (t = t.Wn), qe(t)) return Oe("Unsupported field value:", n, t), 
        xe(t, n);
        if (t instanceof oe) 
        // FieldValues usually parse into transforms (except FieldValue.delete())
        // in which case we do not want to include this field in our parsed data
        // (as doing so will overwrite the field directly prior to the transform
        // trying to transform it). So we don't add this location to
        // context.fieldMask and we return null as our parsing result.
        /**
     * "Parses" the provided FieldValueImpl, adding any necessary transforms to
     * context.fieldTransforms.
     */
        return function(t, n) {
            // Sentinels are only supported with writes, and not within arrays.
            if (!ge(n.ne)) throw n.ee(t._methodName + "() can only be used with update() and set()");
            if (!n.path) throw n.ee(t._methodName + "() is not currently supported inside arrays");
            const e = t.te(n);
            e && n.fieldTransforms.push(e);
        }
        /**
     * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)
     *
     * @returns The parsed value
     */ (t, n), null;
        if (
        // If context.path is null we are inside an array and we don't support
        // field mask paths more granular than the top-level array.
        n.path && n.Tt.push(n.path), t instanceof Array) {
            // TODO(b/34871131): Include the path containing the array in the error
            // message.
            // In the case of IN queries, the parsed data is an array (representing
            // the set of values to be included for the IN query) that may directly
            // contain additional arrays (each representing an individual field
            // value), so we disable this validation.
            if (n.settings.re && 4 /* ArrayArgument */ !== n.ne) throw n.ee("Nested arrays are not supported");
            return function(t, n) {
                const e = [];
                let s = 0;
                for (const r of t) {
                    let t = Se(r, n.pe(s));
                    null == t && (
                    // Just include nulls in the array for fields being replaced with a
                    // sentinel.
                    t = {
                        nullValue: "NULL_VALUE"
                    }), e.push(t), s++;
                }
                return {
                    arrayValue: {
                        values: e
                    }
                };
            }(t, n);
        }
        return function(t, n) {
            t instanceof Ie && (t = t.Wn);
            if (null === t) return {
                nullValue: "NULL_VALUE"
            };
            if ("number" == typeof t) return Ht(n.serializer, t);
            if ("boolean" == typeof t) return {
                booleanValue: t
            };
            if ("string" == typeof t) return {
                stringValue: t
            };
            if (t instanceof Date) {
                const e = W.fromDate(t);
                return {
                    timestampValue: Kt(n.serializer, e)
                };
            }
            if (t instanceof W) {
                // Firestore backend truncates precision down to microseconds. To ensure
                // offline mode works the same with regards to truncation, perform the
                // truncation immediately without waiting for the backend to do that.
                const e = new W(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));
                return {
                    timestampValue: Kt(n.serializer, e)
                };
            }
            if (t instanceof ye) return {
                geoPointValue: {
                    latitude: t.latitude,
                    longitude: t.longitude
                }
            };
            if (t instanceof Ee) return {
                bytesValue: Jt(n.serializer, t.ae)
            };
            if (t instanceof ns) {
                const e = n.t, s = t.firestore.jn;
                if (!s.isEqual(e)) throw n.ee(`Document reference is for database ${s.projectId}/${s.database} but should be for database ${e.projectId}/${e.database}`);
                return {
                    referenceValue: tn(t.firestore.jn || n.t, t.Ie.path)
                };
            }
            if (void 0 === t && n.ignoreUndefinedProperties) return null;
            throw n.ee("Unsupported field value: " + Zn(t));
        }
        /**
     * Checks whether an object looks like a JSON object that should be converted
     * into a struct. Normal class/prototype instances are considered to look like
     * JSON objects since they should be converted to a struct value. Arrays, Dates,
     * GeoPoints, etc. are not considered to look like JSON objects since they map
     * to specific FieldValue types other than ObjectValue.
     */ (t, n);
    }

    function xe(t, n) {
        const e = {};
        return !function(t) {
            for (const n in t) if (Object.prototype.hasOwnProperty.call(t, n)) return !1;
            return !0;
        }
        /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
        /** Converts a Base64 encoded string to a binary string. */ (t) ? X(t, ((t, s) => {
            const r = Se(s, n._e(t));
            null != r && (e[t] = r);
        })) : 
        // If we encounter an empty object, we explicitly add it to the update
        // mask to ensure that the server creates a map entry.
        n.path && n.path.length > 0 && n.Tt.push(n.path), {
            mapValue: {
                fields: e
            }
        };
    }

    function qe(t) {
        return !("object" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof W || t instanceof ye || t instanceof Ee || t instanceof ns || t instanceof oe);
    }

    function Oe(t, n, e) {
        if (!qe(e) || !function(t) {
            return "object" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));
        }(e)) {
            const s = Zn(e);
            throw "an object" === s ? n.ee(t + " a custom object") : n.ee(t + " " + s);
        }
    }

    /**
     * Helper that calls fromDotSeparatedString() but wraps any error thrown.
     */ function Ce(t, n, e) {
        if (
        // If required, replace the FieldPath Compat class with with the firestore-exp
        // FieldPath.
        n instanceof Ie && (n = n.Wn), n instanceof Te) return n.he;
        if ("string" == typeof n) return Ue(t, n);
        throw Me("Field path arguments must be of type string or FieldPath.", t, 
        /* hasConverter= */ !1, 
        /* path= */ void 0, e);
    }

    /**
     * Matches any characters in a field path string that are reserved.
     */ const Le = new RegExp("[~\\*/\\[\\]]");

    /**
     * Wraps fromDotSeparatedString with an error message about the method that
     * was thrown.
     * @param methodName - The publicly visible method name
     * @param path - The dot-separated string form of a field path which will be
     * split on dots.
     * @param targetDoc - The document against which the field path will be
     * evaluated.
     */ function Ue(t, n, e) {
        if (n.search(Le) >= 0) throw Me(`Invalid field path (${n}). Paths must not contain '~', '*', '/', '[', or ']'`, t, 
        /* hasConverter= */ !1, 
        /* path= */ void 0, e);
        try {
            return new Te(...n.split(".")).he;
        } catch (s) {
            throw Me(`Invalid field path (${n}). Paths must not be empty, begin with '.', end with '.', or contain '..'`, t, 
            /* hasConverter= */ !1, 
            /* path= */ void 0, e);
        }
    }

    function Me(t, n, e, s, r) {
        const i = s && !s.W(), o = void 0 !== r;
        let u = `Function ${n}() called with invalid data`;
        e && (u += " (via `toFirestore()`)"), u += ". ";
        let c = "";
        return (i || o) && (c += " (found", i && (c += " in field " + s), o && (c += " in document " + r), 
        c += ")"), new R(h, u + t + c);
    }

    /** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */ function je(t, n) {
        return t.some((t => t.isEqual(n)));
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Internal transaction object responsible for accumulating the mutations to
     * perform and the base versions for any documents read.
     */ class Be {
        constructor(t) {
            this.Te = t, 
            // The version of each document that was read during this transaction.
            this.Ae = new Map, this.mutations = [], this.Pe = !1, 
            /**
             * A deferred usage error that occurred previously in this transaction that
             * will cause the transaction to fail once it actually commits.
             */
            this.Re = null, 
            /**
             * Set of documents that have been written in the transaction.
             *
             * When there's more than one write to the same key in a transaction, any
             * writes after the first are handled differently.
             */
            this.Ve = new Set;
        }
        async ge(t) {
            if (this.ve(), this.mutations.length > 0) throw new R(h, "Firestore transactions require all reads to be executed before all writes.");
            const n = await Bn(this.Te, t);
            return n.forEach((t => {
                t instanceof xn || t instanceof Sn ? this.be(t) : S();
            })), n;
        }
        set(t, n) {
            this.write(n.le(t, this.Rt(t))), this.Ve.add(t.toString());
        }
        update(t, n) {
            try {
                this.write(n.le(t, this.Ne(t)));
            } catch (t) {
                this.Re = t;
            }
            this.Ve.add(t.toString());
        }
        delete(t) {
            this.write([ new bn(t, this.Rt(t)) ]), this.Ve.add(t.toString());
        }
        async commit() {
            if (this.ve(), this.Re) throw this.Re;
            const t = this.Ae;
            // For each mutation, note that the doc was written.
                    this.mutations.forEach((n => {
                t.delete(n.key.toString());
            })), 
            // For each document that was read but not written to, we want to perform
            // a `verify` operation.
            t.forEach(((t, n) => {
                const e = J.st(n);
                this.mutations.push(new Nn(e, this.Rt(e)));
            })), await jn(this.Te, this.mutations), this.Pe = !0;
        }
        be(t) {
            let n;
            if (t instanceof Sn) n = t.version; else {
                if (!(t instanceof xn)) throw S();
                // For deleted docs, we must use baseVersion 0 when we overwrite them.
                n = z.min();
            }
            const e = this.Ae.get(t.key.toString());
            if (e) {
                if (!n.isEqual(e)) 
                // This transaction will fail no matter what.
                throw new R(y, "Document version changed between two reads.");
            } else this.Ae.set(t.key.toString(), n);
        }
        /**
         * Returns the version of this document when it was read in this transaction,
         * as a precondition, or no precondition if it was not read.
         */    Rt(t) {
            const n = this.Ae.get(t.toString());
            return !this.Ve.has(t.toString()) && n ? Pn.updateTime(n) : Pn.vt();
        }
        /**
         * Returns the precondition for a document if the operation is an update.
         */    Ne(t) {
            const n = this.Ae.get(t.toString());
            // The first time a document is written, we want to take into account the
            // read time and existence
                    if (!this.Ve.has(t.toString()) && n) {
                if (n.isEqual(z.min())) 
                // The document doesn't exist, so fail the transaction.
                // This has to be validated locally because you can't send a
                // precondition that a document does not exist without changing the
                // semantics of the backend write to be an insert. This is the reverse
                // of what we want, since we want to assert that the document doesn't
                // exist but then send the update and have it fail. Since we can't
                // express that to the backend, we have to validate locally.
                // Note: this can change once we can send separate verify writes in the
                // transaction.
                throw new R(h, "Can't update a document that doesn't exist.");
                // Document exists, base precondition on document update time.
                            return Pn.updateTime(n);
            }
            // Document was not read, so we just use the preconditions for a blind
            // update.
            return Pn.exists(!0);
        }
        write(t) {
            this.ve(), this.mutations = this.mutations.concat(t);
        }
        ve() {}
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * TransactionRunner encapsulates the logic needed to run and retry transactions
     * with backoff.
     */
    class ke {
        constructor(t, n, e, s) {
            this.Kt = t, this.Te = n, this.updateFunction = e, this.Xt = s, this.De = 5, this.fn = new On(this.Kt, "transaction_retry" /* TransactionRetry */);
        }
        /** Runs the transaction and sets the result on deferred. */    run() {
            this.Fe();
        }
        Fe() {
            this.fn.Wt((async () => {
                const t = new Be(this.Te), n = this.$e(t);
                n && n.then((n => {
                    this.Kt.sn((() => t.commit().then((() => {
                        this.Xt.resolve(n);
                    })).catch((t => {
                        this.Se(t);
                    }))));
                })).catch((t => {
                    this.Se(t);
                }));
            }));
        }
        $e(t) {
            try {
                const n = this.updateFunction(t);
                return !nt(n) && n.catch && n.then ? n : (this.Xt.reject(Error("Transaction callback must return a Promise")), 
                null);
            } catch (t) {
                // Do not retry errors thrown by user provided updateFunction.
                return this.Xt.reject(t), null;
            }
        }
        Se(t) {
            this.De > 0 && this.xe(t) ? (this.De -= 1, this.Kt.sn((() => (this.Fe(), Promise.resolve())))) : this.Xt.reject(t);
        }
        xe(t) {
            if ("FirebaseError" === t.name) {
                // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and
                // non-matching document versions with ABORTED. These errors should be retried.
                const n = t.code;
                return "aborted" === n || "failed-precondition" === n || !
                /**
     * Determines whether an error code represents a permanent error when received
     * in response to a non-write operation.
     *
     * See isPermanentWriteError for classifying write errors.
     */
                function(t) {
                    switch (t) {
                      case u:
                        return S();

                      case c:
                      case a:
                      case l:
                      case m:
                      case T:
                      case A:
     // Unauthenticated means something went wrong with our token and we need
                        // to retry with new credentials which will happen automatically.
                                          case w:
                        return !1;

                      case h:
                      case f:
                      case d:
                      case _:
                      case p:
     // Aborted might be retried in some scenarios, but that is dependant on
                        // the context and should handled individually by the calling code.
                        // See https://cloud.google.com/apis/design/errors.
                                          case y:
                      case E:
                      case I:
                      case P:
                        return !0;

                      default:
                        return S();
                    }
                }(n);
            }
            return !1;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A write batch, used to perform multiple writes as a single atomic unit.
     *
     * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It
     * provides methods for adding writes to the write batch. None of the writes
     * will be committed (or visible locally) until {@link WriteBatch#commit} is
     * called.
     */ class Qe {
        /** @hideconstructor */
        constructor(t, n) {
            this.qe = t, this.Oe = n, this.Ce = [], this.Le = !1, this.Ue = qs(t);
        }
        set(t, n, e) {
            this.Me();
            const s = We(t, this.qe), r = He(s.je, n, e), i = Ne(this.Ue, "WriteBatch.set", s.Ie, r, null !== s.je, e);
            return this.Ce = this.Ce.concat(i.le(s.Ie, Pn.vt())), this;
        }
        update(t, n, e, ...s) {
            this.Me();
            const r = We(t, this.qe);
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    let i;
            return n instanceof Ie && (n = n.Wn), i = "string" == typeof n || n instanceof Te ? Fe(this.Ue, "WriteBatch.update", r.Ie, n, e, s) : De(this.Ue, "WriteBatch.update", r.Ie, n), 
            this.Ce = this.Ce.concat(i.le(r.Ie, Pn.exists(!0))), this;
        }
        /**
         * Deletes the document referred to by the provided {@link DocumentReference}.
         *
         * @param documentRef - A reference to the document to be deleted.
         * @returns This `WriteBatch` instance. Used for chaining method calls.
         */    delete(t) {
            this.Me();
            const n = We(t, this.qe);
            return this.Ce = this.Ce.concat(new bn(n.Ie, Pn.vt())), this;
        }
        /**
         * Commits all of the writes in this write batch as a single atomic unit.
         *
         * The result of these writes will only be reflected in document reads that
         * occur after the returned Promise resolves. If the client is offline, the
         * write fails. If you would like to see local modifications or buffer writes
         * until the client is online, use the full Firestore SDK.
         *
         * @returns A Promise resolved once all of the writes in the batch have been
         * successfully written to the backend as an atomic unit (note that it won't
         * resolve while you're offline).
         */    commit() {
            return this.Me(), this.Le = !0, this.Ce.length > 0 ? this.Oe(this.Ce) : Promise.resolve();
        }
        Me() {
            if (this.Le) throw new R(p, "A write batch can no longer be used after commit() has been called.");
        }
    }

    function We(t, n) {
        if (t instanceof Ie && (t = t.Wn), t.firestore !== n) throw new R(h, "Provided document reference is from a different Firestore instance.");
        return t;
    }

    /**
     * Creates a write batch, used for performing multiple writes as a single
     * atomic operation. The maximum number of writes allowed in a single WriteBatch
     * is 500.
     *
     * The result of these writes will only be reflected in document reads that
     * occur after the returned Promise resolves. If the client is offline, the
     * write fails. If you would like to see local modifications or buffer writes
     * until the client is online, use the full Firestore SDK.
     *
     * @returns A `WriteBatch` that can be used to atomically execute multiple
     * writes.
     */ function ze(t) {
        const n = Yn(t = Xn(t, ee));
        return new Qe(t, (t => jn(n, t)));
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the
    // legacy SDK.
    /**
     * A reference to a transaction.
     *
     * The `Transaction` object passed to a transaction's `updateFunction` provides
     * the methods to read and write data within the transaction context. See
     * {@link runTransaction}.
     */ class Ge {
        /** @hideconstructor */
        constructor(t, n) {
            this.qe = t, this.Be = n, this.Ue = qs(t);
        }
        /**
         * Reads the document referenced by the provided {@link DocumentReference}.
         *
         * @param documentRef - A reference to the document to be read.
         * @returns A `DocumentSnapshot` with the read data.
         */    get(t) {
            const n = We(t, this.qe), e = new gs(this.qe);
            return this.Be.ge([ n.Ie ]).then((t => {
                if (!t || 1 !== t.length) return S();
                const s = t[0];
                if (s instanceof xn) return new Ke(this.qe, e, n.Ie, null, n.je);
                if (s instanceof Sn) return new Ke(this.qe, e, s.key, s, n.je);
                throw S();
            }));
        }
        set(t, n, e) {
            const s = We(t, this.qe), r = He(s.je, n, e), i = Ne(this.Ue, "Transaction.set", s.Ie, r, null !== s.je, e);
            return this.Be.set(s.Ie, i), this;
        }
        update(t, n, e, ...s) {
            const r = We(t, this.qe);
            // For Compat types, we have to "extract" the underlying types before
            // performing validation.
                    let i;
            return n instanceof Ie && (n = n.Wn), i = "string" == typeof n || n instanceof Te ? Fe(this.Ue, "Transaction.update", r.Ie, n, e, s) : De(this.Ue, "Transaction.update", r.Ie, n), 
            this.Be.update(r.Ie, i), this;
        }
        /**
         * Deletes the document referred to by the provided {@link DocumentReference}.
         *
         * @param documentRef - A reference to the document to be deleted.
         * @returns This `Transaction` instance. Used for chaining method calls.
         */    delete(t) {
            const n = We(t, this.qe);
            return this.Be.delete(n.Ie), this;
        }
    }

    /**
     * Executes the given `updateFunction` and then attempts to commit the changes
     * applied within the transaction. If any document read within the transaction
     * has changed, Cloud Firestore retries the `updateFunction`. If it fails to
     * commit after 5 attempts, the transaction fails.
     *
     * The maximum number of writes allowed in a single transaction is 500.
     *
     * @param firestore - A reference to the Firestore database to run this
     * transaction against.
     * @param updateFunction - The function to execute within the transaction
     * context.
     * @returns If the transaction completed successfully or was explicitly aborted
     * (the `updateFunction` returned a failed promise), the promise returned by the
     * `updateFunction `is returned here. Otherwise, if the transaction failed, a
     * rejected promise with the corresponding failure error is returned.
     */ function Ye(t, n) {
        const e = Yn(t = Xn(t, ee)), s = new qn;
        return new ke(new Un, e, (e => n(new Ge(t, e))), s).run(), s.promise;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Converts custom model object of type T into DocumentData by applying the
     * converter if it exists.
     *
     * This function is used when converting user objects to DocumentData
     * because we want to provide the user with a more specific error message if
     * their set() or fails due to invalid data originating from a toFirestore()
     * call.
     */ function He(t, n, e) {
        let s;
        // Cast to `any` in order to satisfy the union type constraint on
        // toFirestore().
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return s = t ? e && (e.merge || e.mergeFields) ? t.toFirestore(n, e) : t.toFirestore(n) : n, 
        s;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Converts Firestore's internal types to the JavaScript types that we expose
     * to the user.
     */
    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A `DocumentSnapshot` contains data read from a document in your Firestore
     * database. The data can be extracted with `.data()` or `.get(<field>)` to
     * get a specific field.
     *
     * For a `DocumentSnapshot` that points to a non-existing document, any data
     * access will return 'undefined'. You can use the `exists()` method to
     * explicitly verify a document's existence.
     */
    class Ke {
        // Note: This class is stripped down version of the DocumentSnapshot in
        // the legacy SDK. The changes are:
        // - No support for SnapshotMetadata.
        // - No support for SnapshotOptions.
        /** @hideconstructor protected */
        constructor(t, n, e, s, r) {
            this.qe = t, this.ke = n, this.Ie = e, this.Qe = s, this.je = r;
        }
        /** Property of the `DocumentSnapshot` that provides the document's ID. */    get id() {
            return this.Ie.path.k();
        }
        /**
         * The `DocumentReference` for the document included in the `DocumentSnapshot`.
         */    get ref() {
            return new ns(this.qe, this.je, this.Ie);
        }
        /**
         * Signals whether or not the document at the snapshot's location exists.
         *
         * @returns true if the document exists.
         */    exists() {
            return null !== this.Qe;
        }
        /**
         * Retrieves all fields in the document as an `Object`. Returns `undefined` if
         * the document doesn't exist.
         *
         * @returns An `Object` containing all fields in the document or `undefined`
         * if the document doesn't exist.
         */    data() {
            if (this.Qe) {
                if (this.je) {
                    // We only want to use the converter and create a new DocumentSnapshot
                    // if a converter has been provided.
                    const t = new Je(this.qe, this.ke, this.Ie, this.Qe, 
                    /* converter= */ null);
                    return this.je.fromFirestore(t);
                }
                return this.ke.We(this.Qe.qt());
            }
        }
        /**
         * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
         * document or field doesn't exist.
         *
         * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
         * field.
         * @returns The data at the specified field location or undefined if no such
         * field exists in the document.
         */
        // We are using `any` here to avoid an explicit cast by our users.
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        get(t) {
            if (this.Qe) {
                const n = this.Qe.data().field(ts("DocumentSnapshot.get", t));
                if (null !== n) return this.ke.We(n);
            }
        }
    }

    /**
     * A `QueryDocumentSnapshot` contains data read from a document in your
     * Firestore database as part of a query. The document is guaranteed to exist
     * and its data can be extracted with `.data()` or `.get(<field>)` to get a
     * specific field.
     *
     * A `QueryDocumentSnapshot` offers the same API surface as a
     * `DocumentSnapshot`. Since query results contain only existing documents, the
     * `exists` property will always be true and `data()` will never return
     * 'undefined'.
     */ class Je extends Ke {
        /**
         * Retrieves all fields in the document as an `Object`.
         *
         * @override
         * @returns An `Object` containing all fields in the document.
         */
        data() {
            return super.data();
        }
    }

    /**
     * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects
     * representing the results of a query. The documents can be accessed as an
     * array via the `docs` property or enumerated using the `forEach` method. The
     * number of documents can be determined via the `empty` and `size`
     * properties.
     */ class Ze {
        /** @hideconstructor */
        constructor(t, n) {
            this.ze = n, this.query = t;
        }
        /** An array of all the documents in the `QuerySnapshot`. */    get docs() {
            return [ ...this.ze ];
        }
        /** The number of documents in the `QuerySnapshot`. */    get size() {
            return this.docs.length;
        }
        /** True if there are no documents in the `QuerySnapshot`. */    get empty() {
            return 0 === this.docs.length;
        }
        /**
         * Enumerates all of the documents in the `QuerySnapshot`.
         *
         * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
         * each document in the snapshot.
         * @param thisArg - The `this` binding for the callback.
         */    forEach(t, n) {
            this.ze.forEach(t, n);
        }
    }

    /**
     * Returns true if the provided snapshots are equal.
     *
     * @param left - A snapshot to compare.
     * @param right - A snapshot to compare.
     * @returns true if the snapshots are equal.
     */ function Xe(t, n) {
        return t instanceof Ie && (t = t.Wn), n instanceof Ie && (n = n.Wn), t instanceof Ke && n instanceof Ke ? t.qe === n.qe && t.Ie.isEqual(n.Ie) && (null === t.Qe ? null === n.Qe : t.Qe.isEqual(n.Qe)) && t.je === n.je : t instanceof Ze && n instanceof Ze && (xs(t.query, n.query) && Q(t.docs, n.docs, Xe));
    }

    /**
     * Helper that calls fromDotSeparatedString() but wraps any error thrown.
     */ function ts(t, n) {
        return "string" == typeof n ? Ue(t, n) : n instanceof Ie ? n.Wn.he : n.he;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A `DocumentReference` refers to a document location in a Firestore database
     * and can be used to write, read, or listen to the location. The document at
     * the referenced location may or may not exist.
     */ class ns {
        /** @hideconstructor */
        constructor(t, n, e) {
            this.je = n, this.Ie = e, 
            /** The type of this Firestore reference. */
            this.type = "document", this.firestore = t;
        }
        get Ge() {
            return this.Ie.path;
        }
        /**
         * The document's identifier within its collection.
         */    get id() {
            return this.Ie.path.k();
        }
        /**
         * A string representing the path of the referenced document (relative
         * to the root of the database).
         */    get path() {
            return this.Ie.path.K();
        }
        /**
         * The collection this `DocumentReference` belongs to.
         */    get parent() {
            return new As(this.firestore, this.je, this.Ie.path.j());
        }
        /**
         * Applies a custom data converter to this `DocumentReference`, allowing you
         * to use your own custom model objects with Firestore. When you call {@link
         * setDoc}, {@link getDoc}, etc. with the returned `DocumentReference`
         * instance, the provided converter will convert between Firestore data and
         * your custom type `U`.
         *
         * @param converter - Converts objects to and from Firestore.
         * @returns A `DocumentReference<U>` that uses the provided converter.
         */    withConverter(t) {
            return new ns(this.firestore, t, this.Ie);
        }
    }

    /**
     * A `Query` refers to a Query which you can read or listen to. You can also
     * construct refined `Query` objects by adding filters and ordering.
     */ class es {
        // This is the lite version of the Query class in the main SDK.
        /** @hideconstructor protected */
        constructor(t, n, e) {
            this.je = n, this.Ye = e, 
            /** The type of this Firestore reference. */
            this.type = "query", this.firestore = t;
        }
        /**
         * Applies a custom data converter to this query, allowing you to use your own
         * custom model objects with Firestore. When you call {@link getDocs} with
         * the returned query, the provided converter will convert between Firestore
         * data and your custom type `U`.
         *
         * @param converter - Converts objects to and from Firestore.
         * @returns A `Query<U>` that uses the provided converter.
         */    withConverter(t) {
            return new es(this.firestore, t, this.Ye);
        }
    }

    /**
     * A `QueryConstraint` is used to narrow the set of documents returned by a
     * Firestore query. `QueryConstraint`s are created by invoking {@link where},
     * {@link orderBy}, {@link startAt}, {@link startAfter}, {@link
     * endBefore}, {@link endAt}, {@link limit} or {@link limitToLast} and
     * can then be passed to {@link query} to create a new query instance that
     * also contains this `QueryConstraint`.
     */ class ss {}

    /**
     * Creates a new immutable instance of `query` that is extended to also include
     * additional query constraints.
     *
     * @param query - The query instance to use as a base for the new constraints.
     * @param queryConstraints - The list of `QueryConstraint`s to apply.
     * @throws if any of the provided query constraints cannot be combined with the
     * existing or new constraints.
     */ function rs(t, ...n) {
        for (const e of n) t = e.He(t);
        return t;
    }

    class is extends ss {
        constructor(t, n, e) {
            super(), this.Ke = t, this.Je = n, this.Ze = e, this.type = "where";
        }
        He(t) {
            const n = qs(t.firestore), e = function(t, n, e, s, r, i, o) {
                let u;
                if (r.tt()) {
                    if ("array-contains" /* ARRAY_CONTAINS */ === i || "array-contains-any" /* ARRAY_CONTAINS_ANY */ === i) throw new R(h, `Invalid Query. You can't perform '${i}' queries on FieldPath.documentId().`);
                    if ("in" /* IN */ === i || "not-in" /* NOT_IN */ === i) {
                        Is(o, i);
                        const n = [];
                        for (const e of o) n.push(Es(s, t, e));
                        u = {
                            arrayValue: {
                                values: n
                            }
                        };
                    } else u = Es(s, t, o);
                } else "in" /* IN */ !== i && "not-in" /* NOT_IN */ !== i && "array-contains-any" /* ARRAY_CONTAINS_ANY */ !== i || Is(o, i), 
                u = $e(e, n, o, 
                /* allowArrays= */ "in" /* IN */ === i || "not-in" /* NOT_IN */ === i);
                const c = Dt.create(r, i, u);
                return function(t, n) {
                    if (n.wt()) {
                        const e = Vt(t);
                        if (null !== e && !e.isEqual(n.field)) throw new R(h, `Invalid query. All where filters with an inequality (<, <=, >, or >=) must be on the same field. But you have inequality filters on '${e.toString()}' and '${n.field.toString()}'`);
                        const s = Rt(t);
                        null !== s && Ts(t, n.field, s);
                    }
                    const e = function(t, n) {
                        for (const e of t.filters) if (n.indexOf(e.op) >= 0) return e.op;
                        return null;
                    }
                    /**
     * Creates a new Query for a collection group query that matches all documents
     * within the provided collection group.
     */ (t, 
                    /**
     * Given an operator, returns the set of operators that cannot be used with it.
     *
     * Operators in a query must adhere to the following set of rules:
     * 1. Only one array operator is allowed.
     * 2. Only one disjunctive operator is allowed.
     * 3. NOT_EQUAL cannot be used with another NOT_EQUAL operator.
     * 4. NOT_IN cannot be used with array, disjunctive, or NOT_EQUAL operators.
     *
     * Array operators: ARRAY_CONTAINS, ARRAY_CONTAINS_ANY
     * Disjunctive operators: IN, ARRAY_CONTAINS_ANY, NOT_IN
     */
                    function(t) {
                        switch (t) {
                          case "!=" /* NOT_EQUAL */ :
                            return [ "!=" /* NOT_EQUAL */ , "not-in" /* NOT_IN */ ];

                          case "array-contains" /* ARRAY_CONTAINS */ :
                            return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "not-in" /* NOT_IN */ ];

                          case "in" /* IN */ :
                            return [ "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ ];

                          case "array-contains-any" /* ARRAY_CONTAINS_ANY */ :
                            return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ ];

                          case "not-in" /* NOT_IN */ :
                            return [ "array-contains" /* ARRAY_CONTAINS */ , "array-contains-any" /* ARRAY_CONTAINS_ANY */ , "in" /* IN */ , "not-in" /* NOT_IN */ , "!=" /* NOT_EQUAL */ ];

                          default:
                            return [];
                        }
                    }(n.op));
                    if (null !== e) 
                    // Special case when it's a duplicate op to give a slightly clearer error message.
                    throw e === n.op ? new R(h, `Invalid query. You cannot use more than one '${n.op.toString()}' filter.`) : new R(h, `Invalid query. You cannot use '${n.op.toString()}' filters with '${e.toString()}' filters.`);
                }(t, c), c;
            }(t.Ye, "where", n, t.firestore.jn, this.Ke, this.Je, this.Ze);
            return new es(t.firestore, t.je, function(t, n) {
                const e = t.filters.concat([ n ]);
                return new At(t.path, t.collectionGroup, t.ft.slice(), e, t.limit, t.limitType, t.startAt, t.endAt);
            }(t.Ye, e));
        }
    }

    /**
     * Creates a `QueryConstraint` that enforces that documents must contain the
     * specified field and that the value should satisfy the relation constraint
     * provided.
     *
     * @param fieldPath - The path to compare
     * @param opStr - The operation string (e.g "&lt;", "&lt;=", "==", "&lt;",
     *   "&lt;=", "!=").
     * @param value - The value for comparison
     * @returns The created `Query`.
     */ function os(t, n, e) {
        const s = n, r = ts("where", t);
        return new is(r, s, e);
    }

    class us extends ss {
        constructor(t, n) {
            super(), this.Ke = t, this.Xe = n, this.type = "orderBy";
        }
        He(t) {
            const n = function(t, n, e) {
                if (null !== t.startAt) throw new R(h, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
                if (null !== t.endAt) throw new R(h, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
                const s = new jt(n, e);
                return function(t, n) {
                    if (null === Rt(t)) {
                        // This is the first order by. It must match any inequality.
                        const e = Vt(t);
                        null !== e && Ts(t, e, n.field);
                    }
                }(t, s), s;
            }
            /**
     * Create a Bound from a query and a document.
     *
     * Note that the Bound will always include the key of the document
     * and so only the provided document will compare equal to the returned
     * position.
     *
     * Will throw if the document does not contain all fields of the order by
     * of the query or if any of the fields in the order by are an uncommitted
     * server timestamp.
     */ (t.Ye, this.Ke, this.Xe);
            return new es(t.firestore, t.je, function(t, n) {
                // TODO(dimond): validate that orderBy does not list the same key twice.
                const e = t.ft.concat([ n ]);
                return new At(t.path, t.collectionGroup, e, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);
            }(t.Ye, n));
        }
    }

    /**
     * Creates a `QueryConstraint` that sorts the query result by the
     * specified field, optionally in descending order instead of ascending.
     *
     * @param fieldPath - The field to sort by.
     * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If
     * not specified, order will be ascending.
     * @returns The created `Query`.
     */ function cs(t, n = "asc") {
        const e = n, s = ts("orderBy", t);
        return new us(s, e);
    }

    class as extends ss {
        constructor(t, n, e) {
            super(), this.type = t, this.ts = n, this.ns = e;
        }
        He(t) {
            return new es(t.firestore, t.je, function(t, n, e) {
                return new At(t.path, t.collectionGroup, t.ft.slice(), t.filters.slice(), n, e, t.startAt, t.endAt);
            }(t.Ye, this.ts, this.ns));
        }
    }

    /**
     * Creates a `QueryConstraint` that only returns the first matching documents.
     *
     * @param limit - The maximum number of items to return.
     * @returns The created `Query`.
     */ function hs(t) {
        return te("limit", t), new as("limit", t, "F" /* First */);
    }

    /**
     * Creates a `QueryConstraint` that only returns the last matching documents.
     *
     * You must specify at least one `orderBy` clause for `limitToLast` queries,
     * otherwise an exception will be thrown during execution.
     *
     * @param limit - The maximum number of items to return.
     * @returns The created `Query`.
     */ function ls(t) {
        return te("limitToLast", t), new as("limitToLast", t, "L" /* Last */);
    }

    class fs extends ss {
        constructor(t, n, e) {
            super(), this.type = t, this.es = n, this.ss = e;
        }
        He(t) {
            const n = ys(t, this.type, this.es, this.ss);
            return new es(t.firestore, t.je, function(t, n) {
                return new At(t.path, t.collectionGroup, t.ft.slice(), t.filters.slice(), t.limit, t.limitType, n, t.endAt);
            }(t.Ye, n));
        }
    }

    function ds(...t) {
        return new fs("startAt", t, /*before=*/ !0);
    }

    function _s(...t) {
        return new fs("startAfter", t, 
        /*before=*/ !1);
    }

    class ws extends ss {
        constructor(t, n, e) {
            super(), this.type = t, this.es = n, this.ss = e;
        }
        He(t) {
            const n = ys(t, this.type, this.es, this.ss);
            return new es(t.firestore, t.je, function(t, n) {
                return new At(t.path, t.collectionGroup, t.ft.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, n);
            }(t.Ye, n));
        }
    }

    function ms(...t) {
        return new ws("endBefore", t, /*before=*/ !0);
    }

    function ps(...t) {
        return new ws("endAt", t, /*before=*/ !1);
    }

    /** Helper function to create a bound from a document or fields */ function ys(t, n, e, s) {
        if (e[0] instanceof Ie && (e[0] = e[0].Wn), e[0] instanceof Ke) return function(t, n, e, s, r) {
            if (!s) throw new R(f, "Can't use a DocumentSnapshot that doesn't exist for " + e + "().");
            const i = [];
            // Because people expect to continue/end a query at the exact document
            // provided, we need to use the implicit sort order rather than the explicit
            // sort order, because it's guaranteed to contain the document key. That way
            // the position becomes unambiguous and the query continues/ends exactly at
            // the provided document. Without the key (by using the explicit sort
            // orders), multiple documents could match the position, yielding duplicate
            // results.
                    for (const e of vt(t)) if (e.field.tt()) i.push(wt(n, s.key)); else {
                const t = s.field(e.field);
                if (st(t)) throw new R(h, 'Invalid query. You are trying to start or end a query using a document for which the field "' + e.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
                if (null === t) {
                    const t = e.field.K();
                    throw new R(h, `Invalid query. You are trying to start or end a query using a document for which the field '${t}' (used as the orderBy) does not exist.`);
                }
                i.push(t);
            }
            return new Ut(i, r);
        }
        /**
     * Converts a list of field values to a Bound for the given query.
     */ (t.Ye, t.firestore.jn, n, e[0].Qe, s);
        {
            const r = qs(t.firestore);
            return function(t, n, e, s, r, i) {
                // Use explicit order by's because it has to match the query the user made
                const o = t.ft;
                if (r.length > o.length) throw new R(h, `Too many arguments provided to ${s}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);
                const u = [];
                for (let i = 0; i < r.length; i++) {
                    const c = r[i];
                    if (o[i].field.tt()) {
                        if ("string" != typeof c) throw new R(h, `Invalid query. Expected a string for document ID in ${s}(), but got a ${typeof c}`);
                        if (!gt(t) && -1 !== c.indexOf("/")) throw new R(h, `Invalid query. When querying a collection and ordering by FieldPath.documentId(), the value passed to ${s}() must be a plain document ID, but '${c}' contains a slash.`);
                        const e = t.path.child(Y.J(c));
                        if (!J.ot(e)) throw new R(h, `Invalid query. When querying a collection group and ordering by FieldPath.documentId(), the value passed to ${s}() must result in a valid document path, but '${e}' is not because it contains an odd number of segments.`);
                        const r = new J(e);
                        u.push(wt(n, r));
                    } else {
                        const t = $e(e, s, c);
                        u.push(t);
                    }
                }
                return new Ut(u, i);
            }
            /**
     * Parses the given documentIdValue into a ReferenceValue, throwing
     * appropriate errors if the value is anything other than a DocumentReference
     * or String, or if the string is malformed.
     */ (t.Ye, t.firestore.jn, r, n, e, s);
        }
    }

    function Es(t, n, e) {
        if (e instanceof Ie && (e = e.Wn), "string" == typeof e) {
            if ("" === e) throw new R(h, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");
            if (!gt(n) && -1 !== e.indexOf("/")) throw new R(h, `Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but '${e}' contains a '/' character.`);
            const s = n.path.child(Y.J(e));
            if (!J.ot(s)) throw new R(h, `Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, but '${s}' is not because it has an odd number of segments (${s.length}).`);
            return wt(t, new J(s));
        }
        if (e instanceof ns) return wt(t, e.Ie);
        throw new R(h, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: " + Zn(e) + ".");
    }

    /**
     * Validates that the value passed into a disjunctive filter satisfies all
     * array requirements.
     */ function Is(t, n) {
        if (!Array.isArray(t) || 0 === t.length) throw new R(h, `Invalid Query. A non-empty array is required for '${n.toString()}' filters.`);
        if (t.length > 10) throw new R(h, `Invalid Query. '${n.toString()}' filters support a maximum of 10 elements in the value array.`);
    }

    function Ts(t, n, e) {
        if (!e.isEqual(n)) throw new R(h, `Invalid query. You have a where filter with an inequality (<, <=, >, or >=) on field '${n.toString()}' and so you must also use '${n.toString()}' as your first argument to orderBy(), but your first orderBy() is on field '${e.toString()}' instead.`);
    }

    /**
     * A `CollectionReference` object can be used for adding documents, getting
     * document references, and querying for documents (using {@link query}).
     */
    class As extends es {
        /** @hideconstructor */
        constructor(t, n, e) {
            super(t, n, new At(e)), this.firestore = t, this.Ge = e, this.type = "collection";
        }
        /** The collection's identifier. */    get id() {
            return this.Ye.path.k();
        }
        /**
         * A string representing the path of the referenced collection (relative
         * to the root of the database).
         */    get path() {
            return this.Ye.path.K();
        }
        /**
         * A reference to the containing `DocumentReference` if this is a
         * subcollection. If this isn't a subcollection, the reference is null.
         */    get parent() {
            const t = this.Ge.j();
            return t.W() ? null : new ns(this.firestore, 
            /* converter= */ null, new J(t));
        }
        /**
         * Applies a custom data converter to this CollectionReference, allowing you
         * to use your own custom model objects with Firestore. When you call {@link
         * addDoc} with the returned `CollectionReference` instance, the provided
         * converter will convert between Firestore data and your custom type `U`.
         *
         * @param converter - Converts objects to and from Firestore.
         * @returns A `CollectionReference<U>` that uses the provided converter.
         */    withConverter(t) {
            return new As(this.firestore, t, this.Ge);
        }
    }

    function Ps(t, n, ...e) {
        if (t instanceof Ie && (t = t.Wn), Hn("collection", "path", n), t instanceof ee) {
            const s = Y.J(n, ...e);
            return Jn(s), new As(t, /* converter= */ null, s);
        }
        {
            if (!(t instanceof ns || t instanceof As)) throw new R(h, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
            const s = Y.J(t.path, ...e).child(Y.J(n));
            return Jn(s), new As(t.firestore, 
            /* converter= */ null, s);
        }
    }

    // TODO(firestorelite): Consider using ErrorFactory -
    // https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106
    /**
     * Creates and returns a new `Query` instance that includes all documents in the
     * database that are contained in a collection or subcollection with the
     * given `collectionId`.
     *
     * @param firestore - A reference to the root Firestore instance.
     * @param collectionId - Identifies the collections to query over. Every
     * collection or subcollection with this ID as the last segment of its path
     * will be included. Cannot contain a slash.
     * @returns The created `Query`.
     */ function Rs(t, n) {
        if (t = Xn(t, ee), Hn("collectionGroup", "collection id", n), n.indexOf("/") >= 0) throw new R(h, `Invalid collection ID '${n}' passed to function collectionGroup(). Collection IDs must not contain '/'.`);
        return new es(t, 
        /* converter= */ null, function(t) {
            return new At(Y.Z(), t);
        }(n));
    }

    function Vs(t, n, ...e) {
        if (t instanceof Ie && (t = t.Wn), 
        // We allow omission of 'pathString' but explicitly prohibit passing in both
        // 'undefined' and 'null'.
        1 === arguments.length && (n = B.D()), Hn("doc", "path", n), t instanceof ee) {
            const s = Y.J(n, ...e);
            return Kn(s), new ns(t, 
            /* converter= */ null, new J(s));
        }
        {
            if (!(t instanceof ns || t instanceof As)) throw new R(h, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
            const s = t.Ge.child(Y.J(n, ...e));
            return Kn(s), new ns(t.firestore, t instanceof As ? t.je : null, new J(s));
        }
    }

    class gs extends class {
        We(t, n = "none") {
            switch (ut(t)) {
              case 0 /* NullValue */ :
                return null;

              case 1 /* BooleanValue */ :
                return t.booleanValue;

              case 2 /* NumberValue */ :
                return dt(t.integerValue || t.doubleValue);

              case 3 /* TimestampValue */ :
                return this.rs(t.timestampValue);

              case 4 /* ServerTimestampValue */ :
                return this.os(t, n);

              case 5 /* StringValue */ :
                return t.stringValue;

              case 6 /* BlobValue */ :
                return this.us(_t(t.bytesValue));

              case 7 /* RefValue */ :
                return this.cs(t.referenceValue);

              case 8 /* GeoPointValue */ :
                return this.hs(t.geoPointValue);

              case 9 /* ArrayValue */ :
                return this.ls(t.arrayValue, n);

              case 10 /* ObjectValue */ :
                return this.fs(t.mapValue, n);

              default:
                throw S();
            }
        }
        fs(t, n) {
            const e = {};
            return X(t.fields || {}, ((t, s) => {
                e[t] = this.We(s, n);
            })), e;
        }
        hs(t) {
            return new ye(dt(t.latitude), dt(t.longitude));
        }
        ls(t, n) {
            return (t.values || []).map((t => this.We(t, n)));
        }
        os(t, n) {
            switch (n) {
              case "previous":
                const e = rt(t);
                return null == e ? null : this.We(e, n);

              case "estimate":
                return this.rs(it(t));

              default:
                return null;
            }
        }
        rs(t) {
            const n = ft(t);
            return new W(n.seconds, n.nanos);
        }
        ds(t, n) {
            const e = Y.J(t);
            x(wn(e));
            const s = new g(e.get(1), e.get(3)), r = new J(e.M(5));
            return s.isEqual(n) || 
            // TODO(b/64130202): Somehow support foreign references.
            F(`Document ${r} contains a document reference within a different database (${s.projectId}/${s.database}) which is not supported. It will be treated as a reference in the current database (${n.projectId}/${n.database}) instead.`), 
            r;
        }
    } {
        constructor(t) {
            super(), this.firestore = t;
        }
        us(t) {
            return new Ee(t);
        }
        cs(t) {
            const n = this.ds(t, this.firestore.jn);
            return new ns(this.firestore, /* converter= */ null, n);
        }
    }

    /**
     * Reads the document referred to by the specified document reference.
     *
     * All documents are directly fetched from the server, even if the document was
     * previously read or modified. Recent modifications are only reflected in the
     * retrieved `DocumentSnapshot` if they have already been applied by the
     * backend. If the client is offline, the read fails. If you like to use
     * caching or see local modifications, please use the full Firestore SDK.
     *
     * @param reference - The reference of the document to fetch.
     * @returns A Promise resolved with a `DocumentSnapshot` containing the current
     * document contents.
     */ function vs(t) {
        const n = Yn((t = Xn(t, ns)).firestore), e = new gs(t.firestore);
        return Bn(n, [ t.Ie ]).then((n => {
            x(1 === n.length);
            const s = n[0];
            return new Ke(t.firestore, e, t.Ie, s instanceof Sn ? s : null, t.je);
        }));
    }

    /**
     * Executes the query and returns the results as a {@link QuerySnapshot}.
     *
     * All queries are executed directly by the server, even if the the query was
     * previously executed. Recent modifications are only reflected in the retrieved
     * results if they have already been applied by the backend. If the client is
     * offline, the operation fails. To see previously cached result and local
     * modifications, use the full Firestore SDK.
     *
     * @param query - The `Query` to execute.
     * @returns A Promise that will be resolved with the results of the query.
     */ function bs(t) {
        !function(t) {
            if (Pt(t) && 0 === t.ft.length) throw new R(I, "limitToLast() queries require specifying at least one orderBy() clause");
        }((t = Xn(t, es)).Ye);
        const n = Yn(t.firestore), e = new gs(t.firestore);
        return kn(n, t.Ye).then((n => {
            const s = n.map((n => new Je(t.firestore, e, n.key, n, t.je)));
            return Pt(t.Ye) && 
            // Limit to last queries reverse the orderBy constraint that was
            // specified by the user. As such, we need to reverse the order of the
            // results to return the documents in the expected order.
            s.reverse(), new Ze(t, s);
        }));
    }

    function Ns(t, n, e) {
        const s = He((t = Xn(t, ns)).je, n, e), r = Ne(qs(t.firestore), "setDoc", t.Ie, s, null !== t.je, e);
        return jn(Yn(t.firestore), r.le(t.Ie, Pn.vt()));
    }

    function Ds(t, n, e, ...s) {
        const r = qs((t = Xn(t, ns)).firestore);
        // For Compat types, we have to "extract" the underlying types before
        // performing validation.
            let i;
        n instanceof Ie && (n = n.Wn), i = "string" == typeof n || n instanceof Te ? Fe(r, "updateDoc", t.Ie, n, e, s) : De(r, "updateDoc", t.Ie, n);
        return jn(Yn(t.firestore), i.le(t.Ie, Pn.exists(!0)));
    }

    /**
     * Deletes the document referred to by the specified `DocumentReference`.
     *
     * The deletion will only be reflected in document reads that occur after the
     * returned Promise resolves. If the client is offline, the
     * delete fails. If you would like to see local modifications or buffer writes
     * until the client is online, use the full Firestore SDK.
     *
     * @param reference - A reference to the document to delete.
     * @returns A Promise resolved once the document has been successfully
     * deleted from the backend.
     */ function Fs(t) {
        return jn(Yn((t = Xn(t, ns)).firestore), [ new bn(t.Ie, Pn.vt()) ]);
    }

    /**
     * Add a new document to specified `CollectionReference` with the given data,
     * assigning it a document ID automatically.
     *
     * The result of this write will only be reflected in document reads that occur
     * after the returned Promise resolves. If the client is offline, the
     * write fails. If you would like to see local modifications or buffer writes
     * until the client is online, use the full Firestore SDK.
     *
     * @param reference - A reference to the collection to add this document to.
     * @param data - An Object containing the data for the new document.
     * @returns A Promise resolved with a `DocumentReference` pointing to the
     * newly created document after it has been written to the backend.
     */ function $s(t, n) {
        const e = Vs(t = Xn(t, As)), s = He(t.je, n), r = Ne(qs(t.firestore), "addDoc", e.Ie, s, null !== e.je, {});
        return jn(Yn(t.firestore), r.le(e.Ie, Pn.exists(!1))).then((() => e));
    }

    /**
     * Returns true if the provided references are equal.
     *
     * @param left - A reference to compare.
     * @param right - A reference to compare.
     * @returns true if the references point to the same location in the same
     * Firestore database.
     */ function Ss(t, n) {
        return t instanceof Ie && (t = t.Wn), n instanceof Ie && (n = n.Wn), (t instanceof ns || t instanceof As) && (n instanceof ns || n instanceof As) && (t.firestore === n.firestore && t.path === n.path && t.je === n.je);
    }

    /**
     * Returns true if the provided queries point to the same collection and apply
     * the same constraints.
     *
     * @param left - A `Query` to compare.
     * @param right - A `Query` to compare.
     * @returns true if the references point to the same location in the same
     * Firestore database.
     */ function xs(t, n) {
        return t instanceof Ie && (t = t.Wn), n instanceof Ie && (n = n.Wn), t instanceof es && n instanceof es && (t.firestore === n.firestore && Nt(t.Ye, n.Ye) && t.je === n.je);
    }

    function qs(t) {
        const n = t.kn(), e = zn(t.jn);
        return new be(t.jn, !!n.ignoreUndefinedProperties, e);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */ app._registerComponent(new Component("firestore/lite", (t => ((t, n) => new ee(t, n))(t.getProvider("app-exp").getImmediate(), t.getProvider("auth-internal"))), "PUBLIC" /* PUBLIC */)), 
    app.registerVersion("firestore-lite", "0.0.900", "node");

    exports.Bytes = Ee;
    exports.CollectionReference = As;
    exports.DocumentReference = ns;
    exports.DocumentSnapshot = Ke;
    exports.FieldPath = Te;
    exports.FieldValue = oe;
    exports.FirebaseFirestore = ee;
    exports.FirestoreError = R;
    exports.GeoPoint = ye;
    exports.Query = es;
    exports.QueryConstraint = ss;
    exports.QueryDocumentSnapshot = Je;
    exports.QuerySnapshot = Ze;
    exports.Timestamp = W;
    exports.Transaction = Ge;
    exports.WriteBatch = Qe;
    exports.addDoc = $s;
    exports.arrayRemove = he;
    exports.arrayUnion = ae;
    exports.collection = Ps;
    exports.collectionGroup = Rs;
    exports.deleteDoc = Fs;
    exports.deleteField = ue;
    exports.doc = Vs;
    exports.documentId = Ae;
    exports.endAt = ps;
    exports.endBefore = ms;
    exports.getDoc = vs;
    exports.getDocs = bs;
    exports.getFirestore = re;
    exports.increment = le;
    exports.initializeFirestore = se;
    exports.limit = hs;
    exports.limitToLast = ls;
    exports.orderBy = cs;
    exports.query = rs;
    exports.queryEqual = xs;
    exports.refEqual = Ss;
    exports.runTransaction = Ye;
    exports.serverTimestamp = ce;
    exports.setDoc = Ns;
    exports.setLogLevel = N;
    exports.snapshotEqual = Xe;
    exports.startAfter = _s;
    exports.startAt = ds;
    exports.terminate = ie;
    exports.updateDoc = Ds;
    exports.where = os;
    exports.writeBatch = ze;

    Object.defineProperty(exports, '__esModule', { value: true });


              }).apply(this, arguments);
            } catch(err) {
                console.error(err);
                throw new Error(
                  'Cannot instantiate firebase-firestore-lite.js - ' +
                  'be sure to load firebase-app.js first.'
                );
              }

})));


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@firebase/app')) :
    typeof define === 'function' && define.amd ? define(['exports', '@firebase/app'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.firebase = global.firebase || {}, global.firebase.performance = global.firebase.performance || {}), global.firebase.app));
}(this, (function (exports, firebase) { 'use strict';

    try {
                (function() {

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var firebase__default = /*#__PURE__*/_interopDefaultLegacy(firebase);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    /**
     * This method checks if indexedDB is supported by current browser/service worker context
     * @return true if indexedDB is supported by current browser/service worker context
     */
    function isIndexedDBAvailable() {
        return 'indexedDB' in self && indexedDB != null;
    }
    /**
     * This method validates browser context for indexedDB by opening a dummy indexedDB database and reject
     * if errors occur during the database open operation.
     */
    function validateIndexedDBOpenable() {
        return new Promise(function (resolve, reject) {
            try {
                var preExist_1 = true;
                var DB_CHECK_NAME_1 = 'validate-browser-context-for-indexeddb-analytics-module';
                var request_1 = window.indexedDB.open(DB_CHECK_NAME_1);
                request_1.onsuccess = function () {
                    request_1.result.close();
                    // delete database only when it doesn't pre-exist
                    if (!preExist_1) {
                        window.indexedDB.deleteDatabase(DB_CHECK_NAME_1);
                    }
                    resolve(true);
                };
                request_1.onupgradeneeded = function () {
                    preExist_1 = false;
                };
                request_1.onerror = function () {
                    var _a;
                    reject(((_a = request_1.error) === null || _a === void 0 ? void 0 : _a.message) || '');
                };
            }
            catch (error) {
                reject(error);
            }
        });
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ERROR_NAME = 'FirebaseError';
    // Based on code from:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
    var FirebaseError = /** @class */ (function (_super) {
        __extends(FirebaseError, _super);
        function FirebaseError(code, message, customData) {
            var _this = _super.call(this, message) || this;
            _this.code = code;
            _this.customData = customData;
            _this.name = ERROR_NAME;
            // Fix For ES5
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(_this, FirebaseError.prototype);
            // Maintains proper stack trace for where our error was thrown.
            // Only available on V8.
            if (Error.captureStackTrace) {
                Error.captureStackTrace(_this, ErrorFactory.prototype.create);
            }
            return _this;
        }
        return FirebaseError;
    }(Error));
    var ErrorFactory = /** @class */ (function () {
        function ErrorFactory(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
        }
        ErrorFactory.prototype.create = function (code) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            var customData = data[0] || {};
            var fullCode = this.service + "/" + code;
            var template = this.errors[code];
            var message = template ? replaceTemplate(template, customData) : 'Error';
            // Service Name: Error message (service/code).
            var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
            var error = new FirebaseError(fullCode, fullMessage, customData);
            return error;
        };
        return ErrorFactory;
    }());
    function replaceTemplate(template, data) {
        return template.replace(PATTERN, function (_, key) {
            var value = data[key];
            return value != null ? String(value) : "<" + key + "?>";
        });
    }
    var PATTERN = /\{\$([^}]+)}/g;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __spreadArrays$1() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a;
    /**
     * The JS SDK supports 5 log levels and also allows a user the ability to
     * silence the logs altogether.
     *
     * The order is a follows:
     * DEBUG < VERBOSE < INFO < WARN < ERROR
     *
     * All of the log types above the current log level will be captured (i.e. if
     * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
     * `VERBOSE` logs will not)
     */
    var LogLevel;
    (function (LogLevel) {
        LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
        LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
        LogLevel[LogLevel["INFO"] = 2] = "INFO";
        LogLevel[LogLevel["WARN"] = 3] = "WARN";
        LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
        LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(LogLevel || (LogLevel = {}));
    var levelStringToEnum = {
        'debug': LogLevel.DEBUG,
        'verbose': LogLevel.VERBOSE,
        'info': LogLevel.INFO,
        'warn': LogLevel.WARN,
        'error': LogLevel.ERROR,
        'silent': LogLevel.SILENT
    };
    /**
     * The default log level
     */
    var defaultLogLevel = LogLevel.INFO;
    /**
     * By default, `console.debug` is not displayed in the developer console (in
     * chrome). To avoid forcing users to have to opt-in to these logs twice
     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
     * logs to the `console.log` function.
     */
    var ConsoleMethod = (_a = {},
        _a[LogLevel.DEBUG] = 'log',
        _a[LogLevel.VERBOSE] = 'log',
        _a[LogLevel.INFO] = 'info',
        _a[LogLevel.WARN] = 'warn',
        _a[LogLevel.ERROR] = 'error',
        _a);
    /**
     * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
     * messages on to their corresponding console counterparts (if the log method
     * is supported by the current log level)
     */
    var defaultLogHandler = function (instance, logType) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (logType < instance.logLevel) {
            return;
        }
        var now = new Date().toISOString();
        var method = ConsoleMethod[logType];
        if (method) {
            console[method].apply(console, __spreadArrays$1(["[" + now + "]  " + instance.name + ":"], args));
        }
        else {
            throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
        }
    };
    var Logger = /** @class */ (function () {
        /**
         * Gives you an instance of a Logger to capture messages according to
         * Firebase's logging scheme.
         *
         * @param name The name that the logs will be associated with
         */
        function Logger(name) {
            this.name = name;
            /**
             * The log level of the given Logger instance.
             */
            this._logLevel = defaultLogLevel;
            /**
             * The main (internal) log handler for the Logger instance.
             * Can be set to a new function in internal package code but not by user.
             */
            this._logHandler = defaultLogHandler;
            /**
             * The optional, additional, user-defined log handler for the Logger instance.
             */
            this._userLogHandler = null;
        }
        Object.defineProperty(Logger.prototype, "logLevel", {
            get: function () {
                return this._logLevel;
            },
            set: function (val) {
                if (!(val in LogLevel)) {
                    throw new TypeError("Invalid value \"" + val + "\" assigned to `logLevel`");
                }
                this._logLevel = val;
            },
            enumerable: false,
            configurable: true
        });
        // Workaround for setter/getter having to be the same type.
        Logger.prototype.setLogLevel = function (val) {
            this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
        };
        Object.defineProperty(Logger.prototype, "logHandler", {
            get: function () {
                return this._logHandler;
            },
            set: function (val) {
                if (typeof val !== 'function') {
                    throw new TypeError('Value assigned to `logHandler` must be a function');
                }
                this._logHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Logger.prototype, "userLogHandler", {
            get: function () {
                return this._userLogHandler;
            },
            set: function (val) {
                this._userLogHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * The functions below are all based on the `console` interface
         */
        Logger.prototype.debug = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.DEBUG], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.DEBUG], args));
        };
        Logger.prototype.log = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.VERBOSE], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.VERBOSE], args));
        };
        Logger.prototype.info = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.INFO], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.INFO], args));
        };
        Logger.prototype.warn = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.WARN], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.WARN], args));
        };
        Logger.prototype.error = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays$1([this, LogLevel.ERROR], args));
            this._logHandler.apply(this, __spreadArrays$1([this, LogLevel.ERROR], args));
        };
        return Logger;
    }());

    /**
     * Component for service name T, e.g. `auth`, `auth-internal`
     */
    var Component = /** @class */ (function () {
        /**
         *
         * @param name The public service name, e.g. app, auth, firestore, database
         * @param instanceFactory Service factory responsible for creating the public interface
         * @param type whether the service provided by the component is public or private
         */
        function Component(name, instanceFactory, type) {
            this.name = name;
            this.instanceFactory = instanceFactory;
            this.type = type;
            this.multipleInstances = false;
            /**
             * Properties to be added to the service namespace
             */
            this.serviceProps = {};
            this.instantiationMode = "LAZY" /* LAZY */;
        }
        Component.prototype.setInstantiationMode = function (mode) {
            this.instantiationMode = mode;
            return this;
        };
        Component.prototype.setMultipleInstances = function (multipleInstances) {
            this.multipleInstances = multipleInstances;
            return this;
        };
        Component.prototype.setServiceProps = function (props) {
            this.serviceProps = props;
            return this;
        };
        return Component;
    }());

    function toArray(arr) {
      return Array.prototype.slice.call(arr);
    }

    function promisifyRequest(request) {
      return new Promise(function(resolve, reject) {
        request.onsuccess = function() {
          resolve(request.result);
        };

        request.onerror = function() {
          reject(request.error);
        };
      });
    }

    function promisifyRequestCall(obj, method, args) {
      var request;
      var p = new Promise(function(resolve, reject) {
        request = obj[method].apply(obj, args);
        promisifyRequest(request).then(resolve, reject);
      });

      p.request = request;
      return p;
    }

    function promisifyCursorRequestCall(obj, method, args) {
      var p = promisifyRequestCall(obj, method, args);
      return p.then(function(value) {
        if (!value) return;
        return new Cursor(value, p.request);
      });
    }

    function proxyProperties(ProxyClass, targetProp, properties) {
      properties.forEach(function(prop) {
        Object.defineProperty(ProxyClass.prototype, prop, {
          get: function() {
            return this[targetProp][prop];
          },
          set: function(val) {
            this[targetProp][prop] = val;
          }
        });
      });
    }

    function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {
      properties.forEach(function(prop) {
        if (!(prop in Constructor.prototype)) return;
        ProxyClass.prototype[prop] = function() {
          return promisifyRequestCall(this[targetProp], prop, arguments);
        };
      });
    }

    function proxyMethods(ProxyClass, targetProp, Constructor, properties) {
      properties.forEach(function(prop) {
        if (!(prop in Constructor.prototype)) return;
        ProxyClass.prototype[prop] = function() {
          return this[targetProp][prop].apply(this[targetProp], arguments);
        };
      });
    }

    function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {
      properties.forEach(function(prop) {
        if (!(prop in Constructor.prototype)) return;
        ProxyClass.prototype[prop] = function() {
          return promisifyCursorRequestCall(this[targetProp], prop, arguments);
        };
      });
    }

    function Index(index) {
      this._index = index;
    }

    proxyProperties(Index, '_index', [
      'name',
      'keyPath',
      'multiEntry',
      'unique'
    ]);

    proxyRequestMethods(Index, '_index', IDBIndex, [
      'get',
      'getKey',
      'getAll',
      'getAllKeys',
      'count'
    ]);

    proxyCursorRequestMethods(Index, '_index', IDBIndex, [
      'openCursor',
      'openKeyCursor'
    ]);

    function Cursor(cursor, request) {
      this._cursor = cursor;
      this._request = request;
    }

    proxyProperties(Cursor, '_cursor', [
      'direction',
      'key',
      'primaryKey',
      'value'
    ]);

    proxyRequestMethods(Cursor, '_cursor', IDBCursor, [
      'update',
      'delete'
    ]);

    // proxy 'next' methods
    ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {
      if (!(methodName in IDBCursor.prototype)) return;
      Cursor.prototype[methodName] = function() {
        var cursor = this;
        var args = arguments;
        return Promise.resolve().then(function() {
          cursor._cursor[methodName].apply(cursor._cursor, args);
          return promisifyRequest(cursor._request).then(function(value) {
            if (!value) return;
            return new Cursor(value, cursor._request);
          });
        });
      };
    });

    function ObjectStore(store) {
      this._store = store;
    }

    ObjectStore.prototype.createIndex = function() {
      return new Index(this._store.createIndex.apply(this._store, arguments));
    };

    ObjectStore.prototype.index = function() {
      return new Index(this._store.index.apply(this._store, arguments));
    };

    proxyProperties(ObjectStore, '_store', [
      'name',
      'keyPath',
      'indexNames',
      'autoIncrement'
    ]);

    proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [
      'put',
      'add',
      'delete',
      'clear',
      'get',
      'getAll',
      'getKey',
      'getAllKeys',
      'count'
    ]);

    proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [
      'openCursor',
      'openKeyCursor'
    ]);

    proxyMethods(ObjectStore, '_store', IDBObjectStore, [
      'deleteIndex'
    ]);

    function Transaction(idbTransaction) {
      this._tx = idbTransaction;
      this.complete = new Promise(function(resolve, reject) {
        idbTransaction.oncomplete = function() {
          resolve();
        };
        idbTransaction.onerror = function() {
          reject(idbTransaction.error);
        };
        idbTransaction.onabort = function() {
          reject(idbTransaction.error);
        };
      });
    }

    Transaction.prototype.objectStore = function() {
      return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));
    };

    proxyProperties(Transaction, '_tx', [
      'objectStoreNames',
      'mode'
    ]);

    proxyMethods(Transaction, '_tx', IDBTransaction, [
      'abort'
    ]);

    function UpgradeDB(db, oldVersion, transaction) {
      this._db = db;
      this.oldVersion = oldVersion;
      this.transaction = new Transaction(transaction);
    }

    UpgradeDB.prototype.createObjectStore = function() {
      return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));
    };

    proxyProperties(UpgradeDB, '_db', [
      'name',
      'version',
      'objectStoreNames'
    ]);

    proxyMethods(UpgradeDB, '_db', IDBDatabase, [
      'deleteObjectStore',
      'close'
    ]);

    function DB(db) {
      this._db = db;
    }

    DB.prototype.transaction = function() {
      return new Transaction(this._db.transaction.apply(this._db, arguments));
    };

    proxyProperties(DB, '_db', [
      'name',
      'version',
      'objectStoreNames'
    ]);

    proxyMethods(DB, '_db', IDBDatabase, [
      'close'
    ]);

    // Add cursor iterators
    // TODO: remove this once browsers do the right thing with promises
    ['openCursor', 'openKeyCursor'].forEach(function(funcName) {
      [ObjectStore, Index].forEach(function(Constructor) {
        // Don't create iterateKeyCursor if openKeyCursor doesn't exist.
        if (!(funcName in Constructor.prototype)) return;

        Constructor.prototype[funcName.replace('open', 'iterate')] = function() {
          var args = toArray(arguments);
          var callback = args[args.length - 1];
          var nativeObject = this._store || this._index;
          var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));
          request.onsuccess = function() {
            callback(request.result);
          };
        };
      });
    });

    // polyfill getAll
    [Index, ObjectStore].forEach(function(Constructor) {
      if (Constructor.prototype.getAll) return;
      Constructor.prototype.getAll = function(query, count) {
        var instance = this;
        var items = [];

        return new Promise(function(resolve) {
          instance.iterateCursor(query, function(cursor) {
            if (!cursor) {
              resolve(items);
              return;
            }
            items.push(cursor.value);

            if (count !== undefined && items.length == count) {
              resolve(items);
              return;
            }
            cursor.continue();
          });
        });
      };
    });

    function openDb(name, version, upgradeCallback) {
      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);
      var request = p.request;

      if (request) {
        request.onupgradeneeded = function(event) {
          if (upgradeCallback) {
            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));
          }
        };
      }

      return p.then(function(db) {
        return new DB(db);
      });
    }

    var name = "@firebase/installations";
    var version = "0.4.19";

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PENDING_TIMEOUT_MS = 10000;
    var PACKAGE_VERSION = "w:" + version;
    var INTERNAL_AUTH_VERSION = 'FIS_v2';
    var INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';
    var TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour
    var SERVICE = 'installations';
    var SERVICE_NAME = 'Installations';

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$1;
    var ERROR_DESCRIPTION_MAP = (_a$1 = {},
        _a$1["missing-app-config-values" /* MISSING_APP_CONFIG_VALUES */] = 'Missing App configuration value: "{$valueName}"',
        _a$1["not-registered" /* NOT_REGISTERED */] = 'Firebase Installation is not registered.',
        _a$1["installation-not-found" /* INSTALLATION_NOT_FOUND */] = 'Firebase Installation not found.',
        _a$1["request-failed" /* REQUEST_FAILED */] = '{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',
        _a$1["app-offline" /* APP_OFFLINE */] = 'Could not process request. Application offline.',
        _a$1["delete-pending-registration" /* DELETE_PENDING_REGISTRATION */] = "Can't delete installation while there is a pending registration request.",
        _a$1);
    var ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);
    /** Returns true if error is a FirebaseError that is based on an error from the server. */
    function isServerError(error) {
        return (error instanceof FirebaseError &&
            error.code.includes("request-failed" /* REQUEST_FAILED */));
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getInstallationsEndpoint(_a) {
        var projectId = _a.projectId;
        return INSTALLATIONS_API_URL + "/projects/" + projectId + "/installations";
    }
    function extractAuthTokenInfoFromResponse(response) {
        return {
            token: response.token,
            requestStatus: 2 /* COMPLETED */,
            expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),
            creationTime: Date.now()
        };
    }
    function getErrorFromResponse(requestName, response) {
        return __awaiter(this, void 0, void 0, function () {
            var responseJson, errorData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, response.json()];
                    case 1:
                        responseJson = _a.sent();
                        errorData = responseJson.error;
                        return [2 /*return*/, ERROR_FACTORY.create("request-failed" /* REQUEST_FAILED */, {
                                requestName: requestName,
                                serverCode: errorData.code,
                                serverMessage: errorData.message,
                                serverStatus: errorData.status
                            })];
                }
            });
        });
    }
    function getHeaders(_a) {
        var apiKey = _a.apiKey;
        return new Headers({
            'Content-Type': 'application/json',
            Accept: 'application/json',
            'x-goog-api-key': apiKey
        });
    }
    function getHeadersWithAuth(appConfig, _a) {
        var refreshToken = _a.refreshToken;
        var headers = getHeaders(appConfig);
        headers.append('Authorization', getAuthorizationHeader(refreshToken));
        return headers;
    }
    /**
     * Calls the passed in fetch wrapper and returns the response.
     * If the returned response has a status of 5xx, re-runs the function once and
     * returns the response.
     */
    function retryIfServerError(fn) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fn()];
                    case 1:
                        result = _a.sent();
                        if (result.status >= 500 && result.status < 600) {
                            // Internal Server Error. Retry request.
                            return [2 /*return*/, fn()];
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    }
    function getExpiresInFromResponseExpiresIn(responseExpiresIn) {
        // This works because the server will never respond with fractions of a second.
        return Number(responseExpiresIn.replace('s', '000'));
    }
    function getAuthorizationHeader(refreshToken) {
        return INTERNAL_AUTH_VERSION + " " + refreshToken;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function createInstallationRequest(appConfig, _a) {
        var fid = _a.fid;
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, headers, body, request, response, responseValue, registeredInstallationEntry;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        endpoint = getInstallationsEndpoint(appConfig);
                        headers = getHeaders(appConfig);
                        body = {
                            fid: fid,
                            authVersion: INTERNAL_AUTH_VERSION,
                            appId: appConfig.appId,
                            sdkVersion: PACKAGE_VERSION
                        };
                        request = {
                            method: 'POST',
                            headers: headers,
                            body: JSON.stringify(body)
                        };
                        return [4 /*yield*/, retryIfServerError(function () { return fetch(endpoint, request); })];
                    case 1:
                        response = _b.sent();
                        if (!response.ok) return [3 /*break*/, 3];
                        return [4 /*yield*/, response.json()];
                    case 2:
                        responseValue = _b.sent();
                        registeredInstallationEntry = {
                            fid: responseValue.fid || fid,
                            registrationStatus: 2 /* COMPLETED */,
                            refreshToken: responseValue.refreshToken,
                            authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)
                        };
                        return [2 /*return*/, registeredInstallationEntry];
                    case 3: return [4 /*yield*/, getErrorFromResponse('Create Installation', response)];
                    case 4: throw _b.sent();
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Returns a promise that resolves after given time passes. */
    function sleep(ms) {
        return new Promise(function (resolve) {
            setTimeout(resolve, ms);
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function bufferToBase64UrlSafe(array) {
        var b64 = btoa(String.fromCharCode.apply(String, __spread(array)));
        return b64.replace(/\+/g, '-').replace(/\//g, '_');
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var VALID_FID_PATTERN = /^[cdef][\w-]{21}$/;
    var INVALID_FID = '';
    /**
     * Generates a new FID using random values from Web Crypto API.
     * Returns an empty string if FID generation fails for any reason.
     */
    function generateFid() {
        try {
            // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5
            // bytes. our implementation generates a 17 byte array instead.
            var fidByteArray = new Uint8Array(17);
            var crypto_1 = self.crypto || self.msCrypto;
            crypto_1.getRandomValues(fidByteArray);
            // Replace the first 4 random bits with the constant FID header of 0b0111.
            fidByteArray[0] = 112 + (fidByteArray[0] % 16);
            var fid = encode(fidByteArray);
            return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;
        }
        catch (_a) {
            // FID generation errored
            return INVALID_FID;
        }
    }
    /** Converts a FID Uint8Array to a base64 string representation. */
    function encode(fidByteArray) {
        var b64String = bufferToBase64UrlSafe(fidByteArray);
        // Remove the 23rd character that was added because of the extra 4 bits at the
        // end of our 17 byte array, and the '=' padding.
        return b64String.substr(0, 22);
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** Returns a string key that can be used to identify the app. */
    function getKey(appConfig) {
        return appConfig.appName + "!" + appConfig.appId;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var fidChangeCallbacks = new Map();
    /**
     * Calls the onIdChange callbacks with the new FID value, and broadcasts the
     * change to other tabs.
     */
    function fidChanged(appConfig, fid) {
        var key = getKey(appConfig);
        callFidChangeCallbacks(key, fid);
        broadcastFidChange(key, fid);
    }
    function addCallback(appConfig, callback) {
        // Open the broadcast channel if it's not already open,
        // to be able to listen to change events from other tabs.
        getBroadcastChannel();
        var key = getKey(appConfig);
        var callbackSet = fidChangeCallbacks.get(key);
        if (!callbackSet) {
            callbackSet = new Set();
            fidChangeCallbacks.set(key, callbackSet);
        }
        callbackSet.add(callback);
    }
    function removeCallback(appConfig, callback) {
        var key = getKey(appConfig);
        var callbackSet = fidChangeCallbacks.get(key);
        if (!callbackSet) {
            return;
        }
        callbackSet.delete(callback);
        if (callbackSet.size === 0) {
            fidChangeCallbacks.delete(key);
        }
        // Close broadcast channel if there are no more callbacks.
        closeBroadcastChannel();
    }
    function callFidChangeCallbacks(key, fid) {
        var e_1, _a;
        var callbacks = fidChangeCallbacks.get(key);
        if (!callbacks) {
            return;
        }
        try {
            for (var callbacks_1 = __values(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {
                var callback = callbacks_1_1.value;
                callback(fid);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1.return)) _a.call(callbacks_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    function broadcastFidChange(key, fid) {
        var channel = getBroadcastChannel();
        if (channel) {
            channel.postMessage({ key: key, fid: fid });
        }
        closeBroadcastChannel();
    }
    var broadcastChannel = null;
    /** Opens and returns a BroadcastChannel if it is supported by the browser. */
    function getBroadcastChannel() {
        if (!broadcastChannel && 'BroadcastChannel' in self) {
            broadcastChannel = new BroadcastChannel('[Firebase] FID Change');
            broadcastChannel.onmessage = function (e) {
                callFidChangeCallbacks(e.data.key, e.data.fid);
            };
        }
        return broadcastChannel;
    }
    function closeBroadcastChannel() {
        if (fidChangeCallbacks.size === 0 && broadcastChannel) {
            broadcastChannel.close();
            broadcastChannel = null;
        }
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DATABASE_NAME = 'firebase-installations-database';
    var DATABASE_VERSION = 1;
    var OBJECT_STORE_NAME = 'firebase-installations-store';
    var dbPromise = null;
    function getDbPromise() {
        if (!dbPromise) {
            dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, function (upgradeDB) {
                // We don't use 'break' in this switch statement, the fall-through
                // behavior is what we want, because if there are multiple versions between
                // the old version and the current version, we want ALL the migrations
                // that correspond to those versions to run, not only the last one.
                // eslint-disable-next-line default-case
                switch (upgradeDB.oldVersion) {
                    case 0:
                        upgradeDB.createObjectStore(OBJECT_STORE_NAME);
                }
            });
        }
        return dbPromise;
    }
    /** Assigns or overwrites the record for the given key with the given value. */
    function set(appConfig, value) {
        return __awaiter(this, void 0, void 0, function () {
            var key, db, tx, objectStore, oldValue;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = getKey(appConfig);
                        return [4 /*yield*/, getDbPromise()];
                    case 1:
                        db = _a.sent();
                        tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
                        objectStore = tx.objectStore(OBJECT_STORE_NAME);
                        return [4 /*yield*/, objectStore.get(key)];
                    case 2:
                        oldValue = _a.sent();
                        return [4 /*yield*/, objectStore.put(value, key)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, tx.complete];
                    case 4:
                        _a.sent();
                        if (!oldValue || oldValue.fid !== value.fid) {
                            fidChanged(appConfig, value.fid);
                        }
                        return [2 /*return*/, value];
                }
            });
        });
    }
    /** Removes record(s) from the objectStore that match the given key. */
    function remove(appConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var key, db, tx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = getKey(appConfig);
                        return [4 /*yield*/, getDbPromise()];
                    case 1:
                        db = _a.sent();
                        tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
                        return [4 /*yield*/, tx.objectStore(OBJECT_STORE_NAME).delete(key)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, tx.complete];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Atomically updates a record with the result of updateFn, which gets
     * called with the current value. If newValue is undefined, the record is
     * deleted instead.
     * @return Updated value
     */
    function update(appConfig, updateFn) {
        return __awaiter(this, void 0, void 0, function () {
            var key, db, tx, store, oldValue, newValue;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = getKey(appConfig);
                        return [4 /*yield*/, getDbPromise()];
                    case 1:
                        db = _a.sent();
                        tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
                        store = tx.objectStore(OBJECT_STORE_NAME);
                        return [4 /*yield*/, store.get(key)];
                    case 2:
                        oldValue = _a.sent();
                        newValue = updateFn(oldValue);
                        if (!(newValue === undefined)) return [3 /*break*/, 4];
                        return [4 /*yield*/, store.delete(key)];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, store.put(newValue, key)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [4 /*yield*/, tx.complete];
                    case 7:
                        _a.sent();
                        if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {
                            fidChanged(appConfig, newValue.fid);
                        }
                        return [2 /*return*/, newValue];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Updates and returns the InstallationEntry from the database.
     * Also triggers a registration request if it is necessary and possible.
     */
    function getInstallationEntry(appConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var registrationPromise, installationEntry;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, update(appConfig, function (oldEntry) {
                            var installationEntry = updateOrCreateInstallationEntry(oldEntry);
                            var entryWithPromise = triggerRegistrationIfNecessary(appConfig, installationEntry);
                            registrationPromise = entryWithPromise.registrationPromise;
                            return entryWithPromise.installationEntry;
                        })];
                    case 1:
                        installationEntry = _b.sent();
                        if (!(installationEntry.fid === INVALID_FID)) return [3 /*break*/, 3];
                        _a = {};
                        return [4 /*yield*/, registrationPromise];
                    case 2: 
                    // FID generation failed. Waiting for the FID from the server.
                    return [2 /*return*/, (_a.installationEntry = _b.sent(), _a)];
                    case 3: return [2 /*return*/, {
                            installationEntry: installationEntry,
                            registrationPromise: registrationPromise
                        }];
                }
            });
        });
    }
    /**
     * Creates a new Installation Entry if one does not exist.
     * Also clears timed out pending requests.
     */
    function updateOrCreateInstallationEntry(oldEntry) {
        var entry = oldEntry || {
            fid: generateFid(),
            registrationStatus: 0 /* NOT_STARTED */
        };
        return clearTimedOutRequest(entry);
    }
    /**
     * If the Firebase Installation is not registered yet, this will trigger the
     * registration and return an InProgressInstallationEntry.
     *
     * If registrationPromise does not exist, the installationEntry is guaranteed
     * to be registered.
     */
    function triggerRegistrationIfNecessary(appConfig, installationEntry) {
        if (installationEntry.registrationStatus === 0 /* NOT_STARTED */) {
            if (!navigator.onLine) {
                // Registration required but app is offline.
                var registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create("app-offline" /* APP_OFFLINE */));
                return {
                    installationEntry: installationEntry,
                    registrationPromise: registrationPromiseWithError
                };
            }
            // Try registering. Change status to IN_PROGRESS.
            var inProgressEntry = {
                fid: installationEntry.fid,
                registrationStatus: 1 /* IN_PROGRESS */,
                registrationTime: Date.now()
            };
            var registrationPromise = registerInstallation(appConfig, inProgressEntry);
            return { installationEntry: inProgressEntry, registrationPromise: registrationPromise };
        }
        else if (installationEntry.registrationStatus === 1 /* IN_PROGRESS */) {
            return {
                installationEntry: installationEntry,
                registrationPromise: waitUntilFidRegistration(appConfig)
            };
        }
        else {
            return { installationEntry: installationEntry };
        }
    }
    /** This will be executed only once for each new Firebase Installation. */
    function registerInstallation(appConfig, installationEntry) {
        return __awaiter(this, void 0, void 0, function () {
            var registeredInstallationEntry, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 7]);
                        return [4 /*yield*/, createInstallationRequest(appConfig, installationEntry)];
                    case 1:
                        registeredInstallationEntry = _a.sent();
                        return [2 /*return*/, set(appConfig, registeredInstallationEntry)];
                    case 2:
                        e_1 = _a.sent();
                        if (!(isServerError(e_1) && e_1.customData.serverCode === 409)) return [3 /*break*/, 4];
                        // Server returned a "FID can not be used" error.
                        // Generate a new ID next time.
                        return [4 /*yield*/, remove(appConfig)];
                    case 3:
                        // Server returned a "FID can not be used" error.
                        // Generate a new ID next time.
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 4: 
                    // Registration failed. Set FID as not registered.
                    return [4 /*yield*/, set(appConfig, {
                            fid: installationEntry.fid,
                            registrationStatus: 0 /* NOT_STARTED */
                        })];
                    case 5:
                        // Registration failed. Set FID as not registered.
                        _a.sent();
                        _a.label = 6;
                    case 6: throw e_1;
                    case 7: return [2 /*return*/];
                }
            });
        });
    }
    /** Call if FID registration is pending in another request. */
    function waitUntilFidRegistration(appConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var entry, _a, installationEntry, registrationPromise;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, updateInstallationRequest(appConfig)];
                    case 1:
                        entry = _b.sent();
                        _b.label = 2;
                    case 2:
                        if (!(entry.registrationStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 5];
                        // createInstallation request still in progress.
                        return [4 /*yield*/, sleep(100)];
                    case 3:
                        // createInstallation request still in progress.
                        _b.sent();
                        return [4 /*yield*/, updateInstallationRequest(appConfig)];
                    case 4:
                        entry = _b.sent();
                        return [3 /*break*/, 2];
                    case 5:
                        if (!(entry.registrationStatus === 0 /* NOT_STARTED */)) return [3 /*break*/, 7];
                        return [4 /*yield*/, getInstallationEntry(appConfig)];
                    case 6:
                        _a = _b.sent(), installationEntry = _a.installationEntry, registrationPromise = _a.registrationPromise;
                        if (registrationPromise) {
                            return [2 /*return*/, registrationPromise];
                        }
                        else {
                            // if there is no registrationPromise, entry is registered.
                            return [2 /*return*/, installationEntry];
                        }
                    case 7: return [2 /*return*/, entry];
                }
            });
        });
    }
    /**
     * Called only if there is a CreateInstallation request in progress.
     *
     * Updates the InstallationEntry in the DB based on the status of the
     * CreateInstallation request.
     *
     * Returns the updated InstallationEntry.
     */
    function updateInstallationRequest(appConfig) {
        return update(appConfig, function (oldEntry) {
            if (!oldEntry) {
                throw ERROR_FACTORY.create("installation-not-found" /* INSTALLATION_NOT_FOUND */);
            }
            return clearTimedOutRequest(oldEntry);
        });
    }
    function clearTimedOutRequest(entry) {
        if (hasInstallationRequestTimedOut(entry)) {
            return {
                fid: entry.fid,
                registrationStatus: 0 /* NOT_STARTED */
            };
        }
        return entry;
    }
    function hasInstallationRequestTimedOut(installationEntry) {
        return (installationEntry.registrationStatus === 1 /* IN_PROGRESS */ &&
            installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now());
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function generateAuthTokenRequest(_a, installationEntry) {
        var appConfig = _a.appConfig, platformLoggerProvider = _a.platformLoggerProvider;
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, headers, platformLogger, body, request, response, responseValue, completedAuthToken;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);
                        headers = getHeadersWithAuth(appConfig, installationEntry);
                        platformLogger = platformLoggerProvider.getImmediate({
                            optional: true
                        });
                        if (platformLogger) {
                            headers.append('x-firebase-client', platformLogger.getPlatformInfoString());
                        }
                        body = {
                            installation: {
                                sdkVersion: PACKAGE_VERSION
                            }
                        };
                        request = {
                            method: 'POST',
                            headers: headers,
                            body: JSON.stringify(body)
                        };
                        return [4 /*yield*/, retryIfServerError(function () { return fetch(endpoint, request); })];
                    case 1:
                        response = _b.sent();
                        if (!response.ok) return [3 /*break*/, 3];
                        return [4 /*yield*/, response.json()];
                    case 2:
                        responseValue = _b.sent();
                        completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);
                        return [2 /*return*/, completedAuthToken];
                    case 3: return [4 /*yield*/, getErrorFromResponse('Generate Auth Token', response)];
                    case 4: throw _b.sent();
                }
            });
        });
    }
    function getGenerateAuthTokenEndpoint(appConfig, _a) {
        var fid = _a.fid;
        return getInstallationsEndpoint(appConfig) + "/" + fid + "/authTokens:generate";
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Returns a valid authentication token for the installation. Generates a new
     * token if one doesn't exist, is expired or about to expire.
     *
     * Should only be called if the Firebase Installation is registered.
     */
    function refreshAuthToken(dependencies, forceRefresh) {
        if (forceRefresh === void 0) { forceRefresh = false; }
        return __awaiter(this, void 0, void 0, function () {
            var tokenPromise, entry, authToken, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, update(dependencies.appConfig, function (oldEntry) {
                            if (!isEntryRegistered(oldEntry)) {
                                throw ERROR_FACTORY.create("not-registered" /* NOT_REGISTERED */);
                            }
                            var oldAuthToken = oldEntry.authToken;
                            if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {
                                // There is a valid token in the DB.
                                return oldEntry;
                            }
                            else if (oldAuthToken.requestStatus === 1 /* IN_PROGRESS */) {
                                // There already is a token request in progress.
                                tokenPromise = waitUntilAuthTokenRequest(dependencies, forceRefresh);
                                return oldEntry;
                            }
                            else {
                                // No token or token expired.
                                if (!navigator.onLine) {
                                    throw ERROR_FACTORY.create("app-offline" /* APP_OFFLINE */);
                                }
                                var inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);
                                tokenPromise = fetchAuthTokenFromServer(dependencies, inProgressEntry);
                                return inProgressEntry;
                            }
                        })];
                    case 1:
                        entry = _b.sent();
                        if (!tokenPromise) return [3 /*break*/, 3];
                        return [4 /*yield*/, tokenPromise];
                    case 2:
                        _a = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _a = entry.authToken;
                        _b.label = 4;
                    case 4:
                        authToken = _a;
                        return [2 /*return*/, authToken];
                }
            });
        });
    }
    /**
     * Call only if FID is registered and Auth Token request is in progress.
     *
     * Waits until the current pending request finishes. If the request times out,
     * tries once in this thread as well.
     */
    function waitUntilAuthTokenRequest(dependencies, forceRefresh) {
        return __awaiter(this, void 0, void 0, function () {
            var entry, authToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, updateAuthTokenRequest(dependencies.appConfig)];
                    case 1:
                        entry = _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!(entry.authToken.requestStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 5];
                        // generateAuthToken still in progress.
                        return [4 /*yield*/, sleep(100)];
                    case 3:
                        // generateAuthToken still in progress.
                        _a.sent();
                        return [4 /*yield*/, updateAuthTokenRequest(dependencies.appConfig)];
                    case 4:
                        entry = _a.sent();
                        return [3 /*break*/, 2];
                    case 5:
                        authToken = entry.authToken;
                        if (authToken.requestStatus === 0 /* NOT_STARTED */) {
                            // The request timed out or failed in a different call. Try again.
                            return [2 /*return*/, refreshAuthToken(dependencies, forceRefresh)];
                        }
                        else {
                            return [2 /*return*/, authToken];
                        }
                }
            });
        });
    }
    /**
     * Called only if there is a GenerateAuthToken request in progress.
     *
     * Updates the InstallationEntry in the DB based on the status of the
     * GenerateAuthToken request.
     *
     * Returns the updated InstallationEntry.
     */
    function updateAuthTokenRequest(appConfig) {
        return update(appConfig, function (oldEntry) {
            if (!isEntryRegistered(oldEntry)) {
                throw ERROR_FACTORY.create("not-registered" /* NOT_REGISTERED */);
            }
            var oldAuthToken = oldEntry.authToken;
            if (hasAuthTokenRequestTimedOut(oldAuthToken)) {
                return __assign(__assign({}, oldEntry), { authToken: { requestStatus: 0 /* NOT_STARTED */ } });
            }
            return oldEntry;
        });
    }
    function fetchAuthTokenFromServer(dependencies, installationEntry) {
        return __awaiter(this, void 0, void 0, function () {
            var authToken, updatedInstallationEntry, e_1, updatedInstallationEntry;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 8]);
                        return [4 /*yield*/, generateAuthTokenRequest(dependencies, installationEntry)];
                    case 1:
                        authToken = _a.sent();
                        updatedInstallationEntry = __assign(__assign({}, installationEntry), { authToken: authToken });
                        return [4 /*yield*/, set(dependencies.appConfig, updatedInstallationEntry)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, authToken];
                    case 3:
                        e_1 = _a.sent();
                        if (!(isServerError(e_1) &&
                            (e_1.customData.serverCode === 401 || e_1.customData.serverCode === 404))) return [3 /*break*/, 5];
                        // Server returned a "FID not found" or a "Invalid authentication" error.
                        // Generate a new ID next time.
                        return [4 /*yield*/, remove(dependencies.appConfig)];
                    case 4:
                        // Server returned a "FID not found" or a "Invalid authentication" error.
                        // Generate a new ID next time.
                        _a.sent();
                        return [3 /*break*/, 7];
                    case 5:
                        updatedInstallationEntry = __assign(__assign({}, installationEntry), { authToken: { requestStatus: 0 /* NOT_STARTED */ } });
                        return [4 /*yield*/, set(dependencies.appConfig, updatedInstallationEntry)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7: throw e_1;
                    case 8: return [2 /*return*/];
                }
            });
        });
    }
    function isEntryRegistered(installationEntry) {
        return (installationEntry !== undefined &&
            installationEntry.registrationStatus === 2 /* COMPLETED */);
    }
    function isAuthTokenValid(authToken) {
        return (authToken.requestStatus === 2 /* COMPLETED */ &&
            !isAuthTokenExpired(authToken));
    }
    function isAuthTokenExpired(authToken) {
        var now = Date.now();
        return (now < authToken.creationTime ||
            authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER);
    }
    /** Returns an updated InstallationEntry with an InProgressAuthToken. */
    function makeAuthTokenRequestInProgressEntry(oldEntry) {
        var inProgressAuthToken = {
            requestStatus: 1 /* IN_PROGRESS */,
            requestTime: Date.now()
        };
        return __assign(__assign({}, oldEntry), { authToken: inProgressAuthToken });
    }
    function hasAuthTokenRequestTimedOut(authToken) {
        return (authToken.requestStatus === 1 /* IN_PROGRESS */ &&
            authToken.requestTime + PENDING_TIMEOUT_MS < Date.now());
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getId(dependencies) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, installationEntry, registrationPromise;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, getInstallationEntry(dependencies.appConfig)];
                    case 1:
                        _a = _b.sent(), installationEntry = _a.installationEntry, registrationPromise = _a.registrationPromise;
                        if (registrationPromise) {
                            registrationPromise.catch(console.error);
                        }
                        else {
                            // If the installation is already registered, update the authentication
                            // token if needed.
                            refreshAuthToken(dependencies).catch(console.error);
                        }
                        return [2 /*return*/, installationEntry.fid];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getToken(dependencies, forceRefresh) {
        if (forceRefresh === void 0) { forceRefresh = false; }
        return __awaiter(this, void 0, void 0, function () {
            var authToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, completeInstallationRegistration(dependencies.appConfig)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, refreshAuthToken(dependencies, forceRefresh)];
                    case 2:
                        authToken = _a.sent();
                        return [2 /*return*/, authToken.token];
                }
            });
        });
    }
    function completeInstallationRegistration(appConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var registrationPromise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getInstallationEntry(appConfig)];
                    case 1:
                        registrationPromise = (_a.sent()).registrationPromise;
                        if (!registrationPromise) return [3 /*break*/, 3];
                        // A createInstallation request is in progress. Wait until it finishes.
                        return [4 /*yield*/, registrationPromise];
                    case 2:
                        // A createInstallation request is in progress. Wait until it finishes.
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function deleteInstallationRequest(appConfig, installationEntry) {
        return __awaiter(this, void 0, void 0, function () {
            var endpoint, headers, request, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        endpoint = getDeleteEndpoint(appConfig, installationEntry);
                        headers = getHeadersWithAuth(appConfig, installationEntry);
                        request = {
                            method: 'DELETE',
                            headers: headers
                        };
                        return [4 /*yield*/, retryIfServerError(function () { return fetch(endpoint, request); })];
                    case 1:
                        response = _a.sent();
                        if (!!response.ok) return [3 /*break*/, 3];
                        return [4 /*yield*/, getErrorFromResponse('Delete Installation', response)];
                    case 2: throw _a.sent();
                    case 3: return [2 /*return*/];
                }
            });
        });
    }
    function getDeleteEndpoint(appConfig, _a) {
        var fid = _a.fid;
        return getInstallationsEndpoint(appConfig) + "/" + fid;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function deleteInstallation(dependencies) {
        return __awaiter(this, void 0, void 0, function () {
            var appConfig, entry;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        appConfig = dependencies.appConfig;
                        return [4 /*yield*/, update(appConfig, function (oldEntry) {
                                if (oldEntry && oldEntry.registrationStatus === 0 /* NOT_STARTED */) {
                                    // Delete the unregistered entry without sending a deleteInstallation request.
                                    return undefined;
                                }
                                return oldEntry;
                            })];
                    case 1:
                        entry = _a.sent();
                        if (!entry) return [3 /*break*/, 6];
                        if (!(entry.registrationStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 2];
                        // Can't delete while trying to register.
                        throw ERROR_FACTORY.create("delete-pending-registration" /* DELETE_PENDING_REGISTRATION */);
                    case 2:
                        if (!(entry.registrationStatus === 2 /* COMPLETED */)) return [3 /*break*/, 6];
                        if (!!navigator.onLine) return [3 /*break*/, 3];
                        throw ERROR_FACTORY.create("app-offline" /* APP_OFFLINE */);
                    case 3: return [4 /*yield*/, deleteInstallationRequest(appConfig, entry)];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, remove(appConfig)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Sets a new callback that will get called when Installation ID changes.
     * Returns an unsubscribe function that will remove the callback when called.
     */
    function onIdChange(_a, callback) {
        var appConfig = _a.appConfig;
        addCallback(appConfig, callback);
        return function () {
            removeCallback(appConfig, callback);
        };
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function extractAppConfig(app) {
        var e_1, _a;
        if (!app || !app.options) {
            throw getMissingValueError('App Configuration');
        }
        if (!app.name) {
            throw getMissingValueError('App Name');
        }
        // Required app config keys
        var configKeys = [
            'projectId',
            'apiKey',
            'appId'
        ];
        try {
            for (var configKeys_1 = __values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {
                var keyName = configKeys_1_1.value;
                if (!app.options[keyName]) {
                    throw getMissingValueError(keyName);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (configKeys_1_1 && !configKeys_1_1.done && (_a = configKeys_1.return)) _a.call(configKeys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return {
            appName: app.name,
            projectId: app.options.projectId,
            apiKey: app.options.apiKey,
            appId: app.options.appId
        };
    }
    function getMissingValueError(valueName) {
        return ERROR_FACTORY.create("missing-app-config-values" /* MISSING_APP_CONFIG_VALUES */, {
            valueName: valueName
        });
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function registerInstallations(instance) {
        var installationsName = 'installations';
        instance.INTERNAL.registerComponent(new Component(installationsName, function (container) {
            var app = container.getProvider('app').getImmediate();
            // Throws if app isn't configured properly.
            var appConfig = extractAppConfig(app);
            var platformLoggerProvider = container.getProvider('platform-logger');
            var dependencies = {
                appConfig: appConfig,
                platformLoggerProvider: platformLoggerProvider
            };
            var installations = {
                app: app,
                getId: function () { return getId(dependencies); },
                getToken: function (forceRefresh) {
                    return getToken(dependencies, forceRefresh);
                },
                delete: function () { return deleteInstallation(dependencies); },
                onIdChange: function (callback) {
                    return onIdChange(dependencies, callback);
                }
            };
            return installations;
        }, "PUBLIC" /* PUBLIC */));
        instance.registerVersion(name, version);
    }
    registerInstallations(firebase__default['default']);

    var name$1 = "@firebase/performance-exp";
    var version$1 = "0.0.900";

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var SDK_VERSION = version$1;
    /** The prefix for start User Timing marks used for creating Traces. */
    var TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';
    /** The prefix for stop User Timing marks used for creating Traces. */
    var TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';
    /** The prefix for User Timing measure used for creating Traces. */
    var TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';
    /** The prefix for out of the box page load Trace name. */
    var OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';
    var FIRST_PAINT_COUNTER_NAME = '_fp';
    var FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';
    var FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';
    var CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';
    var CONFIG_EXPIRY_LOCAL_STORAGE_KEY = '@firebase/performance/configexpire';
    var SERVICE$1 = 'performance';
    var SERVICE_NAME$1 = 'Performance';

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$2;
    var ERROR_DESCRIPTION_MAP$1 = (_a$2 = {},
        _a$2["trace started" /* TRACE_STARTED_BEFORE */] = 'Trace {$traceName} was started before.',
        _a$2["trace stopped" /* TRACE_STOPPED_BEFORE */] = 'Trace {$traceName} is not running.',
        _a$2["nonpositive trace startTime" /* NONPOSITIVE_TRACE_START_TIME */] = 'Trace {$traceName} startTime should be positive.',
        _a$2["nonpositive trace duration" /* NONPOSITIVE_TRACE_DURATION */] = 'Trace {$traceName} duration should be positive.',
        _a$2["no window" /* NO_WINDOW */] = 'Window is not available.',
        _a$2["no app id" /* NO_APP_ID */] = 'App id is not available.',
        _a$2["no project id" /* NO_PROJECT_ID */] = 'Project id is not available.',
        _a$2["no api key" /* NO_API_KEY */] = 'Api key is not available.',
        _a$2["invalid cc log" /* INVALID_CC_LOG */] = 'Attempted to queue invalid cc event',
        _a$2["FB not default" /* FB_NOT_DEFAULT */] = 'Performance can only start when Firebase app instance is the default one.',
        _a$2["RC response not ok" /* RC_NOT_OK */] = 'RC response is not ok',
        _a$2["invalid attribute name" /* INVALID_ATTRIBUTE_NAME */] = 'Attribute name {$attributeName} is invalid.',
        _a$2["invalid attribute value" /* INVALID_ATTRIBUTE_VALUE */] = 'Attribute value {$attributeValue} is invalid.',
        _a$2["invalid custom metric name" /* INVALID_CUSTOM_METRIC_NAME */] = 'Custom metric name {$customMetricName} is invalid',
        _a$2["invalid String merger input" /* INVALID_STRING_MERGER_PARAMETER */] = 'Input for String merger is invalid, contact support team to resolve.',
        _a$2);
    var ERROR_FACTORY$1 = new ErrorFactory(SERVICE$1, SERVICE_NAME$1, ERROR_DESCRIPTION_MAP$1);

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var consoleLogger = new Logger(SERVICE_NAME$1);
    consoleLogger.logLevel = LogLevel.INFO;

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var apiInstance;
    var windowInstance;
    /**
     * This class holds a reference to various browser related objects injected by
     * set methods.
     */
    var Api = /** @class */ (function () {
        function Api(window) {
            this.window = window;
            if (!window) {
                throw ERROR_FACTORY$1.create("no window" /* NO_WINDOW */);
            }
            this.performance = window.performance;
            this.PerformanceObserver = window.PerformanceObserver;
            this.windowLocation = window.location;
            this.navigator = window.navigator;
            this.document = window.document;
            if (this.navigator && this.navigator.cookieEnabled) {
                // If user blocks cookies on the browser, accessing localStorage will
                // throw an exception.
                this.localStorage = window.localStorage;
            }
            if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {
                this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;
            }
        }
        Api.prototype.getUrl = function () {
            // Do not capture the string query part of url.
            return this.windowLocation.href.split('?')[0];
        };
        Api.prototype.mark = function (name) {
            if (!this.performance || !this.performance.mark) {
                return;
            }
            this.performance.mark(name);
        };
        Api.prototype.measure = function (measureName, mark1, mark2) {
            if (!this.performance || !this.performance.measure) {
                return;
            }
            this.performance.measure(measureName, mark1, mark2);
        };
        Api.prototype.getEntriesByType = function (type) {
            if (!this.performance || !this.performance.getEntriesByType) {
                return [];
            }
            return this.performance.getEntriesByType(type);
        };
        Api.prototype.getEntriesByName = function (name) {
            if (!this.performance || !this.performance.getEntriesByName) {
                return [];
            }
            return this.performance.getEntriesByName(name);
        };
        Api.prototype.getTimeOrigin = function () {
            // Polyfill the time origin with performance.timing.navigationStart.
            return (this.performance &&
                (this.performance.timeOrigin || this.performance.timing.navigationStart));
        };
        Api.prototype.requiredApisAvailable = function () {
            if (!fetch ||
                !Promise ||
                !this.navigator ||
                !this.navigator.cookieEnabled) {
                consoleLogger.info('Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.');
                return false;
            }
            if (!isIndexedDBAvailable()) {
                consoleLogger.info('IndexedDB is not supported by current browswer');
                return false;
            }
            return true;
        };
        Api.prototype.setupObserver = function (entryType, callback) {
            if (!this.PerformanceObserver) {
                return;
            }
            var observer = new this.PerformanceObserver(function (list) {
                for (var _i = 0, _a = list.getEntries(); _i < _a.length; _i++) {
                    var entry = _a[_i];
                    // `entry` is a PerformanceEntry instance.
                    callback(entry);
                }
            });
            // Start observing the entry types you care about.
            observer.observe({ entryTypes: [entryType] });
        };
        Api.getInstance = function () {
            if (apiInstance === undefined) {
                apiInstance = new Api(windowInstance);
            }
            return apiInstance;
        };
        return Api;
    }());
    function setupApi(window) {
        windowInstance = window;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var iid;
    function getIidPromise(installationsService) {
        var iidPromise = installationsService.getId();
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        iidPromise.then(function (iidVal) {
            iid = iidVal;
        });
        return iidPromise;
    }
    // This method should be used after the iid is retrieved by getIidPromise method.
    function getIid() {
        return iid;
    }
    function getAuthTokenPromise(installationsService) {
        var authTokenPromise = installationsService.getToken();
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        authTokenPromise.then(function (authTokenVal) {
        });
        return authTokenPromise;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function mergeStrings(part1, part2) {
        var sizeDiff = part1.length - part2.length;
        if (sizeDiff < 0 || sizeDiff > 1) {
            throw ERROR_FACTORY$1.create("invalid String merger input" /* INVALID_STRING_MERGER_PARAMETER */);
        }
        var resultArray = [];
        for (var i = 0; i < part1.length; i++) {
            resultArray.push(part1.charAt(i));
            if (part2.length > i) {
                resultArray.push(part2.charAt(i));
            }
        }
        return resultArray.join('');
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var settingsServiceInstance;
    var SettingsService = /** @class */ (function () {
        function SettingsService() {
            // The variable which controls logging of automatic traces and HTTP/S network monitoring.
            this.instrumentationEnabled = true;
            // The variable which controls logging of custom traces.
            this.dataCollectionEnabled = true;
            // Configuration flags set through remote config.
            this.loggingEnabled = false;
            // Sampling rate between 0 and 1.
            this.tracesSamplingRate = 1;
            this.networkRequestsSamplingRate = 1;
            // Address of logging service.
            this.logEndPointUrl = 'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';
            // Performance event transport endpoint URL which should be compatible with proto3.
            // New Address for transport service, not configurable via Remote Config.
            this.flTransportEndpointUrl = mergeStrings('hts/frbslgigp.ogepscmv/ieo/eaylg', 'tp:/ieaeogn-agolai.o/1frlglgc/o');
            this.transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');
            // Source type for performance event logs.
            this.logSource = 462;
            // Flags which control per session logging of traces and network requests.
            this.logTraceAfterSampling = false;
            this.logNetworkAfterSampling = false;
            // TTL of config retrieved from remote config in hours.
            this.configTimeToLive = 12;
        }
        SettingsService.prototype.getFlTransportFullUrl = function () {
            return this.flTransportEndpointUrl.concat('?key=', this.transportKey);
        };
        SettingsService.getInstance = function () {
            if (settingsServiceInstance === undefined) {
                settingsServiceInstance = new SettingsService();
            }
            return settingsServiceInstance;
        };
        return SettingsService;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var VisibilityState;
    (function (VisibilityState) {
        VisibilityState[VisibilityState["UNKNOWN"] = 0] = "UNKNOWN";
        VisibilityState[VisibilityState["VISIBLE"] = 1] = "VISIBLE";
        VisibilityState[VisibilityState["HIDDEN"] = 2] = "HIDDEN";
    })(VisibilityState || (VisibilityState = {}));
    var RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];
    var ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\w*$');
    var MAX_ATTRIBUTE_NAME_LENGTH = 40;
    var MAX_ATTRIBUTE_VALUE_LENGTH = 100;
    function getServiceWorkerStatus() {
        var navigator = Api.getInstance().navigator;
        if ('serviceWorker' in navigator) {
            if (navigator.serviceWorker.controller) {
                return 2 /* CONTROLLED */;
            }
            else {
                return 3 /* UNCONTROLLED */;
            }
        }
        else {
            return 1 /* UNSUPPORTED */;
        }
    }
    function getVisibilityState() {
        var document = Api.getInstance().document;
        var visibilityState = document.visibilityState;
        switch (visibilityState) {
            case 'visible':
                return VisibilityState.VISIBLE;
            case 'hidden':
                return VisibilityState.HIDDEN;
            default:
                return VisibilityState.UNKNOWN;
        }
    }
    function getEffectiveConnectionType() {
        var navigator = Api.getInstance().navigator;
        var navigatorConnection = navigator.connection;
        var effectiveType = navigatorConnection && navigatorConnection.effectiveType;
        switch (effectiveType) {
            case 'slow-2g':
                return 1 /* CONNECTION_SLOW_2G */;
            case '2g':
                return 2 /* CONNECTION_2G */;
            case '3g':
                return 3 /* CONNECTION_3G */;
            case '4g':
                return 4 /* CONNECTION_4G */;
            default:
                return 0 /* UNKNOWN */;
        }
    }
    function isValidCustomAttributeName(name) {
        if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {
            return false;
        }
        var matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(function (prefix) {
            return name.startsWith(prefix);
        });
        return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);
    }
    function isValidCustomAttributeValue(value) {
        return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function getAppId(firebaseApp) {
        var _a;
        var appId = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.appId;
        if (!appId) {
            throw ERROR_FACTORY$1.create("no app id" /* NO_APP_ID */);
        }
        return appId;
    }
    function getProjectId(firebaseApp) {
        var _a;
        var projectId = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.projectId;
        if (!projectId) {
            throw ERROR_FACTORY$1.create("no project id" /* NO_PROJECT_ID */);
        }
        return projectId;
    }
    function getApiKey(firebaseApp) {
        var _a;
        var apiKey = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.apiKey;
        if (!apiKey) {
            throw ERROR_FACTORY$1.create("no api key" /* NO_API_KEY */);
        }
        return apiKey;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var REMOTE_CONFIG_SDK_VERSION = '0.0.1';
    // These values will be used if the remote config object is successfully
    // retrieved, but the template does not have these fields.
    var DEFAULT_CONFIGS = {
        loggingEnabled: true
    };
    var FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';
    function getConfig(performanceController, iid) {
        var config = getStoredConfig();
        if (config) {
            processConfig(config);
            return Promise.resolve();
        }
        return getRemoteConfig(performanceController, iid)
            .then(processConfig)
            .then(function (config) { return storeConfig(config); }, 
        /** Do nothing for error, use defaults set in settings service. */
        function () { });
    }
    function getStoredConfig() {
        var localStorage = Api.getInstance().localStorage;
        if (!localStorage) {
            return;
        }
        var expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);
        if (!expiryString || !configValid(expiryString)) {
            return;
        }
        var configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);
        if (!configStringified) {
            return;
        }
        try {
            var configResponse = JSON.parse(configStringified);
            return configResponse;
        }
        catch (_a) {
            return;
        }
    }
    function storeConfig(config) {
        var localStorage = Api.getInstance().localStorage;
        if (!config || !localStorage) {
            return;
        }
        localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));
        localStorage.setItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY, String(Date.now() +
            SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000));
    }
    var COULD_NOT_GET_CONFIG_MSG = 'Could not fetch config, will use default configs';
    function getRemoteConfig(performanceController, iid) {
        // Perf needs auth token only to retrieve remote config.
        return getAuthTokenPromise(performanceController.installations)
            .then(function (authToken) {
            var projectId = getProjectId(performanceController.app);
            var apiKey = getApiKey(performanceController.app);
            var configEndPoint = "https://firebaseremoteconfig.googleapis.com/v1/projects/" + projectId + "/namespaces/fireperf:fetch?key=" + apiKey;
            var request = new Request(configEndPoint, {
                method: 'POST',
                headers: { Authorization: FIS_AUTH_PREFIX + " " + authToken },
                /* eslint-disable camelcase */
                body: JSON.stringify({
                    app_instance_id: iid,
                    app_instance_id_token: authToken,
                    app_id: getAppId(performanceController.app),
                    app_version: SDK_VERSION,
                    sdk_version: REMOTE_CONFIG_SDK_VERSION
                })
                /* eslint-enable camelcase */
            });
            return fetch(request).then(function (response) {
                if (response.ok) {
                    return response.json();
                }
                // In case response is not ok. This will be caught by catch.
                throw ERROR_FACTORY$1.create("RC response not ok" /* RC_NOT_OK */);
            });
        })
            .catch(function () {
            consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);
            return undefined;
        });
    }
    /**
     * Processes config coming either from calling RC or from local storage.
     * This method only runs if call is successful or config in storage
     * is valid.
     */
    function processConfig(config) {
        if (!config) {
            return config;
        }
        var settingsServiceInstance = SettingsService.getInstance();
        var entries = config.entries || {};
        if (entries.fpr_enabled !== undefined) {
            // TODO: Change the assignment of loggingEnabled once the received type is
            // known.
            settingsServiceInstance.loggingEnabled =
                String(entries.fpr_enabled) === 'true';
        }
        else {
            // Config retrieved successfully, but there is no fpr_enabled in template.
            // Use secondary configs value.
            settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;
        }
        if (entries.fpr_log_source) {
            settingsServiceInstance.logSource = Number(entries.fpr_log_source);
        }
        if (entries.fpr_log_endpoint_url) {
            settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;
        }
        // Key from Remote Config has to be non-empty string, otherwsie use local value.
        if (entries.fpr_log_transport_key) {
            settingsServiceInstance.transportKey = entries.fpr_log_transport_key;
        }
        if (entries.fpr_vc_network_request_sampling_rate !== undefined) {
            settingsServiceInstance.networkRequestsSamplingRate = Number(entries.fpr_vc_network_request_sampling_rate);
        }
        if (entries.fpr_vc_trace_sampling_rate !== undefined) {
            settingsServiceInstance.tracesSamplingRate = Number(entries.fpr_vc_trace_sampling_rate);
        }
        // Set the per session trace and network logging flags.
        settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(settingsServiceInstance.tracesSamplingRate);
        settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(settingsServiceInstance.networkRequestsSamplingRate);
        return config;
    }
    function configValid(expiry) {
        return Number(expiry) > Date.now();
    }
    function shouldLogAfterSampling(samplingRate) {
        return Math.random() <= samplingRate;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var initializationStatus = 1 /* notInitialized */;
    var initializationPromise;
    function getInitializationPromise(performanceController) {
        initializationStatus = 2 /* initializationPending */;
        initializationPromise =
            initializationPromise || initializePerf(performanceController);
        return initializationPromise;
    }
    function isPerfInitialized() {
        return initializationStatus === 3 /* initialized */;
    }
    function initializePerf(performanceController) {
        return getDocumentReadyComplete()
            .then(function () { return getIidPromise(performanceController.installations); })
            .then(function (iid) { return getConfig(performanceController, iid); })
            .then(function () { return changeInitializationStatus(); }, function () { return changeInitializationStatus(); });
    }
    /**
     * Returns a promise which resolves whenever the document readystate is complete or
     * immediately if it is called after page load complete.
     */
    function getDocumentReadyComplete() {
        var document = Api.getInstance().document;
        return new Promise(function (resolve) {
            if (document && document.readyState !== 'complete') {
                var handler_1 = function () {
                    if (document.readyState === 'complete') {
                        document.removeEventListener('readystatechange', handler_1);
                        resolve();
                    }
                };
                document.addEventListener('readystatechange', handler_1);
            }
            else {
                resolve();
            }
        });
    }
    function changeInitializationStatus() {
        initializationStatus = 3 /* initialized */;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_SEND_INTERVAL_MS = 10 * 1000;
    var INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;
    // If end point does not work, the call will be tried for these many times.
    var DEFAULT_REMAINING_TRIES = 3;
    var remainingTries = DEFAULT_REMAINING_TRIES;
    /* eslint-enable camelcase */
    var queue = [];
    var isTransportSetup = false;
    function setupTransportService() {
        if (!isTransportSetup) {
            processQueue(INITIAL_SEND_TIME_DELAY_MS);
            isTransportSetup = true;
        }
    }
    function processQueue(timeOffset) {
        setTimeout(function () {
            // If there is no remainingTries left, stop retrying.
            if (remainingTries === 0) {
                return;
            }
            // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.
            if (!queue.length) {
                return processQueue(DEFAULT_SEND_INTERVAL_MS);
            }
            dispatchQueueEvents();
        }, timeOffset);
    }
    function dispatchQueueEvents() {
        // Capture a snapshot of the queue and empty the "official queue".
        var staged = __spreadArrays(queue);
        queue = [];
        /* eslint-disable camelcase */
        // We will pass the JSON serialized event to the backend.
        var log_event = staged.map(function (evt) { return ({
            source_extension_json_proto3: evt.message,
            event_time_ms: String(evt.eventTime)
        }); });
        var data = {
            request_time_ms: String(Date.now()),
            client_info: {
                client_type: 1,
                js_client_info: {}
            },
            log_source: SettingsService.getInstance().logSource,
            log_event: log_event
        };
        /* eslint-enable camelcase */
        sendEventsToFl(data, staged).catch(function () {
            // If the request fails for some reason, add the events that were attempted
            // back to the primary queue to retry later.
            queue = __spreadArrays(staged, queue);
            remainingTries--;
            consoleLogger.info("Tries left: " + remainingTries + ".");
            processQueue(DEFAULT_SEND_INTERVAL_MS);
        });
    }
    function sendEventsToFl(data, staged) {
        return postToFlEndpoint(data)
            .then(function (res) {
            if (!res.ok) {
                consoleLogger.info('Call to Firebase backend failed.');
            }
            return res.json();
        })
            .then(function (res) {
            // Find the next call wait time from the response.
            var transportWait = Number(res.nextRequestWaitMillis);
            var requestOffset = DEFAULT_SEND_INTERVAL_MS;
            if (!isNaN(transportWait)) {
                requestOffset = Math.max(transportWait, requestOffset);
            }
            // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.
            // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.
            var logResponseDetails = res.logResponseDetails;
            if (Array.isArray(logResponseDetails) &&
                logResponseDetails.length > 0 &&
                logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER') {
                queue = __spreadArrays(staged, queue);
                consoleLogger.info("Retry transport request later.");
            }
            remainingTries = DEFAULT_REMAINING_TRIES;
            // Schedule the next process.
            processQueue(requestOffset);
        });
    }
    function postToFlEndpoint(data) {
        var flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();
        return fetch(flTransportFullUrl, {
            method: 'POST',
            body: JSON.stringify(data)
        });
    }
    function addToQueue(evt) {
        if (!evt.eventTime || !evt.message) {
            throw ERROR_FACTORY$1.create("invalid cc log" /* INVALID_CC_LOG */);
        }
        // Add the new event to the queue.
        queue = __spreadArrays(queue, [evt]);
    }
    /** Log handler for cc service to send the performance logs to the server. */
    function transportHandler(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    serializer) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var message = serializer.apply(void 0, args);
            addToQueue({
                message: message,
                eventTime: Date.now()
            });
        };
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /* eslint-enble camelcase */
    var logger;
    // This method is not called before initialization.
    function sendLog(resource, resourceType) {
        if (!logger) {
            logger = transportHandler(serializer);
        }
        logger(resource, resourceType);
    }
    function logTrace(trace) {
        var settingsService = SettingsService.getInstance();
        // Do not log if trace is auto generated and instrumentation is disabled.
        if (!settingsService.instrumentationEnabled && trace.isAuto) {
            return;
        }
        // Do not log if trace is custom and data collection is disabled.
        if (!settingsService.dataCollectionEnabled && !trace.isAuto) {
            return;
        }
        // Do not log if required apis are not available.
        if (!Api.getInstance().requiredApisAvailable()) {
            return;
        }
        // Only log the page load auto traces if page is visible.
        if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {
            return;
        }
        if (isPerfInitialized()) {
            sendTraceLog(trace);
        }
        else {
            // Custom traces can be used before the initialization but logging
            // should wait until after.
            getInitializationPromise(trace.performanceController).then(function () { return sendTraceLog(trace); }, function () { return sendTraceLog(trace); });
        }
    }
    function sendTraceLog(trace) {
        if (!getIid()) {
            return;
        }
        var settingsService = SettingsService.getInstance();
        if (!settingsService.loggingEnabled ||
            !settingsService.logTraceAfterSampling) {
            return;
        }
        setTimeout(function () { return sendLog(trace, 1 /* Trace */); }, 0);
    }
    function logNetworkRequest(networkRequest) {
        var settingsService = SettingsService.getInstance();
        // Do not log network requests if instrumentation is disabled.
        if (!settingsService.instrumentationEnabled) {
            return;
        }
        // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.
        // Need to blacklist both old and new endpoints to avoid migration gap.
        var networkRequestUrl = networkRequest.url;
        // Blacklist old log endpoint and new transport endpoint.
        // Because Performance SDK doesn't instrument requests sent from SDK itself.
        var logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];
        var flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];
        if (networkRequestUrl === logEndpointUrl ||
            networkRequestUrl === flEndpointUrl) {
            return;
        }
        if (!settingsService.loggingEnabled ||
            !settingsService.logNetworkAfterSampling) {
            return;
        }
        setTimeout(function () { return sendLog(networkRequest, 0 /* NetworkRequest */); }, 0);
    }
    function serializer(resource, resourceType) {
        if (resourceType === 0 /* NetworkRequest */) {
            return serializeNetworkRequest(resource);
        }
        return serializeTrace(resource);
    }
    function serializeNetworkRequest(networkRequest) {
        var networkRequestMetric = {
            url: networkRequest.url,
            http_method: networkRequest.httpMethod || 0,
            http_response_code: 200,
            response_payload_bytes: networkRequest.responsePayloadBytes,
            client_start_time_us: networkRequest.startTimeUs,
            time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,
            time_to_response_completed_us: networkRequest.timeToResponseCompletedUs
        };
        var perfMetric = {
            application_info: getApplicationInfo(networkRequest.performanceController.app),
            network_request_metric: networkRequestMetric
        };
        return JSON.stringify(perfMetric);
    }
    function serializeTrace(trace) {
        var traceMetric = {
            name: trace.name,
            is_auto: trace.isAuto,
            client_start_time_us: trace.startTimeUs,
            duration_us: trace.durationUs
        };
        if (Object.keys(trace.counters).length !== 0) {
            traceMetric.counters = trace.counters;
        }
        var customAttributes = trace.getAttributes();
        if (Object.keys(customAttributes).length !== 0) {
            traceMetric.custom_attributes = customAttributes;
        }
        var perfMetric = {
            application_info: getApplicationInfo(trace.performanceController.app),
            trace_metric: traceMetric
        };
        return JSON.stringify(perfMetric);
    }
    function getApplicationInfo(firebaseApp) {
        return {
            google_app_id: getAppId(firebaseApp),
            app_instance_id: getIid(),
            web_app_info: {
                sdk_version: SDK_VERSION,
                page_url: Api.getInstance().getUrl(),
                service_worker_status: getServiceWorkerStatus(),
                visibility_state: getVisibilityState(),
                effective_connection_type: getEffectiveConnectionType()
            },
            application_process_state: 0
        };
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MAX_METRIC_NAME_LENGTH = 100;
    var RESERVED_AUTO_PREFIX = '_';
    var oobMetrics = [
        FIRST_PAINT_COUNTER_NAME,
        FIRST_CONTENTFUL_PAINT_COUNTER_NAME,
        FIRST_INPUT_DELAY_COUNTER_NAME
    ];
    /**
     * Returns true if the metric is custom and does not start with reserved prefix, or if
     * the metric is one of out of the box page load trace metrics.
     */
    function isValidMetricName(name, traceName) {
        if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {
            return false;
        }
        return ((traceName &&
            traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) &&
            oobMetrics.indexOf(name) > -1) ||
            !name.startsWith(RESERVED_AUTO_PREFIX));
    }
    /**
     * Converts the provided value to an integer value to be used in case of a metric.
     * @param providedValue Provided number value of the metric that needs to be converted to an integer.
     *
     * @returns Converted integer number to be set for the metric.
     */
    function convertMetricValueToInteger(providedValue) {
        var valueAsInteger = Math.floor(providedValue);
        if (valueAsInteger < providedValue) {
            consoleLogger.info("Metric value should be an Integer, setting the value as : " + valueAsInteger + ".");
        }
        return valueAsInteger;
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var Trace = /** @class */ (function () {
        /**
         * @param performanceController The performance controller running.
         * @param name The name of the trace.
         * @param isAuto If the trace is auto-instrumented.
         * @param traceMeasureName The name of the measure marker in user timing specification. This field
         * is only set when the trace is built for logging when the user directly uses the user timing
         * api (performance.mark and performance.measure).
         */
        function Trace(performanceController, name, isAuto, traceMeasureName) {
            if (isAuto === void 0) { isAuto = false; }
            this.performanceController = performanceController;
            this.name = name;
            this.isAuto = isAuto;
            this.state = 1 /* UNINITIALIZED */;
            this.customAttributes = {};
            this.counters = {};
            this.api = Api.getInstance();
            this.randomId = Math.floor(Math.random() * 1000000);
            if (!this.isAuto) {
                this.traceStartMark = TRACE_START_MARK_PREFIX + "-" + this.randomId + "-" + this.name;
                this.traceStopMark = TRACE_STOP_MARK_PREFIX + "-" + this.randomId + "-" + this.name;
                this.traceMeasure =
                    traceMeasureName ||
                        TRACE_MEASURE_PREFIX + "-" + this.randomId + "-" + this.name;
                if (traceMeasureName) {
                    // For the case of direct user timing traces, no start stop will happen. The measure object
                    // is already available.
                    this.calculateTraceMetrics();
                }
            }
        }
        /**
         * Starts a trace. The measurement of the duration starts at this point.
         */
        Trace.prototype.start = function () {
            if (this.state !== 1 /* UNINITIALIZED */) {
                throw ERROR_FACTORY$1.create("trace started" /* TRACE_STARTED_BEFORE */, {
                    traceName: this.name
                });
            }
            this.api.mark(this.traceStartMark);
            this.state = 2 /* RUNNING */;
        };
        /**
         * Stops the trace. The measurement of the duration of the trace stops at this point and trace
         * is logged.
         */
        Trace.prototype.stop = function () {
            if (this.state !== 2 /* RUNNING */) {
                throw ERROR_FACTORY$1.create("trace stopped" /* TRACE_STOPPED_BEFORE */, {
                    traceName: this.name
                });
            }
            this.state = 3 /* TERMINATED */;
            this.api.mark(this.traceStopMark);
            this.api.measure(this.traceMeasure, this.traceStartMark, this.traceStopMark);
            this.calculateTraceMetrics();
            logTrace(this);
        };
        /**
         * Records a trace with predetermined values. If this method is used a trace is created and logged
         * directly. No need to use start and stop methods.
         * @param startTime Trace start time since epoch in millisec
         * @param duration The duraction of the trace in millisec
         * @param options An object which can optionally hold maps of custom metrics and custom attributes
         */
        Trace.prototype.record = function (startTime, duration, options) {
            if (startTime <= 0) {
                throw ERROR_FACTORY$1.create("nonpositive trace startTime" /* NONPOSITIVE_TRACE_START_TIME */, {
                    traceName: this.name
                });
            }
            if (duration <= 0) {
                throw ERROR_FACTORY$1.create("nonpositive trace duration" /* NONPOSITIVE_TRACE_DURATION */, {
                    traceName: this.name
                });
            }
            this.durationUs = Math.floor(duration * 1000);
            this.startTimeUs = Math.floor(startTime * 1000);
            if (options && options.attributes) {
                this.customAttributes = __assign({}, options.attributes);
            }
            if (options && options.metrics) {
                for (var _i = 0, _a = Object.keys(options.metrics); _i < _a.length; _i++) {
                    var metric = _a[_i];
                    if (!isNaN(Number(options.metrics[metric]))) {
                        this.counters[metric] = Number(Math.floor(options.metrics[metric]));
                    }
                }
            }
            logTrace(this);
        };
        /**
         * Increments a custom metric by a certain number or 1 if number not specified. Will create a new
         * custom metric if one with the given name does not exist. The value will be floored down to an
         * integer.
         * @param counter Name of the custom metric
         * @param numAsInteger Increment by value
         */
        Trace.prototype.incrementMetric = function (counter, numAsInteger) {
            if (numAsInteger === void 0) { numAsInteger = 1; }
            if (this.counters[counter] === undefined) {
                this.putMetric(counter, numAsInteger);
            }
            else {
                this.putMetric(counter, this.counters[counter] + numAsInteger);
            }
        };
        /**
         * Sets a custom metric to a specified value. Will create a new custom metric if one with the
         * given name does not exist. The value will be floored down to an integer.
         * @param counter Name of the custom metric
         * @param numAsInteger Set custom metric to this value
         */
        Trace.prototype.putMetric = function (counter, numAsInteger) {
            if (isValidMetricName(counter, this.name)) {
                this.counters[counter] = convertMetricValueToInteger(numAsInteger);
            }
            else {
                throw ERROR_FACTORY$1.create("invalid custom metric name" /* INVALID_CUSTOM_METRIC_NAME */, {
                    customMetricName: counter
                });
            }
        };
        /**
         * Returns the value of the custom metric by that name. If a custom metric with that name does
         * not exist will return zero.
         * @param counter
         */
        Trace.prototype.getMetric = function (counter) {
            return this.counters[counter] || 0;
        };
        /**
         * Sets a custom attribute of a trace to a certain value.
         * @param attr
         * @param value
         */
        Trace.prototype.putAttribute = function (attr, value) {
            var isValidName = isValidCustomAttributeName(attr);
            var isValidValue = isValidCustomAttributeValue(value);
            if (isValidName && isValidValue) {
                this.customAttributes[attr] = value;
                return;
            }
            // Throw appropriate error when the attribute name or value is invalid.
            if (!isValidName) {
                throw ERROR_FACTORY$1.create("invalid attribute name" /* INVALID_ATTRIBUTE_NAME */, {
                    attributeName: attr
                });
            }
            if (!isValidValue) {
                throw ERROR_FACTORY$1.create("invalid attribute value" /* INVALID_ATTRIBUTE_VALUE */, {
                    attributeValue: value
                });
            }
        };
        /**
         * Retrieves the value a custom attribute of a trace is set to.
         * @param attr
         */
        Trace.prototype.getAttribute = function (attr) {
            return this.customAttributes[attr];
        };
        Trace.prototype.removeAttribute = function (attr) {
            if (this.customAttributes[attr] === undefined) {
                return;
            }
            delete this.customAttributes[attr];
        };
        Trace.prototype.getAttributes = function () {
            return __assign({}, this.customAttributes);
        };
        Trace.prototype.setStartTime = function (startTime) {
            this.startTimeUs = startTime;
        };
        Trace.prototype.setDuration = function (duration) {
            this.durationUs = duration;
        };
        /**
         * Calculates and assigns the duration and start time of the trace using the measure performance
         * entry.
         */
        Trace.prototype.calculateTraceMetrics = function () {
            var perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);
            var perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];
            if (perfMeasureEntry) {
                this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);
                this.startTimeUs = Math.floor((perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000);
            }
        };
        /**
         * @param navigationTimings A single element array which contains the navigationTIming object of
         * the page load
         * @param paintTimings A array which contains paintTiming object of the page load
         * @param firstInputDelay First input delay in millisec
         */
        Trace.createOobTrace = function (performanceController, navigationTimings, paintTimings, firstInputDelay) {
            var route = Api.getInstance().getUrl();
            if (!route) {
                return;
            }
            var trace = new Trace(performanceController, OOB_TRACE_PAGE_LOAD_PREFIX + route, true);
            var timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);
            trace.setStartTime(timeOriginUs);
            // navigationTimings includes only one element.
            if (navigationTimings && navigationTimings[0]) {
                trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));
                trace.putMetric('domInteractive', Math.floor(navigationTimings[0].domInteractive * 1000));
                trace.putMetric('domContentLoadedEventEnd', Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000));
                trace.putMetric('loadEventEnd', Math.floor(navigationTimings[0].loadEventEnd * 1000));
            }
            var FIRST_PAINT = 'first-paint';
            var FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';
            if (paintTimings) {
                var firstPaint = paintTimings.find(function (paintObject) { return paintObject.name === FIRST_PAINT; });
                if (firstPaint && firstPaint.startTime) {
                    trace.putMetric(FIRST_PAINT_COUNTER_NAME, Math.floor(firstPaint.startTime * 1000));
                }
                var firstContentfulPaint = paintTimings.find(function (paintObject) { return paintObject.name === FIRST_CONTENTFUL_PAINT; });
                if (firstContentfulPaint && firstContentfulPaint.startTime) {
                    trace.putMetric(FIRST_CONTENTFUL_PAINT_COUNTER_NAME, Math.floor(firstContentfulPaint.startTime * 1000));
                }
                if (firstInputDelay) {
                    trace.putMetric(FIRST_INPUT_DELAY_COUNTER_NAME, Math.floor(firstInputDelay * 1000));
                }
            }
            logTrace(trace);
        };
        Trace.createUserTimingTrace = function (performanceController, measureName) {
            var trace = new Trace(performanceController, measureName, false, measureName);
            logTrace(trace);
        };
        return Trace;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function createNetworkRequestEntry(performanceController, entry) {
        var performanceEntry = entry;
        if (!performanceEntry || performanceEntry.responseStart === undefined) {
            return;
        }
        var timeOrigin = Api.getInstance().getTimeOrigin();
        var startTimeUs = Math.floor((performanceEntry.startTime + timeOrigin) * 1000);
        var timeToResponseInitiatedUs = performanceEntry.responseStart
            ? Math.floor((performanceEntry.responseStart - performanceEntry.startTime) * 1000)
            : undefined;
        var timeToResponseCompletedUs = Math.floor((performanceEntry.responseEnd - performanceEntry.startTime) * 1000);
        // Remove the query params from logged network request url.
        var url = performanceEntry.name && performanceEntry.name.split('?')[0];
        var networkRequest = {
            performanceController: performanceController,
            url: url,
            responsePayloadBytes: performanceEntry.transferSize,
            startTimeUs: startTimeUs,
            timeToResponseInitiatedUs: timeToResponseInitiatedUs,
            timeToResponseCompletedUs: timeToResponseCompletedUs
        };
        logNetworkRequest(networkRequest);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var FID_WAIT_TIME_MS = 5000;
    function setupOobResources(performanceController) {
        // Do not initialize unless iid is available.
        if (!getIid()) {
            return;
        }
        // The load event might not have fired yet, and that means performance navigation timing
        // object has a duration of 0. The setup should run after all current tasks in js queue.
        setTimeout(function () { return setupOobTraces(performanceController); }, 0);
        setTimeout(function () { return setupNetworkRequests(performanceController); }, 0);
        setTimeout(function () { return setupUserTimingTraces(performanceController); }, 0);
    }
    function setupNetworkRequests(performanceController) {
        var api = Api.getInstance();
        var resources = api.getEntriesByType('resource');
        for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {
            var resource = resources_1[_i];
            createNetworkRequestEntry(performanceController, resource);
        }
        api.setupObserver('resource', function (entry) {
            return createNetworkRequestEntry(performanceController, entry);
        });
    }
    function setupOobTraces(performanceController) {
        var api = Api.getInstance();
        var navigationTimings = api.getEntriesByType('navigation');
        var paintTimings = api.getEntriesByType('paint');
        // If First Input Desly polyfill is added to the page, report the fid value.
        // https://github.com/GoogleChromeLabs/first-input-delay
        if (api.onFirstInputDelay) {
            // If the fid call back is not called for certain time, continue without it.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var timeoutId_1 = setTimeout(function () {
                Trace.createOobTrace(performanceController, navigationTimings, paintTimings);
                timeoutId_1 = undefined;
            }, FID_WAIT_TIME_MS);
            api.onFirstInputDelay(function (fid) {
                if (timeoutId_1) {
                    clearTimeout(timeoutId_1);
                    Trace.createOobTrace(performanceController, navigationTimings, paintTimings, fid);
                }
            });
        }
        else {
            Trace.createOobTrace(performanceController, navigationTimings, paintTimings);
        }
    }
    function setupUserTimingTraces(performanceController) {
        var api = Api.getInstance();
        // Run through the measure performance entries collected up to this point.
        var measures = api.getEntriesByType('measure');
        for (var _i = 0, measures_1 = measures; _i < measures_1.length; _i++) {
            var measure = measures_1[_i];
            createUserTimingTrace(performanceController, measure);
        }
        // Setup an observer to capture the measures from this point on.
        api.setupObserver('measure', function (entry) {
            return createUserTimingTrace(performanceController, entry);
        });
    }
    function createUserTimingTrace(performanceController, measure) {
        var measureName = measure.name;
        // Do not create a trace, if the user timing marks and measures are created by the sdk itself.
        if (measureName.substring(0, TRACE_MEASURE_PREFIX.length) ===
            TRACE_MEASURE_PREFIX) {
            return;
        }
        Trace.createUserTimingTrace(performanceController, measureName);
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var PerformanceController = /** @class */ (function () {
        function PerformanceController(app, installations) {
            this.app = app;
            this.installations = installations;
            this.initialized = false;
        }
        /**
         * This method *must* be called internally as part of creating a
         * PerformanceController instance.
         *
         * Currently it's not possible to pass the settings object through the
         * constructor using Components, so this method exists to be called with the
         * desired settings, to ensure nothing is collected without the user's
         * consent.
         */
        PerformanceController.prototype._init = function (settings) {
            var _this = this;
            if (this.initialized) {
                return;
            }
            if ((settings === null || settings === void 0 ? void 0 : settings.dataCollectionEnabled) !== undefined) {
                this.dataCollectionEnabled = settings.dataCollectionEnabled;
            }
            if ((settings === null || settings === void 0 ? void 0 : settings.instrumentationEnabled) !== undefined) {
                this.instrumentationEnabled = settings.instrumentationEnabled;
            }
            if (Api.getInstance().requiredApisAvailable()) {
                validateIndexedDBOpenable()
                    .then(function (isAvailable) {
                    if (isAvailable) {
                        setupTransportService();
                        getInitializationPromise(_this).then(function () { return setupOobResources(_this); }, function () { return setupOobResources(_this); });
                        _this.initialized = true;
                    }
                })
                    .catch(function (error) {
                    consoleLogger.info("Environment doesn't support IndexedDB: " + error);
                });
            }
            else {
                consoleLogger.info('Firebase Performance cannot start if the browser does not support ' +
                    '"Fetch" and "Promise", or cookies are disabled.');
            }
        };
        Object.defineProperty(PerformanceController.prototype, "instrumentationEnabled", {
            get: function () {
                return SettingsService.getInstance().instrumentationEnabled;
            },
            set: function (val) {
                SettingsService.getInstance().instrumentationEnabled = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PerformanceController.prototype, "dataCollectionEnabled", {
            get: function () {
                return SettingsService.getInstance().dataCollectionEnabled;
            },
            set: function (val) {
                SettingsService.getInstance().dataCollectionEnabled = val;
            },
            enumerable: false,
            configurable: true
        });
        return PerformanceController;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_ENTRY_NAME = '[DEFAULT]';
    /**
     * Returns a FirebasePerformance instance for the given app.
     * @param app - The FirebaseApp to use.
     * @param settings - Optional settings for the Performance instance.
     * @public
     */
    function getPerformance(app, settings) {
        var provider = firebase._getProvider(app, 'performance-exp');
        var perfInstance = provider.getImmediate();
        perfInstance._init(settings);
        return perfInstance;
    }
    /**
     * Returns a new PerformanceTrace instance.
     * @param performance - The FirebasePerformance instance to use.
     * @param name - The name of the trace.
     * @public
     */
    function trace(performance, name) {
        return new Trace(performance, name);
    }
    var factory = function (container) {
        // Dependencies
        var app = container.getProvider('app-exp').getImmediate();
        var installations = container
            .getProvider('installations-exp-internal')
            .getImmediate();
        if (app.name !== DEFAULT_ENTRY_NAME) {
            throw ERROR_FACTORY$1.create("FB not default" /* FB_NOT_DEFAULT */);
        }
        if (typeof window === 'undefined') {
            throw ERROR_FACTORY$1.create("no window" /* NO_WINDOW */);
        }
        setupApi(window);
        return new PerformanceController(app, installations);
    };
    function registerPerformance() {
        firebase._registerComponent(new Component('performance-exp', factory, "PUBLIC" /* PUBLIC */));
    }
    registerPerformance();
    firebase.registerVersion(name$1, version$1);

    exports.getPerformance = getPerformance;
    exports.trace = trace;

    Object.defineProperty(exports, '__esModule', { value: true });


              }).apply(this, arguments);
            } catch(err) {
                console.error(err);
                throw new Error(
                  'Cannot instantiate firebase-performance.js - ' +
                  'be sure to load firebase-app.js first.'
                );
              }

})));


(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@firebase/app')) :
    typeof define === 'function' && define.amd ? define(['exports', '@firebase/app'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.firebase = global.firebase || {}, global.firebase['remote-config'] = global.firebase['remote-config'] || {}), global.firebase.app));
}(this, (function (exports, app) { 'use strict';

    try {
                (function() {

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ERROR_NAME = 'FirebaseError';
    // Based on code from:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
    var FirebaseError = /** @class */ (function (_super) {
        __extends(FirebaseError, _super);
        function FirebaseError(code, message, customData) {
            var _this = _super.call(this, message) || this;
            _this.code = code;
            _this.customData = customData;
            _this.name = ERROR_NAME;
            // Fix For ES5
            // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
            Object.setPrototypeOf(_this, FirebaseError.prototype);
            // Maintains proper stack trace for where our error was thrown.
            // Only available on V8.
            if (Error.captureStackTrace) {
                Error.captureStackTrace(_this, ErrorFactory.prototype.create);
            }
            return _this;
        }
        return FirebaseError;
    }(Error));
    var ErrorFactory = /** @class */ (function () {
        function ErrorFactory(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
        }
        ErrorFactory.prototype.create = function (code) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            var customData = data[0] || {};
            var fullCode = this.service + "/" + code;
            var template = this.errors[code];
            var message = template ? replaceTemplate(template, customData) : 'Error';
            // Service Name: Error message (service/code).
            var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
            var error = new FirebaseError(fullCode, fullMessage, customData);
            return error;
        };
        return ErrorFactory;
    }());
    function replaceTemplate(template, data) {
        return template.replace(PATTERN, function (_, key) {
            var value = data[key];
            return value != null ? String(value) : "<" + key + "?>";
        });
    }
    var PATTERN = /\{\$([^}]+)}/g;

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * The amount of milliseconds to exponentially increase.
     */
    var DEFAULT_INTERVAL_MILLIS = 1000;
    /**
     * The factor to backoff by.
     * Should be a number greater than 1.
     */
    var DEFAULT_BACKOFF_FACTOR = 2;
    /**
     * The maximum milliseconds to increase to.
     *
     * <p>Visible for testing
     */
    var MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.
    /**
     * The percentage of backoff time to randomize by.
     * See
     * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic
     * for context.
     *
     * <p>Visible for testing
     */
    var RANDOM_FACTOR = 0.5;
    /**
     * Based on the backoff method from
     * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.
     * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.
     */
    function calculateBackoffMillis(backoffCount, intervalMillis, backoffFactor) {
        if (intervalMillis === void 0) { intervalMillis = DEFAULT_INTERVAL_MILLIS; }
        if (backoffFactor === void 0) { backoffFactor = DEFAULT_BACKOFF_FACTOR; }
        // Calculates an exponentially increasing value.
        // Deviation: calculates value from count and a constant interval, so we only need to save value
        // and count to restore state.
        var currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);
        // A random "fuzz" to avoid waves of retries.
        // Deviation: randomFactor is required.
        var randomWait = Math.round(
        // A fraction of the backoff value to add/subtract.
        // Deviation: changes multiplication order to improve readability.
        RANDOM_FACTOR *
            currBaseValue *
            // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines
            // if we add or subtract.
            (Math.random() - 0.5) *
            2);
        // Limits backoff to max to avoid effectively permanent backoff.
        return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);
    }

    /**
     * Component for service name T, e.g. `auth`, `auth-internal`
     */
    var Component = /** @class */ (function () {
        /**
         *
         * @param name The public service name, e.g. app, auth, firestore, database
         * @param instanceFactory Service factory responsible for creating the public interface
         * @param type whether the service provided by the component is public or private
         */
        function Component(name, instanceFactory, type) {
            this.name = name;
            this.instanceFactory = instanceFactory;
            this.type = type;
            this.multipleInstances = false;
            /**
             * Properties to be added to the service namespace
             */
            this.serviceProps = {};
            this.instantiationMode = "LAZY" /* LAZY */;
        }
        Component.prototype.setInstantiationMode = function (mode) {
            this.instantiationMode = mode;
            return this;
        };
        Component.prototype.setMultipleInstances = function (multipleInstances) {
            this.multipleInstances = multipleInstances;
            return this;
        };
        Component.prototype.setServiceProps = function (props) {
            this.serviceProps = props;
            return this;
        };
        return Component;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    /**
     * @license
     * Copyright 2017 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a;
    /**
     * The JS SDK supports 5 log levels and also allows a user the ability to
     * silence the logs altogether.
     *
     * The order is a follows:
     * DEBUG < VERBOSE < INFO < WARN < ERROR
     *
     * All of the log types above the current log level will be captured (i.e. if
     * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
     * `VERBOSE` logs will not)
     */
    var LogLevel;
    (function (LogLevel) {
        LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
        LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
        LogLevel[LogLevel["INFO"] = 2] = "INFO";
        LogLevel[LogLevel["WARN"] = 3] = "WARN";
        LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
        LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
    })(LogLevel || (LogLevel = {}));
    var levelStringToEnum = {
        'debug': LogLevel.DEBUG,
        'verbose': LogLevel.VERBOSE,
        'info': LogLevel.INFO,
        'warn': LogLevel.WARN,
        'error': LogLevel.ERROR,
        'silent': LogLevel.SILENT
    };
    /**
     * The default log level
     */
    var defaultLogLevel = LogLevel.INFO;
    /**
     * By default, `console.debug` is not displayed in the developer console (in
     * chrome). To avoid forcing users to have to opt-in to these logs twice
     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
     * logs to the `console.log` function.
     */
    var ConsoleMethod = (_a = {},
        _a[LogLevel.DEBUG] = 'log',
        _a[LogLevel.VERBOSE] = 'log',
        _a[LogLevel.INFO] = 'info',
        _a[LogLevel.WARN] = 'warn',
        _a[LogLevel.ERROR] = 'error',
        _a);
    /**
     * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
     * messages on to their corresponding console counterparts (if the log method
     * is supported by the current log level)
     */
    var defaultLogHandler = function (instance, logType) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (logType < instance.logLevel) {
            return;
        }
        var now = new Date().toISOString();
        var method = ConsoleMethod[logType];
        if (method) {
            console[method].apply(console, __spreadArrays(["[" + now + "]  " + instance.name + ":"], args));
        }
        else {
            throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
        }
    };
    var Logger = /** @class */ (function () {
        /**
         * Gives you an instance of a Logger to capture messages according to
         * Firebase's logging scheme.
         *
         * @param name The name that the logs will be associated with
         */
        function Logger(name) {
            this.name = name;
            /**
             * The log level of the given Logger instance.
             */
            this._logLevel = defaultLogLevel;
            /**
             * The main (internal) log handler for the Logger instance.
             * Can be set to a new function in internal package code but not by user.
             */
            this._logHandler = defaultLogHandler;
            /**
             * The optional, additional, user-defined log handler for the Logger instance.
             */
            this._userLogHandler = null;
        }
        Object.defineProperty(Logger.prototype, "logLevel", {
            get: function () {
                return this._logLevel;
            },
            set: function (val) {
                if (!(val in LogLevel)) {
                    throw new TypeError("Invalid value \"" + val + "\" assigned to `logLevel`");
                }
                this._logLevel = val;
            },
            enumerable: false,
            configurable: true
        });
        // Workaround for setter/getter having to be the same type.
        Logger.prototype.setLogLevel = function (val) {
            this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
        };
        Object.defineProperty(Logger.prototype, "logHandler", {
            get: function () {
                return this._logHandler;
            },
            set: function (val) {
                if (typeof val !== 'function') {
                    throw new TypeError('Value assigned to `logHandler` must be a function');
                }
                this._logHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Logger.prototype, "userLogHandler", {
            get: function () {
                return this._userLogHandler;
            },
            set: function (val) {
                this._userLogHandler = val;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * The functions below are all based on the `console` interface
         */
        Logger.prototype.debug = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.DEBUG], args));
        };
        Logger.prototype.log = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.VERBOSE], args));
        };
        Logger.prototype.info = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.INFO], args));
        };
        Logger.prototype.warn = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.WARN], args));
        };
        Logger.prototype.error = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            this._userLogHandler && this._userLogHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));
            this._logHandler.apply(this, __spreadArrays([this, LogLevel.ERROR], args));
        };
        return Logger;
    }());

    var name = "@firebase/remote-config-exp";
    var version = "0.0.900";

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Shims a minimal AbortSignal.
     *
     * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects
     * of networking, such as retries. Firebase doesn't use AbortController enough to justify a
     * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be
     * swapped out if/when we do.
     */
    var RemoteConfigAbortSignal = /** @class */ (function () {
        function RemoteConfigAbortSignal() {
            this.listeners = [];
        }
        RemoteConfigAbortSignal.prototype.addEventListener = function (listener) {
            this.listeners.push(listener);
        };
        RemoteConfigAbortSignal.prototype.abort = function () {
            this.listeners.forEach(function (listener) { return listener(); });
        };
        return RemoteConfigAbortSignal;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var RC_COMPONENT_NAME = 'remote-config-exp';

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var _a$1;
    var ERROR_DESCRIPTION_MAP = (_a$1 = {},
        _a$1["registration-window" /* REGISTRATION_WINDOW */] = 'Undefined window object. This SDK only supports usage in a browser environment.',
        _a$1["registration-project-id" /* REGISTRATION_PROJECT_ID */] = 'Undefined project identifier. Check Firebase app initialization.',
        _a$1["registration-api-key" /* REGISTRATION_API_KEY */] = 'Undefined API key. Check Firebase app initialization.',
        _a$1["registration-app-id" /* REGISTRATION_APP_ID */] = 'Undefined app identifier. Check Firebase app initialization.',
        _a$1["storage-open" /* STORAGE_OPEN */] = 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',
        _a$1["storage-get" /* STORAGE_GET */] = 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',
        _a$1["storage-set" /* STORAGE_SET */] = 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',
        _a$1["storage-delete" /* STORAGE_DELETE */] = 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.',
        _a$1["fetch-client-network" /* FETCH_NETWORK */] = 'Fetch client failed to connect to a network. Check Internet connection.' +
            ' Original error: {$originalErrorMessage}.',
        _a$1["fetch-timeout" /* FETCH_TIMEOUT */] = 'The config fetch request timed out. ' +
            ' Configure timeout using "fetchTimeoutMillis" SDK setting.',
        _a$1["fetch-throttle" /* FETCH_THROTTLE */] = 'The config fetch request timed out while in an exponential backoff state.' +
            ' Configure timeout using "fetchTimeoutMillis" SDK setting.' +
            ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',
        _a$1["fetch-client-parse" /* FETCH_PARSE */] = 'Fetch client could not parse response.' +
            ' Original error: {$originalErrorMessage}.',
        _a$1["fetch-status" /* FETCH_STATUS */] = 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',
        _a$1);
    var ERROR_FACTORY = new ErrorFactory('remoteconfig' /* service */, 'Remote Config' /* service name */, ERROR_DESCRIPTION_MAP);
    // Note how this is like typeof/instanceof, but for ErrorCode.
    function hasErrorCode(e, errorCode) {
        return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_VALUE_FOR_BOOLEAN = false;
    var DEFAULT_VALUE_FOR_STRING = '';
    var DEFAULT_VALUE_FOR_NUMBER = 0;
    var BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];
    var Value = /** @class */ (function () {
        function Value(_source, _value) {
            if (_value === void 0) { _value = DEFAULT_VALUE_FOR_STRING; }
            this._source = _source;
            this._value = _value;
        }
        Value.prototype.asString = function () {
            return this._value;
        };
        Value.prototype.asBoolean = function () {
            if (this._source === 'static') {
                return DEFAULT_VALUE_FOR_BOOLEAN;
            }
            return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;
        };
        Value.prototype.asNumber = function () {
            if (this._source === 'static') {
                return DEFAULT_VALUE_FOR_NUMBER;
            }
            var num = Number(this._value);
            if (isNaN(num)) {
                num = DEFAULT_VALUE_FOR_NUMBER;
            }
            return num;
        };
        Value.prototype.getSource = function () {
            return this._source;
        };
        return Value;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     *
     * @param app - the firebase app instance
     * @returns a remote config instance
     *
     * @public
     */
    function getRemoteConfig(app$1) {
        var rcProvider = app._getProvider(app$1, RC_COMPONENT_NAME);
        return rcProvider.getImmediate();
    }
    /**
     * Makes the last fetched config available to the getters.
     * @param remoteConfig - the remote config instance
     * @returns A promise which resolves to true if the current call activated the fetched configs.
     * If the fetched configs were already activated, the promise will resolve to false.
     *
     * @public
     */
    function activate(remoteConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var rc, _a, lastSuccessfulFetchResponse, activeConfigEtag;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        rc = remoteConfig;
                        return [4 /*yield*/, Promise.all([
                                rc._storage.getLastSuccessfulFetchResponse(),
                                rc._storage.getActiveConfigEtag()
                            ])];
                    case 1:
                        _a = _b.sent(), lastSuccessfulFetchResponse = _a[0], activeConfigEtag = _a[1];
                        if (!lastSuccessfulFetchResponse ||
                            !lastSuccessfulFetchResponse.config ||
                            !lastSuccessfulFetchResponse.eTag ||
                            lastSuccessfulFetchResponse.eTag === activeConfigEtag) {
                            // Either there is no successful fetched config, or is the same as current active
                            // config.
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, Promise.all([
                                rc._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config),
                                rc._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)
                            ])];
                    case 2:
                        _b.sent();
                        return [2 /*return*/, true];
                }
            });
        });
    }
    /**
     * Ensures the last activated config are available to the getters.
     * @param remoteConfig - the remote config instance
     *
     * @returns A promise that resolves when the last activated config is available to the getters
     * @public
     */
    function ensureInitialized(remoteConfig) {
        var rc = remoteConfig;
        if (!rc._initializePromise) {
            rc._initializePromise = rc._storageCache.loadFromStorage().then(function () {
                rc._isInitializationComplete = true;
            });
        }
        return rc._initializePromise;
    }
    /**
     * Fetches and caches configuration from the Remote Config service.
     * @param remoteConfig - the remote config instance
     * @public
     */
    function fetchConfig(remoteConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var rc, abortSignal, e_1, lastFetchStatus;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rc = remoteConfig;
                        abortSignal = new RemoteConfigAbortSignal();
                        setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.
                                abortSignal.abort();
                                return [2 /*return*/];
                            });
                        }); }, rc.settings.fetchTimeoutMillis);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 6]);
                        return [4 /*yield*/, rc._client.fetch({
                                cacheMaxAgeMillis: rc.settings.minimumFetchIntervalMillis,
                                signal: abortSignal
                            })];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, rc._storageCache.setLastFetchStatus('success')];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 4:
                        e_1 = _a.sent();
                        lastFetchStatus = hasErrorCode(e_1, "fetch-throttle" /* FETCH_THROTTLE */)
                            ? 'throttle'
                            : 'failure';
                        return [4 /*yield*/, rc._storageCache.setLastFetchStatus(lastFetchStatus)];
                    case 5:
                        _a.sent();
                        throw e_1;
                    case 6: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * Gets all config.
     *
     * @param remoteConfig - the remote config instance
     * @returns all config
     *
     * @public
     */
    function getAll(remoteConfig) {
        var rc = remoteConfig;
        return getAllKeys(rc._storageCache.getActiveConfig(), rc.defaultConfig).reduce(function (allConfigs, key) {
            allConfigs[key] = getValue(remoteConfig, key);
            return allConfigs;
        }, {});
    }
    /**
     * Gets the value for the given key as a boolean.
     *
     * Convenience method for calling <code>remoteConfig.getValue(key).asBoolean()</code>.
     *
     * @param remoteConfig - the remote config instance
     * @param key - the name of the parameter
     *
     * @returns the value for the given key as a boolean
     * @public
     */
    function getBoolean(remoteConfig, key) {
        return getValue(remoteConfig, key).asBoolean();
    }
    /**
     * Gets the value for the given key as a number.
     *
     * Convenience method for calling <code>remoteConfig.getValue(key).asNumber()</code>.
     *
     * @param remoteConfig - the remote config instance
     * @param key - the name of the parameter
     *
     * @returns the value for the given key as a number
     *
     * @public
     */
    function getNumber(remoteConfig, key) {
        return getValue(remoteConfig, key).asNumber();
    }
    /**
     * Gets the value for the given key as a String.
     * Convenience method for calling <code>remoteConfig.getValue(key).asString()</code>.
     *
     * @param remoteConfig - the remote config instance
     * @param key - the name of the parameter
     *
     * @returns the value for the given key as a String
     *
     * @public
     */
    function getString(remoteConfig, key) {
        return getValue(remoteConfig, key).asString();
    }
    /**
     * Gets the {@link @firebase/remote-config-types#Value} for the given key.
     *
     * @param remoteConfig - the remote config instance
     * @param key - the name of the parameter
     *
     * @returns the value for the given key
     *
     * @public
     */
    function getValue(remoteConfig, key) {
        var rc = remoteConfig;
        if (!rc._isInitializationComplete) {
            rc._logger.debug("A value was requested for key \"" + key + "\" before SDK initialization completed." +
                ' Await on ensureInitialized if the intent was to get a previously activated value.');
        }
        var activeConfig = rc._storageCache.getActiveConfig();
        if (activeConfig && activeConfig[key] !== undefined) {
            return new Value('remote', activeConfig[key]);
        }
        else if (rc.defaultConfig && rc.defaultConfig[key] !== undefined) {
            return new Value('default', String(rc.defaultConfig[key]));
        }
        rc._logger.debug("Returning static value for key \"" + key + "\"." +
            ' Define a default or remote value if this is unintentional.');
        return new Value('static');
    }
    /**
     * Defines the log level to use.
     *
     * @param remoteConfig - the remote config instance
     * @param logLevel - the log level to set
     *
     * @public
     */
    function setLogLevel(remoteConfig, logLevel) {
        var rc = remoteConfig;
        switch (logLevel) {
            case 'debug':
                rc._logger.logLevel = LogLevel.DEBUG;
                break;
            case 'silent':
                rc._logger.logLevel = LogLevel.SILENT;
                break;
            default:
                rc._logger.logLevel = LogLevel.ERROR;
        }
    }
    /**
     * Dedupes and returns an array of all the keys of the received objects.
     */
    function getAllKeys(obj1, obj2) {
        if (obj1 === void 0) { obj1 = {}; }
        if (obj2 === void 0) { obj2 = {}; }
        return Object.keys(__assign(__assign({}, obj1), obj2));
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Implements the {@link RemoteConfigClient} abstraction with success response caching.
     *
     * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service
     * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the
     * Cache API doesn't support matching entries by time.
     */
    var CachingClient = /** @class */ (function () {
        function CachingClient(client, storage, storageCache, logger) {
            this.client = client;
            this.storage = storage;
            this.storageCache = storageCache;
            this.logger = logger;
        }
        /**
         * Returns true if the age of the cached fetched configs is less than or equal to
         * {@link Settings#minimumFetchIntervalInSeconds}.
         *
         * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the
         * native Fetch API.
         *
         * <p>Visible for testing.
         */
        CachingClient.prototype.isCachedDataFresh = function (cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis) {
            // Cache can only be fresh if it's populated.
            if (!lastSuccessfulFetchTimestampMillis) {
                this.logger.debug('Config fetch cache check. Cache unpopulated.');
                return false;
            }
            // Calculates age of cache entry.
            var cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;
            var isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;
            this.logger.debug('Config fetch cache check.' +
                (" Cache age millis: " + cacheAgeMillis + ".") +
                (" Cache max age millis (minimumFetchIntervalMillis setting): " + cacheMaxAgeMillis + ".") +
                (" Is cache hit: " + isCachedDataFresh + "."));
            return isCachedDataFresh;
        };
        CachingClient.prototype.fetch = function (request) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse, response, storageOperations;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, Promise.all([
                                this.storage.getLastSuccessfulFetchTimestampMillis(),
                                this.storage.getLastSuccessfulFetchResponse()
                            ])];
                        case 1:
                            _a = _b.sent(), lastSuccessfulFetchTimestampMillis = _a[0], lastSuccessfulFetchResponse = _a[1];
                            // Exits early on cache hit.
                            if (lastSuccessfulFetchResponse &&
                                this.isCachedDataFresh(request.cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis)) {
                                return [2 /*return*/, lastSuccessfulFetchResponse];
                            }
                            // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API
                            // that allows the caller to pass an ETag.
                            request.eTag =
                                lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;
                            return [4 /*yield*/, this.client.fetch(request)];
                        case 2:
                            response = _b.sent();
                            storageOperations = [
                                // Uses write-through cache for consistency with synchronous public API.
                                this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())
                            ];
                            if (response.status === 200) {
                                // Caches response only if it has changed, ie non-304 responses.
                                storageOperations.push(this.storage.setLastSuccessfulFetchResponse(response));
                            }
                            return [4 /*yield*/, Promise.all(storageOperations)];
                        case 3:
                            _b.sent();
                            return [2 /*return*/, response];
                    }
                });
            });
        };
        return CachingClient;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Attempts to get the most accurate browser language setting.
     *
     * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.
     *
     * <p>Defers default language specification to server logic for consistency.
     *
     * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.
     */
    function getUserLanguage(navigatorLanguage) {
        if (navigatorLanguage === void 0) { navigatorLanguage = navigator; }
        return (
        // Most reliable, but only supported in Chrome/Firefox.
        (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||
            // Supported in most browsers, but returns the language of the browser
            // UI, not the language set in browser settings.
            navigatorLanguage.language
        // Polyfill otherwise.
        );
    }

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Implements the Client abstraction for the Remote Config REST API.
     */
    var RestClient = /** @class */ (function () {
        function RestClient(firebaseInstallations, sdkVersion, namespace, projectId, apiKey, appId) {
            this.firebaseInstallations = firebaseInstallations;
            this.sdkVersion = sdkVersion;
            this.namespace = namespace;
            this.projectId = projectId;
            this.apiKey = apiKey;
            this.appId = appId;
        }
        /**
         * Fetches from the Remote Config REST API.
         *
         * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't
         * connect to the network.
         * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the
         * fetch response.
         * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.
         */
        RestClient.prototype.fetch = function (request) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, installationId, installationToken, urlBase, url, headers, requestBody, options, fetchPromise, timeoutPromise, response, originalError_1, errorCode, status, responseEtag, config, state, responseBody, originalError_2;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, Promise.all([
                                this.firebaseInstallations.getId(),
                                this.firebaseInstallations.getToken()
                            ])];
                        case 1:
                            _a = _b.sent(), installationId = _a[0], installationToken = _a[1];
                            urlBase = window.FIREBASE_REMOTE_CONFIG_URL_BASE ||
                                'https://firebaseremoteconfig.googleapis.com';
                            url = urlBase + "/v1/projects/" + this.projectId + "/namespaces/" + this.namespace + ":fetch?key=" + this.apiKey;
                            headers = {
                                'Content-Type': 'application/json',
                                'Content-Encoding': 'gzip',
                                // Deviates from pure decorator by not passing max-age header since we don't currently have
                                // service behavior using that header.
                                'If-None-Match': request.eTag || '*'
                            };
                            requestBody = {
                                /* eslint-disable camelcase */
                                sdk_version: this.sdkVersion,
                                app_instance_id: installationId,
                                app_instance_id_token: installationToken,
                                app_id: this.appId,
                                language_code: getUserLanguage()
                                /* eslint-enable camelcase */
                            };
                            options = {
                                method: 'POST',
                                headers: headers,
                                body: JSON.stringify(requestBody)
                            };
                            fetchPromise = fetch(url, options);
                            timeoutPromise = new Promise(function (_resolve, reject) {
                                // Maps async event listener to Promise API.
                                request.signal.addEventListener(function () {
                                    // Emulates https://heycam.github.io/webidl/#aborterror
                                    var error = new Error('The operation was aborted.');
                                    error.name = 'AbortError';
                                    reject(error);
                                });
                            });
                            _b.label = 2;
                        case 2:
                            _b.trys.push([2, 5, , 6]);
                            return [4 /*yield*/, Promise.race([fetchPromise, timeoutPromise])];
                        case 3:
                            _b.sent();
                            return [4 /*yield*/, fetchPromise];
                        case 4:
                            response = _b.sent();
                            return [3 /*break*/, 6];
                        case 5:
                            originalError_1 = _b.sent();
                            errorCode = "fetch-client-network" /* FETCH_NETWORK */;
                            if (originalError_1.name === 'AbortError') {
                                errorCode = "fetch-timeout" /* FETCH_TIMEOUT */;
                            }
                            throw ERROR_FACTORY.create(errorCode, {
                                originalErrorMessage: originalError_1.message
                            });
                        case 6:
                            status = response.status;
                            responseEtag = response.headers.get('ETag') || undefined;
                            if (!(response.status === 200)) return [3 /*break*/, 11];
                            responseBody = void 0;
                            _b.label = 7;
                        case 7:
                            _b.trys.push([7, 9, , 10]);
                            return [4 /*yield*/, response.json()];
                        case 8:
                            responseBody = _b.sent();
                            return [3 /*break*/, 10];
                        case 9:
                            originalError_2 = _b.sent();
                            throw ERROR_FACTORY.create("fetch-client-parse" /* FETCH_PARSE */, {
                                originalErrorMessage: originalError_2.message
                            });
                        case 10:
                            config = responseBody['entries'];
                            state = responseBody['state'];
                            _b.label = 11;
                        case 11:
                            // Normalizes based on legacy state.
                            if (state === 'INSTANCE_STATE_UNSPECIFIED') {
                                status = 500;
                            }
                            else if (state === 'NO_CHANGE') {
                                status = 304;
                            }
                            else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {
                                // These cases can be fixed remotely, so normalize to safe value.
                                config = {};
                            }
                            // Normalize to exception-based control flow for non-success cases.
                            // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for
                            // differentiating success states (200 from 304; the state body param is undefined in a
                            // standard 304).
                            if (status !== 304 && status !== 200) {
                                throw ERROR_FACTORY.create("fetch-status" /* FETCH_STATUS */, {
                                    httpStatus: status
                                });
                            }
                            return [2 /*return*/, { status: status, eTag: responseEtag, config: config }];
                    }
                });
            });
        };
        return RestClient;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Supports waiting on a backoff by:
     *
     * <ul>
     *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>
     *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>
     *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled
     *       request appear the same.</li>
     * </ul>
     *
     * <p>Visible for testing.
     */
    function setAbortableTimeout(signal, throttleEndTimeMillis) {
        return new Promise(function (resolve, reject) {
            // Derives backoff from given end time, normalizing negative numbers to zero.
            var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);
            var timeout = setTimeout(resolve, backoffMillis);
            // Adds listener, rather than sets onabort, because signal is a shared object.
            signal.addEventListener(function () {
                clearTimeout(timeout);
                // If the request completes before this timeout, the rejection has no effect.
                reject(ERROR_FACTORY.create("fetch-throttle" /* FETCH_THROTTLE */, {
                    throttleEndTimeMillis: throttleEndTimeMillis
                }));
            });
        });
    }
    /**
     * Returns true if the {@link Error} indicates a fetch request may succeed later.
     */
    function isRetriableError(e) {
        if (!(e instanceof FirebaseError) || !e.customData) {
            return false;
        }
        // Uses string index defined by ErrorData, which FirebaseError implements.
        var httpStatus = Number(e.customData['httpStatus']);
        return (httpStatus === 429 ||
            httpStatus === 500 ||
            httpStatus === 503 ||
            httpStatus === 504);
    }
    /**
     * Decorates a Client with retry logic.
     *
     * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache
     * responses (because the SDK has no use for error responses).
     */
    var RetryingClient = /** @class */ (function () {
        function RetryingClient(client, storage) {
            this.client = client;
            this.storage = storage;
        }
        RetryingClient.prototype.fetch = function (request) {
            return __awaiter(this, void 0, void 0, function () {
                var throttleMetadata;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.storage.getThrottleMetadata()];
                        case 1:
                            throttleMetadata = (_a.sent()) || {
                                backoffCount: 0,
                                throttleEndTimeMillis: Date.now()
                            };
                            return [2 /*return*/, this.attemptFetch(request, throttleMetadata)];
                    }
                });
            });
        };
        /**
         * A recursive helper for attempting a fetch request repeatedly.
         *
         * @throws any non-retriable errors.
         */
        RetryingClient.prototype.attemptFetch = function (request, _a) {
            var throttleEndTimeMillis = _a.throttleEndTimeMillis, backoffCount = _a.backoffCount;
            return __awaiter(this, void 0, void 0, function () {
                var response, e_1, throttleMetadata;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: 
                        // Starts with a (potentially zero) timeout to support resumption from stored state.
                        // Ensures the throttle end time is honored if the last attempt timed out.
                        // Note the SDK will never make a request if the fetch timeout expires at this point.
                        return [4 /*yield*/, setAbortableTimeout(request.signal, throttleEndTimeMillis)];
                        case 1:
                            // Starts with a (potentially zero) timeout to support resumption from stored state.
                            // Ensures the throttle end time is honored if the last attempt timed out.
                            // Note the SDK will never make a request if the fetch timeout expires at this point.
                            _b.sent();
                            _b.label = 2;
                        case 2:
                            _b.trys.push([2, 5, , 7]);
                            return [4 /*yield*/, this.client.fetch(request)];
                        case 3:
                            response = _b.sent();
                            // Note the SDK only clears throttle state if response is success or non-retriable.
                            return [4 /*yield*/, this.storage.deleteThrottleMetadata()];
                        case 4:
                            // Note the SDK only clears throttle state if response is success or non-retriable.
                            _b.sent();
                            return [2 /*return*/, response];
                        case 5:
                            e_1 = _b.sent();
                            if (!isRetriableError(e_1)) {
                                throw e_1;
                            }
                            throttleMetadata = {
                                throttleEndTimeMillis: Date.now() + calculateBackoffMillis(backoffCount),
                                backoffCount: backoffCount + 1
                            };
                            // Persists state.
                            return [4 /*yield*/, this.storage.setThrottleMetadata(throttleMetadata)];
                        case 6:
                            // Persists state.
                            _b.sent();
                            return [2 /*return*/, this.attemptFetch(request, throttleMetadata)];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        return RetryingClient;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute
    var DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.
    /**
     * Encapsulates business logic mapping network and storage dependencies to the public SDK API.
     *
     * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.
     */
    var RemoteConfig = /** @class */ (function () {
        function RemoteConfig(
        // Required by FirebaseServiceFactory interface.
        app, 
        // JS doesn't support private yet
        // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an
        // underscore prefix.
        /**
         * @internal
         */
        _client, 
        /**
         * @internal
         */
        _storageCache, 
        /**
         * @internal
         */
        _storage, 
        /**
         * @internal
         */
        _logger) {
            this.app = app;
            this._client = _client;
            this._storageCache = _storageCache;
            this._storage = _storage;
            this._logger = _logger;
            /**
             * Tracks completion of initialization promise.
             * @internal
             */
            this._isInitializationComplete = false;
            this.settings = {
                fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,
                minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS
            };
            this.defaultConfig = {};
        }
        Object.defineProperty(RemoteConfig.prototype, "fetchTimeMillis", {
            get: function () {
                return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(RemoteConfig.prototype, "lastFetchStatus", {
            get: function () {
                return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';
            },
            enumerable: false,
            configurable: true
        });
        return RemoteConfig;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.
     */
    function toFirebaseError(event, errorCode) {
        var originalError = event.target.error || undefined;
        return ERROR_FACTORY.create(errorCode, {
            originalErrorMessage: originalError && originalError.message
        });
    }
    /**
     * A general-purpose store keyed by app + namespace + {@link
     * ProjectNamespaceKeyFieldValue}.
     *
     * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact
     * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys
     * for a set of key-value pairs. See {@link Storage#createCompositeKey}.
     *
     * <p>Visible for testing.
     */
    var APP_NAMESPACE_STORE = 'app_namespace_store';
    var DB_NAME = 'firebase_remote_config';
    var DB_VERSION = 1;
    // Visible for testing.
    function openDatabase() {
        return new Promise(function (resolve, reject) {
            var request = indexedDB.open(DB_NAME, DB_VERSION);
            request.onerror = function (event) {
                reject(toFirebaseError(event, "storage-open" /* STORAGE_OPEN */));
            };
            request.onsuccess = function (event) {
                resolve(event.target.result);
            };
            request.onupgradeneeded = function (event) {
                var db = event.target.result;
                // We don't use 'break' in this switch statement, the fall-through
                // behavior is what we want, because if there are multiple versions between
                // the old version and the current version, we want ALL the migrations
                // that correspond to those versions to run, not only the last one.
                // eslint-disable-next-line default-case
                switch (event.oldVersion) {
                    case 0:
                        db.createObjectStore(APP_NAMESPACE_STORE, {
                            keyPath: 'compositeKey'
                        });
                }
            };
        });
    }
    /**
     * Abstracts data persistence.
     */
    var Storage = /** @class */ (function () {
        /**
         * @param appId enables storage segmentation by app (ID + name).
         * @param appName enables storage segmentation by app (ID + name).
         * @param namespace enables storage segmentation by namespace.
         */
        function Storage(appId, appName, namespace, openDbPromise) {
            if (openDbPromise === void 0) { openDbPromise = openDatabase(); }
            this.appId = appId;
            this.appName = appName;
            this.namespace = namespace;
            this.openDbPromise = openDbPromise;
        }
        Storage.prototype.getLastFetchStatus = function () {
            return this.get('last_fetch_status');
        };
        Storage.prototype.setLastFetchStatus = function (status) {
            return this.set('last_fetch_status', status);
        };
        // This is comparable to a cache entry timestamp. If we need to expire other data, we could
        // consider adding timestamp to all storage records and an optional max age arg to getters.
        Storage.prototype.getLastSuccessfulFetchTimestampMillis = function () {
            return this.get('last_successful_fetch_timestamp_millis');
        };
        Storage.prototype.setLastSuccessfulFetchTimestampMillis = function (timestamp) {
            return this.set('last_successful_fetch_timestamp_millis', timestamp);
        };
        Storage.prototype.getLastSuccessfulFetchResponse = function () {
            return this.get('last_successful_fetch_response');
        };
        Storage.prototype.setLastSuccessfulFetchResponse = function (response) {
            return this.set('last_successful_fetch_response', response);
        };
        Storage.prototype.getActiveConfig = function () {
            return this.get('active_config');
        };
        Storage.prototype.setActiveConfig = function (config) {
            return this.set('active_config', config);
        };
        Storage.prototype.getActiveConfigEtag = function () {
            return this.get('active_config_etag');
        };
        Storage.prototype.setActiveConfigEtag = function (etag) {
            return this.set('active_config_etag', etag);
        };
        Storage.prototype.getThrottleMetadata = function () {
            return this.get('throttle_metadata');
        };
        Storage.prototype.setThrottleMetadata = function (metadata) {
            return this.set('throttle_metadata', metadata);
        };
        Storage.prototype.deleteThrottleMetadata = function () {
            return this.delete('throttle_metadata');
        };
        Storage.prototype.get = function (key) {
            return __awaiter(this, void 0, void 0, function () {
                var db;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.openDbPromise];
                        case 1:
                            db = _a.sent();
                            return [2 /*return*/, new Promise(function (resolve, reject) {
                                    var transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');
                                    var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);
                                    var compositeKey = _this.createCompositeKey(key);
                                    try {
                                        var request = objectStore.get(compositeKey);
                                        request.onerror = function (event) {
                                            reject(toFirebaseError(event, "storage-get" /* STORAGE_GET */));
                                        };
                                        request.onsuccess = function (event) {
                                            var result = event.target.result;
                                            if (result) {
                                                resolve(result.value);
                                            }
                                            else {
                                                resolve(undefined);
                                            }
                                        };
                                    }
                                    catch (e) {
                                        reject(ERROR_FACTORY.create("storage-get" /* STORAGE_GET */, {
                                            originalErrorMessage: e && e.message
                                        }));
                                    }
                                })];
                    }
                });
            });
        };
        Storage.prototype.set = function (key, value) {
            return __awaiter(this, void 0, void 0, function () {
                var db;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.openDbPromise];
                        case 1:
                            db = _a.sent();
                            return [2 /*return*/, new Promise(function (resolve, reject) {
                                    var transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');
                                    var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);
                                    var compositeKey = _this.createCompositeKey(key);
                                    try {
                                        var request = objectStore.put({
                                            compositeKey: compositeKey,
                                            value: value
                                        });
                                        request.onerror = function (event) {
                                            reject(toFirebaseError(event, "storage-set" /* STORAGE_SET */));
                                        };
                                        request.onsuccess = function () {
                                            resolve();
                                        };
                                    }
                                    catch (e) {
                                        reject(ERROR_FACTORY.create("storage-set" /* STORAGE_SET */, {
                                            originalErrorMessage: e && e.message
                                        }));
                                    }
                                })];
                    }
                });
            });
        };
        Storage.prototype.delete = function (key) {
            return __awaiter(this, void 0, void 0, function () {
                var db;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.openDbPromise];
                        case 1:
                            db = _a.sent();
                            return [2 /*return*/, new Promise(function (resolve, reject) {
                                    var transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');
                                    var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);
                                    var compositeKey = _this.createCompositeKey(key);
                                    try {
                                        var request = objectStore.delete(compositeKey);
                                        request.onerror = function (event) {
                                            reject(toFirebaseError(event, "storage-delete" /* STORAGE_DELETE */));
                                        };
                                        request.onsuccess = function () {
                                            resolve();
                                        };
                                    }
                                    catch (e) {
                                        reject(ERROR_FACTORY.create("storage-delete" /* STORAGE_DELETE */, {
                                            originalErrorMessage: e && e.message
                                        }));
                                    }
                                })];
                    }
                });
            });
        };
        // Facilitates composite key functionality (which is unsupported in IE).
        Storage.prototype.createCompositeKey = function (key) {
            return [this.appId, this.appName, this.namespace, key].join();
        };
        return Storage;
    }());

    /**
     * @license
     * Copyright 2019 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A memory cache layer over storage to support the SDK's synchronous read requirements.
     */
    var StorageCache = /** @class */ (function () {
        function StorageCache(storage) {
            this.storage = storage;
        }
        /**
         * Memory-only getters
         */
        StorageCache.prototype.getLastFetchStatus = function () {
            return this.lastFetchStatus;
        };
        StorageCache.prototype.getLastSuccessfulFetchTimestampMillis = function () {
            return this.lastSuccessfulFetchTimestampMillis;
        };
        StorageCache.prototype.getActiveConfig = function () {
            return this.activeConfig;
        };
        /**
         * Read-ahead getter
         */
        StorageCache.prototype.loadFromStorage = function () {
            return __awaiter(this, void 0, void 0, function () {
                var lastFetchStatusPromise, lastSuccessfulFetchTimestampMillisPromise, activeConfigPromise, lastFetchStatus, lastSuccessfulFetchTimestampMillis, activeConfig;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            lastFetchStatusPromise = this.storage.getLastFetchStatus();
                            lastSuccessfulFetchTimestampMillisPromise = this.storage.getLastSuccessfulFetchTimestampMillis();
                            activeConfigPromise = this.storage.getActiveConfig();
                            return [4 /*yield*/, lastFetchStatusPromise];
                        case 1:
                            lastFetchStatus = _a.sent();
                            if (lastFetchStatus) {
                                this.lastFetchStatus = lastFetchStatus;
                            }
                            return [4 /*yield*/, lastSuccessfulFetchTimestampMillisPromise];
                        case 2:
                            lastSuccessfulFetchTimestampMillis = _a.sent();
                            if (lastSuccessfulFetchTimestampMillis) {
                                this.lastSuccessfulFetchTimestampMillis = lastSuccessfulFetchTimestampMillis;
                            }
                            return [4 /*yield*/, activeConfigPromise];
                        case 3:
                            activeConfig = _a.sent();
                            if (activeConfig) {
                                this.activeConfig = activeConfig;
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Write-through setters
         */
        StorageCache.prototype.setLastFetchStatus = function (status) {
            this.lastFetchStatus = status;
            return this.storage.setLastFetchStatus(status);
        };
        StorageCache.prototype.setLastSuccessfulFetchTimestampMillis = function (timestampMillis) {
            this.lastSuccessfulFetchTimestampMillis = timestampMillis;
            return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);
        };
        StorageCache.prototype.setActiveConfig = function (activeConfig) {
            this.activeConfig = activeConfig;
            return this.storage.setActiveConfig(activeConfig);
        };
        return StorageCache;
    }());

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function registerRemoteConfig() {
        app._registerComponent(new Component(RC_COMPONENT_NAME, remoteConfigFactory, "PUBLIC" /* PUBLIC */).setMultipleInstances(true));
        app.registerVersion(name, version);
        function remoteConfigFactory(container, namespace) {
            /* Dependencies */
            // getImmediate for FirebaseApp will always succeed
            var app$1 = container.getProvider('app-exp').getImmediate();
            // The following call will always succeed because rc has `import '@firebase/installations'`
            var installations = container
                .getProvider('installations-exp-internal')
                .getImmediate();
            // Guards against the SDK being used in non-browser environments.
            if (typeof window === 'undefined') {
                throw ERROR_FACTORY.create("registration-window" /* REGISTRATION_WINDOW */);
            }
            // Normalizes optional inputs.
            var _a = app$1.options, projectId = _a.projectId, apiKey = _a.apiKey, appId = _a.appId;
            if (!projectId) {
                throw ERROR_FACTORY.create("registration-project-id" /* REGISTRATION_PROJECT_ID */);
            }
            if (!apiKey) {
                throw ERROR_FACTORY.create("registration-api-key" /* REGISTRATION_API_KEY */);
            }
            if (!appId) {
                throw ERROR_FACTORY.create("registration-app-id" /* REGISTRATION_APP_ID */);
            }
            namespace = namespace || 'firebase';
            var storage = new Storage(appId, app$1.name, namespace);
            var storageCache = new StorageCache(storage);
            var logger = new Logger(name);
            // Sets ERROR as the default log level.
            // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.
            logger.logLevel = LogLevel.ERROR;
            var restClient = new RestClient(installations, 
            // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.
            app.SDK_VERSION, namespace, projectId, apiKey, appId);
            var retryingClient = new RetryingClient(restClient, storage);
            var cachingClient = new CachingClient(retryingClient, storage, storageCache, logger);
            var remoteConfigInstance = new RemoteConfig(app$1, cachingClient, storageCache, storage, logger);
            // Starts warming cache.
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            ensureInitialized(remoteConfigInstance);
            return remoteConfigInstance;
        }
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // This API is put in a separate file, so we can stub fetchConfig and activate in tests.
    // It's not possible to stub standalone functions from the same module.
    /**
     *
     * Performs fetch and activate operations, as a convenience.
     *
     * @param remoteConfig - the remote config instance
     *
     * @returns A promise which resolves to true if the current call activated the fetched configs.
     * If the fetched configs were already activated, the promise will resolve to false.
     *
     * @public
     */
    function fetchAndActivate(remoteConfig) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fetchConfig(remoteConfig)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, activate(remoteConfig)];
                }
            });
        });
    }

    /**
     * @license
     * Copyright 2020 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /** register component and version */
    registerRemoteConfig();

    exports.activate = activate;
    exports.ensureInitialized = ensureInitialized;
    exports.fetchAndActivate = fetchAndActivate;
    exports.fetchConfig = fetchConfig;
    exports.getAll = getAll;
    exports.getBoolean = getBoolean;
    exports.getNumber = getNumber;
    exports.getRemoteConfig = getRemoteConfig;
    exports.getString = getString;
    exports.getValue = getValue;
    exports.setLogLevel = setLogLevel;

    Object.defineProperty(exports, '__esModule', { value: true });


              }).apply(this, arguments);
            } catch(err) {
                console.error(err);
                throw new Error(
                  'Cannot instantiate firebase-remote-config.js - ' +
                  'be sure to load firebase-app.js first.'
                );
              }

})));


//# sourceMappingURL=firebase.js.map

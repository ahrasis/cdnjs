{"version":3,"sources":["webpack://Navigo/webpack/universalModuleDefinition","webpack://Navigo/./src/constants.ts","webpack://Navigo/./src/utils.ts","webpack://Navigo/./src/Q.ts","webpack://Navigo/./src/middlewares/setLocationPath.ts","webpack://Navigo/./src/middlewares/matchPathToRegisteredRoutes.ts","webpack://Navigo/./src/middlewares/checkForDeprecationMethods.ts","webpack://Navigo/./src/middlewares/checkForForceOp.ts","webpack://Navigo/./src/middlewares/updateBrowserURL.ts","webpack://Navigo/./src/middlewares/checkForLeaveHook.ts","webpack://Navigo/./src/lifecycles.ts","webpack://Navigo/./src/middlewares/checkForAlreadyHook.ts","webpack://Navigo/./src/middlewares/checkForBeforeHook.ts","webpack://Navigo/./src/middlewares/callHandler.ts","webpack://Navigo/./src/middlewares/checkForAfterHook.ts","webpack://Navigo/./src/middlewares/checkForNotFoundHandler.ts","webpack://Navigo/./src/middlewares/errorOut.ts","webpack://Navigo/./src/middlewares/flushCurrent.ts","webpack://Navigo/./src/middlewares/processMatches.ts","webpack://Navigo/./src/index.ts","webpack://Navigo/webpack/bootstrap","webpack://Navigo/webpack/startup","webpack://Navigo/webpack/runtime/define property getters","webpack://Navigo/webpack/runtime/hasOwnProperty shorthand"],"names":["root","factory","exports","module","define","amd","self","this","PARAMETER_REGEXP","WILDCARD_REGEXP","NOT_SURE_REGEXP","getCurrentEnvURL","fallback","windowAvailable","location","pathname","search","hash","clean","s","replace","isString","extractGETParameters","url","tmp","split","slice","join","parseQuery","queryString","query","pairs","i","length","pair","key","decodeURIComponent","Array","isArray","push","matchRoute","currentPath","route","pattern","current","GETParams","params","paramNames","path","full","dots","name","data","regexp","RegExp","match","names","reduce","value","index","regExpResultToParams","pushStateAvailable","window","history","pushState","undefinedOrTrue","obj","Q","funcs","c","done","context","idx","next","splice","moveForward","_setLocationPath","currentLocationPath","instance","_checkForAHash","matchPathToRegisteredRoutes","routes","matches","resolveOptions","strategy","checkForDeprecationMethods","navigateOptions","console","warn","checkForForceOp","force","_setCurrent","_pathToMatchObject","to","if","condition","one","two","isWindowAvailable","isPushStateAvailable","updateBrowserURL","isItUsingHash","historyAPIMethod","stateObj","title","setTimeout","href","checkForLeaveHook","lastResolved","map","oldMatch","_","leaveLoopDone","hooks","leave","matchLocation","foundLifecycle","forEach","already","before","handler","updatePageLinks","after","notFoundLifeCycle","notFoundRoute","_notFoundRoute","notFoundHandled","notFoundMatch","noMatchWarning","processMatches","nextMatch","Navigo","appRoute","genericHooks","DEFAULT_RESOLVE_OPTIONS","destroyed","indexOf","createRoute","String","resolve","options","setLocationPath","call","document","querySelectorAll","link","hasListenerAttached","addEventListener","e","ctrlKey","metaKey","target","tagName","toLowerCase","getAttribute","URL","u","err","source","str","temp","v","parseNavigateOptions","preventDefault","stopPropagation","navigate","pathToMatchObject","on","Object","keys","p","uses","as","off","what","filter","r","destroy","removeEventListener","__popstateListener","notFound","generate","result","getLinkPath","currentLocation","getCurrentLocation","_clean","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","d","definition","o","defineProperty","enumerable","get","prop","prototype","hasOwnProperty"],"mappings":"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","file":"Navigo.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Navigo\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Navigo\"] = factory();\n\telse\n\t\troot[\"Navigo\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn ","export const PARAMETER_REGEXP = /([:*])(\\w+)/g;\nexport const REPLACE_VARIABLE_REGEXP = \"([^/]+)\";\nexport const WILDCARD_REGEXP = /\\*/g;\nexport const REPLACE_WILDCARD = \"(?:.*)\";\nexport const NOT_SURE_REGEXP = /\\/\\?/g;\nexport const REPLACE_NOT_SURE = \"/?([^/]+|)\";\nexport const START_BY_SLASH_REGEXP = \"(?:/^|^)\";\nexport const MATCH_REGEXP_FLAGS = \"\";\n","import { Match, Route, NavigateOptions, ResolveOptions } from \"../index\";\n\nimport {\n  PARAMETER_REGEXP,\n  WILDCARD_REGEXP,\n  REPLACE_VARIABLE_REGEXP,\n  REPLACE_WILDCARD,\n  START_BY_SLASH_REGEXP,\n  MATCH_REGEXP_FLAGS,\n  REPLACE_NOT_SURE,\n  NOT_SURE_REGEXP,\n} from \"./constants\";\n\nexport function getCurrentEnvURL(fallback = \"/\"): string {\n  if (windowAvailable()) {\n    return location.pathname + location.search + location.hash;\n  }\n  return fallback;\n}\nexport function clean(s: string) {\n  return s.replace(/\\/+$/, \"\").replace(/^\\/+/, \"\");\n}\nexport function isString(s: any): boolean {\n  return typeof s === \"string\";\n}\nexport function isFunction(s: any): boolean {\n  return typeof s === \"function\";\n}\nexport function regExpResultToParams(match, names: string[]) {\n  if (names.length === 0) return null;\n  if (!match) return null;\n  return match.slice(1, match.length).reduce((params, value, index) => {\n    if (params === null) params = {};\n    params[names[index]] = decodeURIComponent(value);\n    return params;\n  }, null);\n}\nexport function extractGETParameters(url: string) {\n  const tmp = clean(url).split(/\\?(.*)?$/);\n  return [clean(tmp[0]), tmp.slice(1).join(\"\")];\n}\nexport function parseQuery(queryString: string): Object {\n  var query = {};\n  var pairs = queryString.split(\"&\");\n  for (var i = 0; i < pairs.length; i++) {\n    var pair = pairs[i].split(\"=\");\n    if (pair[0] !== \"\") {\n      let key = decodeURIComponent(pair[0]);\n      if (!query[key]) {\n        query[key] = decodeURIComponent(pair[1] || \"\");\n      } else {\n        if (!Array.isArray(query[key])) query[key] = [query[key]];\n        query[key].push(decodeURIComponent(pair[1] || \"\"));\n      }\n    }\n  }\n  return query;\n}\nexport function matchRoute(currentPath: string, route: Route): false | Match {\n  const [current, GETParams] = extractGETParameters(clean(currentPath));\n  const params = GETParams === \"\" ? null : parseQuery(GETParams);\n  const paramNames = [];\n  let pattern;\n  if (isString(route.path)) {\n    pattern =\n      START_BY_SLASH_REGEXP +\n      clean(route.path as string)\n        .replace(PARAMETER_REGEXP, function (full, dots, name) {\n          paramNames.push(name);\n          return REPLACE_VARIABLE_REGEXP;\n        })\n        .replace(WILDCARD_REGEXP, REPLACE_WILDCARD)\n        .replace(NOT_SURE_REGEXP, REPLACE_NOT_SURE) +\n      \"$\";\n    if (clean(route.path as string) === \"\") {\n      if (clean(current) === \"\") {\n        return {\n          url: current,\n          queryString: GETParams,\n          route: route,\n          data: null,\n          params,\n        };\n      }\n    }\n  } else {\n    pattern = route.path;\n  }\n  const regexp = new RegExp(pattern, MATCH_REGEXP_FLAGS);\n  const match = current.match(regexp);\n\n  if (match) {\n    const data = isString(route.path)\n      ? regExpResultToParams(match, paramNames)\n      : match.slice(1);\n    return {\n      url: current,\n      queryString: GETParams,\n      route: route,\n      data,\n      params,\n    };\n  }\n  return false;\n}\nexport function pushStateAvailable(): boolean {\n  return !!(\n    typeof window !== \"undefined\" &&\n    window.history &&\n    window.history.pushState\n  );\n}\nexport function undefinedOrTrue(obj, key: string): boolean {\n  return typeof obj[key] === \"undefined\" || obj[key] === true;\n}\nexport function parseNavigateOptions(source?: string): NavigateOptions {\n  if (!source) return {};\n  const pairs = source.split(\",\");\n  const options: NavigateOptions = {};\n  let resolveOptions: ResolveOptions;\n\n  pairs.forEach((str) => {\n    const temp = str.split(\":\").map((v) => v.replace(/(^ +| +$)/g, \"\"));\n    switch (temp[0]) {\n      case \"historyAPIMethod\":\n        options.historyAPIMethod = temp[1];\n        break;\n      case \"resolveOptionsStrategy\":\n        if (!resolveOptions) resolveOptions = {};\n        resolveOptions.strategy = temp[1];\n        break;\n      case \"resolveOptionsHash\":\n        if (!resolveOptions) resolveOptions = {};\n        resolveOptions.hash = temp[1] === \"true\";\n        break;\n      case \"updateBrowserURL\":\n      case \"callHandler\":\n      case \"updateState\":\n      case \"force\":\n        options[temp[0]] = temp[1] === \"true\";\n        break;\n    }\n  });\n  if (resolveOptions) {\n    options.resolveOptions = resolveOptions;\n  }\n  return options;\n}\nexport function windowAvailable() {\n  return typeof window !== \"undefined\";\n}\n","type QChild = {\n  type: \"child\";\n  funcs: Array<Function | Array<any> | QChild>;\n};\n\nexport default function Q(\n  funcs: Array<Function | Array<any> | QChild>,\n  c?: any,\n  done?: Function\n) {\n  const context = c || {};\n  let idx = 0;\n\n  (function next() {\n    if (!funcs[idx]) {\n      if (done) {\n        done(context);\n      }\n      return;\n    }\n    if (Array.isArray(funcs[idx])) {\n      funcs.splice(\n        idx,\n        1,\n        ...(funcs[idx][0](context) ? funcs[idx][1] : funcs[idx][2])\n      );\n      next();\n    } else {\n      // console.log(funcs[idx].name + \" / \" + JSON.stringify(context));\n      // console.log(funcs[idx].name);\n      (funcs[idx] as Function)(context, (moveForward) => {\n        if (typeof moveForward === \"undefined\" || moveForward === true) {\n          idx += 1;\n          next();\n        } else if (done) {\n          done(context);\n        }\n      });\n    }\n  })();\n}\n\nQ.if = function (condition: Function, one, two) {\n  if (!Array.isArray(one)) one = [one];\n  if (!Array.isArray(two)) two = [two];\n  return [condition, one, two];\n};\n","import { QContext } from \"../../index\";\nimport { getCurrentEnvURL } from \"../utils\";\n\nexport default function _setLocationPath(context: QContext, done) {\n  if (typeof context.currentLocationPath === \"undefined\") {\n    context.currentLocationPath = getCurrentEnvURL(context.instance.root);\n  }\n  context.currentLocationPath = context.instance._checkForAHash(\n    context.currentLocationPath\n  );\n  done();\n}\n","import { matchRoute } from \"../utils\";\nimport { QContext, Match } from \"../../index\";\n\nexport default function matchPathToRegisteredRoutes(context: QContext, done) {\n  for (let i = 0; i < context.instance.routes.length; i++) {\n    const route = context.instance.routes[i];\n    const match: false | Match = matchRoute(context.currentLocationPath, route);\n    if (match) {\n      if (!context.matches) context.matches = [];\n      context.matches.push(match);\n      if (context.resolveOptions.strategy === \"ONE\") {\n        done();\n        return;\n      }\n    }\n  }\n  done();\n}\n","import { QContext } from \"../../index\";\n\nexport default function checkForDeprecationMethods(context: QContext, done) {\n  if (context.navigateOptions) {\n    if (typeof context.navigateOptions[\"shouldResolve\"] !== \"undefined\") {\n      console.warn(\n        `\"shouldResolve\" is deprecated. Please check the documentation.`\n      );\n    }\n    if (typeof context.navigateOptions[\"silent\"] !== \"undefined\") {\n      console.warn(`\"silent\" is deprecated. Please check the documentation.`);\n    }\n  }\n  done();\n}\n","import { QContext } from \"../../index\";\n\nexport default function checkForForceOp(context: QContext, done) {\n  if (context.navigateOptions.force === true) {\n    context.instance._setCurrent([\n      context.instance._pathToMatchObject(context.to),\n    ]);\n    done(false);\n  } else {\n    done();\n  }\n}\n","import { undefinedOrTrue, pushStateAvailable, windowAvailable } from \"../utils\";\nimport { QContext } from \"../../index\";\n\nconst isWindowAvailable = windowAvailable();\nconst isPushStateAvailable = pushStateAvailable();\n\nexport default function updateBrowserURL(context: QContext, done) {\n  if (undefinedOrTrue(context.navigateOptions, \"updateBrowserURL\")) {\n    const value = `${context.to}`.replace(/\\/\\//g, \"/\"); // making sure that we don't have two slashes\n    const isItUsingHash =\n      isWindowAvailable &&\n      context.resolveOptions &&\n      context.resolveOptions.hash === true;\n    if (isPushStateAvailable) {\n      history[context.navigateOptions.historyAPIMethod || \"pushState\"](\n        context.navigateOptions.stateObj || {},\n        context.navigateOptions.title || \"\",\n        isItUsingHash ? `#${value}` : value\n      );\n      // This is to solve a nasty bug where the page doesn't scroll to the anchor.\n      // We set a microtask to update the hash only.\n      if (location && location.hash) {\n        setTimeout(() => {\n          let tmp = location.hash;\n          location.hash = \"\";\n          location.hash = tmp;\n        }, 1);\n      }\n    } else if (isWindowAvailable) {\n      window.location.href = context.to;\n    }\n  }\n  done();\n}\n","import { QContext } from \"../../index\";\nimport Q from \"../Q\";\n\nexport default function checkForLeaveHook(context: QContext, done) {\n  const instance = context.instance;\n  if (!instance.lastResolved()) {\n    done();\n    return;\n  }\n  Q(\n    [\n      ...instance.lastResolved().map((oldMatch) => {\n        return (_, leaveLoopDone) => {\n          // no leave hook\n          if (!oldMatch.route.hooks || !oldMatch.route.hooks.leave) {\n            leaveLoopDone();\n            return;\n          }\n          // no match or different path\n          if (\n            !context.match ||\n            !instance.matchLocation(\n              oldMatch.route.path as string,\n              context.match.url\n            )\n          ) {\n            oldMatch.route.hooks.leave((moveForward: boolean) => {\n              if (typeof moveForward === \"undefined\" || moveForward === true) {\n                leaveLoopDone();\n              }\n            }, context.match);\n            return;\n          } else {\n            leaveLoopDone();\n          }\n        };\n      }),\n    ],\n    {},\n    () => done()\n  );\n}\n","import { QContext } from \"../index\";\nimport Q from \"./Q\";\nimport checkForLeaveHook from \"./middlewares/checkForLeaveHook\";\nimport checkForBeforeHook from \"./middlewares/checkForBeforeHook\";\nimport callHandler from \"./middlewares/callHandler\";\nimport checkForAfterHook from \"./middlewares/checkForAfterHook\";\nimport checkForAlreadyHook from \"./middlewares/checkForAlreadyHook\";\nimport checkForNotFoundHandler from \"./middlewares/checkForNotFoundHandler\";\nimport errorOut from \"./middlewares/errorOut\";\nimport flushCurrent from \"./middlewares/flushCurrent\";\n\nexport const foundLifecycle = [\n  checkForAlreadyHook,\n  checkForLeaveHook,\n  checkForBeforeHook,\n  callHandler,\n  checkForAfterHook,\n];\n\nexport const notFoundLifeCycle = [\n  checkForNotFoundHandler,\n  Q.if(({ notFoundHandled }: QContext) => notFoundHandled, foundLifecycle, [\n    errorOut,\n    checkForLeaveHook,\n  ]),\n  flushCurrent,\n];\n","import { QContext } from \"../../index\";\n\nexport default function checkForAlreadyHook(context: QContext, done) {\n  const current = context.instance.lastResolved();\n  if (\n    current &&\n    current[0] &&\n    current[0].route === context.match.route &&\n    current[0].url === context.match.url &&\n    current[0].queryString === context.match.queryString\n  ) {\n    current.forEach((c) => {\n      if (c.route.hooks && c.route.hooks.already) {\n        c.route.hooks.already(context.match);\n      }\n    });\n    done(false);\n    return;\n  }\n  done();\n}\n","import { QContext } from \"../../index\";\n\nexport default function checkForBeforeHook(context: QContext, done) {\n  if (context.match.route.hooks && context.match.route.hooks.before) {\n    context.match.route.hooks.before((moveForward: boolean) => {\n      if (typeof moveForward === \"undefined\" || moveForward === true) {\n        done();\n      }\n    }, context.match);\n  } else {\n    done();\n  }\n}\n","import { QContext } from \"../../index\";\nimport { undefinedOrTrue } from \"../utils\";\n\nexport default function callHandler(context: QContext, done) {\n  if (undefinedOrTrue(context.navigateOptions, \"updateState\")) {\n    context.instance._setCurrent(context.matches);\n  }\n  if (undefinedOrTrue(context.navigateOptions, \"callHandler\")) {\n    context.match.route.handler(context.match);\n  }\n  context.instance.updatePageLinks();\n  done();\n}\n","import { QContext } from \"../../index\";\n\nexport default function _checkForAfterHook(context: QContext, done) {\n  if (context.match.route.hooks && context.match.route.hooks.after) {\n    context.match.route.hooks.after(context.match);\n  }\n  done();\n}\n","import { QContext, Match } from \"../../index\";\nimport { parseQuery, extractGETParameters, clean } from \"../utils\";\n\nexport default function checkForNotFoundHandler(context: QContext, done) {\n  const notFoundRoute = context.instance._notFoundRoute;\n  if (notFoundRoute) {\n    context.notFoundHandled = true;\n    const [url, queryString] = extractGETParameters(\n      context.currentLocationPath\n    );\n    notFoundRoute.path = clean(url);\n    const notFoundMatch: Match = {\n      url: notFoundRoute.path,\n      queryString,\n      data: null,\n      route: notFoundRoute,\n      params: queryString !== \"\" ? parseQuery(queryString) : null,\n    };\n    context.matches = [notFoundMatch];\n    context.match = notFoundMatch;\n  }\n  done();\n}\n","import { QContext } from \"../../index\";\n\nexport default function errorOut(context: QContext, done) {\n  if (\n    !context.resolveOptions ||\n    context.resolveOptions.noMatchWarning === false ||\n    typeof context.resolveOptions.noMatchWarning === \"undefined\"\n  )\n    console.warn(\n      `Navigo: \"${context.currentLocationPath}\" didn't match any of the registered routes.`\n    );\n  done();\n}\n","import { QContext } from \"../../index\";\n\nexport default function flushCurrent(context: QContext, done) {\n  context.instance._setCurrent(null);\n  done();\n}\n","import { QContext } from \"../../index\";\nimport Q from \"../Q\";\nimport { foundLifecycle } from \"../lifecycles\";\n\nexport default function processMatches(context: QContext, done) {\n  let idx = 0;\n  // console.log(\n  //   \"_processMatches matches=\" +\n  //     (context.matches ? context.matches.length : 0)\n  // );\n  (function nextMatch() {\n    if (idx === context.matches.length) {\n      done();\n      return;\n    }\n    Q(\n      foundLifecycle,\n      { ...context, match: context.matches[idx] },\n      function end() {\n        idx += 1;\n        nextMatch();\n      }\n    );\n  })();\n}\n","import {\n  Match,\n  Route,\n  RouteHooks,\n  QContext,\n  NavigateOptions,\n  ResolveOptions,\n} from \"../index\";\nimport NavigoRouter from \"../index\";\nimport {\n  pushStateAvailable,\n  matchRoute,\n  parseQuery,\n  extractGETParameters,\n  isFunction,\n  isString,\n  clean,\n  parseNavigateOptions,\n  windowAvailable,\n  getCurrentEnvURL,\n} from \"./utils\";\nimport Q from \"./Q\";\nimport setLocationPath from \"./middlewares/setLocationPath\";\nimport matchPathToRegisteredRoutes from \"./middlewares/matchPathToRegisteredRoutes\";\nimport checkForDeprecationMethods from \"./middlewares/checkForDeprecationMethods\";\nimport checkForForceOp from \"./middlewares/checkForForceOp\";\nimport updateBrowserURL from \"./middlewares/updateBrowserURL\";\nimport processMatches from \"./middlewares/processMatches\";\n\nimport { notFoundLifeCycle } from \"./lifecycles\";\n\nexport default function Navigo(\n  appRoute?: string,\n  resolveOptions?: ResolveOptions\n) {\n  let DEFAULT_RESOLVE_OPTIONS: ResolveOptions = resolveOptions || {\n    strategy: \"ONE\",\n    hash: false,\n    noMatchWarning: false,\n  };\n  let self: NavigoRouter = this;\n  let root = \"/\";\n  let current: Match[] = null;\n  let routes: Route[] = [];\n  let destroyed = false;\n  let genericHooks: RouteHooks;\n\n  const isPushStateAvailable = pushStateAvailable();\n  const isWindowAvailable = windowAvailable();\n\n  if (!appRoute) {\n    console.warn(\n      'Navigo requires a root path in its constructor. If not provided will use \"/\" as default.'\n    );\n  } else {\n    root = clean(appRoute);\n  }\n\n  function _checkForAHash(url: string): string {\n    if (url.indexOf(\"#\") >= 0) {\n      if (DEFAULT_RESOLVE_OPTIONS.hash === true) {\n        url = url.split(\"#\")[1] || \"/\";\n      } else {\n        url = url.split(\"#\")[0];\n      }\n    }\n    return url;\n  }\n\n  // public APIs\n  function createRoute(\n    path: string | RegExp,\n    handler: Function,\n    hooks: RouteHooks,\n    name?: string\n  ): Route {\n    path = isString(path) ? clean(`${root}/${clean(path as string)}`) : path;\n    return {\n      name: name || String(path),\n      path,\n      handler,\n      hooks,\n    };\n  }\n\n  function on(\n    path: string | Function | Object | RegExp,\n    handler?: Function,\n    hooks?: RouteHooks\n  ) {\n    if (typeof path === \"object\" && !(path instanceof RegExp)) {\n      Object.keys(path).forEach((p) => {\n        if (typeof path[p] === \"function\") {\n          this.on(p, path[p]);\n        } else {\n          const { uses: handler, as: name, hooks } = path[p];\n          routes.push(createRoute(p, handler, hooks || genericHooks, name));\n        }\n      });\n      return this;\n    } else if (typeof path === \"function\") {\n      hooks = handler as RouteHooks;\n      handler = path as Function;\n      path = root;\n    }\n    routes.push(\n      createRoute(path as string | RegExp, handler, hooks || genericHooks)\n    );\n    return this;\n  }\n  function resolve(\n    currentLocationPath?: string,\n    options?: ResolveOptions\n  ): false | Match[] {\n    const context: QContext = {\n      instance: self,\n      currentLocationPath,\n      navigateOptions: {},\n      resolveOptions: options || DEFAULT_RESOLVE_OPTIONS,\n    };\n    Q(\n      [\n        setLocationPath,\n        matchPathToRegisteredRoutes,\n        Q.if(\n          ({ matches }: QContext) => {\n            // console.log(`${currentLocationPath} -> Matches: ${matches.length}`);\n            return matches && matches.length > 0;\n          },\n          processMatches,\n          notFoundLifeCycle\n        ),\n      ],\n      context\n    );\n\n    return context.matches ? context.matches : false;\n  }\n  function navigate(to: string, navigateOptions?: NavigateOptions): void {\n    to = `${clean(root)}/${clean(to)}`;\n    const context: QContext = {\n      instance: self,\n      to,\n      navigateOptions: navigateOptions || {},\n      resolveOptions:\n        navigateOptions && navigateOptions.resolveOptions\n          ? navigateOptions.resolveOptions\n          : DEFAULT_RESOLVE_OPTIONS,\n      currentLocationPath: _checkForAHash(to),\n    };\n    Q(\n      [\n        checkForDeprecationMethods,\n        checkForForceOp,\n        matchPathToRegisteredRoutes,\n        Q.if(\n          ({ matches }: QContext) => matches && matches.length > 0,\n          processMatches,\n          notFoundLifeCycle\n        ),\n        updateBrowserURL,\n      ],\n      context\n    );\n  }\n  function off(what: string | RegExp | Function) {\n    this.routes = routes = routes.filter((r) => {\n      if (isString(what)) {\n        return clean(r.path as string) !== clean(what as string);\n      } else if (isFunction(what)) {\n        return what !== r.handler;\n      }\n      return String(r.path) !== String(what);\n    });\n    return this;\n  }\n  function listen() {\n    if (isPushStateAvailable) {\n      this.__popstateListener = () => {\n        resolve();\n      };\n      window.addEventListener(\"popstate\", this.__popstateListener);\n    }\n  }\n  function destroy() {\n    this.routes = routes = [];\n    if (isPushStateAvailable) {\n      window.removeEventListener(\"popstate\", this.__popstateListener);\n    }\n    this.destroyed = destroyed = true;\n  }\n  function notFound(handler, hooks?: RouteHooks) {\n    self._notFoundRoute = createRoute(\n      \"*\",\n      handler,\n      hooks || genericHooks,\n      \"__NOT_FOUND__\"\n    );\n    return this;\n  }\n  function updatePageLinks() {\n    if (!isWindowAvailable) return;\n    findLinks().forEach((link) => {\n      if (!link.hasListenerAttached) {\n        link.addEventListener(\"click\", function (e) {\n          if (\n            (e.ctrlKey || e.metaKey) &&\n            e.target.tagName.toLowerCase() === \"a\"\n          ) {\n            return false;\n          }\n          let location = link.getAttribute(\"href\");\n          if (typeof location === \"undefined\" || location === null) {\n            return false;\n          }\n          // handling absolute paths\n          if (location.match(/^(http|https)/) && typeof URL !== \"undefined\") {\n            try {\n              const u = new URL(location);\n              location = u.pathname + u.search;\n            } catch (err) {}\n          }\n          const options = parseNavigateOptions(\n            link.getAttribute(\"data-navigo-options\")\n          );\n\n          if (!destroyed) {\n            e.preventDefault();\n            e.stopPropagation();\n            self.navigate(clean(location), options);\n          }\n        });\n        link.hasListenerAttached = true;\n      }\n    });\n    return self;\n  }\n  function findLinks() {\n    if (isWindowAvailable) {\n      return [].slice.call(document.querySelectorAll(\"[data-navigo]\"));\n    }\n    return [];\n  }\n  function link(path: string) {\n    return `/${root}/${clean(path)}`;\n  }\n  function setGenericHooks(hooks: RouteHooks) {\n    genericHooks = hooks;\n    return this;\n  }\n  function lastResolved(): Match[] | null {\n    return current;\n  }\n  function generate(name: string, data?: Object): string {\n    const result = routes.reduce((result, route) => {\n      let key;\n\n      if (route.name === name) {\n        result = route.path as string;\n        for (key in data) {\n          result = result.replace(\":\" + key, data[key]);\n        }\n      }\n      return result;\n    }, \"\");\n    return !result.match(/^\\//) ? `/${result}` : result;\n  }\n  function getLinkPath(link) {\n    return link.getAttribute(\"href\");\n  }\n  function pathToMatchObject(path: string): Match {\n    const [url, queryString] = extractGETParameters(clean(path));\n    const params = queryString === \"\" ? null : parseQuery(queryString);\n    const route = createRoute(url, () => {}, genericHooks, url);\n    return {\n      url,\n      queryString,\n      route,\n      data: null,\n      params: params,\n    };\n  }\n  function getCurrentLocation(): Match {\n    return pathToMatchObject(\n      clean(getCurrentEnvURL(root)).replace(new RegExp(`^${root}`), \"\")\n    );\n  }\n  function directMatchWithRegisteredRoutes(path: string): false | Match[] {\n    const context: QContext = {\n      instance: self,\n      currentLocationPath: path,\n      navigateOptions: {},\n      resolveOptions: DEFAULT_RESOLVE_OPTIONS,\n    };\n    matchPathToRegisteredRoutes(context, () => {});\n    return context.matches ? context.matches : false;\n  }\n  function directMatchWithLocation(\n    path: string,\n    currentLocation?: string\n  ): false | Match {\n    const context: QContext = {\n      instance: self,\n      currentLocationPath: currentLocation,\n    };\n    setLocationPath(context, () => {});\n    path = clean(path);\n    const match = matchRoute(context.currentLocationPath, {\n      name: path,\n      path,\n      handler: () => {},\n      hooks: {},\n    });\n    return match ? match : false;\n  }\n\n  this.root = root;\n  this.routes = routes;\n  this.destroyed = destroyed;\n  this.current = current;\n\n  this.on = on;\n  this.off = off;\n  this.resolve = resolve;\n  this.navigate = navigate;\n  this.destroy = destroy;\n  this.notFound = notFound;\n  this.updatePageLinks = updatePageLinks;\n  this.link = link;\n  this.hooks = setGenericHooks;\n  this.extractGETParameters = (url) =>\n    extractGETParameters(_checkForAHash(url));\n  this.lastResolved = lastResolved;\n  this.generate = generate;\n  this.getLinkPath = getLinkPath;\n  this.match = directMatchWithRegisteredRoutes;\n  this.matchLocation = directMatchWithLocation;\n  this.getCurrentLocation = getCurrentLocation;\n  this._pathToMatchObject = pathToMatchObject;\n  this._clean = clean;\n  this._checkForAHash = _checkForAHash;\n  this._setCurrent = (c) => (current = self.current = c);\n\n  listen.call(this);\n  updatePageLinks.call(this);\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(184);\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)"],"sourceRoot":""}
{"version":3,"file":"selecto.min.js","sources":["../src/utils.ts","../src/consts.ts","../src/Selecto.tsx","../src/index.umd.ts"],"sourcesContent":["import { Hypertext, Rect } from \"./types\";\nimport { IObject, addClass, hasClass, convertUnitSize, caculateBoundSize } from \"@daybrush/utils\";\n\nexport function getClient(e: MouseEvent | TouchEvent) {\n    if (\"touches\" in e) {\n        const touch = e.touches[0] || e.changedTouches[0];\n\n        return {\n            clientX: touch.clientX,\n            clientY: touch.clientY,\n        };\n    } else {\n        return {\n            clientX: e.clientX,\n            clientY: e.clientY,\n        };\n    }\n}\n\nexport function createElement(\n    jsx: Hypertext,\n    prevTarget?: HTMLElement | SVGElement,\n    container?: HTMLElement | SVGElement,\n) {\n    const { tag, children, attributes, className, style } = jsx;\n    const el = prevTarget || document.createElement(tag) as HTMLElement | SVGElement;\n\n    for (const name in attributes) {\n        el.setAttribute(name, attributes[name]);\n    }\n    const elChildren = el.children;\n    children.forEach((child, i) => {\n        createElement(child, elChildren[i] as HTMLElement | SVGElement, el);\n    });\n    if (className) {\n        className.split(\" \").forEach(name => {\n            if (!hasClass(el, name)) {\n                addClass(el, name);\n            }\n        });\n    }\n    if (style) {\n        const elStyle = el.style;\n        for (const name in style) {\n            elStyle[name] = style[name];\n        }\n    }\n    if (!prevTarget && container) {\n        container.appendChild(el);\n    }\n    return el;\n}\nexport function h(\n    tag: string,\n    attrs: IObject<any>,\n    ...children: Hypertext[]\n): Hypertext {\n    const {\n        className = \"\",\n        style = {},\n        ...attributes\n    } = attrs || {};\n    return {\n        tag,\n        className,\n        style,\n        attributes,\n        children,\n    };\n}\n\nexport function diffValue<T>(prev: T, cur: T, func: (prev: T, cur: T) => void) {\n    if (prev !== cur) {\n        func(prev, cur);\n    }\n}\n\nexport function getRect(\n    e: any, ratio: number,\n    boundArea: { left: number, right: number, top: number, bottom: number},\n): Rect {\n    let {\n        distX = 0,\n        distY = 0,\n    } = e;\n    const { startX, startY } = e.datas;\n\n    if (ratio > 0) {\n        const nextHeight = Math.sqrt((distX * distX + distY * distY) / (1 + ratio * ratio));\n        const nextWidth = ratio * nextHeight;\n\n        distX = (distX >= 0 ? 1 : -1) * nextWidth;\n        distY = (distY >= 0 ? 1 : -1) * nextHeight;\n    }\n    let width = Math.abs(distX);\n    let height = Math.abs(distY);\n\n    const maxWidth = distX < 0 ? startX - boundArea.left : boundArea.right - startX;\n    const maxHeight = distY < 0 ? startY - boundArea.top : boundArea.bottom - startY;\n\n    [width, height] = caculateBoundSize([width, height], [0, 0], [maxWidth, maxHeight], !!ratio);\n    distX = (distX >= 0 ? 1 : -1) * width;\n    distY = (distY >= 0 ? 1 : -1) * height;\n\n    const tx = Math.min(0, distX);\n    const ty = Math.min(0, distY);\n    const left = startX + tx;\n    const top = startY + ty;\n\n    return {\n        left,\n        top,\n        right: left + width,\n        bottom: top + height,\n        width,\n        height,\n    };\n}\n","import styled from \"css-styled\";\nimport { SelectoOptions } from \"./types\";\n\nexport const injector = styled(`\n:host {\n    position: fixed;\n    display: none;\n    border: 1px solid #4af;\n    background: rgba(68, 170, 255, 0.5);\n    z-index: 100;\n}\n`);\n\n/**\n * @memberof Selecto\n */\nexport const CLASS_NAME = `selecto-selection ${injector.className}`;\n\nexport const PROPERTIES = [\n    \"boundContainer\",\n    \"selectableTargets\",\n    \"selectByClick\",\n    \"selectFromInside\",\n    \"continueSelect\",\n    \"toggleContinueSelect\",\n    \"keyContainer\",\n    \"hitRate\",\n    \"scrollOptions\",\n    \"checkInput\",\n    \"preventDefault\",\n    \"ratio\",\n] as const;\n/**\n * @memberof Selecto\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    \"dragContainer\",\n    \"cspNonce\",\n    ...PROPERTIES,\n] as const;\n\nexport const OPTION_TYPES: { [key in keyof SelectoOptions]: any } = {\n    boundContainer: null,\n    target: null,\n    container: null,\n    dragContainer: null,\n    selectableTargets: Array,\n    selectByClick: Boolean,\n    selectFromInside: Boolean,\n    continueSelect: Boolean,\n    toggleContinueSelect: Array,\n    keyContainer: null,\n    hitRate: Number,\n    scrollOptions: Object,\n    checkInput: Boolean,\n    preventDefault: Boolean,\n    cspNonce: String,\n    ratio: Number,\n};\n\n/**\n * @memberof Selecto\n */\nexport const EVENTS = [\n    \"dragStart\",\n    \"drag\",\n    \"dragEnd\",\n    \"selectStart\",\n    \"select\",\n    \"selectEnd\",\n    \"keydown\",\n    \"keyup\",\n    \"scroll\",\n] as const;\n\n/**\n * @memberof Selecto\n */\nexport const METHODS = [\n    \"clickTarget\",\n    \"setSelectedTargets\",\n    \"triggerDragStart\",\n] as const;\n","import EventEmitter from \"@scena/event-emitter\";\nimport Gesto, { OnDrag, OnDragEnd, OnDragStart } from \"gesto\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport { isObject, camelize, IObject, addEvent, removeEvent, isArray, isString } from \"@daybrush/utils\";\nimport ChildrenDiffer, { diff, ChildrenDiffResult } from \"@egjs/children-differ\";\nimport DragScroll from \"@scena/dragscroll\";\nimport KeyController, { getCombi } from \"keycon\";\nimport { createElement, h, getClient, diffValue, getRect } from \"./utils\";\nimport { SelectoOptions, Rect, SelectoProperties, OnDragEvent, SelectoEvents } from \"./types\";\nimport { PROPERTIES, injector, CLASS_NAME } from \"./consts\";\n\n/**\n * Selecto.js is a component that allows you to select elements in the drag area using the mouse or touch.\n * @sort 1\n * @extends EventEmitter\n */\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function set(value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function set(value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\nclass Selecto extends EventEmitter<SelectoEvents> {\n    public options: SelectoOptions;\n    private target!: HTMLElement | SVGElement;\n    private dragContainer!: Element | Window | Element[];\n    private container!: HTMLElement;\n    private gesto!: Gesto;\n    private injectResult!: InjectResult;\n    private selectedTargets: Array<HTMLElement | SVGElement> = [];\n    private differ = new ChildrenDiffer<HTMLElement | SVGElement>();\n    private dragScroll: DragScroll = new DragScroll();\n    private keycon!: KeyController;\n    /**\n     *\n     */\n    constructor(\n        options: Partial<SelectoOptions> = {},\n    ) {\n        super();\n        this.target = options.target;\n        this.container = options.container;\n        this.options = {\n            target: null,\n            container: null,\n            dragContainer: null,\n            selectableTargets: [],\n            selectByClick: true,\n            selectFromInside: true,\n            hitRate: 100,\n            continueSelect: false,\n            toggleContinueSelect: null,\n            keyContainer: null,\n            scrollOptions: undefined,\n            checkInput: false,\n            preventDefault: false,\n            boundContainer: false,\n            cspNonce: \"\",\n            ratio: 0,\n            ...options,\n        };\n        this.initElement();\n        this.initDragScroll();\n        this.setKeyController();\n    }\n    /**\n     * You can set the currently selected targets.\n     *\n     */\n    public setSelectedTargets(selectedTargets: Array<HTMLElement | SVGElement>): this {\n        this.selectedTargets = selectedTargets;\n\n        if (this.gesto.isFlag()) {\n            this.findSelectableTargets(this.gesto.getEventDatas());\n            this.gesto.setEventDatas({\n                startSelectedTargets: selectedTargets,\n            });\n        }\n        this.differ = new ChildrenDiffer(selectedTargets);\n\n        return this;\n    }\n    /**\n     * You can get the currently selected targets.\n     */\n    public getSelectedTargets(): Array<HTMLElement | SVGElement> {\n        return this.selectedTargets;\n    }\n    public setKeyContainer(keyContainer: HTMLElement | Document | Window) {\n        const options = this.options;\n\n        diffValue(options.keyContainer, keyContainer, () => {\n            options.keyContainer = keyContainer;\n\n            this.setKeyController();\n        });\n    }\n    public setToggleContinueSelect(toggleContinueSelect: string[][] | string[] | string) {\n        const options = this.options;\n\n        diffValue(options.toggleContinueSelect, toggleContinueSelect, () => {\n            options.toggleContinueSelect = toggleContinueSelect;\n\n            this.setKeyEvent();\n        });\n    }\n    public setPreventDefault(value: boolean) {\n        this.gesto.options.preventDefault = value;\n    }\n    public setCheckInput(value: boolean) {\n        this.gesto.options.checkInput = value;\n    }\n    /**\n     * `OnDragStart` is triggered by an external event.\n     * @param - external event\n     * @example\n     * import Selecto from \"selecto\";\n     *\n     * const selecto = new Selecto();\n     *\n     * window.addEventListener(\"mousedown\", e => {\n     *   selecto.triggerDragStart(e);\n     * });\n     */\n    public triggerDragStart(e: MouseEvent | TouchEvent) {\n        this.gesto.triggerDragStart(e);\n        return this;\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.keycon && this.keycon.destroy();\n        this.gesto.unset();\n        this.injectResult.destroy();\n        removeEvent(document, \"selectstart\", this.onDocumentSelectStart);\n\n        this.keycon = null;\n        this.gesto = null;\n        this.injectResult = null;\n        this.target = null;\n        this.container = null;\n        this.options = null;\n    }\n\n    /**\n     * External click or mouse events can be applied to the selecto.\n     * @params - Extenal click or mouse event\n     * @params - Specify the clicked target directly.\n     */\n    public clickTarget(e: MouseEvent | TouchEvent, clickedTarget?: Element): this {\n        const { clientX, clientY } = getClient(e);\n        const dragEvent = {\n            datas: {},\n            clientX,\n            clientY,\n            inputEvent: e,\n            stop: () => {\n                return false;\n            },\n        } as any;\n        if (this.onDragStart(dragEvent, clickedTarget)) {\n            this.onDragEnd(dragEvent);\n        }\n        return this;\n    }\n    private setKeyController() {\n        const { keyContainer, toggleContinueSelect } = this.options;\n\n        if (this.keycon) {\n            this.keycon.destroy();\n            this.keycon = null;\n        }\n        if (toggleContinueSelect) {\n            this.keycon = new KeyController(keyContainer || window);\n            this.keycon.keydown(this.onKeyDown).keyup(this.onKeyUp).on(\"blur\", this.onBlur);\n        }\n    }\n    private setKeyEvent() {\n        const { toggleContinueSelect } = this.options;\n        if (!toggleContinueSelect || this.keycon) {\n            return;\n        }\n        this.setKeyController();\n    }\n    private initElement() {\n        this.target = createElement(\n            <div className={CLASS_NAME}></div> as any,\n            this.target,\n            this.container,\n        );\n\n        const target = this.target;\n\n        const { dragContainer, checkInput, preventDefault } = this.options;\n        this.dragContainer = typeof dragContainer === \"string\"\n            ? [].slice.call(document.querySelectorAll(dragContainer))\n            : (this.options.dragContainer || this.target.parentNode as any);\n        this.gesto = new Gesto(this.dragContainer, {\n            checkWindowBlur: true,\n            container: window,\n            checkInput,\n            preventDefault,\n        }).on({\n            dragStart: this.onDragStart,\n            drag: this.onDrag,\n            dragEnd: this.onDragEnd,\n        });\n        addEvent(document, \"selectstart\", this.onDocumentSelectStart);\n\n        this.injectResult = injector.inject(target, {\n            nonce: this.options.cspNonce,\n        });\n    }\n    private hitTest(\n        selectRect: Rect,\n        clientX: number,\n        clientY: number,\n        targets: Array<HTMLElement | SVGElement>,\n        rects: Rect[],\n    ) {\n        const { hitRate, selectByClick } = this.options;\n        const { left, top, right, bottom } = selectRect;\n\n        return targets.filter((target, i) => {\n            const {\n                left: rectLeft,\n                top: rectTop,\n                right: rectRight,\n                bottom: rectBottom,\n            } = rects[i];\n            const isStart\n                = rectLeft <= clientX\n                && clientX <= rectRight\n                && rectTop <= clientY\n                && clientY <= rectBottom;\n            const rectSize = (rectRight - rectLeft) * (rectBottom - rectTop);\n            const testLeft = Math.max(rectLeft, left);\n            const testRight = Math.min(rectRight, right);\n            const testTop = Math.max(rectTop, top);\n            const testBottom = Math.min(rectBottom, bottom);\n\n            if (selectByClick && isStart) {\n                return true;\n            }\n            if (testRight < testLeft || testBottom < testTop) {\n                return false;\n            }\n            const rate = Math.round((testRight - testLeft) * (testBottom - testTop) / rectSize * 100);\n\n            if (rate >= hitRate) {\n                return true;\n            }\n            return false;\n        });\n    }\n    private initDragScroll() {\n        this.dragScroll.on(\"scroll\", ({ container, direction }) => {\n            this.trigger(\"scroll\", {\n                container,\n                direction,\n            });\n        }).on(\"move\", ({ offsetX, offsetY, inputEvent }) => {\n            const datas = inputEvent.datas;\n            datas.startX -= offsetX;\n            datas.startY -= offsetY;\n            datas.selectableRects.forEach(rect => {\n                rect.top -= offsetY;\n                rect.bottom -= offsetY;\n                rect.left -= offsetX;\n                rect.right -= offsetX;\n            });\n            this.gesto.scrollBy(offsetX, offsetY, inputEvent.inputEvent, false);\n\n            inputEvent.distX += offsetX;\n            inputEvent.distY += offsetY;\n            this.check(inputEvent);\n        });\n    }\n    private getSelectableTargets() {\n        const selectableTargets: Array<HTMLElement | SVGElement> = [];\n\n        this.options.selectableTargets.forEach(target => {\n            if (isObject(target)) {\n                selectableTargets.push(target);\n            } else {\n                const elements = [].slice.call(document.querySelectorAll(target));\n\n                elements.forEach(el => {\n                    selectableTargets.push(el);\n                });\n            }\n        });\n\n        return selectableTargets;\n    }\n    private passSelectedTargets(passedTargets: Array<HTMLElement | SVGElement>) {\n        const {\n            list,\n            prevList,\n            added,\n            removed,\n        } = diff(this.selectedTargets, passedTargets) as ChildrenDiffResult<HTMLElement | SVGElement>;\n\n        return added.map(index => list[index]).concat(removed.map(index => prevList[index]));\n    }\n    private select(\n        selectedTargets: Array<HTMLElement | SVGElement>, rect: Rect, inputEvent: any, isStart?: boolean) {\n        const {\n            added,\n            removed,\n            prevList,\n            list,\n        } = this.differ.update(selectedTargets);\n\n        if (isStart) {\n            /**\n             * When the select(drag) starts, the selectStart event is called.\n             * @memberof Selecto\n             * @event selectStart\n             * @param {Selecto.OnSelect} - Parameters for the selectStart event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"selectStart\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * }).on(\"selectEnd\", e => {\n             *   e.afterAdded.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.afterRemoved.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.trigger(\"selectStart\", {\n                selected: selectedTargets,\n                added: added.map(index => list[index]),\n                removed: removed.map(index => prevList[index]),\n                rect,\n                inputEvent,\n            });\n        }\n        if (added.length || removed.length) {\n            /**\n             * When the select in real time, the select event is called.\n             * @memberof Selecto\n             * @event select\n             * @param {Selecto.OnSelect} - Parameters for the select event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"select\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.trigger(\"select\", {\n                selected: selectedTargets,\n                added: added.map(index => list[index]),\n                removed: removed.map(index => prevList[index]),\n                rect,\n                inputEvent,\n            });\n        }\n    }\n    private selectEnd(\n        startSelectedTargets: Array<HTMLElement | SVGElement>,\n        selectedTargets: Array<HTMLElement | SVGElement>,\n        rect: Rect,\n        e: OnDragEvent,\n    ) {\n        const { inputEvent, isDouble } = e;\n        const {\n            added,\n            removed,\n            prevList,\n            list,\n        } = diff(startSelectedTargets, selectedTargets);\n        const {\n            added: afterAdded,\n            removed: afterRemoved,\n            prevList: afterPrevList,\n            list: afterList,\n        } = diff(this.selectedTargets, selectedTargets);\n        const type = inputEvent && inputEvent.type;\n        const isDragStart = type === \"mousedown\" || type === \"touchstart\";\n\n        /**\n         * When the select(dragEnd or click) ends, the selectEnd event is called.\n         * @memberof Selecto\n         * @event selectEnd\n         * @param {Selecto.OnSelectEnd} - Parameters for the selectEnd event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"selectStart\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * }).on(\"selectEnd\", e => {\n         *   e.afterAdded.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.afterRemoved.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"selectEnd\", {\n            selected: selectedTargets,\n            added: added.map(index => list[index]),\n            removed: removed.map(index => prevList[index]),\n            afterAdded: afterAdded.map(index => afterList[index]),\n            afterRemoved: afterRemoved.map(index => afterPrevList[index]),\n            isDragStart,\n            isDouble: !!isDouble,\n            rect,\n            inputEvent,\n        });\n    }\n    private findSelectableTargets(datas: any) {\n        const selectableTargets = this.getSelectableTargets();\n        const selectableRects = selectableTargets.map(target => {\n            const rect = target.getBoundingClientRect();\n            const { left, top, width, height } = rect;\n\n            return {\n                left,\n                top,\n                right: left + width,\n                bottom: top + height,\n                width,\n                height,\n            };\n        });\n        datas.selectableTargets = selectableTargets;\n        datas.selectableRects = selectableRects;\n    }\n    private onDragStart = (e: OnDragStart, clickedTarget?: Element) => {\n        const { datas, clientX, clientY, inputEvent } = e;\n        const {\n            continueSelect, selectFromInside, selectByClick,\n            boundContainer,\n        } = this.options;\n\n        this.findSelectableTargets(datas);\n        datas.startSelectedTargets = this.selectedTargets;\n\n        let boundArea = { left: -Infinity, top: -Infinity, right: Infinity, bottom: Infinity };\n\n        if (boundContainer) {\n            let rectContainer: HTMLElement;\n\n            if (isString(boundContainer)) {\n                rectContainer = document.querySelector(boundContainer);\n            } else if (boundContainer === true) {\n                rectContainer = this.container;\n            } else {\n                rectContainer = boundContainer;\n            }\n            const rect = rectContainer.getBoundingClientRect();\n\n            boundArea = { left: rect.left, top: rect.top, right: rect.right, bottom: rect.bottom };\n        }\n\n        datas.boundArea = boundArea;\n        datas.selectedTargets = [];\n\n        const hitRect = {\n            left: clientX,\n            top: clientY,\n            right: clientX,\n            bottom: clientY,\n            width: 0,\n            height: 0,\n        };\n        let firstPassedTargets: Array<HTMLElement | SVGElement> = [];\n        if (!selectFromInside || selectByClick) {\n            let pointTarget\n                = (clickedTarget || document.elementFromPoint(clientX, clientY)) as HTMLElement | SVGElement;\n\n            while (pointTarget) {\n                if (datas.selectableTargets.indexOf(pointTarget as HTMLElement | SVGElement) > -1) {\n                    break;\n                }\n                pointTarget = pointTarget.parentElement;\n            }\n            firstPassedTargets = pointTarget ? [pointTarget] : [];\n        }\n        const hasInsideTargets = firstPassedTargets.length > 0;\n        const isPreventSelect = !selectFromInside && hasInsideTargets;\n\n        if (isPreventSelect && !selectByClick) {\n            e.stop();\n            return false;\n        }\n        const type = inputEvent.type;\n        const isTrusted = type === \"mousedown\" || type === \"touchstart\";\n        /**\n         * When the drag starts, the dragStart event is called.\n         * Call the stop () function if you have a specific element or don't want to raise a select\n         * @memberof Selecto\n         * @event dragStart\n         * @param {OnDragStart} - Parameters for the dragStart event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"dragStart\", e => {\n         *   if (e.inputEvent.target.tagName === \"SPAN\") {\n         *     e.stop();\n         *   }\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        const result = isTrusted ? this.trigger(\"dragStart\", { ...e }) : true;\n\n        if (!result) {\n            e.stop();\n            return false;\n        }\n\n        if (!continueSelect) {\n            this.selectedTargets = [];\n        } else {\n            firstPassedTargets = this.passSelectedTargets(firstPassedTargets);\n        }\n\n        this.select(firstPassedTargets, hitRect, inputEvent, true);\n        datas.startX = clientX;\n        datas.startY = clientY;\n        datas.selectedTargets = firstPassedTargets;\n        datas.boundsArea =\n        this.target.style.cssText\n            += `left:0px;top:0px;transform: translate(${clientX}px, ${clientY}px)`;\n\n        if (isPreventSelect && selectByClick) {\n            this.onDragEnd(e);\n            inputEvent.preventDefault();\n            e.stop();\n            return false;\n        } else {\n            if (type === \"touchstart\") {\n                inputEvent.preventDefault();\n            }\n            const { scrollOptions } = this.options;\n            if (scrollOptions && scrollOptions.container) {\n                this.dragScroll.dragStart(e, scrollOptions);\n            }\n            return true;\n        }\n    }\n    private check(e: any) {\n        const {\n            datas,\n            inputEvent,\n        } = e;\n        const rect = getRect(e, this.options.ratio, datas.boundArea);\n        const {\n            top,\n            left,\n            width,\n            height,\n        } = rect;\n        this.target.style.cssText\n            += `display: block;`\n            + `left:0px;top:0px;`\n            + `transform: translate(${left}px, ${top}px);`\n            + `width:${width}px;height:${height}px;`;\n\n        const passedTargets = this.hitTest(\n            rect, datas.startX, datas.startY, datas.selectableTargets, datas.selectableRects);\n        const selectedTargets = this.passSelectedTargets(passedTargets);\n\n        this.trigger(\"drag\", {\n            ...e,\n            rect,\n        });\n        this.select(selectedTargets, rect, inputEvent);\n        datas.selectedTargets = selectedTargets;\n    }\n    private onDrag = (e: OnDrag) => {\n        const { scrollOptions } = this.options;\n        if (scrollOptions && scrollOptions.container) {\n            if (this.dragScroll.drag(e, scrollOptions)) {\n                return;\n            }\n        }\n        this.check(e);\n    }\n    private onDragEnd = (e: OnDragEvent) => {\n        const { datas, inputEvent } = e;\n        const rect = getRect(e, this.options.ratio, datas.boundArea);\n\n        this.dragScroll.dragEnd();\n        this.target.style.cssText += \"display: none;\";\n\n        if (inputEvent && inputEvent.type !== \"mousedown\" && inputEvent.type !== \"touchstart\") {\n            this.trigger(\"dragEnd\", {\n                isDouble: false,\n                isDrag: false,\n                ...e,\n                rect,\n            });\n        }\n\n        this.selectEnd(\n            datas.startSelectedTargets, datas.selectedTargets, rect, e);\n        this.selectedTargets = datas.selectedTargets;\n    }\n    private sameCombiKey(e: any, isKeyup?: boolean) {\n        const toggleContinueSelect = [].concat(this.options.toggleContinueSelect);\n        const combi = getCombi(e.inputEvent, e.key);\n        const toggleKeys = (isArray(toggleContinueSelect[0]) ? toggleContinueSelect : [toggleContinueSelect]);\n\n        if (isKeyup) {\n            const singleKey = e.key;\n\n            return toggleKeys.some(keys => keys.some(key => key === singleKey));\n        }\n        return toggleKeys.some(keys => keys.every(key => combi.indexOf(key) > -1));\n    }\n    private onKeyDown = (e: any) => {\n        if (!this.sameCombiKey(e)) {\n            return;\n        }\n        this.continueSelect = true;\n        /**\n         * When you keydown the key you specified in toggleContinueSelect, the keydown event is called.\n         * @memberof Selecto\n         * @event keydown\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"keydown\", {});\n    }\n    private onKeyUp = (e: any) => {\n        if (!this.sameCombiKey(e, true)) {\n            return;\n        }\n        this.continueSelect = false;\n        /**\n         * When you keyup the key you specified in toggleContinueSelect, the keyup event is called.\n         * @memberof Selecto\n         * @event keyup\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"keyup\", {});\n    }\n    private onBlur = () => {\n        if (this.toggleContinueSelect && this.continueSelect) {\n            this.trigger(\"keyup\", {});\n        }\n    }\n    private onDocumentSelectStart = (e: any) => {\n        if (!this.gesto.isFlag()) {\n            return;\n        }\n        let dragContainer = this.dragContainer;\n\n        if (dragContainer === window) {\n            dragContainer = document.documentElement;\n        }\n        const containers = dragContainer instanceof Element\n            ? [dragContainer] : [].slice.call(dragContainer) as Element[];\n        const target = e.target;\n\n        containers.some(container => {\n            if (container === target || container.contains(target)) {\n                e.preventDefault();\n                return true;\n            }\n        });\n    }\n}\n\ninterface Selecto extends SelectoProperties {\n}\n\nexport default Selecto;\n","import Selecto, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (Selecto as any)[name] = modules[name];\n}\n\nexport default Selecto;\n"],"names":["createElement","jsx","prevTarget","container","tag","children","attributes","className","style","el","document","name","setAttribute","elChildren","forEach","child","i","split","elStyle","appendChild","h","attrs","_i","_a","_b","_c","diffValue","prev","cur","func","getRect","e","ratio","boundArea","distX","distY","_d","startX","startY","nextHeight","Math","sqrt","width","abs","height","left","right","top","bottom","min","injector","CLASS_NAME","PROPERTIES","OPTIONS","__spreadArrays","OPTION_TYPES","boundContainer","target","dragContainer","selectableTargets","Array","selectByClick","Boolean","selectFromInside","continueSelect","toggleContinueSelect","keyContainer","hitRate","Number","scrollOptions","Object","checkInput","preventDefault","cspNonce","String","options","_super","_this","ChildrenDiffer","DragScroll","clickedTarget","datas","clientX","clientY","inputEvent","findSelectableTargets","startSelectedTargets","selectedTargets","Infinity","rect","querySelector","getBoundingClientRect","hitRect","firstPassedTargets","pointTarget","elementFromPoint","indexOf","parentElement","hasInsideTargets","length","isPreventSelect","stop","type","trigger","passSelectedTargets","select","boundsArea","cssText","onDragEnd","dragScroll","dragStart","drag","check","dragEnd","isDouble","isDrag","selectEnd","sameCombiKey","gesto","isFlag","window","documentElement","containers","Element","slice","call","some","contains","undefined","initElement","initDragScroll","setKeyController","this","getEventDatas","setEventDatas","differ","setKeyEvent","value","triggerDragStart","off","keycon","destroy","unset","injectResult","removeEvent","onDocumentSelectStart","touch","touches","changedTouches","dragEvent","onDragStart","KeyController","keydown","onKeyDown","keyup","onKeyUp","on","onBlur","querySelectorAll","parentNode","Gesto","checkWindowBlur","onDrag","addEvent","inject","nonce","selectRect","targets","rects","filter","rectLeft","rectTop","rectRight","rectBottom","isStart","rectSize","testLeft","max","testRight","testTop","testBottom","rate","round","direction","offsetX","offsetY","selectableRects","scrollBy","isObject","push","passedTargets","list","prevList","added","removed","map","index","concat","selected","afterAdded","afterRemoved","afterPrevList","afterList","isDragStart","getSelectableTargets","hitTest","isKeyup","combi","getCombi","key","toggleKeys","singleKey_1","keys","every","Selecto","prototype","property","enumerable","configurable","get","setter","set","defineProperty","EventEmitter","modules"],"mappings":"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"}
{"version":3,"file":"selecto.min.js","sources":["../src/utils.ts","../src/consts.ts","../src/Selecto.tsx","../src/SelectoManager.tsx","../src/index.umd.ts"],"sourcesContent":["import { Hypertext, Rect } from \"./types\";\nimport { IObject, addClass, hasClass, calculateBoundSize } from \"@daybrush/utils\";\nimport { diff } from \"@egjs/children-differ\";\n\nexport function getClient(e: MouseEvent | TouchEvent) {\n    if (\"touches\" in e) {\n        const touch = e.touches[0] || e.changedTouches[0];\n\n        return {\n            clientX: touch.clientX,\n            clientY: touch.clientY,\n        };\n    } else {\n        return {\n            clientX: e.clientX,\n            clientY: e.clientY,\n        };\n    }\n}\n\nexport function createElement(\n    jsx: Hypertext,\n    prevTarget?: HTMLElement | SVGElement,\n    container?: HTMLElement | SVGElement,\n) {\n    const { tag, children, attributes, className, style } = jsx;\n    const el = prevTarget || document.createElement(tag) as HTMLElement | SVGElement;\n\n    for (const name in attributes) {\n        el.setAttribute(name, attributes[name]);\n    }\n    const elChildren = el.children;\n    children.forEach((child, i) => {\n        createElement(child, elChildren[i] as HTMLElement | SVGElement, el);\n    });\n    if (className) {\n        className.split(\" \").forEach(name => {\n            if (!hasClass(el, name)) {\n                addClass(el, name);\n            }\n        });\n    }\n    if (style) {\n        const elStyle = el.style;\n        for (const name in style) {\n            elStyle[name] = style[name];\n        }\n    }\n    if (!prevTarget && container) {\n        container.appendChild(el);\n    }\n    return el;\n}\nexport function h(\n    tag: string,\n    attrs: IObject<any>,\n    ...children: Hypertext[]\n): Hypertext {\n    const {\n        className = \"\",\n        style = {},\n        ...attributes\n    } = attrs || {};\n    return {\n        tag,\n        className,\n        style,\n        attributes,\n        children,\n    };\n}\n\nexport function diffValue<T>(prev: T, cur: T, func: (prev: T, cur: T) => void) {\n    if (prev !== cur) {\n        func(prev, cur);\n    }\n}\n\nexport function getRect(\n    e: any, ratio: number,\n    boundArea = e.datas.boundArea,\n): Rect {\n    let {\n        distX = 0,\n        distY = 0,\n    } = e;\n    const { startX, startY } = e.datas;\n\n    if (ratio > 0) {\n        const nextHeight = Math.sqrt((distX * distX + distY * distY) / (1 + ratio * ratio));\n        const nextWidth = ratio * nextHeight;\n\n        distX = (distX >= 0 ? 1 : -1) * nextWidth;\n        distY = (distY >= 0 ? 1 : -1) * nextHeight;\n    }\n    let width = Math.abs(distX);\n    let height = Math.abs(distY);\n\n    const maxWidth = distX < 0 ? startX - boundArea.left : boundArea.right - startX;\n    const maxHeight = distY < 0 ? startY - boundArea.top : boundArea.bottom - startY;\n\n    [width, height] = calculateBoundSize([width, height], [0, 0], [maxWidth, maxHeight], !!ratio);\n    distX = (distX >= 0 ? 1 : -1) * width;\n    distY = (distY >= 0 ? 1 : -1) * height;\n\n    const tx = Math.min(0, distX);\n    const ty = Math.min(0, distY);\n    const left = startX + tx;\n    const top = startY + ty;\n\n    return {\n        left,\n        top,\n        right: left + width,\n        bottom: top + height,\n        width,\n        height,\n    };\n}\n\nexport function getDefaultElementRect(el: HTMLElement) {\n    const rect = el.getBoundingClientRect();\n    const { left, top, width, height } = rect;\n\n    return {\n        pos1: [left, top],\n        pos2: [left + width, top],\n        pos3: [left, top + height],\n        pos4: [left + width, top + height],\n    };\n}\n\nexport function passTargets(\n    beforeTargets: Array<HTMLElement | SVGElement>,\n    afterTargets: Array<HTMLElement | SVGElement>,\n) {\n    const {\n        list,\n        prevList,\n        added,\n        removed,\n    } = diff(beforeTargets, afterTargets);\n\n    return added.map(index => list[index]).concat(removed.map(index => prevList[index]));\n}\n","import styled from \"css-styled\";\nimport { SelectoOptions } from \"./types\";\n\nexport const injector = styled(`\n:host {\n    position: fixed;\n    display: none;\n    border: 1px solid #4af;\n    background: rgba(68, 170, 255, 0.5);\n    z-index: 100;\n}\n`);\n\n/**\n * @memberof Selecto\n */\nexport const CLASS_NAME = `selecto-selection ${injector.className}`;\n\nexport const PROPERTIES = [\n    \"boundContainer\",\n    \"selectableTargets\",\n    \"selectByClick\",\n    \"selectFromInside\",\n    \"continueSelect\",\n    \"toggleContinueSelect\",\n    \"keyContainer\",\n    \"hitRate\",\n    \"scrollOptions\",\n    \"checkInput\",\n    \"preventDefault\",\n    \"ratio\",\n    \"getElementRect\",\n] as const;\n/**\n * @memberof Selecto\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    \"dragContainer\",\n    \"cspNonce\",\n    ...PROPERTIES,\n] as const;\n\nexport const OPTION_TYPES: { [key in keyof SelectoOptions]: any } = {\n    boundContainer: null,\n    target: null,\n    container: null,\n    dragContainer: null,\n    selectableTargets: Array,\n    selectByClick: Boolean,\n    selectFromInside: Boolean,\n    continueSelect: Boolean,\n    toggleContinueSelect: Array,\n    keyContainer: null,\n    hitRate: Number,\n    scrollOptions: Object,\n    checkInput: Boolean,\n    preventDefault: Boolean,\n    cspNonce: String,\n    ratio: Number,\n    getElementRect: Function,\n};\n\n/**\n * @memberof Selecto\n */\nexport const EVENTS = [\n    \"dragStart\",\n    \"drag\",\n    \"dragEnd\",\n    \"selectStart\",\n    \"select\",\n    \"selectEnd\",\n    \"keydown\",\n    \"keyup\",\n    \"scroll\",\n] as const;\n\n/**\n * @memberof Selecto\n */\nexport const METHODS = [\n    \"clickTarget\",\n    \"setSelectedTargets\",\n    \"getElementPoints\",\n    \"getSelectedTargets\",\n    \"findSelectableTargets\",\n    \"triggerDragStart\",\n] as const;\n","import SelectoManager from \"./SelectoManager\";\n\nclass Selecto extends SelectoManager {\n\n}\nexport default Selecto;\n","import EventEmitter from \"@scena/event-emitter\";\nimport Gesto, { OnDrag, OnDragStart } from \"gesto\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport { isObject, camelize, IObject, addEvent, removeEvent, isArray, isString, between } from \"@daybrush/utils\";\nimport { diff } from \"@egjs/children-differ\";\nimport DragScroll from \"@scena/dragscroll\";\nimport KeyController, { getCombi } from \"keycon\";\nimport { getAreaSize, getOverlapPoints, isInside, fitPoints } from \"overlap-area\";\nimport { createElement, h, getClient, diffValue, getRect, getDefaultElementRect, passTargets } from \"./utils\";\nimport { SelectoOptions, SelectoProperties, OnDragEvent, SelectoEvents, Rect } from \"./types\";\nimport { PROPERTIES, injector, CLASS_NAME } from \"./consts\";\n\n/**\n * Selecto.js is a component that allows you to select elements in the drag area using the mouse or touch.\n * @sort 1\n * @extends EventEmitter\n */\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function set(value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function set(value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\nclass Selecto extends EventEmitter<SelectoEvents> {\n    public options: SelectoOptions;\n    private target!: HTMLElement | SVGElement;\n    private dragContainer!: Element | Window | Element[];\n    private container!: HTMLElement;\n    private gesto!: Gesto;\n    private injectResult!: InjectResult;\n    private selectedTargets: Array<HTMLElement | SVGElement> = [];\n    private dragScroll: DragScroll = new DragScroll();\n    private keycon!: KeyController;\n    /**\n     *\n     */\n    constructor(\n        options: Partial<SelectoOptions> = {},\n    ) {\n        super();\n        this.target = options.target;\n        this.container = options.container || document.body;\n        this.options = {\n            target: null,\n            container: null,\n            dragContainer: null,\n            selectableTargets: [],\n            selectByClick: true,\n            selectFromInside: true,\n            hitRate: 100,\n            continueSelect: false,\n            toggleContinueSelect: null,\n            keyContainer: null,\n            scrollOptions: undefined,\n            checkInput: false,\n            preventDefault: false,\n            boundContainer: false,\n            getElementRect: getDefaultElementRect,\n            cspNonce: \"\",\n            ratio: 0,\n            ...options,\n        };\n        this.initElement();\n        this.initDragScroll();\n        this.setKeyController();\n    }\n    /**\n     * You can set the currently selected targets.\n     *\n     */\n    public setSelectedTargets(selectedTargets: Array<HTMLElement | SVGElement>): this {\n        this.selectedTargets = selectedTargets;\n\n        return this;\n    }\n    /**\n     * You can get the currently selected targets.\n     */\n    public getSelectedTargets(): Array<HTMLElement | SVGElement> {\n        return this.selectedTargets;\n    }\n    public setKeyContainer(keyContainer: HTMLElement | Document | Window) {\n        const options = this.options;\n\n        diffValue(options.keyContainer, keyContainer, () => {\n            options.keyContainer = keyContainer;\n\n            this.setKeyController();\n        });\n    }\n    public setToggleContinueSelect(toggleContinueSelect: string[][] | string[] | string) {\n        const options = this.options;\n\n        diffValue(options.toggleContinueSelect, toggleContinueSelect, () => {\n            options.toggleContinueSelect = toggleContinueSelect;\n\n            this.setKeyEvent();\n        });\n    }\n    public setPreventDefault(value: boolean) {\n        this.gesto.options.preventDefault = value;\n    }\n    public setCheckInput(value: boolean) {\n        this.gesto.options.checkInput = value;\n    }\n    /**\n     * `OnDragStart` is triggered by an external event.\n     * @param - external event\n     * @example\n     * import Selecto from \"selecto\";\n     *\n     * const selecto = new Selecto();\n     *\n     * window.addEventListener(\"mousedown\", e => {\n     *   selecto.triggerDragStart(e);\n     * });\n     */\n    public triggerDragStart(e: MouseEvent | TouchEvent) {\n        this.gesto.triggerDragStart(e);\n        return this;\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.keycon && this.keycon.destroy();\n        this.gesto.unset();\n        this.injectResult.destroy();\n        removeEvent(document, \"selectstart\", this.onDocumentSelectStart);\n\n        this.keycon = null;\n        this.gesto = null;\n        this.injectResult = null;\n        this.target = null;\n        this.container = null;\n        this.options = null;\n    }\n    public getElementPoints(target: HTMLElement | SVGElement) {\n        const getElementRect = this.getElementRect;\n        const info = getElementRect(target);\n        const points = [info.pos1, info.pos2, info.pos4, info.pos3];\n\n        if (getElementRect !== getDefaultElementRect) {\n            const rect = target.getBoundingClientRect();\n\n            return fitPoints(points, rect);\n        }\n        return points;\n    }\n    /**\n     * Find for selectableTargets again during drag event\n     */\n    public findSelectableTargets(datas: any = this.gesto.getEventDatas()) {\n        const selectableTargets = this.getSelectableTargets();\n        const selectablePoints = selectableTargets.map(target => this.getElementPoints(target));\n        datas.selectableTargets = selectableTargets;\n        datas.selectablePoints = selectablePoints;\n    }\n    /**\n     * External click or mouse events can be applied to the selecto.\n     * @params - Extenal click or mouse event\n     * @params - Specify the clicked target directly.\n     */\n    public clickTarget(e: MouseEvent | TouchEvent, clickedTarget?: Element): this {\n        const { clientX, clientY } = getClient(e);\n        const dragEvent = {\n            datas: {\n                flag: false,\n            },\n            clientX,\n            clientY,\n            inputEvent: e,\n            stop: () => {\n                return false;\n            },\n        } as any;\n        if (this.onDragStart(dragEvent, clickedTarget)) {\n            dragEvent.datas.flag = false;\n            this.onDragEnd(dragEvent);\n        }\n        return this;\n    }\n    private setKeyController() {\n        const { keyContainer, toggleContinueSelect } = this.options;\n\n        if (this.keycon) {\n            this.keycon.destroy();\n            this.keycon = null;\n        }\n        if (toggleContinueSelect) {\n            this.keycon = new KeyController(keyContainer || window);\n            this.keycon.keydown(this.onKeyDown).keyup(this.onKeyUp).on(\"blur\", this.onBlur);\n        }\n    }\n    private setKeyEvent() {\n        const { toggleContinueSelect } = this.options;\n        if (!toggleContinueSelect || this.keycon) {\n            return;\n        }\n        this.setKeyController();\n    }\n    private initElement() {\n        this.target = createElement(\n            <div className={CLASS_NAME}></div> as any,\n            this.target,\n            this.container,\n        );\n\n        const target = this.target;\n\n        const { dragContainer, checkInput, preventDefault } = this.options;\n        this.dragContainer = typeof dragContainer === \"string\"\n            ? [].slice.call(document.querySelectorAll(dragContainer))\n            : (this.options.dragContainer || this.target.parentNode as any);\n        this.gesto = new Gesto(this.dragContainer, {\n            checkWindowBlur: true,\n            container: window,\n            checkInput,\n            preventDefault,\n        }).on({\n            dragStart: this.onDragStart,\n            drag: this.onDrag,\n            dragEnd: this.onDragEnd,\n        });\n        addEvent(document, \"selectstart\", this.onDocumentSelectStart);\n\n        this.injectResult = injector.inject(target, {\n            nonce: this.options.cspNonce,\n        });\n    }\n    private hitTest(\n        selectRect: Rect,\n        clientX: number,\n        clientY: number,\n        targets: Array<HTMLElement | SVGElement>,\n        selectablePoints: number[][][],\n    ) {\n        const { hitRate, selectByClick } = this.options;\n        const { left, top, right, bottom } = selectRect;\n        const rectPoints = [\n            [left, top],\n            [right, top],\n            [right, bottom],\n            [left, bottom],\n        ];\n        return targets.filter((_, i) => {\n            const points = selectablePoints[i];\n            const inArea = isInside([clientX, clientY], points);\n\n            if (selectByClick && inArea) {\n                return true;\n            }\n            const overlapPoints = getOverlapPoints(rectPoints, points);\n\n            if (!overlapPoints.length) {\n                return false;\n            }\n            const overlapSize = getAreaSize(overlapPoints);\n            const targetSize = getAreaSize(points);\n            const rate = between(Math.round(overlapSize / targetSize * 100), 0, 100);\n\n            if (rate >= Math.min(100, hitRate)) {\n                return true;\n            }\n            return false;\n        });\n    }\n    private initDragScroll() {\n        this.dragScroll.on(\"scroll\", ({ container, direction }) => {\n            this.trigger(\"scroll\", {\n                container,\n                direction,\n            });\n        }).on(\"move\", ({ offsetX, offsetY, inputEvent }) => {\n            const datas = inputEvent.datas;\n            datas.startX -= offsetX;\n            datas.startY -= offsetY;\n            datas.selectablePoints.forEach((points: number[][]) => {\n                points.forEach(pos => {\n                    pos[0] -= offsetX;\n                    pos[1] -= offsetY;\n                });\n            });\n            this.gesto.scrollBy(offsetX, offsetY, inputEvent.inputEvent, false);\n\n            inputEvent.distX += offsetX;\n            inputEvent.distY += offsetY;\n            this.check(inputEvent);\n        });\n    }\n    private getSelectableTargets() {\n        const selectableTargets: Array<HTMLElement | SVGElement> = [];\n\n        this.options.selectableTargets.forEach(target => {\n            if (isObject(target)) {\n                selectableTargets.push(target);\n            } else {\n                const elements = [].slice.call(document.querySelectorAll(target));\n\n                elements.forEach(el => {\n                    selectableTargets.push(el);\n                });\n            }\n        });\n\n        return selectableTargets;\n    }\n    private select(\n        prevSelectedTargets: Array<HTMLElement | SVGElement>,\n        selectedTargets: Array<HTMLElement | SVGElement>,\n        rect: Rect,\n        inputEvent: any,\n        isStart?: boolean,\n    ) {\n        const {\n            added,\n            removed,\n            prevList,\n            list,\n        } = diff(prevSelectedTargets, selectedTargets);\n\n        this.selectedTargets = selectedTargets;\n\n        if (isStart) {\n            /**\n             * When the select(drag) starts, the selectStart event is called.\n             * @memberof Selecto\n             * @event selectStart\n             * @param {Selecto.OnSelect} - Parameters for the selectStart event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"selectStart\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * }).on(\"selectEnd\", e => {\n             *   e.afterAdded.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.afterRemoved.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.trigger(\"selectStart\", {\n                selected: selectedTargets,\n                added: added.map(index => list[index]),\n                removed: removed.map(index => prevList[index]),\n                rect,\n                inputEvent,\n            });\n        }\n        if (added.length || removed.length) {\n            /**\n             * When the select in real time, the select event is called.\n             * @memberof Selecto\n             * @event select\n             * @param {Selecto.OnSelect} - Parameters for the select event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"select\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.trigger(\"select\", {\n                selected: selectedTargets,\n                added: added.map(index => list[index]),\n                removed: removed.map(index => prevList[index]),\n                rect,\n                inputEvent,\n            });\n        }\n    }\n    private selectEnd(\n        startSelectedTargets: Array<HTMLElement | SVGElement>,\n        startPassedTargets: Array<HTMLElement | SVGElement>,\n        rect: Rect,\n        e: OnDragEvent,\n    ) {\n        const { inputEvent, isDouble } = e;\n        const {\n            added,\n            removed,\n            prevList,\n            list,\n        } = diff(startSelectedTargets, this.selectedTargets);\n        const {\n            added: afterAdded,\n            removed: afterRemoved,\n            prevList: afterPrevList,\n            list: afterList,\n        } = diff(startPassedTargets, this.selectedTargets);\n        const type = inputEvent && inputEvent.type;\n        const isDragStart = type === \"mousedown\" || type === \"touchstart\";\n\n        /**\n         * When the select(dragEnd or click) ends, the selectEnd event is called.\n         * @memberof Selecto\n         * @event selectEnd\n         * @param {Selecto.OnSelectEnd} - Parameters for the selectEnd event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"selectStart\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * }).on(\"selectEnd\", e => {\n         *   e.afterAdded.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.afterRemoved.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"selectEnd\", {\n            selected: this.selectedTargets,\n            added: added.map(index => list[index]),\n            removed: removed.map(index => prevList[index]),\n            afterAdded: afterAdded.map(index => afterList[index]),\n            afterRemoved: afterRemoved.map(index => afterPrevList[index]),\n            isDragStart,\n            isDouble: !!isDouble,\n            rect,\n            inputEvent,\n        });\n    }\n    private onDragStart = (e: OnDragStart, clickedTarget?: Element) => {\n        const { datas, clientX, clientY, inputEvent } = e;\n        const {\n            continueSelect, selectFromInside, selectByClick,\n            boundContainer,\n        } = this.options;\n\n        this.findSelectableTargets(datas);\n        datas.startSelectedTargets = this.selectedTargets;\n\n        let boundArea = { left: -Infinity, top: -Infinity, right: Infinity, bottom: Infinity };\n\n        if (boundContainer) {\n            let rectContainer: HTMLElement;\n\n            if (isString(boundContainer)) {\n                rectContainer = document.querySelector(boundContainer);\n            } else if (boundContainer === true) {\n                rectContainer = this.container;\n            } else {\n                rectContainer = boundContainer;\n            }\n            const rect = rectContainer.getBoundingClientRect();\n\n            boundArea = { left: rect.left, top: rect.top, right: rect.right, bottom: rect.bottom };\n        }\n\n        datas.boundArea = boundArea;\n\n        const hitRect = {\n            left: clientX,\n            top: clientY,\n            right: clientX,\n            bottom: clientY,\n            width: 0,\n            height: 0,\n        };\n        let firstPassedTargets: Array<HTMLElement | SVGElement> = [];\n        if (!selectFromInside || selectByClick) {\n            let pointTarget\n                = (clickedTarget || document.elementFromPoint(clientX, clientY)) as HTMLElement | SVGElement;\n\n            while (pointTarget) {\n                if (datas.selectableTargets.indexOf(pointTarget as HTMLElement | SVGElement) > -1) {\n                    break;\n                }\n                pointTarget = pointTarget.parentElement;\n            }\n            firstPassedTargets = pointTarget ? [pointTarget] : [];\n        }\n        const hasInsideTargets = firstPassedTargets.length > 0;\n        const isPreventSelect = !selectFromInside && hasInsideTargets;\n\n        if (isPreventSelect && !selectByClick) {\n            e.stop();\n            return false;\n        }\n        const type = inputEvent.type;\n        const isTrusted = type === \"mousedown\" || type === \"touchstart\";\n        /**\n         * When the drag starts, the dragStart event is called.\n         * Call the stop () function if you have a specific element or don't want to raise a select\n         * @memberof Selecto\n         * @event dragStart\n         * @param {OnDragStart} - Parameters for the dragStart event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"dragStart\", e => {\n         *   if (e.inputEvent.target.tagName === \"SPAN\") {\n         *     e.stop();\n         *   }\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        const result = isTrusted ? this.trigger(\"dragStart\", { ...e }) : true;\n\n        if (!result) {\n            e.stop();\n            return false;\n        }\n\n        if (!continueSelect) {\n            datas.startPassedTargets = [];\n        } else {\n            firstPassedTargets = passTargets(this.selectedTargets, firstPassedTargets);\n            datas.startPassedTargets = this.selectedTargets;\n        }\n        this.select(this.selectedTargets, firstPassedTargets, hitRect, inputEvent, true);\n        datas.startX = clientX;\n        datas.startY = clientY;\n        datas.selectFlag = false;\n        datas.boundsArea =\n            this.target.style.cssText\n            += `left:0px;top:0px;transform: translate(${clientX}px, ${clientY}px)`;\n\n        if (isPreventSelect && selectByClick) {\n            inputEvent.preventDefault();\n            return false;\n        } else {\n            datas.selectFlag = true;\n            if (type === \"touchstart\") {\n                inputEvent.preventDefault();\n            }\n            const { scrollOptions } = this.options;\n            if (scrollOptions && scrollOptions.container) {\n                this.dragScroll.dragStart(e, scrollOptions);\n            }\n            return true;\n        }\n    }\n    private check(e: any, rect = getRect(e, this.options.ratio)) {\n        const {\n            datas,\n            inputEvent,\n        } = e;\n        const {\n            top,\n            left,\n            width,\n            height,\n        } = rect;\n        const selectFlag = datas.selectFlag;\n        let prevSelectedTargets: Array<HTMLElement | SVGElement> = [];\n        let selectedTargets: Array<HTMLElement | SVGElement> = [];\n        if (selectFlag) {\n            this.target.style.cssText\n                += `display: block;`\n                + `left:0px;top:0px;`\n                + `transform: translate(${left}px, ${top}px);`\n                + `width:${width}px;height:${height}px;`;\n\n            const passedTargets = this.hitTest(\n                rect, datas.startX, datas.startY,\n                datas.selectableTargets, datas.selectablePoints,\n            );\n            prevSelectedTargets = this.selectedTargets;\n            selectedTargets = passTargets(datas.startPassedTargets, passedTargets);\n\n            this.selectedTargets = selectedTargets;\n        }\n\n        this.trigger(\"drag\", {\n            ...e,\n            isSelect: selectFlag,\n            rect,\n        });\n\n        if (selectFlag) {\n            this.select(prevSelectedTargets, selectedTargets, rect, inputEvent);\n        }\n    }\n    private onDrag = (e: OnDrag) => {\n        if (e.datas.selectFlag) {\n            const { scrollOptions } = this.options;\n            if (scrollOptions && scrollOptions.container) {\n                if (this.dragScroll.drag(e, scrollOptions)) {\n                    return;\n                }\n            }\n        }\n        this.check(e);\n    }\n    private onDragEnd = (e: OnDragEvent) => {\n        const { datas, inputEvent } = e;\n        const rect = getRect(e, this.options.ratio);\n        const selectFlag = datas.selectFlag;\n\n        if (inputEvent) {\n            this.trigger(\"dragEnd\", {\n                isDouble: false,\n                isDrag: false,\n                isSelect: selectFlag,\n                ...e,\n                rect,\n            });\n        }\n        if (selectFlag) {\n            datas.selectFlag = false;\n            this.dragScroll.dragEnd();\n            this.target.style.cssText += \"display: none;\";\n        }\n        this.selectEnd(\n            datas.startSelectedTargets,\n            datas.startPassedTargets,\n            rect, e,\n        );\n    }\n    private sameCombiKey(e: any, isKeyup?: boolean) {\n        const toggleContinueSelect = [].concat(this.options.toggleContinueSelect);\n        const combi = getCombi(e.inputEvent, e.key);\n        const toggleKeys = (isArray(toggleContinueSelect[0]) ? toggleContinueSelect : [toggleContinueSelect]);\n\n        if (isKeyup) {\n            const singleKey = e.key;\n\n            return toggleKeys.some(keys => keys.some(key => key === singleKey));\n        }\n        return toggleKeys.some(keys => keys.every(key => combi.indexOf(key) > -1));\n    }\n    private onKeyDown = (e: any) => {\n        if (!this.sameCombiKey(e)) {\n            return;\n        }\n        this.continueSelect = true;\n        /**\n         * When you keydown the key you specified in toggleContinueSelect, the keydown event is called.\n         * @memberof Selecto\n         * @event keydown\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"keydown\", {});\n    }\n    private onKeyUp = (e: any) => {\n        if (!this.sameCombiKey(e, true)) {\n            return;\n        }\n        this.continueSelect = false;\n        /**\n         * When you keyup the key you specified in toggleContinueSelect, the keyup event is called.\n         * @memberof Selecto\n         * @event keyup\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"keyup\", {});\n    }\n    private onBlur = () => {\n        if (this.toggleContinueSelect && this.continueSelect) {\n            this.continueSelect = false;\n            this.trigger(\"keyup\", {});\n        }\n    }\n    private onDocumentSelectStart = (e: any) => {\n        if (!this.gesto.isFlag()) {\n            return;\n        }\n        let dragContainer = this.dragContainer;\n\n        if (dragContainer === window) {\n            dragContainer = document.documentElement;\n        }\n        const containers = dragContainer instanceof Element\n            ? [dragContainer] : [].slice.call(dragContainer) as Element[];\n        const target = e.target;\n\n        containers.some(container => {\n            if (container === target || container.contains(target)) {\n                e.preventDefault();\n                return true;\n            }\n        });\n    }\n}\n\ninterface Selecto extends SelectoProperties {\n}\n\nexport default Selecto;\n","import Selecto, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (Selecto as any)[name] = modules[name];\n}\n\nexport default Selecto;\n"],"names":["createElement","jsx","prevTarget","container","tag","children","attributes","className","style","el","document","name","setAttribute","elChildren","forEach","child","i","split","elStyle","appendChild","h","attrs","_i","_a","_b","_c","diffValue","prev","cur","func","getRect","e","ratio","boundArea","datas","distX","distY","_d","startX","startY","nextHeight","Math","sqrt","width","abs","height","left","right","top","bottom","min","getDefaultElementRect","rect","getBoundingClientRect","pos1","pos2","pos3","pos4","passTargets","beforeTargets","afterTargets","list","prevList","added","removed","map","index","concat","injector","CLASS_NAME","PROPERTIES","OPTIONS","__spreadArrays","OPTION_TYPES","boundContainer","target","dragContainer","selectableTargets","Array","selectByClick","Boolean","selectFromInside","continueSelect","toggleContinueSelect","keyContainer","hitRate","Number","scrollOptions","Object","checkInput","preventDefault","cspNonce","String","getElementRect","Function","__extends","options","_super","_this","DragScroll","clickedTarget","clientX","clientY","inputEvent","findSelectableTargets","startSelectedTargets","selectedTargets","Infinity","querySelector","hitRect","firstPassedTargets","pointTarget","elementFromPoint","indexOf","parentElement","hasInsideTargets","length","isPreventSelect","stop","type","trigger","startPassedTargets","select","selectFlag","boundsArea","cssText","dragScroll","dragStart","drag","check","isDouble","isDrag","isSelect","dragEnd","selectEnd","sameCombiKey","gesto","isFlag","window","documentElement","containers","Element","slice","call","some","contains","body","undefined","initElement","initDragScroll","setKeyController","this","setKeyEvent","value","triggerDragStart","off","keycon","destroy","unset","injectResult","removeEvent","onDocumentSelectStart","info","points","getEventDatas","getSelectableTargets","selectablePoints","getElementPoints","touch","touches","changedTouches","dragEvent","flag","onDragStart","onDragEnd","KeyController","keydown","onKeyDown","keyup","onKeyUp","on","onBlur","querySelectorAll","parentNode","Gesto","checkWindowBlur","onDrag","addEvent","inject","nonce","selectRect","targets","rectPoints","filter","_","inArea","isInside","overlapPoints","getOverlapPoints","overlapSize","getAreaSize","targetSize","between","round","direction","offsetX","offsetY","pos","scrollBy","isObject","push","prevSelectedTargets","isStart","selected","afterAdded","afterRemoved","afterPrevList","afterList","isDragStart","passedTargets","hitTest","isKeyup","combi","getCombi","key","toggleKeys","singleKey_1","keys","every","Selecto","prototype","property","enumerable","configurable","get","setter","set","defineProperty","EventEmitter","modules"],"mappings":"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"}
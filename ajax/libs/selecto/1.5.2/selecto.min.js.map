{"version":3,"file":"selecto.min.js","sources":["../src/utils.ts","../src/consts.ts","../src/Selecto.tsx","../src/index.umd.ts"],"sourcesContent":["import { Hypertext, Rect } from \"./types\";\nimport { IObject, addClass, hasClass } from \"@daybrush/utils\";\n\nexport function getClient(e: MouseEvent | TouchEvent) {\n    if (\"touches\" in e) {\n        const touch = e.touches[0] || e.changedTouches[0];\n\n        return {\n            clientX: touch.clientX,\n            clientY: touch.clientY,\n        };\n    } else {\n        return {\n            clientX: e.clientX,\n            clientY: e.clientY,\n        };\n    }\n}\n\nexport function createElement(\n    jsx: Hypertext,\n    prevTarget?: HTMLElement | SVGElement,\n    container?: HTMLElement | SVGElement,\n) {\n    const { tag, children, attributes, className, style } = jsx;\n    const el = prevTarget || document.createElement(tag) as HTMLElement | SVGElement;\n\n    for (const name in attributes) {\n        el.setAttribute(name, attributes[name]);\n    }\n    const elChildren = el.children;\n    children.forEach((child, i) => {\n        createElement(child, elChildren[i] as HTMLElement | SVGElement, el);\n    });\n    if (className) {\n        className.split(\" \").forEach(name => {\n            if (!hasClass(el, name)) {\n                addClass(el, name);\n            }\n        });\n    }\n    if (style) {\n        const elStyle = el.style;\n        for (const name in style) {\n            elStyle[name] = style[name];\n        }\n    }\n    if (!prevTarget && container) {\n        container.appendChild(el);\n    }\n    return el;\n}\nexport function h(\n    tag: string,\n    attrs: IObject<any>,\n    ...children: Hypertext[]\n): Hypertext {\n    const {\n        className = \"\",\n        style = {},\n        ...attributes\n    } = attrs || {};\n    return {\n        tag,\n        className,\n        style,\n        attributes,\n        children,\n    };\n}\n\nexport function diffValue<T>(prev: T, cur: T, func: (prev: T, cur: T) => void) {\n    if (prev !== cur) {\n        func(prev, cur);\n    }\n}\n\nexport function getRect(e: any): Rect {\n    const {\n        distX = 0,\n        distY = 0,\n        datas,\n    } = e;\n    const { startX, startY } = datas;\n    const tx = Math.min(0, distX);\n    const ty = Math.min(0, distY);\n    const width = Math.abs(distX);\n    const height = Math.abs(distY);\n    const left = startX + tx;\n    const top = startY + ty;\n\n    return {\n        left,\n        top,\n        right: left + width,\n        bottom: top + height,\n        width,\n        height,\n    };\n}\n","import styled from \"css-styled\";\nimport { SelectoOptions } from \"./types\";\n\nexport const injector = styled(`\n:host {\n    position: fixed;\n    display: none;\n    border: 1px solid #4af;\n    background: rgba(68, 170, 255, 0.5);\n    z-index: 100;\n}\n`);\n\n/**\n * @memberof Selecto\n */\nexport const CLASS_NAME = `selecto-selection ${injector.className}`;\n\nexport const PROPERTIES = [\n    \"selectableTargets\",\n    \"selectByClick\",\n    \"selectFromInside\",\n    \"continueSelect\",\n    \"toggleContinueSelect\",\n    \"keyContainer\",\n    \"hitRate\",\n    \"scrollOptions\",\n    \"checkInput\",\n    \"preventDefault\",\n] as const;\n/**\n * @memberof Selecto\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    \"dragContainer\",\n    \"cspNonce\",\n    ...PROPERTIES,\n] as const;\n\nexport const OPTION_TYPES: { [key in keyof SelectoOptions]: any } = {\n    target: null,\n    container: null,\n    dragContainer: null,\n    selectableTargets: Array,\n    selectByClick: Boolean,\n    selectFromInside: Boolean,\n    continueSelect: Boolean,\n    toggleContinueSelect: Array,\n    keyContainer: null,\n    hitRate: Number,\n    scrollOptions: Object,\n    checkInput: Boolean,\n    preventDefault: Boolean,\n    cspNonce: String,\n};\n\n/**\n * @memberof Selecto\n */\nexport const EVENTS = [\n    \"dragStart\",\n    \"drag\",\n    \"dragEnd\",\n    \"selectStart\",\n    \"select\",\n    \"selectEnd\",\n    \"keydown\",\n    \"keyup\",\n    \"scroll\",\n] as const;\n\n/**\n * @memberof Selecto\n */\nexport const METHODS = [\n    \"clickTarget\",\n    \"setSelectedTargets\",\n    \"triggerDragStart\",\n] as const;\n","import Component from \"@egjs/component\";\nimport Dragger, { OnDrag } from \"@daybrush/drag\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport { isObject, camelize, IObject, addEvent, removeEvent } from \"@daybrush/utils\";\nimport ChildrenDiffer, { diff, ChildrenDiffResult } from \"@egjs/children-differ\";\nimport DragScroll from \"@scena/dragscroll\";\nimport KeyController, { getCombi } from \"keycon\";\nimport { createElement, h, getClient, diffValue, getRect } from \"./utils\";\nimport { SelectoOptions, Rect, SelectoProperties, OnDragEvent, SelectoEvents } from \"./types\";\nimport { PROPERTIES, injector, CLASS_NAME } from \"./consts\";\n/**\n * Selecto.js is a component that allows you to select elements in the drag area using the mouse or touch.\n * @sort 1\n * @extends eg.Component\n */\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function(value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function(value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\nclass Selecto extends Component {\n    public options: SelectoOptions;\n    private target!: HTMLElement | SVGElement;\n    private dragContainer!: Element | Window | Element[];\n    private container!: HTMLElement;\n    private dragger!: Dragger;\n    private injectResult!: InjectResult;\n    private selectedTargets: Array<HTMLElement | SVGElement> = [];\n    private differ = new ChildrenDiffer<HTMLElement | SVGElement>();\n    private dragScroll: DragScroll = new DragScroll();\n    private keycon!: KeyController;\n    /**\n     *\n     */\n    constructor(\n        options: Partial<SelectoOptions> = {},\n    ) {\n        super();\n        this.target = options.target;\n        this.container = options.container;\n        this.options = {\n            target: null,\n            container: null,\n            dragContainer: null,\n            selectableTargets: [],\n            selectByClick: true,\n            selectFromInside: true,\n            hitRate: 100,\n            continueSelect: false,\n            toggleContinueSelect: null,\n            keyContainer: null,\n            scrollOptions: undefined,\n            checkInput: false,\n            preventDefault: false,\n            cspNonce: \"\",\n            ...options,\n        };\n        this.initElement();\n        this.initDragScroll();\n        this.setKeyController();\n    }\n    /**\n     * You can set the currently selected targets.\n     */\n    public setSelectedTargets(selectedTargets: Array<HTMLElement | SVGElement>): this {\n        this.selectedTargets = selectedTargets;\n        this.differ = new ChildrenDiffer(selectedTargets);\n\n        return this;\n    }\n\n    public setKeyContainer(keyContainer: HTMLElement | Document | Window) {\n        const options = this.options;\n\n        diffValue(options.keyContainer, keyContainer, () => {\n            options.keyContainer = keyContainer;\n\n            this.setKeyController();\n        });\n    }\n    public setToggleContinueSelect(toggleContinueSelect: string[] | string) {\n        const options = this.options;\n\n        diffValue(options.toggleContinueSelect, toggleContinueSelect, () => {\n            options.toggleContinueSelect = toggleContinueSelect;\n\n            this.setKeyEvent();\n        });\n    }\n    public setPreventDefault(value: boolean) {\n        this.dragger.options.preventDefault = value;\n    }\n    public setCheckInput(value: boolean) {\n        this.dragger.options.checkInput = value;\n    }\n    /**\n     * `OnDragStart` is triggered by an external event.\n     * @param - external event\n     * @example\n     * import Selecto from \"selecto\";\n     *\n     * const selecto = new Selecto();\n     *\n     * window.addEventListener(\"mousedown\", e => {\n     *   selecto.triggerDragStart(e);\n     * });\n     */\n    public triggerDragStart(e: MouseEvent | TouchEvent) {\n        this.dragger.triggerDragStart(e);\n        return this;\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.keycon && this.keycon.destroy();\n        this.dragger.unset();\n        this.injectResult.destroy();\n        removeEvent(document, \"selectstart\", this.onDocumentSelectStart);\n\n        this.keycon = null;\n        this.dragger = null;\n        this.injectResult = null;\n        this.target = null;\n        this.container = null;\n        this.options = null;\n    }\n\n    /**\n     * External click or mouse events can be applied to the selecto.\n     * @params - Extenal click or mouse event\n     * @params - Specify the clicked target directly.\n     */\n    public clickTarget(e: MouseEvent | TouchEvent, clickedTarget?: Element): this {\n        const { clientX, clientY } = getClient(e);\n        const dragEvent: OnDragEvent = {\n            datas: {},\n            clientX,\n            clientY,\n            inputEvent: e,\n        };\n        if (this.onDragStart(dragEvent, clickedTarget)) {\n            this.onDragEnd(dragEvent);\n        }\n        return this;\n    }\n    private setKeyController() {\n        const { keyContainer, toggleContinueSelect } = this.options;\n\n        if (this.keycon) {\n            this.keycon.destroy();\n            this.keycon = null;\n        }\n        if (toggleContinueSelect) {\n            this.keycon = new KeyController(keyContainer || window);\n            this.keycon.keydown(this.onKeyDown).keyup(this.onKeyUp).on(\"blur\", this.onBlur);\n        }\n    }\n    private setKeyEvent() {\n        const { toggleContinueSelect } = this.options;\n        if (!toggleContinueSelect || this.keycon) {\n            return;\n        }\n        this.setKeyController();\n    }\n    private initElement() {\n        this.target = createElement(\n            <div className={CLASS_NAME}></div> as any,\n            this.target,\n            this.container,\n        );\n\n        const target = this.target;\n\n        const { dragContainer, checkInput, preventDefault } = this.options;\n        this.dragContainer = typeof dragContainer === \"string\"\n            ? [].slice.call(document.querySelectorAll(dragContainer))\n            : (this.options.dragContainer || this.target.parentNode as any);\n        this.dragger = new Dragger(this.dragContainer, {\n            container: window,\n            checkInput,\n            preventDefault,\n            dragstart: this.onDragStart,\n            drag: this.onDrag,\n            dragend: this.onDragEnd,\n        });\n        addEvent(document, \"selectstart\", this.onDocumentSelectStart);\n\n        this.injectResult = injector.inject(target, {\n            nonce: this.options.cspNonce,\n        });\n    }\n    private hitTest(\n        selectRect: Rect,\n        clientX: number,\n        clientY: number,\n        targets: Array<HTMLElement | SVGElement>,\n        rects: Rect[],\n    ) {\n        const { hitRate, selectByClick } = this.options;\n        const { left, top, right, bottom } = selectRect;\n        const passedTargets: Array<HTMLElement | SVGElement> = [];\n\n        rects.forEach((rect, i) => {\n            const {\n                left: rectLeft,\n                top: rectTop,\n                right: rectRight,\n                bottom: rectBottom,\n            } = rect;\n            const isStart\n                = rectLeft <= clientX\n                && clientX <= rectRight\n                && rectTop <= clientY\n                && clientY <= rectBottom;\n            const rectSize = (rectRight - rectLeft) * (rectBottom - rectTop);\n            const testLeft = Math.max(rectLeft, left);\n            const testRight = Math.min(rectRight, right);\n            const testTop = Math.max(rectTop, top);\n            const testBottom = Math.min(rectBottom, bottom);\n\n            if (selectByClick && isStart) {\n                passedTargets.push(targets[i]);\n                return;\n            }\n            if (testRight < testLeft || testBottom < testTop) {\n                return;\n            }\n            const rate = Math.round((testRight - testLeft) * (testBottom - testTop) / rectSize * 100);\n\n            if (rate >= hitRate) {\n                passedTargets.push(targets[i]);\n            }\n        });\n\n        return passedTargets;\n    }\n    private initDragScroll() {\n        this.dragScroll.on(\"scroll\", ({ container, direction }) => {\n            this.trigger(\"scroll\", {\n                container,\n                direction,\n            });\n        }).on(\"move\", ({ offsetX, offsetY, inputEvent }) => {\n            const datas = inputEvent.datas;\n            datas.startX -= offsetX;\n            datas.startY -= offsetY;\n            datas.selectableRects.forEach(rect => {\n                rect.top -= offsetY;\n                rect.bottom -= offsetY;\n                rect.left -= offsetX;\n                rect.right -= offsetX;\n            });\n            this.dragger.scrollBy(offsetX, offsetY, inputEvent.inputEvent, false);\n\n            inputEvent.distX += offsetX;\n            inputEvent.distY += offsetY;\n            this.check(inputEvent);\n        });\n    }\n    private getSelectableTargets() {\n        const selectableTargets: Array<HTMLElement | SVGElement> = [];\n\n        this.options.selectableTargets.forEach(target => {\n            if (isObject(target)) {\n                selectableTargets.push(target);\n            } else {\n                const elements = [].slice.call(document.querySelectorAll(target));\n\n                elements.forEach(el => {\n                    selectableTargets.push(el);\n                });\n            }\n        });\n\n        return selectableTargets;\n    }\n    private getSelectedTargets(passedTargets: Array<HTMLElement | SVGElement>) {\n        const {\n            list,\n            prevList,\n            added,\n            removed,\n        } = diff(this.selectedTargets, passedTargets) as ChildrenDiffResult<HTMLElement | SVGElement>;\n\n        return added.map(index => list[index]).concat(removed.map(index => prevList[index]));\n    }\n    private select(\n        selectedTargets: Array<HTMLElement | SVGElement>, rect: Rect, inputEvent: any, isStart?: boolean) {\n        const {\n            added,\n            removed,\n            prevList,\n            list,\n        } = this.differ.update(selectedTargets);\n\n        if (isStart) {\n            /**\n             * When the select(drag) starts, the selectStart event is called.\n             * @memberof Selecto\n             * @event selectStart\n             * @param {Selecto.OnSelect} - Parameters for the selectStart event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"selectStart\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * }).on(\"selectEnd\", e => {\n             *   e.afterAdded.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.afterRemoved.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.trigger(\"selectStart\", {\n                selected: selectedTargets,\n                added: added.map(index => list[index]),\n                removed: removed.map(index => prevList[index]),\n                rect,\n                inputEvent,\n            });\n        }\n        if (added.length || removed.length) {\n            /**\n             * When the select in real time, the select event is called.\n             * @memberof Selecto\n             * @event select\n             * @param {Selecto.OnSelect} - Parameters for the select event\n             * @example\n             * import Selecto from \"selecto\";\n             *\n             * const selecto = new Selecto({\n             *   container: document.body,\n             *   selectByClick: true,\n             *   selectFromInside: false,\n             * });\n             *\n             * selecto.on(\"select\", e => {\n             *   e.added.forEach(el => {\n             *     el.classList.add(\"selected\");\n             *   });\n             *   e.removed.forEach(el => {\n             *     el.classList.remove(\"selected\");\n             *   });\n             * });\n             */\n            this.trigger(\"select\", {\n                selected: selectedTargets,\n                added: added.map(index => list[index]),\n                removed: removed.map(index => prevList[index]),\n                rect,\n                inputEvent,\n            });\n        }\n    }\n    private selectEnd(\n        startSelectedTargets: Array<HTMLElement | SVGElement>,\n        selectedTargets: Array<HTMLElement | SVGElement>,\n        rect: Rect,\n        e: OnDragEvent,\n    ) {\n        const { inputEvent, isDouble } = e;\n        const {\n            added,\n            removed,\n            prevList,\n            list,\n        } = diff(startSelectedTargets, selectedTargets);\n        const {\n            added: afterAdded,\n            removed: afterRemoved,\n            prevList: afterPrevList,\n            list: afterList,\n        } = diff(this.selectedTargets, selectedTargets);\n        const type = inputEvent.type;\n        const isDragStart = type === \"mousedown\" || type === \"touchstart\";\n\n        /**\n         * When the select(dragEnd or click) ends, the selectEnd event is called.\n         * @memberof Selecto\n         * @event selectEnd\n         * @param {Selecto.OnSelectEnd} - Parameters for the selectEnd event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"selectStart\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * }).on(\"selectEnd\", e => {\n         *   e.afterAdded.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.afterRemoved.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"selectEnd\", {\n            selected: selectedTargets,\n            added: added.map(index => list[index]),\n            removed: removed.map(index => prevList[index]),\n            afterAdded: afterAdded.map(index => afterList[index]),\n            afterRemoved: afterRemoved.map(index => afterPrevList[index]),\n            isDragStart,\n            isDouble: !!isDouble,\n            rect,\n            inputEvent,\n        });\n    }\n    private onDragStart = (e: OnDragEvent, clickedTarget?: Element) => {\n        const { datas, clientX, clientY, inputEvent } = e;\n        const { continueSelect, selectFromInside, selectByClick } = this.options;\n        const selectableTargets = this.getSelectableTargets();\n        const selectableRects = selectableTargets.map(target => {\n            const rect = target.getBoundingClientRect();\n            const { left, top, width, height } = rect;\n\n            return {\n                left,\n                top,\n                right: left + width,\n                bottom: top + height,\n                width,\n                height,\n            };\n        });\n        datas.selectableTargets = selectableTargets;\n        datas.selectableRects = selectableRects;\n        datas.startSelectedTargets = this.selectedTargets;\n\n        let pointTarget = (clickedTarget || document.elementFromPoint(clientX, clientY)) as HTMLElement | SVGElement ;\n        const hitRect = {\n            left: clientX,\n            top: clientY,\n            right: clientX,\n            bottom: clientY,\n            width: 0,\n            height: 0,\n        };\n        while (pointTarget) {\n            if (selectableTargets.indexOf(pointTarget as HTMLElement | SVGElement) > -1) {\n                break;\n            }\n            pointTarget = pointTarget.parentElement;\n        }\n        let firstPassedTargets = pointTarget ? [pointTarget] : [];\n\n        const hasInsideTargets = firstPassedTargets.length > 0;\n        const isPreventSelect = !selectFromInside && hasInsideTargets;\n\n        if (isPreventSelect && !selectByClick) {\n            return false;\n        }\n        const type = inputEvent.type;\n        const isTrusted = type === \"mousedown\" || type === \"touchstart\";\n        /**\n         * When the drag starts, the dragStart event is called.\n         * Call the stop () function if you have a specific element or don't want to raise a select\n         * @memberof Selecto\n         * @event dragStart\n         * @param {OnDragStart} - Parameters for the dragStart event\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   selectByClick: true,\n         *   selectFromInside: false,\n         * });\n         *\n         * selecto.on(\"dragStart\", e => {\n         *   if (e.inputEvent.target.tagName === \"SPAN\") {\n         *     e.stop();\n         *   }\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        const result = isTrusted ? this.trigger(\"dragStart\", e) : true;\n\n        if (!result) {\n            return false;\n        }\n\n        if (!continueSelect) {\n            this.selectedTargets = [];\n        } else {\n            firstPassedTargets = this.getSelectedTargets(firstPassedTargets);\n        }\n\n        this.select(firstPassedTargets, hitRect, inputEvent, true);\n        datas.startX = clientX;\n        datas.startY = clientY;\n        datas.selectedTargets = firstPassedTargets;\n        this.target.style.cssText\n            += `left:0px;top:0px;transform: translate(${clientX}px, ${clientY}px)`;\n\n        if (isPreventSelect && selectByClick) {\n            this.onDragEnd(e);\n            inputEvent.preventDefault();\n            return false;\n        } else {\n            if (type === \"touchstart\") {\n                inputEvent.preventDefault();\n            }\n            const { scrollOptions } = this.options;\n            if (scrollOptions && scrollOptions.container) {\n                this.dragScroll.dragStart(e, scrollOptions);\n            }\n            return true;\n        }\n    }\n    private check(e: any) {\n        const {\n            datas,\n            inputEvent,\n        } = e;\n        const rect = getRect(e);\n        const {\n            top,\n            left,\n            width,\n            height,\n        } = rect;\n        this.target.style.cssText\n            += `display: block;`\n            + `left:0px;top:0px;`\n            + `transform: translate(${left}px, ${top}px);`\n            + `width:${width}px;height:${height}px;`;\n\n        const passedTargets = this.hitTest(\n            rect, datas.startX, datas.startY, datas.selectableTargets, datas.selectableRects);\n        const selectedTargets = this.getSelectedTargets(passedTargets);\n\n        this.trigger(\"drag\", {\n            ...e,\n            rect,\n        });\n        this.select(selectedTargets, rect, inputEvent);\n        datas.selectedTargets = selectedTargets;\n    }\n    private onDrag = (e: OnDrag) => {\n        const { scrollOptions } = this.options;\n        if (scrollOptions && scrollOptions.container) {\n            if (this.dragScroll.drag(e, scrollOptions)) {\n                return;\n            }\n        }\n        this.check(e);\n    }\n    private onDragEnd = (e: OnDragEvent) => {\n        const { datas } = e;\n        const rect = getRect(e);\n        this.dragScroll.dragEnd();\n        this.target.style.cssText += \"display: none;\";\n        this.trigger(\"dragEnd\", {\n            ...e,\n            rect,\n        });\n        this.selectEnd(\n            datas.startSelectedTargets, datas.selectedTargets, rect, e);\n        this.selectedTargets = datas.selectedTargets;\n    }\n    private sameCombiKey(e: any) {\n        const toggleContinueSelect = [].concat(this.options.toggleContinueSelect);\n        const combi = getCombi(e.inputEvent, e.key);\n        return toggleContinueSelect.every(key => combi.indexOf(key) > -1);\n    }\n    private onKeyDown = (e: any) => {\n        if (!this.sameCombiKey(e)) {\n            return;\n        }\n        this.continueSelect = true;\n        /**\n         * When you keydown the key you specified in toggleContinueSelect, the keydown event is called.\n         * @memberof Selecto\n         * @event keydown\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"keydown\", {});\n    }\n    private onKeyUp = (e: any) => {\n        if (!this.sameCombiKey(e)) {\n            return;\n        }\n        this.continueSelect = false;\n        /**\n         * When you keyup the key you specified in toggleContinueSelect, the keyup event is called.\n         * @memberof Selecto\n         * @event keyup\n         * @example\n         * import Selecto from \"selecto\";\n         *\n         * const selecto = new Selecto({\n         *   container: document.body,\n         *   toggleContinueSelect: \"shift\";\n         *   keyContainer: window,\n         * });\n         *\n         * selecto.on(\"keydown\", () => {\n         *   document.querySelector(\".button\").classList.add(\"selected\");\n         * }).on(\"keyup\", () => {\n         *   document.querySelector(\".button\").classList.remove(\"selected\");\n         * }).on(\"select\", e => {\n         *   e.added.forEach(el => {\n         *     el.classList.add(\"selected\");\n         *   });\n         *   e.removed.forEach(el => {\n         *     el.classList.remove(\"selected\");\n         *   });\n         * });\n         */\n        this.trigger(\"keyup\", {});\n    }\n    private onBlur = () => {\n        if (this.toggleContinueSelect && this.continueSelect) {\n            this.trigger(\"keyup\", {});\n        }\n    }\n    private onDocumentSelectStart = (e: any) => {\n        if (!this.dragger.isFlag()) {\n            return;\n        }\n        let dragContainer = this.dragContainer;\n\n        if (dragContainer === window) {\n            dragContainer = document.documentElement;\n        }\n        const containers = dragContainer instanceof Element\n            ? [dragContainer] : [].slice.call(dragContainer) as Element[];\n        const target = e.target;\n\n        containers.some(container => {\n            if (container === target || container.contains(target)) {\n                e.preventDefault();\n                return true;\n            }\n        });\n    }\n}\n\ninterface Selecto extends Component, SelectoProperties {\n    on<T extends keyof SelectoEvents>(eventName: T, handlerToAttach: (event: SelectoEvents[T]) => any): this;\n    on(eventName: string, handlerToAttach: (event: { [key: string]: any }) => any): this;\n    on(events: { [key: string]: (event: { [key: string]: any }) => any }): this;\n}\n\nexport default Selecto;\n","import Selecto, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (Selecto as any)[name] = modules[name];\n}\n\nexport default Selecto;\n"],"names":["createElement","jsx","prevTarget","container","tag","children","attributes","className","style","el","document","name","setAttribute","elChildren","forEach","child","i","split","elStyle","appendChild","h","attrs","_i","_a","_b","_c","diffValue","prev","cur","func","getRect","e","distX","distY","datas","startX","startY","tx","Math","min","ty","width","abs","height","left","top","right","bottom","injector","CLASS_NAME","PROPERTIES","OPTIONS","__spreadArrays","OPTION_TYPES","target","dragContainer","selectableTargets","Array","selectByClick","Boolean","selectFromInside","continueSelect","toggleContinueSelect","keyContainer","hitRate","Number","scrollOptions","Object","checkInput","preventDefault","cspNonce","String","options","_super","_this","ChildrenDiffer","DragScroll","clickedTarget","clientX","clientY","inputEvent","getSelectableTargets","selectableRects","map","rect","getBoundingClientRect","startSelectedTargets","selectedTargets","pointTarget","elementFromPoint","hitRect","indexOf","parentElement","firstPassedTargets","hasInsideTargets","length","isPreventSelect","type","trigger","getSelectedTargets","select","cssText","onDragEnd","dragScroll","dragStart","drag","check","dragEnd","selectEnd","sameCombiKey","dragger","isFlag","window","documentElement","containers","Element","slice","call","some","contains","undefined","initElement","initDragScroll","setKeyController","differ","this","setKeyEvent","value","triggerDragStart","off","keycon","destroy","unset","injectResult","removeEvent","onDocumentSelectStart","touch","touches","changedTouches","dragEvent","onDragStart","KeyController","keydown","onKeyDown","keyup","onKeyUp","on","onBlur","querySelectorAll","parentNode","Dragger","dragstart","onDrag","dragend","addEvent","inject","nonce","selectRect","targets","rects","passedTargets","rectLeft","rectTop","rectRight","rectBottom","isStart","rectSize","testLeft","max","testRight","testTop","testBottom","push","rate","round","direction","offsetX","offsetY","scrollBy","list","prevList","added","removed","index","concat","selected","isDouble","afterAdded","afterRemoved","afterPrevList","afterList","isDragStart","hitTest","combi","getCombi","key","every","Selecto","prototype","property","enumerable","configurable","get","setter","set","defineProperty","Component","modules"],"mappings":"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"}
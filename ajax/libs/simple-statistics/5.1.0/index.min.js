"use strict";function linearRegression(e){var t,r,n=e.length;if(1===n)r=e[t=0][1];else{for(var a,o,i=0,s=0,u=0,l=0,h=0;h<n;h++)i+=a=(o=e[h])[0],s+=o=o[1],u+=a*a,l+=a*o;r=s/n-(t=(n*l-i*s)/(n*u-i*i))*i/n}return{m:t,b:r}}function linearRegressionLine(t){return function(e){return t.b+t.m*e}}function sum(e){if(0===e.length)return 0;for(var t,r=e[0],n=0,a=1;a<e.length;a++)t=r+e[a],Math.abs(r)>=Math.abs(e[a])?n+=r-t+e[a]:n+=e[a]-t+r,r=t;return r+n}function mean(e){if(0===e.length)throw new Error("mean requires at least one data point");return sum(e)/e.length}function sumNthPowerDeviations(e,t){var r,n,a=mean(e),o=0;if(2===t)for(n=0;n<e.length;n++)o+=(r=e[n]-a)*r;else for(n=0;n<e.length;n++)o+=Math.pow(e[n]-a,t);return o}function variance(e){if(0===e.length)throw new Error("variance requires at least one data point");return sumNthPowerDeviations(e,2)/e.length}function standardDeviation(e){if(1===e.length)return 0;e=variance(e);return Math.sqrt(e)}function rSquared(e,t){if(e.length<2)return 1;for(var r,n=0,a=0;a<e.length;a++)n+=e[a][1];r=n/e.length;for(var o=0,i=0;i<e.length;i++)o+=Math.pow(r-e[i][1],2);for(var s=0,u=0;u<e.length;u++)s+=Math.pow(e[u][1]-t(e[u][0]),2);return 1-s/o}function modeSorted(e){if(0===e.length)throw new Error("mode requires at least one data point");if(1===e.length)return e[0];for(var t=e[0],r=NaN,n=0,a=1,o=1;o<e.length+1;o++)e[o]!==t?(n<a&&(n=a,r=t),a=1,t=e[o]):a++;return r}function numericSort(e){return e.slice().sort(function(e,t){return e-t})}function mode(e){return modeSorted(numericSort(e))}function modeFast(e){for(var t,r=new Map,n=0,a=0;a<e.length;a++){var o=r.get(e[a]);void 0===o?o=1:o++,n<o&&(t=e[a],n=o),r.set(e[a],o)}if(0===n)throw new Error("mode requires at last one data point");return t}function min(e){if(0===e.length)throw new Error("min requires at least one data point");for(var t=e[0],r=1;r<e.length;r++)e[r]<t&&(t=e[r]);return t}function max(e){if(0===e.length)throw new Error("max requires at least one data point");for(var t=e[0],r=1;r<e.length;r++)e[r]>t&&(t=e[r]);return t}function minSorted(e){return e[0]}function maxSorted(e){return e[e.length-1]}function sumSimple(e){for(var t=0,r=0;r<e.length;r++)t+=e[r];return t}function product(e){for(var t=1,r=0;r<e.length;r++)t*=e[r];return t}function quantileSorted(e,t){var r=e.length*t;if(0===e.length)throw new Error("quantile requires at least one data point.");if(t<0||1<t)throw new Error("quantiles must be between 0 and 1");return 1===t?e[e.length-1]:0===t?e[0]:r%1!=0?e[Math.ceil(r)-1]:e.length%2==0?(e[r-1]+e[r])/2:e[r]}function quickselect(e,t,r,n){for(r=r||0,n=n||e.length-1;r<n;){var a,o,i,s;600<n-r&&(a=n-r+1,o=t-r+1,s=Math.log(a),i=.5*Math.exp(2*s/3),s=.5*Math.sqrt(s*i*(a-i)/a),o-a/2<0&&(s*=-1),quickselect(e,t,Math.max(r,Math.floor(t-o*i/a+s)),Math.min(n,Math.floor(t+(a-o)*i/a+s))));var u=e[t],l=r,h=n;for(swap(e,r,t),e[n]>u&&swap(e,r,n);l<h;){for(swap(e,l,h),l++,h--;e[l]<u;)l++;for(;e[h]>u;)h--}e[r]===u?swap(e,r,h):swap(e,++h,n),h<=t&&(r=h+1),t<=h&&(n=h-1)}}function swap(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function quantile(e,t){var r=e.slice();if(Array.isArray(t)){multiQuantileSelect(r,t);for(var n=[],a=0;a<t.length;a++)n[a]=quantileSorted(r,t[a]);return n}return quantileSelect(r,quantileIndex(r.length,t),0,r.length-1),quantileSorted(r,t)}function quantileSelect(e,t,r,n){t%1==0?quickselect(e,t,r,n):(quickselect(e,t=Math.floor(t),r,n),quickselect(e,t+1,t+1,n))}function multiQuantileSelect(e,t){for(var r=[0],n=0;n<t.length;n++)r.push(quantileIndex(e.length,t[n]));r.push(e.length-1),r.sort(compare);for(var a=[0,r.length-1];a.length;){var o,i=Math.ceil(a.pop()),s=Math.floor(a.pop());i-s<=1||(quantileSelect(e,r[o=Math.floor((s+i)/2)],r[s],r[i]),a.push(s,o,o,i))}}function compare(e,t){return e-t}function quantileIndex(e,t){var r=e*t;return 1===t?e-1:0===t?0:r%1!=0?Math.ceil(r)-1:e%2==0?r-.5:r}function interquartileRange(e){var t=quantile(e,.75),e=quantile(e,.25);if("number"==typeof t&&"number"==typeof e)return t-e}function median(e){return+quantile(e,.5)}function medianAbsoluteDeviation(e){for(var t=median(e),r=[],n=0;n<e.length;n++)r.push(Math.abs(e[n]-t));return median(r)}function chunk(e,t){var r=[];if(t<1)throw new Error("chunk size must be a positive number");if(Math.floor(t)!==t)throw new Error("chunk size must be an integer");for(var n=0;n<e.length;n+=t)r.push(e.slice(n,n+t));return r}function sampleWithReplacement(e,t,r){if(0===e.length)return[];r=r||Math.random;for(var n=e.length,a=[],o=0;o<t;o++){var i=Math.floor(r()*n);a.push(e[i])}return a}function shuffleInPlace(e,t){t=t||Math.random;for(var r,n,a=e.length;0<a;)n=Math.floor(t()*a--),r=e[a],e[a]=e[n],e[n]=r;return e}function shuffle(e,t){return shuffleInPlace(e.slice().slice(),t)}function sample(e,t,r){return shuffle(e,r).slice(0,t)}function uniqueCountSorted(e){for(var t,r=0,n=0;n<e.length;n++)0!==n&&e[n]===t||(t=e[n],r++);return r}function makeMatrix(e,t){for(var r=[],n=0;n<e;n++){for(var a=[],o=0;o<t;o++)a.push(0);r.push(a)}return r}function ssq(e,t,r,n){var a;return(t=0<e?(a=(r[t]-r[e-1])/(t-e+1),n[t]-n[e-1]-(t-e+1)*a*a):n[t]-r[t]*r[t]/(t+1))<0?0:t}function fillMatrixColumn(e,t,r,n,a,o,i){if(!(t<e)){var s=Math.floor((e+t)/2);n[r][s]=n[r-1][s-1],a[r][s]=s;var u=r;r<e&&(u=Math.max(u,a[r][e-1]||0)),u=Math.max(u,a[r-1][s]||0);var l,h,p=s-1;t<n.length-1&&(p=Math.min(p,a[r][t+1]||0));for(var f=p;u<=f&&!((l=ssq(f,s,o,i))+n[r-1][u-1]>=n[r][s]);--f)(h=ssq(u,s,o,i)+n[r-1][u-1])<n[r][s]&&(n[r][s]=h,a[r][s]=u),u++,(h=l+n[r-1][f-1])<n[r][s]&&(n[r][s]=h,a[r][s]=f);fillMatrixColumn(e,s-1,r,n,a,o,i),fillMatrixColumn(s+1,t,r,n,a,o,i)}}function fillMatrices(e,t,r){for(var n,a=t[0].length,o=e[Math.floor(a/2)],i=[],s=[],u=0;u<a;++u)n=e[u]-o,0===u?(i.push(n),s.push(n*n)):(i.push(i[u-1]+n),s.push(s[u-1]+n*n)),t[0][u]=ssq(0,u,i,s),r[0][u]=0;for(var l=1;l<t.length;++l)fillMatrixColumn(l<t.length-1?l:a-1,a-1,l,t,r,i,s)}function ckmeans(e,t){if(t>e.length)throw new Error("cannot generate more classes than there are data values");var r=numericSort(e);if(1===uniqueCountSorted(r))return[r];var e=makeMatrix(t,r.length),n=makeMatrix(t,r.length);fillMatrices(r,e,n);for(var a=[],o=n[0].length-1,i=n.length-1;0<=i;i--){var s=n[i][o];a[i]=r.slice(s,o+1),0<i&&(o=s-1)}return a}function equalIntervalBreaks(e,t){if(e.length<2)return e;for(var r=min(e),e=max(e),n=[r],a=(e-r)/t,o=1;o<t;o++)n.push(n[0]+a*o);return n.push(e),n}function sampleCovariance(e,t){if(e.length!==t.length)throw new Error("sampleCovariance requires samples with equal lengths");if(e.length<2)throw new Error("sampleCovariance requires at least two data points in each sample");for(var r=mean(e),n=mean(t),a=0,o=0;o<e.length;o++)a+=(e[o]-r)*(t[o]-n);return a/(e.length-1)}function sampleVariance(e){if(e.length<2)throw new Error("sampleVariance requires at least two data points");return sumNthPowerDeviations(e,2)/(e.length-1)}function sampleStandardDeviation(e){e=sampleVariance(e);return Math.sqrt(e)}function sampleCorrelation(e,t){return sampleCovariance(e,t)/sampleStandardDeviation(e)/sampleStandardDeviation(t)}function sampleSkewness(e){if(e.length<3)throw new Error("sampleSkewness requires at least three data points");for(var t,r=mean(e),n=0,a=0,o=0;o<e.length;o++)n+=(t=e[o]-r)*t,a+=t*t*t;var i=e.length-1,s=Math.sqrt(n/i),i=e.length;return i*a/((i-1)*(i-2)*Math.pow(s,3))}function sampleKurtosis(e){var t=e.length;if(t<4)throw new Error("sampleKurtosis requires at least four data points");for(var r,n=mean(e),a=0,o=0,i=0;i<t;i++)a+=(r=e[i]-n)*r,o+=r*r*r*r;return(t-1)/((t-2)*(t-3))*(t*(t+1)*o/(a*a)-3*(t-1))}function permutationsHeap(e){for(var t,r,n=new Array(e.length),a=[e.slice()],o=0;o<e.length;o++)n[o]=0;for(o=0;o<e.length;)n[o]<o?(o%2!=(t=0)&&(t=n[o]),r=e[t],e[t]=e[o],e[o]=r,a.push(e.slice()),n[o]++,o=0):(n[o]=0,o++);return a}function combinations(e,t){for(var r,n,a,o=[],i=0;i<e.length;i++)if(1===t)o.push([e[i]]);else for(n=combinations(e.slice(i+1,e.length),t-1),r=0;r<n.length;r++)(a=n[r]).unshift(e[i]),o.push(a);return o}function combinationsReplacement(e,t){for(var r=[],n=0;n<e.length;n++)if(1===t)r.push([e[n]]);else for(var a=combinationsReplacement(e.slice(n,e.length),t-1),o=0;o<a.length;o++)r.push([e[n]].concat(a[o]));return r}function addToMean(e,t,r){return e+(r-e)/(t+1)}function combineMeans(e,t,r,n){return(e*t+r*n)/(t+n)}function combineVariances(e,t,r,n,a,o){var i=combineMeans(t,r,a,o);return(r*(e+Math.pow(t-i,2))+o*(n+Math.pow(a-i,2)))/(r+o)}function geometricMean(e){if(0===e.length)throw new Error("geometricMean requires at least one data point");for(var t=1,r=0;r<e.length;r++){if(e[r]<=0)throw new Error("geometricMean requires only positive numbers as input");t*=e[r]}return Math.pow(t,1/e.length)}function harmonicMean(e){if(0===e.length)throw new Error("harmonicMean requires at least one data point");for(var t=0,r=0;r<e.length;r++){if(e[r]<=0)throw new Error("harmonicMean requires only positive numbers as input");t+=1/e[r]}return e.length/t}function medianSorted(e){return quantileSorted(e,.5)}function subtractFromMean(e,t,r){return(e*t-r)/(t-1)}function rootMeanSquare(e){if(0===e.length)throw new Error("rootMeanSquare requires at least one data point");for(var t=0,r=0;r<e.length;r++)t+=Math.pow(e[r],2);return Math.sqrt(t/e.length)}function tTest(e,t){return(mean(e)-t)/(standardDeviation(e)/Math.sqrt(e.length))}function tTestTwoSample(e,t,r){var n=e.length,a=t.length;if(!n||!a)return null;r=r||0;var o=mean(e),i=mean(t),e=sampleVariance(e),t=sampleVariance(t);if("number"==typeof o&&"number"==typeof i&&"number"==typeof e&&"number"==typeof t){t=((n-1)*e+(a-1)*t)/(n+a-2);return(o-i-r)/Math.sqrt(t*(1/n+1/a))}}function BayesianClassifier(){this.totalCount=0,this.data={}}function PerceptronModel(){this.weights=[],this.bias=0}Object.defineProperty(exports,"__esModule",{value:!0}),BayesianClassifier.prototype.train=function(e,t){for(var r in this.data[t]||(this.data[t]={}),e){var n=e[r];void 0===this.data[t][r]&&(this.data[t][r]={}),void 0===this.data[t][r][n]&&(this.data[t][r][n]=0),this.data[t][r][n]++}this.totalCount++},BayesianClassifier.prototype.score=function(e){var t,r,n={};for(r in e){var a=e[r];for(t in this.data)n[t]={},this.data[t][r]?n[t][r+"_"+a]=(this.data[t][r][a]||0)/this.totalCount:n[t][r+"_"+a]=0}var o={};for(t in n)for(var i in o[t]=0,n[t])o[t]+=n[t][i];return o},PerceptronModel.prototype.predict=function(e){if(e.length!==this.weights.length)return null;for(var t=0,r=0;r<this.weights.length;r++)t+=this.weights[r]*e[r];return 0<(t+=this.bias)?1:0},PerceptronModel.prototype.train=function(e,t){if(0!==t&&1!==t)return null;e.length!==this.weights.length&&(this.weights=e,this.bias=1);var r=this.predict(e);if(r!==t){for(var n=t-r,a=0;a<this.weights.length;a++)this.weights[a]+=n*e[a];this.bias+=n}return this};var epsilon=1e-4;function factorial(e){if(e<0)throw new Error("factorial requires a non-negative value");if(Math.floor(e)!==e)throw new Error("factorial requires an integer input");for(var t=1,r=2;r<=e;r++)t*=r;return t}function bernoulliDistribution(e){if(e<0||1<e)throw new Error("bernoulliDistribution requires probability to be between 0 and 1 inclusive");return[1-e,e]}function binomialDistribution(e,t){if(!(t<0||1<t||e<=0||e%1!=0)){for(var r=0,n=0,a=[],o=1;a[r]=o*Math.pow(t,r)*Math.pow(1-t,e-r),n+=a[r],o=o*(e-++r+1)/r,n<1-epsilon;);return a}}function poissonDistribution(e){if(!(e<=0)){for(var t=0,r=0,n=[],a=1;n[t]=Math.exp(-e)*Math.pow(e,t)/a,r+=n[t],a*=++t,r<1-epsilon;);return n}}var chiSquaredDistributionTable={1:{.995:0,.99:0,.975:0,.95:0,.9:.02,.5:.45,.1:2.71,.05:3.84,.025:5.02,.01:6.63,.005:7.88},2:{.995:.01,.99:.02,.975:.05,.95:.1,.9:.21,.5:1.39,.1:4.61,.05:5.99,.025:7.38,.01:9.21,.005:10.6},3:{.995:.07,.99:.11,.975:.22,.95:.35,.9:.58,.5:2.37,.1:6.25,.05:7.81,.025:9.35,.01:11.34,.005:12.84},4:{.995:.21,.99:.3,.975:.48,.95:.71,.9:1.06,.5:3.36,.1:7.78,.05:9.49,.025:11.14,.01:13.28,.005:14.86},5:{.995:.41,.99:.55,.975:.83,.95:1.15,.9:1.61,.5:4.35,.1:9.24,.05:11.07,.025:12.83,.01:15.09,.005:16.75},6:{.995:.68,.99:.87,.975:1.24,.95:1.64,.9:2.2,.5:5.35,.1:10.65,.05:12.59,.025:14.45,.01:16.81,.005:18.55},7:{.995:.99,.99:1.25,.975:1.69,.95:2.17,.9:2.83,.5:6.35,.1:12.02,.05:14.07,.025:16.01,.01:18.48,.005:20.28},8:{.995:1.34,.99:1.65,.975:2.18,.95:2.73,.9:3.49,.5:7.34,.1:13.36,.05:15.51,.025:17.53,.01:20.09,.005:21.96},9:{.995:1.73,.99:2.09,.975:2.7,.95:3.33,.9:4.17,.5:8.34,.1:14.68,.05:16.92,.025:19.02,.01:21.67,.005:23.59},10:{.995:2.16,.99:2.56,.975:3.25,.95:3.94,.9:4.87,.5:9.34,.1:15.99,.05:18.31,.025:20.48,.01:23.21,.005:25.19},11:{.995:2.6,.99:3.05,.975:3.82,.95:4.57,.9:5.58,.5:10.34,.1:17.28,.05:19.68,.025:21.92,.01:24.72,.005:26.76},12:{.995:3.07,.99:3.57,.975:4.4,.95:5.23,.9:6.3,.5:11.34,.1:18.55,.05:21.03,.025:23.34,.01:26.22,.005:28.3},13:{.995:3.57,.99:4.11,.975:5.01,.95:5.89,.9:7.04,.5:12.34,.1:19.81,.05:22.36,.025:24.74,.01:27.69,.005:29.82},14:{.995:4.07,.99:4.66,.975:5.63,.95:6.57,.9:7.79,.5:13.34,.1:21.06,.05:23.68,.025:26.12,.01:29.14,.005:31.32},15:{.995:4.6,.99:5.23,.975:6.27,.95:7.26,.9:8.55,.5:14.34,.1:22.31,.05:25,.025:27.49,.01:30.58,.005:32.8},16:{.995:5.14,.99:5.81,.975:6.91,.95:7.96,.9:9.31,.5:15.34,.1:23.54,.05:26.3,.025:28.85,.01:32,.005:34.27},17:{.995:5.7,.99:6.41,.975:7.56,.95:8.67,.9:10.09,.5:16.34,.1:24.77,.05:27.59,.025:30.19,.01:33.41,.005:35.72},18:{.995:6.26,.99:7.01,.975:8.23,.95:9.39,.9:10.87,.5:17.34,.1:25.99,.05:28.87,.025:31.53,.01:34.81,.005:37.16},19:{.995:6.84,.99:7.63,.975:8.91,.95:10.12,.9:11.65,.5:18.34,.1:27.2,.05:30.14,.025:32.85,.01:36.19,.005:38.58},20:{.995:7.43,.99:8.26,.975:9.59,.95:10.85,.9:12.44,.5:19.34,.1:28.41,.05:31.41,.025:34.17,.01:37.57,.005:40},21:{.995:8.03,.99:8.9,.975:10.28,.95:11.59,.9:13.24,.5:20.34,.1:29.62,.05:32.67,.025:35.48,.01:38.93,.005:41.4},22:{.995:8.64,.99:9.54,.975:10.98,.95:12.34,.9:14.04,.5:21.34,.1:30.81,.05:33.92,.025:36.78,.01:40.29,.005:42.8},23:{.995:9.26,.99:10.2,.975:11.69,.95:13.09,.9:14.85,.5:22.34,.1:32.01,.05:35.17,.025:38.08,.01:41.64,.005:44.18},24:{.995:9.89,.99:10.86,.975:12.4,.95:13.85,.9:15.66,.5:23.34,.1:33.2,.05:36.42,.025:39.36,.01:42.98,.005:45.56},25:{.995:10.52,.99:11.52,.975:13.12,.95:14.61,.9:16.47,.5:24.34,.1:34.28,.05:37.65,.025:40.65,.01:44.31,.005:46.93},26:{.995:11.16,.99:12.2,.975:13.84,.95:15.38,.9:17.29,.5:25.34,.1:35.56,.05:38.89,.025:41.92,.01:45.64,.005:48.29},27:{.995:11.81,.99:12.88,.975:14.57,.95:16.15,.9:18.11,.5:26.34,.1:36.74,.05:40.11,.025:43.19,.01:46.96,.005:49.65},28:{.995:12.46,.99:13.57,.975:15.31,.95:16.93,.9:18.94,.5:27.34,.1:37.92,.05:41.34,.025:44.46,.01:48.28,.005:50.99},29:{.995:13.12,.99:14.26,.975:16.05,.95:17.71,.9:19.77,.5:28.34,.1:39.09,.05:42.56,.025:45.72,.01:49.59,.005:52.34},30:{.995:13.79,.99:14.95,.975:16.79,.95:18.49,.9:20.6,.5:29.34,.1:40.26,.05:43.77,.025:46.98,.01:50.89,.005:53.67},40:{.995:20.71,.99:22.16,.975:24.43,.95:26.51,.9:29.05,.5:39.34,.1:51.81,.05:55.76,.025:59.34,.01:63.69,.005:66.77},50:{.995:27.99,.99:29.71,.975:32.36,.95:34.76,.9:37.69,.5:49.33,.1:63.17,.05:67.5,.025:71.42,.01:76.15,.005:79.49},60:{.995:35.53,.99:37.48,.975:40.48,.95:43.19,.9:46.46,.5:59.33,.1:74.4,.05:79.08,.025:83.3,.01:88.38,.005:91.95},70:{.995:43.28,.99:45.44,.975:48.76,.95:51.74,.9:55.33,.5:69.33,.1:85.53,.05:90.53,.025:95.02,.01:100.42,.005:104.22},80:{.995:51.17,.99:53.54,.975:57.15,.95:60.39,.9:64.28,.5:79.33,.1:96.58,.05:101.88,.025:106.63,.01:112.33,.005:116.32},90:{.995:59.2,.99:61.75,.975:65.65,.95:69.13,.9:73.29,.5:89.33,.1:107.57,.05:113.14,.025:118.14,.01:124.12,.005:128.3},100:{.995:67.33,.99:70.06,.975:74.22,.95:77.93,.9:82.36,.5:99.33,.1:118.5,.05:124.34,.025:129.56,.01:135.81,.005:140.17}};function chiSquaredGoodnessOfFit(e,t,r){for(var n,a=0,o=t(mean(e)),i=[],s=[],u=0;u<e.length;u++)void 0===i[e[u]]&&(i[e[u]]=0),i[e[u]]++;for(u=0;u<i.length;u++)void 0===i[u]&&(i[u]=0);for(n in o)n in i&&(s[+n]=o[n]*e.length);for(n=s.length-1;0<=n;n--)s[n]<3&&(s[n-1]+=s[n],s.pop(),i[n-1]+=i[n],i.pop());for(n=0;n<i.length;n++)a+=Math.pow(i[n]-s[n],2)/s[n];return t=i.length-1-1,chiSquaredDistributionTable[t][r]<a}var SQRT_2PI=Math.sqrt(2*Math.PI),kernels={gaussian:function(e){return Math.exp(-.5*e*e)/SQRT_2PI}},bandwidthMethods={nrd:function(e){var t=sampleStandardDeviation(e),r=interquartileRange(e);return"number"==typeof r&&(t=Math.min(t,r/1.34)),1.06*t*Math.pow(e.length,-.2)}};function kernelDensityEstimation(n,e,t){var a,o;if(void 0===e)a=kernels.gaussian;else if("string"==typeof e){if(!kernels[e])throw new Error('Unknown kernel "'+e+'"');a=kernels[e]}else a=e;if(void 0===t)o=bandwidthMethods.nrd(n);else if("string"==typeof t){if(!bandwidthMethods[t])throw new Error('Unknown bandwidth method "'+t+'"');o=bandwidthMethods[t](n)}else o=t;return function(e){for(var t=0,r=0,t=0;t<n.length;t++)r+=a((e-n[t])/o);return r/o/n.length}}function zScore(e,t,r){return(e-t)/r}var SQRT_2PI$1=Math.sqrt(2*Math.PI);function cumulativeDistribution(e){for(var t=e,r=e,n=1;n<15;n++)t+=r*=e*e/(2*n+1);return Math.round(1e4*(.5+t/SQRT_2PI$1*Math.exp(-e*e/2)))/1e4}for(var standardNormalTable=[],z=0;z<=3.09;z+=.01)standardNormalTable.push(cumulativeDistribution(z));function cumulativeStdNormalProbability(e){var t=Math.abs(e),t=Math.min(Math.round(100*t),standardNormalTable.length-1);return 0<=e?standardNormalTable[t]:+(1-standardNormalTable[t]).toFixed(4)}function errorFunction(e){var t=1/(1+.5*Math.abs(e)),t=t*Math.exp(-Math.pow(e,2)-1.26551223+1.00002368*t+.37409196*Math.pow(t,2)+.09678418*Math.pow(t,3)-.18628806*Math.pow(t,4)+.27886807*Math.pow(t,5)-1.13520398*Math.pow(t,6)+1.48851587*Math.pow(t,7)-.82215223*Math.pow(t,8)+.17087277*Math.pow(t,9));return 0<=e?1-t:t-1}function inverseErrorFunction(e){var t=8*(Math.PI-3)/(3*Math.PI*(4-Math.PI)),t=Math.sqrt(Math.sqrt(Math.pow(2/(Math.PI*t)+Math.log(1-e*e)/2,2)-Math.log(1-e*e)/t)-(2/(Math.PI*t)+Math.log(1-e*e)/2));return 0<=e?t:-t}function probit(e){return 0===e?e=epsilon:1<=e&&(e=1-epsilon),Math.sqrt(2)*inverseErrorFunction(2*e-1)}function sign(e){if("number"==typeof e)return e<0?-1:0===e?0:1;throw new TypeError("not a number")}function bisect(e,t,r,n,a){if("function"!=typeof e)throw new TypeError("func must be a function");for(var o=0;o<n;o++){var i=(t+r)/2;if(0===e(i)||Math.abs((r-t)/2)<a)return i;sign(e(i))===sign(e(t))?t=i:r=i}throw new Error("maximum number of iterations exceeded")}exports.linearRegression=linearRegression,exports.linearRegressionLine=linearRegressionLine,exports.standardDeviation=standardDeviation,exports.rSquared=rSquared,exports.mode=mode,exports.modeFast=modeFast,exports.modeSorted=modeSorted,exports.min=min,exports.max=max,exports.minSorted=minSorted,exports.maxSorted=maxSorted,exports.sum=sum,exports.sumSimple=sumSimple,exports.product=product,exports.quantile=quantile,exports.quantileSorted=quantileSorted,exports.interquartileRange=interquartileRange,exports.iqr=interquartileRange,exports.medianAbsoluteDeviation=medianAbsoluteDeviation,exports.mad=medianAbsoluteDeviation,exports.chunk=chunk,exports.sampleWithReplacement=sampleWithReplacement,exports.shuffle=shuffle,exports.shuffleInPlace=shuffleInPlace,exports.sample=sample,exports.ckmeans=ckmeans,exports.uniqueCountSorted=uniqueCountSorted,exports.sumNthPowerDeviations=sumNthPowerDeviations,exports.equalIntervalBreaks=equalIntervalBreaks,exports.sampleCovariance=sampleCovariance,exports.sampleCorrelation=sampleCorrelation,exports.sampleVariance=sampleVariance,exports.sampleStandardDeviation=sampleStandardDeviation,exports.sampleSkewness=sampleSkewness,exports.sampleKurtosis=sampleKurtosis,exports.permutationsHeap=permutationsHeap,exports.combinations=combinations,exports.combinationsReplacement=combinationsReplacement,exports.addToMean=addToMean,exports.combineMeans=combineMeans,exports.combineVariances=combineVariances,exports.geometricMean=geometricMean,exports.harmonicMean=harmonicMean,exports.average=mean,exports.mean=mean,exports.median=median,exports.medianSorted=medianSorted,exports.subtractFromMean=subtractFromMean,exports.rootMeanSquare=rootMeanSquare,exports.rms=rootMeanSquare,exports.variance=variance,exports.tTest=tTest,exports.tTestTwoSample=tTestTwoSample,exports.BayesianClassifier=BayesianClassifier,exports.bayesian=BayesianClassifier,exports.PerceptronModel=PerceptronModel,exports.perceptron=PerceptronModel,exports.epsilon=epsilon,exports.factorial=factorial,exports.bernoulliDistribution=bernoulliDistribution,exports.binomialDistribution=binomialDistribution,exports.poissonDistribution=poissonDistribution,exports.chiSquaredDistributionTable=chiSquaredDistributionTable,exports.chiSquaredGoodnessOfFit=chiSquaredGoodnessOfFit,exports.kernelDensityEstimation=kernelDensityEstimation,exports.kde=kernelDensityEstimation,exports.zScore=zScore,exports.cumulativeStdNormalProbability=cumulativeStdNormalProbability,exports.standardNormalTable=standardNormalTable,exports.errorFunction=errorFunction,exports.erf=errorFunction,exports.inverseErrorFunction=inverseErrorFunction,exports.probit=probit,exports.bisect=bisect,exports.quickselect=quickselect,exports.sign=sign,exports.numericSort=numericSort;
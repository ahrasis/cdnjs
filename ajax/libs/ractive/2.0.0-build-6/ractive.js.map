{"version":3,"file":"ractive.js","sources":["../src/polyfills/Object.assign.js","../src/polyfills/array.find.js","../src/polyfills/node.contains.js","../src/polyfills/performance.now.js","../src/polyfills/Promise.js","../src/polyfills/requestAnimationFrame.js"],"sourcesContent":["/* istanbul ignore if */\nif (!Object.assign) {\n  Object.assign = function (target, ...sources) {\n    if (target == null) throw new TypeError('Cannot convert undefined or null to object');\n\n    const to = Object(target);\n    const sourcesLength = sources.length;\n\n    for (let index = 0; index < sourcesLength; index++) {\n      const nextSource = sources[index];\n      for (const nextKey in nextSource) {\n        if (!Object.prototype.hasOwnProperty.call(nextSource, nextKey)) continue;\n        to[nextKey] = nextSource[nextKey];\n      }\n    }\n\n    return to;\n  };\n}\n","import { isFunction, isUndefined } from 'utils/is';\nimport { hasOwn, defineProperty } from 'utils/object';\n\n/* istanbul ignore if */\nif (!Array.prototype.find) {\n  defineProperty(Array.prototype, 'find', {\n    value(callback, thisArg) {\n      if (this === null || isUndefined(this))\n        throw new TypeError('Array.prototype.find called on null or undefined');\n\n      if (!isFunction(callback)) throw new TypeError(`${callback} is not a function`);\n\n      const array = Object(this);\n      const arrayLength = array.length >>> 0;\n\n      for (let index = 0; index < arrayLength; index++) {\n        if (!hasOwn(array, index)) continue;\n        if (!callback.call(thisArg, array[index], index, array)) continue;\n        return array[index];\n      }\n\n      return undefined;\n    },\n    configurable: true,\n    writable: true\n  });\n}\n","// NOTE: Node doesn't exist in IE8. Nothing can be done.\n/* istanbul ignore if */\nif (\n  typeof window !== 'undefined' &&\n  window.Node &&\n  window.Node.prototype &&\n  !window.Node.prototype.contains\n) {\n  Node.prototype.contains = function (node) {\n    if (!node) throw new TypeError('node required');\n\n    do {\n      if (this === node) return true;\n    } while ((node = node && node.parentNode));\n\n    return false;\n  };\n}\n","/* istanbul ignore if */\nif (typeof window !== 'undefined' && window.performance && !window.performance.now) {\n  window.performance = window.performance || {};\n\n  const nowOffset = Date.now();\n\n  window.performance.now = function () {\n    return Date.now() - nowOffset;\n  };\n}\n","import { base } from 'config/environment';\nimport { isFunction, isObjectType } from 'utils/is';\n\n/* istanbul ignore if */\nif (!base.Promise) {\n  const PENDING = {};\n  const FULFILLED = {};\n  const REJECTED = {};\n\n  const Promise = (base.Promise = function (callback) {\n    const fulfilledHandlers = [];\n    const rejectedHandlers = [];\n    let state = PENDING;\n    let result;\n    let dispatchHandlers;\n\n    const makeResolver = newState => {\n      return function (value) {\n        if (state !== PENDING) return;\n        result = value;\n        state = newState;\n        dispatchHandlers = makeDispatcher(\n          state === FULFILLED ? fulfilledHandlers : rejectedHandlers,\n          result\n        );\n        wait(dispatchHandlers);\n      };\n    };\n\n    const fulfill = makeResolver(FULFILLED);\n    const reject = makeResolver(REJECTED);\n\n    try {\n      callback(fulfill, reject);\n    } catch (err) {\n      reject(err);\n    }\n\n    return {\n      // `then()` returns a Promise - 2.2.7\n      then(onFulfilled, onRejected) {\n        const promise2 = new Promise((fulfill, reject) => {\n          const processResolutionHandler = (handler, handlers, forward) => {\n            if (isFunction(handler)) {\n              handlers.push(p1result => {\n                try {\n                  resolve(promise2, handler(p1result), fulfill, reject);\n                } catch (err) {\n                  reject(err);\n                }\n              });\n            } else {\n              handlers.push(forward);\n            }\n          };\n\n          processResolutionHandler(onFulfilled, fulfilledHandlers, fulfill);\n          processResolutionHandler(onRejected, rejectedHandlers, reject);\n\n          if (state !== PENDING) {\n            wait(dispatchHandlers);\n          }\n        });\n        return promise2;\n      },\n      catch(onRejected) {\n        return this.then(null, onRejected);\n      },\n      finally(callback) {\n        return this.then(\n          v => {\n            callback();\n            return v;\n          },\n          e => {\n            callback();\n            throw e;\n          }\n        );\n      }\n    };\n  });\n\n  Promise.all = function (promises) {\n    return new Promise((fulfill, reject) => {\n      const result = [];\n      let pending;\n      let i;\n\n      if (!promises.length) {\n        fulfill(result);\n        return;\n      }\n\n      const processPromise = (promise, i) => {\n        if (promise && isFunction(promise.then)) {\n          promise.then(value => {\n            result[i] = value;\n            --pending || fulfill(result);\n          }, reject);\n        } else {\n          result[i] = promise;\n          --pending || fulfill(result);\n        }\n      };\n\n      pending = i = promises.length;\n\n      while (i--) {\n        processPromise(promises[i], i);\n      }\n    });\n  };\n\n  Promise.race = function (promises) {\n    return new Promise((fulfill, reject) => {\n      let pending = true;\n      function ok(v) {\n        if (!pending) return;\n        pending = false;\n        fulfill(v);\n      }\n      function fail(e) {\n        if (!pending) return;\n        pending = false;\n        reject(e);\n      }\n      for (let i = 0; i < promises.length; i++) {\n        if (promises[i] && isFunction(promises[i].then)) {\n          promises[i].then(ok, fail);\n        }\n      }\n    });\n  };\n\n  Promise.resolve = function (value) {\n    if (value && isFunction(value.then)) return value;\n    return new Promise(fulfill => {\n      fulfill(value);\n    });\n  };\n\n  Promise.reject = function (reason) {\n    if (reason && isFunction(reason.then)) return reason;\n    return new Promise((fulfill, reject) => {\n      reject(reason);\n    });\n  };\n\n  // TODO use MutationObservers or something to simulate setImmediate\n  const wait = function (callback) {\n    setTimeout(callback, 0);\n  };\n\n  const makeDispatcher = function (handlers, result) {\n    return function () {\n      for (let handler; (handler = handlers.shift()); ) {\n        handler(result);\n      }\n    };\n  };\n\n  const resolve = function (promise, x, fulfil, reject) {\n    let then;\n    if (x === promise) {\n      throw new TypeError(`A promise's fulfillment handler cannot return the same promise`);\n    }\n    if (x instanceof Promise) {\n      x.then(fulfil, reject);\n    } else if (x && (isObjectType(x) || isFunction(x))) {\n      try {\n        then = x.then;\n      } catch (e) {\n        reject(e);\n        return;\n      }\n      if (isFunction(then)) {\n        let called;\n\n        const resolvePromise = function (y) {\n          if (called) return;\n          called = true;\n          resolve(promise, y, fulfil, reject);\n        };\n        const rejectPromise = function (r) {\n          if (called) return;\n          called = true;\n          reject(r);\n        };\n\n        try {\n          then.call(x, resolvePromise, rejectPromise);\n        } catch (e) {\n          if (!called) {\n            reject(e);\n            called = true;\n            return;\n          }\n        }\n      } else {\n        fulfil(x);\n      }\n    } else {\n      fulfil(x);\n    }\n  };\n}\n","/* istanbul ignore if */\nif (\n  typeof window !== 'undefined' &&\n  !(window.requestAnimationFrame && window.cancelAnimationFrame)\n) {\n  let lastTime = 0;\n  window.requestAnimationFrame = function (callback) {\n    const currentTime = Date.now();\n    const timeToNextCall = Math.max(0, 16 - (currentTime - lastTime));\n    const id = window.setTimeout(() => {\n      callback(currentTime + timeToNextCall);\n    }, timeToNextCall);\n    lastTime = currentTime + timeToNextCall;\n    return id;\n  };\n  window.cancelAnimationFrame = function (id) {\n    clearTimeout(id);\n  };\n}\n"],"names":["const","let","Promise","e"],"mappings":";;;;;;;;;;;;;;;;;EAAA;EACA,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;EACpB,EAAE,MAAM,CAAC,MAAM,GAAG,UAAU,MAAkB,EAAE;;;AAAC;EACjD,IAAI,IAAI,MAAM,IAAI,IAAI,IAAE,MAAM,IAAI,SAAS,CAAC,4CAA4C,CAAC,GAAC;AAC1F;EACA,IAAIA,IAAM,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;EAC9B,IAAIA,IAAM,aAAa,GAAG,OAAO,CAAC,MAAM,CAAC;AACzC;EACA,IAAI,KAAKC,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,aAAa,EAAE,KAAK,EAAE,EAAE;EACxD,MAAMD,IAAM,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;EACxC,MAAM,KAAKA,IAAM,OAAO,IAAI,UAAU,EAAE;EACxC,QAAQ,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,IAAE,WAAS;EACjF,QAAQ,EAAE,CAAC,OAAO,CAAC,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC;EAC1C,OAAO;EACP,KAAK;AACL;EACA,IAAI,OAAO,EAAE,CAAC;EACd,GAAG,CAAC;EACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECfA;EACA,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE;EAC3B,EAAE,cAAc,CAAC,KAAK,CAAC,SAAS,EAAE,MAAM,EAAE;EAC1C,IAAI,qBAAK,CAAC,QAAQ,EAAE,OAAO,EAAE;EAC7B,MAAM,IAAI,IAAI,KAAK,IAAI,IAAI,WAAW,CAAC,IAAI,CAAC;EAC5C,UAAQ,MAAM,IAAI,SAAS,CAAC,kDAAkD,CAAC,GAAC;AAChF;EACA,MAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAE,MAAM,IAAI,SAAS,EAAI,QAAQ,yBAAqB,GAAC;AACtF;EACA,MAAMA,IAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;EACjC,MAAMA,IAAM,WAAW,GAAG,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC;AAC7C;EACA,MAAM,KAAKC,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,WAAW,EAAE,KAAK,EAAE,EAAE;EACxD,QAAQ,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,IAAE,WAAS;EAC5C,QAAQ,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,IAAE,WAAS;EAC1E,QAAQ,OAAO,KAAK,CAAC,KAAK,CAAC,CAAC;EAC5B,OAAO;AACP;EACA,MAAM,OAAO,SAAS,CAAC;EACvB,KAAK;EACL,IAAI,YAAY,EAAE,IAAI;EACtB,IAAI,QAAQ,EAAE,IAAI;EAClB,GAAG,CAAC,CAAC;EACL;;EC1BA;EACA;EACA;EACA,EAAE,OAAO,MAAM,KAAK,WAAW;EAC/B,EAAE,MAAM,CAAC,IAAI;EACb,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS;EACvB,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ;EACjC,EAAE;EACF,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,UAAU,IAAI,EAAE;EAC5C,IAAI,IAAI,CAAC,IAAI,IAAE,MAAM,IAAI,SAAS,CAAC,eAAe,CAAC,GAAC;AACpD;EACA,IAAI,GAAG;EACP,MAAM,IAAI,IAAI,KAAK,IAAI,IAAE,OAAO,IAAI,GAAC;EACrC,KAAK,SAAS,IAAI,GAAG,IAAI,IAAI,IAAI,CAAC,UAAU,GAAG;AAC/C;EACA,IAAI,OAAO,KAAK,CAAC;EACjB,GAAG,CAAC;EACJ;;ECjBA;EACA,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM,CAAC,WAAW,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE;EACpF,EAAE,MAAM,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,IAAI,EAAE,CAAC;AAChD;EACA,EAAED,IAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;AAC/B;EACA,EAAE,MAAM,CAAC,WAAW,CAAC,GAAG,GAAG,YAAY;EACvC,IAAI,OAAO,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;EAClC,GAAG,CAAC;EACJ;;;;;;;;;;;;;ECNA;EACA,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;EACnB,EAAEA,IAAM,OAAO,GAAG,EAAE,CAAC;EACrB,EAAEA,IAAM,SAAS,GAAG,EAAE,CAAC;EACvB,EAAEA,IAAM,QAAQ,GAAG,EAAE,CAAC;AACtB;EACA,EAAEA,IAAME,SAAO,IAAI,IAAI,CAAC,OAAO,GAAG,UAAU,QAAQ,EAAE;EACtD,IAAIF,IAAM,iBAAiB,GAAG,EAAE,CAAC;EACjC,IAAIA,IAAM,gBAAgB,GAAG,EAAE,CAAC;EAChC,IAAIC,IAAI,KAAK,GAAG,OAAO,CAAC;EACxB,IAAIA,IAAI,MAAM,CAAC;EACf,IAAIA,IAAI,gBAAgB,CAAC;AACzB;EACA,IAAID,IAAM,YAAY,aAAG,UAAY;EACrC,MAAM,OAAO,UAAU,KAAK,EAAE;EAC9B,QAAQ,IAAI,KAAK,KAAK,OAAO,IAAE,SAAO;EACtC,QAAQ,MAAM,GAAG,KAAK,CAAC;EACvB,QAAQ,KAAK,GAAG,QAAQ,CAAC;EACzB,QAAQ,gBAAgB,GAAG,cAAc;EACzC,UAAU,KAAK,KAAK,SAAS,GAAG,iBAAiB,GAAG,gBAAgB;EACpE,UAAU,MAAM;EAChB,SAAS,CAAC;EACV,QAAQ,IAAI,CAAC,gBAAgB,CAAC,CAAC;EAC/B,OAAO,CAAC;EACR,KAAK,CAAC;AACN;EACA,IAAIA,IAAM,OAAO,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC;EAC5C,IAAIA,IAAM,MAAM,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;AAC1C;EACA,IAAI,IAAI;EACR,MAAM,QAAQ,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;EAChC,KAAK,CAAC,OAAO,GAAG,EAAE;EAClB,MAAM,MAAM,CAAC,GAAG,CAAC,CAAC;EAClB,KAAK;AACL;EACA,IAAI,OAAO;EACX;EACA,MAAM,mBAAI,CAAC,WAAW,EAAE,UAAU,EAAE;EACpC,QAAQA,IAAM,QAAQ,GAAG,IAAIE,SAAO,WAAE,OAAO,EAAE,MAAM,EAAK;EAC1D,UAAUF,IAAM,wBAAwB,aAAI,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAK;EAC3E,YAAY,IAAI,UAAU,CAAC,OAAO,CAAC,EAAE;EACrC,cAAc,QAAQ,CAAC,IAAI,WAAC,UAAY;EACxC,gBAAgB,IAAI;EACpB,kBAAkB,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;EACxE,iBAAiB,CAAC,OAAO,GAAG,EAAE;EAC9B,kBAAkB,MAAM,CAAC,GAAG,CAAC,CAAC;EAC9B,iBAAiB;EACjB,eAAe,CAAC,CAAC;EACjB,aAAa,MAAM;EACnB,cAAc,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;EACrC,aAAa;EACb,WAAW,CAAC;AACZ;EACA,UAAU,wBAAwB,CAAC,WAAW,EAAE,iBAAiB,EAAE,OAAO,CAAC,CAAC;EAC5E,UAAU,wBAAwB,CAAC,UAAU,EAAE,gBAAgB,EAAE,MAAM,CAAC,CAAC;AACzE;EACA,UAAU,IAAI,KAAK,KAAK,OAAO,EAAE;EACjC,YAAY,IAAI,CAAC,gBAAgB,CAAC,CAAC;EACnC,WAAW;EACX,SAAS,CAAC,CAAC;EACX,QAAQ,OAAO,QAAQ,CAAC;EACxB,OAAO;EACP,MAAM,uBAAK,CAAC,UAAU,EAAE;EACxB,QAAQ,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;EAC3C,OAAO;EACP,MAAM,2BAAO,CAAC,QAAQ,EAAE;EACxB,QAAQ,OAAO,IAAI,CAAC,IAAI;EACxB,oBAAU,GAAK;EACf,YAAY,QAAQ,EAAE,CAAC;EACvB,YAAY,OAAO,CAAC,CAAC;EACrB,WAAW;EACX,oBAAU,GAAK;EACf,YAAY,QAAQ,EAAE,CAAC;EACvB,YAAY,MAAM,CAAC,CAAC;EACpB,WAAW;EACX,SAAS,CAAC;EACV,OAAO;EACP,KAAK,CAAC;EACN,GAAG,CAAC,CAAC;AACL;EACA,EAAEE,SAAO,CAAC,GAAG,GAAG,UAAU,QAAQ,EAAE;EACpC,IAAI,OAAO,IAAIA,SAAO,WAAE,OAAO,EAAE,MAAM,EAAK;EAC5C,MAAMF,IAAM,MAAM,GAAG,EAAE,CAAC;EACxB,MAAMC,IAAI,OAAO,CAAC;EAClB,MAAMA,IAAI,CAAC,CAAC;AACZ;EACA,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;EAC5B,QAAQ,OAAO,CAAC,MAAM,CAAC,CAAC;EACxB,QAAQ,OAAO;EACf,OAAO;AACP;EACA,MAAMD,IAAM,cAAc,aAAI,OAAO,EAAE,CAAC,EAAK;EAC7C,QAAQ,IAAI,OAAO,IAAI,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;EACjD,UAAU,OAAO,CAAC,IAAI,WAAC,OAAS;EAChC,YAAY,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;EAC9B,YAAY,EAAE,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC;EACzC,WAAW,EAAE,MAAM,CAAC,CAAC;EACrB,SAAS,MAAM;EACf,UAAU,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC;EAC9B,UAAU,EAAE,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC;EACvC,SAAS;EACT,OAAO,CAAC;AACR;EACA,MAAM,OAAO,GAAG,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC;AACpC;EACA,MAAM,OAAO,CAAC,EAAE,EAAE;EAClB,QAAQ,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACvC,OAAO;EACP,KAAK,CAAC,CAAC;EACP,GAAG,CAAC;AACJ;EACA,EAAEE,SAAO,CAAC,IAAI,GAAG,UAAU,QAAQ,EAAE;EACrC,IAAI,OAAO,IAAIA,SAAO,WAAE,OAAO,EAAE,MAAM,EAAK;EAC5C,MAAMD,IAAI,OAAO,GAAG,IAAI,CAAC;EACzB,MAAM,SAAS,EAAE,CAAC,CAAC,EAAE;EACrB,QAAQ,IAAI,CAAC,OAAO,IAAE,SAAO;EAC7B,QAAQ,OAAO,GAAG,KAAK,CAAC;EACxB,QAAQ,OAAO,CAAC,CAAC,CAAC,CAAC;EACnB,OAAO;EACP,MAAM,SAAS,IAAI,CAAC,CAAC,EAAE;EACvB,QAAQ,IAAI,CAAC,OAAO,IAAE,SAAO;EAC7B,QAAQ,OAAO,GAAG,KAAK,CAAC;EACxB,QAAQ,MAAM,CAAC,CAAC,CAAC,CAAC;EAClB,OAAO;EACP,MAAM,KAAKA,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;EAChD,QAAQ,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;EACzD,UAAU,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;EACrC,SAAS;EACT,OAAO;EACP,KAAK,CAAC,CAAC;EACP,GAAG,CAAC;AACJ;EACA,EAAEC,SAAO,CAAC,OAAO,GAAG,UAAU,KAAK,EAAE;EACrC,IAAI,IAAI,KAAK,IAAI,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,IAAE,OAAO,KAAK,GAAC;EACtD,IAAI,OAAO,IAAIA,SAAO,WAAC,SAAW;EAClC,MAAM,OAAO,CAAC,KAAK,CAAC,CAAC;EACrB,KAAK,CAAC,CAAC;EACP,GAAG,CAAC;AACJ;EACA,EAAEA,SAAO,CAAC,MAAM,GAAG,UAAU,MAAM,EAAE;EACrC,IAAI,IAAI,MAAM,IAAI,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,IAAE,OAAO,MAAM,GAAC;EACzD,IAAI,OAAO,IAAIA,SAAO,WAAE,OAAO,EAAE,MAAM,EAAK;EAC5C,MAAM,MAAM,CAAC,MAAM,CAAC,CAAC;EACrB,KAAK,CAAC,CAAC;EACP,GAAG,CAAC;AACJ;EACA;EACA,EAAEF,IAAM,IAAI,GAAG,UAAU,QAAQ,EAAE;EACnC,IAAI,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;EAC5B,GAAG,CAAC;AACJ;EACA,EAAEA,IAAM,cAAc,GAAG,UAAU,QAAQ,EAAE,MAAM,EAAE;EACrD,IAAI,OAAO,YAAY;EACvB,MAAM,KAAKC,IAAI,kBAAO,GAAG,OAAO,GAAG,QAAQ,CAAC,KAAK,EAAE,KAAK;EACxD,QAAQ,OAAO,CAAC,MAAM,CAAC,CAAC;EACxB,OAAO;EACP,KAAK,CAAC;EACN,GAAG,CAAC;AACJ;EACA,EAAED,IAAM,OAAO,GAAG,UAAU,OAAO,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE;EACxD,IAAIC,IAAI,IAAI,CAAC;EACb,IAAI,IAAI,CAAC,KAAK,OAAO,EAAE;EACvB,MAAM,MAAM,IAAI,SAAS,CAAC,gEAAgE,CAAC,CAAC;EAC5F,KAAK;EACL,IAAI,IAAI,CAAC,YAAYC,SAAO,EAAE;EAC9B,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;EAC7B,KAAK,MAAM,IAAI,CAAC,KAAK,YAAY,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE;EACxD,MAAM,IAAI;EACV,QAAQ,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;EACtB,OAAO,CAAC,OAAO,CAAC,EAAE;EAClB,QAAQ,MAAM,CAAC,CAAC,CAAC,CAAC;EAClB,QAAQ,OAAO;EACf,OAAO;EACP,MAAM,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE;EAC5B,QAAQD,IAAI,MAAM,CAAC;AACnB;EACA,QAAQD,IAAM,cAAc,GAAG,UAAU,CAAC,EAAE;EAC5C,UAAU,IAAI,MAAM,IAAE,SAAO;EAC7B,UAAU,MAAM,GAAG,IAAI,CAAC;EACxB,UAAU,OAAO,CAAC,OAAO,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;EAC9C,SAAS,CAAC;EACV,QAAQA,IAAM,aAAa,GAAG,UAAU,CAAC,EAAE;EAC3C,UAAU,IAAI,MAAM,IAAE,SAAO;EAC7B,UAAU,MAAM,GAAG,IAAI,CAAC;EACxB,UAAU,MAAM,CAAC,CAAC,CAAC,CAAC;EACpB,SAAS,CAAC;AACV;EACA,QAAQ,IAAI;EACZ,UAAU,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,cAAc,EAAE,aAAa,CAAC,CAAC;EACtD,SAAS,CAAC,OAAOG,GAAC,EAAE;EACpB,UAAU,IAAI,CAAC,MAAM,EAAE;EACvB,YAAY,MAAM,CAACA,GAAC,CAAC,CAAC;EACtB,YAAY,MAAM,GAAG,IAAI,CAAC;EAC1B,YAAY,OAAO;EACnB,WAAW;EACX,SAAS;EACT,OAAO,MAAM;EACb,QAAQ,MAAM,CAAC,CAAC,CAAC,CAAC;EAClB,OAAO;EACP,KAAK,MAAM;EACX,MAAM,MAAM,CAAC,CAAC,CAAC,CAAC;EAChB,KAAK;EACL,GAAG,CAAC;EACJ;;EC9MA;EACA;EACA,EAAE,OAAO,MAAM,KAAK,WAAW;EAC/B,EAAE,EAAE,MAAM,CAAC,qBAAqB,IAAI,MAAM,CAAC,oBAAoB,CAAC;EAChE,EAAE;EACF,EAAEF,IAAI,QAAQ,GAAG,CAAC,CAAC;EACnB,EAAE,MAAM,CAAC,qBAAqB,GAAG,UAAU,QAAQ,EAAE;EACrD,IAAID,IAAM,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;EACnC,IAAIA,IAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,IAAI,WAAW,GAAG,QAAQ,CAAC,CAAC,CAAC;EACtE,IAAIA,IAAM,EAAE,GAAG,MAAM,CAAC,UAAU,aAAO;EACvC,MAAM,QAAQ,CAAC,WAAW,GAAG,cAAc,CAAC,CAAC;EAC7C,KAAK,EAAE,cAAc,CAAC,CAAC;EACvB,IAAI,QAAQ,GAAG,WAAW,GAAG,cAAc,CAAC;EAC5C,IAAI,OAAO,EAAE,CAAC;EACd,GAAG,CAAC;EACJ,EAAE,MAAM,CAAC,oBAAoB,GAAG,UAAU,EAAE,EAAE;EAC9C,IAAI,YAAY,CAAC,EAAE,CAAC,CAAC;EACr}
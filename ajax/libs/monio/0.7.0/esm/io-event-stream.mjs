/*! Monio: io-event-stream.mjs
    v0.7.0 (c) 2021 Kyle Simpson
    MIT License: http://getify.mit-license.org
*/
import{isFunction,curry}from"./lib/util.mjs";import IO from"./io.mjs";export default curry(ioEventStream);export{merge};export{zip};export{closeStreams};function ioEventStream(e,r,t={}){var{bufferSize:n=100,throwBufferOverflow:i=!1,evtOpts:o={}}=t;return IO((()=>{var t=[getDeferred()];return async function*eventStream(){isFunction(e.addEventListener)?e.addEventListener(r,handler,o):isFunction(e.addListener)?e.addListener(r,handler):isFunction(e.on)&&e.on(r,handler);try{for(;;)try{yield t[0].pr}finally{t.shift()}}finally{isFunction(e.removeEventListener)?e.removeEventListener(r,handler,o):isFunction(e.removeListener)?e.removeListener(r,handler):isFunction(e.off)&&e.off(r,handler),t.length=0}}();function handler(e){if(t.length<n){let r=t[t.length-1];t.push(getDeferred()),r.next(e)}else if(i){let r=new Error("Event stream buffer overflow");throw r.evt=e,r}}}))}function merge(...e){return IO((()=>async function*mergeStreams(){try{for(;;){let r=pullFromStreams(e);if(!(r.length>0))return;try{if(1==r.length){let[t,n,i]=await r[0];if(i.done)return void(e[t]=null);e[t]=n,yield i.value}else{let[t,n,i]=await Promise.race(r);e[t]=null,i.done||(e.push(n),yield i.value)}}catch(e){return Promise.reject(e)}}}finally{await closeStreams(e)}}()))}function zip(...e){return IO((()=>async function*zipStreams(){try{for(;;){let r=pullFromStreams(e);if(!(r.length>0))return;try{let t=(await Promise.all(r)).reduce((function getStreamVals(r,t){var[n,i,o]=t;return o.done?(e[n]=null,r):(e[n]=i,[...r,o.value])}),[]);if(!(t.length>0))return;yield t}catch(e){return Promise.reject(e)}}}finally{await closeStreams(e)}}()))}function pullFromStreams(e){return e.map((function callIter(r,t){return r&&"function"==typeof r.next?(e[t]=async function getNext(){var n=r.next();try{let i=await n;return e[t]=[t,r,i]}catch(r){return e[t]=null,n}}(),e[t]):r})).filter(Boolean)}function closeStreams(e){return Promise.all(e.map((async function closeStream(e){if(e&&"function"==typeof e.return)try{return await e.return()}catch(e){}})))}function getDeferred(){var e;return{pr:new Promise((r=>e=r)),next:e}}
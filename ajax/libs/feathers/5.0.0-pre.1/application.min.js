"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const debug_1=__importDefault(require("debug")),commons_1=require("@feathersjs/commons"),uberproto_1=__importDefault(require("uberproto")),events_1=__importDefault(require("./events")),hooks_1=__importDefault(require("./hooks")),version_1=__importDefault(require("./version")),debug=debug_1.default("feathers:application"),Proto=uberproto_1.default.extend({create:null});exports.default={init(){Object.assign(this,{version:version_1.default,methods:["find","get","create","update","patch","remove"],mixins:[],services:{},providers:[],_setup:!1,settings:{}}),this.configure(hooks_1.default()),this.configure(events_1.default())},get(e){return this.settings[e]},set(e,t){return this.settings[e]=t,this},disable(e){return this.settings[e]=!1,this},disabled(e){return!this.settings[e]},enable(e){return this.settings[e]=!0,this},enabled(e){return!!this.settings[e]},configure(e){return e.call(this,this),this},service(e){const t=commons_1.stripSlashes(e)||"/",s=this.services[t];return void 0===s&&"function"==typeof this.defaultService?this.use(t,this.defaultService(t)).service(t):s},use(e,t,s={}){if("string"!=typeof e)throw new Error(`'${e}' is not a valid service path.`);const i=commons_1.stripSlashes(e)||"/",r="function"==typeof t.service&&t.services,o=this.methods.concat("setup").some(e=>"function"==typeof t[e]);if(r){const e=t;return Object.keys(e.services).forEach(t=>this.use(`${i}/${t}`,e.service(t))),this}if(!o)throw new Error(`Invalid service object passed for path \`${i}\``);const u=Proto.isPrototypeOf(t)?t:Proto.extend(t);return debug(`Registering new service at \`${i}\``),this.mixins.forEach(e=>e.call(this,u,i,s)),"function"==typeof u._setup&&u._setup(this,i),this.providers.forEach(e=>e.call(this,u,i,s)),this._isSetup&&"function"==typeof u.setup&&(debug(`Setting up service for \`${i}\``),u.setup(this,i)),this.services[i]=u,this},setup(){return Object.keys(this.services).forEach(e=>{const t=this.services[e];debug(`Setting up service for \`${e}\``),"function"==typeof t.setup&&t.setup(this,e)}),this._isSetup=!0,this}};
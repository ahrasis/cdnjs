import{borders,display,flexbox,grid,positions,palette,shadows,sizing,spacing,typography,handleBreakpoints}from"@material-ui/system";import{deepmerge}from"@material-ui/utils";function objectsHaveSameKeys(...e){const t=e.reduce((e,t)=>e.concat(Object.keys(t)),[]),r=new Set(t);return e.every(e=>r.size===Object.keys(e).length)}const filterProps=[...borders.filterProps,...display.filterProps,...flexbox.filterProps,...grid.filterProps,...positions.filterProps,...palette.filterProps,...shadows.filterProps,...sizing.filterProps,...spacing.filterProps,...typography.filterProps,"sx"],getThemeValue=(e,t,r)=>{const s={[e]:t,theme:r};return-1!==borders.filterProps.indexOf(e)?borders(s):-1!==display.filterProps.indexOf(e)?display(s):-1!==flexbox.filterProps.indexOf(e)?flexbox(s):-1!==grid.filterProps.indexOf(e)?grid(s):-1!==positions.filterProps.indexOf(e)?positions(s):-1!==palette.filterProps.indexOf(e)?palette(s):-1!==shadows.filterProps.indexOf(e)?shadows(s):-1!==sizing.filterProps.indexOf(e)?sizing(s):-1!==spacing.filterProps.indexOf(e)?spacing(s):-1!==typography.filterProps.indexOf(e)?typography(s):{[e]:t}};export const styleFunctionSx=(e,t)=>{if(!e)return null;if("function"==typeof e)return e(t);if("object"!=typeof e)return e;let r={};return Object.keys(e).forEach(s=>{if("object"==typeof e[s])if(-1!==filterProps.indexOf(s))r=deepmerge(r,getThemeValue(s,e[s],t));else{const i=handleBreakpoints({theme:t},e[s],e=>({[s]:e}));if(objectsHaveSameKeys(i,e[s])){const i=styleFunctionSx(e[s],t);r[s]=i}else r=deepmerge(r,i)}else r="function"==typeof e[s]?deepmerge(r,{[s]:e[s](t)}):deepmerge(r,getThemeValue(s,e[s],t))}),r};const styleFunction=e=>{let t={};Object.keys(e).forEach(r=>{-1!==filterProps.indexOf(r)&&"sx"!==r&&(t=deepmerge(t,getThemeValue(r,e[r],e.theme)))});const r=styleFunctionSx(e.sx,e.theme);return deepmerge(t,r)};styleFunction.filterProps=filterProps;export default styleFunction;
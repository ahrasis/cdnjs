"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.styleFunctionSx=void 0;var _system=require("@material-ui/system"),_utils=require("@material-ui/utils");function objectsHaveSameKeys(...e){const s=e.reduce((e,s)=>e.concat(Object.keys(s)),[]),t=new Set(s);return e.every(e=>t.size===Object.keys(e).length)}const filterProps=[..._system.borders.filterProps,..._system.display.filterProps,..._system.flexbox.filterProps,..._system.grid.filterProps,..._system.positions.filterProps,..._system.palette.filterProps,..._system.shadows.filterProps,..._system.sizing.filterProps,..._system.spacing.filterProps,..._system.typography.filterProps,"sx"],getThemeValue=(e,s,t)=>{const r={[e]:s,theme:t};return-1!==_system.borders.filterProps.indexOf(e)?(0,_system.borders)(r):-1!==_system.display.filterProps.indexOf(e)?(0,_system.display)(r):-1!==_system.flexbox.filterProps.indexOf(e)?(0,_system.flexbox)(r):-1!==_system.grid.filterProps.indexOf(e)?(0,_system.grid)(r):-1!==_system.positions.filterProps.indexOf(e)?(0,_system.positions)(r):-1!==_system.palette.filterProps.indexOf(e)?(0,_system.palette)(r):-1!==_system.shadows.filterProps.indexOf(e)?(0,_system.shadows)(r):-1!==_system.sizing.filterProps.indexOf(e)?(0,_system.sizing)(r):-1!==_system.spacing.filterProps.indexOf(e)?(0,_system.spacing)(r):-1!==_system.typography.filterProps.indexOf(e)?(0,_system.typography)(r):{[e]:s}},styleFunctionSx=(e,s)=>{if(!e)return null;if("function"==typeof e)return e(s);if("object"!=typeof e)return e;let t={};return Object.keys(e).forEach(r=>{if("object"==typeof e[r])if(-1!==filterProps.indexOf(r))t=(0,_utils.deepmerge)(t,getThemeValue(r,e[r],s));else{const i=(0,_system.handleBreakpoints)({theme:s},e[r],e=>({[r]:e}));if(objectsHaveSameKeys(i,e[r])){const i=styleFunctionSx(e[r],s);t[r]=i}else t=(0,_utils.deepmerge)(t,i)}else t="function"==typeof e[r]?(0,_utils.deepmerge)(t,{[r]:e[r](s)}):(0,_utils.deepmerge)(t,getThemeValue(r,e[r],s))}),t};exports.styleFunctionSx=styleFunctionSx;const styleFunction=e=>{let s={};Object.keys(e).forEach(t=>{-1!==filterProps.indexOf(t)&&"sx"!==t&&(s=(0,_utils.deepmerge)(s,getThemeValue(t,e[t],e.theme)))});const t=styleFunctionSx(e.sx,e.theme);return(0,_utils.deepmerge)(s,t)};styleFunction.filterProps=filterProps;var _default=styleFunction;exports.default=_default;
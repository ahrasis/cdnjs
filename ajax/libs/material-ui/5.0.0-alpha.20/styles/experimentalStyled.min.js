import _objectWithoutPropertiesLoose from"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";import _extends from"@babel/runtime/helpers/esm/extends";import styled from"@material-ui/styled-engine";import{propsToClassKey}from"@material-ui/styles";import{unstable_styleFunctionSx as styleFunctionSx}from"@material-ui/system";import defaultTheme from"./defaultTheme";function isEmpty(e){return 0===Object.keys(e).length}const getStyleOverrides=(e,t)=>{let s={};return t&&t.components&&t.components[e]&&t.components[e].styleOverrides&&(s=t.components[e].styleOverrides),s},getVariantStyles=(e,t)=>{let s=[];t&&t.components&&t.components[e]&&t.components[e].variants&&(s=t.components[e].variants);const o={};return s.forEach(e=>{const t=propsToClassKey(e.props);o[t]=e.style}),o},variantsResolver=(e,t,s,o)=>{var r,n;const{styleProps:l={}}=e;let i={};const m=null==s?void 0:null===(r=s.components)||void 0===r?void 0:null===(n=r[o])||void 0===n?void 0:n.variants;return m&&m.forEach(s=>{let o=!0;Object.keys(s.props).forEach(t=>{l[t]!==s.props[t]&&e[t]!==s.props[t]&&(o=!1)}),o&&(i=_extends({},i,t[propsToClassKey(s.props)]))}),i},shouldForwardProp=e=>"styleProps"!==e&&"theme"!==e&&"isRtl"!==e&&"sx"!==e&&"as"!==e,lowercaseFirstLetter=e=>e.charAt(0).toLowerCase()+e.slice(1),experimentalStyled=(e,t,s={})=>{const o=s.name,r=s.slot,n=s.skipSx||!1;let l,i,m;o&&(l=`${o}${r||""}`,i=r&&"Root"!==r?null:`Mui${o}`,m=`Mui${o}-${lowercaseFirstLetter(r||"Root")}`);const a=styled(e,_extends({shouldForwardProp:shouldForwardProp,label:m||o||""},t));return(e,...t)=>{const o=t?t.map(e=>"function"==typeof e?t=>{let{theme:s}=t,o=_objectWithoutPropertiesLoose(t,["theme"]);return e(_extends({theme:isEmpty(s)?defaultTheme:s},o))}:e):[];let r=e;i&&s.overridesResolver&&o.push(e=>{const t=isEmpty(e.theme)?defaultTheme:e.theme;return s.overridesResolver(e,getStyleOverrides(i,t),i)}),i&&o.push(e=>{const t=isEmpty(e.theme)?defaultTheme:e.theme;return variantsResolver(e,getVariantStyles(i,t),t,i)}),n||o.push(e=>{const t=isEmpty(e.theme)?defaultTheme:e.theme;return styleFunctionSx(_extends({},e,{theme:t}))});const m=o.length-t.length;if(Array.isArray(e)&&m>0){const t=new Array(m).fill("");(r=[...e,...t]).raw=[...e.raw,...t]}else"function"==typeof e&&(r=(t=>{let{theme:s}=t,o=_objectWithoutPropertiesLoose(t,["theme"]);return e(_extends({theme:isEmpty(s)?defaultTheme:s},o))}));const p=a(r,...o);return(l||i)&&(p.displayName=l||i),p}};export default experimentalStyled;